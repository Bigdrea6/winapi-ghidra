{"PathFileExists": "Determines whether a path to a file system object such as a file or folder is valid.", "SHGetSpecialFolderPath": "Retrieves the path of a special folder, identified by its CSIDL.", "URLDownloadToFile": "Downloads bits from the Internet and saves them to a file.", "RegCreateKeyEx": "Creates the specified registry key. If the key already exists, the function opens it. Note that key names are not case sensitive.", "RegCloseKey": "Closes a handle to the specified registry key.", "RegSetValueEx": "Sets the data and type of a specified value under a registry key.", "CloseHandle": "Closes an open object handle.", "CreateFile": "Creates or opens a file or I/O device. The most commonly used I/O devices are as follows:_file, file stream, directory, physical disk, volume, console buffer, tape drive, communications resource, mailslot, and pipe.", "DecodePointer": "Decodes a pointer that was previously encoded with EncodePointer.", "GetModuleFileName": "Retrieves the fully qualified path for the file that contains the specified module. The module must have been loaded by the current process.", "CreateProcess": "Creates a new process and its primary thread. The new process runs in the security context of the calling process.", "GetStartupInfo": "Retrieves the contents of the STARTUPINFO structure that was specified when the calling process was created.", "QueryPerformanceCounter": "Retrieves the current value of the performance counter, which is a high resolution time stamp that can be used for time-interval measurements.", "GetCurrentProcessId": "Retrieves the process identifier of the calling process.", "GetCurrentThreadId": "Retrieves the thread identifier of the calling thread.", "GetSystemTimeAsFileTime": "Retrieves the current system date and time. The information is in Coordinated UTC format.", "InitializeSListHead": "The InitializeListHead routine initializes a LIST_ENTRY structure that represents the head of a doubly linked list.", "IsDebuggerPresent": "Determines whether the calling process is being debugged by a user-mode debugger.", "UnhandledExceptionFilter": "An application-defined function that passes unhandled exceptions to the debugger, if the process is being debugged.", "SetUnhandledExceptionFilter": "Enables an application to supersede the top-level exception handler of each thread of a process.", "IsProcessorFeaturePresent": "Determines whether the specified processor feature is supported by the current computer.", "GetModuleHandle": "Retrieves a module handle for the specified module. The module must have been loaded by the calling process.", "GetCurrentProcess": "Retrieves a pseudo handle for the current process.", "TerminateProcess": "Terminates the specified process and all of its threads.", "GetConsoleMode": "Retrieves the current input mode of a console's input buffer or the current output mode of a console screen buffer.", "RtlUnwind": "Initiates an unwind of procedure call frames.", "GetLastError": "Retrieves the calling thread's last-error code value.", "SetLastError": "Sets the last-error code for the calling thread.", "EnterCriticalSection": "Waits for ownership of the specified critical section object. The function returns when the calling thread is granted ownership.", "LeaveCriticalSection": "Releases ownership of the specified critical section object.", "DeleteCriticalSection": "Releases all resources used by an unowned critical section object.", "InitializeCriticalSectionAndSpinCount": "Initializes a critical section object and sets the spin count for the critical section.", "TlsAlloc": "Allocates a TLS index. Any thread of the process can subsequently use this index to store and retrieve values that are local to the thread, because each thread receives its own slot for the index.", "TlsGetValue": "Retrieves the value in the calling thread's TLS slot for the specified TLS index. Each thread of a process has its own slot for each TLS index.", "TlsSetValue": "Stores a value in the calling thread's TLS slot for the specified TLS index. Each thread of a process has its own slot for each TLS index.", "TlsFree": "Releases a TLS index, making it available for reuse.", "FreeLibrary": "Frees the loaded DLL module and, if necessary, decrements its reference count.", "GetProcAddress": "Retrieves the address of an exported function or variable from the specified DLL.", "LoadLibraryEx": "Loads the specified module into the address space of the calling process.", "RaiseException": "Raises an exception in the calling thread.", "GetStdHandle": "Retrieves a handle to the specified standard device.", "WriteFile": "Writes data to the specified file or I/O device.", "WriteConsole": "Writes a character string to a console screen buffer beginning at the current cursor location.", "ExitProcess": "Ends the calling process and all its threads.", "GetModuleHandleEx": "Retrieves a module handle for the specified module and increments the module's reference count unless GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT is specified. The module must have been loaded by the calling process.", "HeapFree": "Frees a memory block allocated from a heap by the HeapAlloc or HeapReAlloc function.", "HeapAlloc": "Allocates a block of memory from a heap. The allocated memory is not movable.", "GetFileType": "Retrieves the file type of the specified file.", "FindClose": "Closes a file search handle.", "FindFirstFileEx": "Searches a directory for a file or subdirectory with a name and attributes that match those specified.", "FindNextFile": "Continues a file search from a previous call to the FindFirstFile, FindFirstFileEx, or FindFirstFileTransacted functions.", "IsValidCodePage": "Determines if a specified code page is valid.", "GetACP": "Retrieves the current Windows ANSI code page identifier for the operating system.", "GetOEMCP": "Returns the current original equipment manufacturer (OEM) code page identifier for the operating system.", "GetCPInfo": "Retrieves information about any valid installed or available code page.", "GetCommandLine": "Retrieves the command-line string for the current process.", "MultiByteToWideChar": "Maps a character string to a UTF-16 string.", "WideCharToMultiByte": "Maps a UTF-16 string to a new character string.", "GetEnvironmentStrings": "Retrieves the environment variables for the current process.", "FreeEnvironmentStrings": "Expands environment-variable strings and replaces them with the values defined for the current user.", "SetStdHandle": "Sets the handle for the specified standard device.", "GetStringType": "Retrieves character type information for the characters in the specified Unicode source string.", "LCMapString": "For a locale specified by identifier, maps one input character string to another using a specified transformation, or generates a sort key for the input string.", "GetProcessHeap": "Retrieves a handle to the default heap of the calling process. This handle can then be used in subsequent calls to the heap functions.", "SetFilePointerEx": "Moves the file pointer of the specified file.", "HeapSize": "Retrieves the size of a memory block allocated from a heap.", "HeapReAlloc": "Reallocates a block of memory from a heap. This function enables you to resize a memory block and change other memory block properties.", "FlushFileBuffers": "Flushes the buffers of a specified file and causes all buffered data to be written to a file.", "GetConsoleCP": "Retrieves the input code page used by the console associated with the calling process.", "SizeofResource": "Retrieves the size, in bytes, of the specified resource.", "VirtualAlloc": "Reserves, commits, or changes the state of a region of pages in the virtual address space of the calling process.", "LockResource": "Retrieves a pointer to the specified resource in memory.", "LoadResource": "Retrieves a handle that can be used to obtain a pointer to the first byte of the specified resource in memory.", "RtlVirtualUnwind": "Retrieves the invocation context of the function that precedes the specified function context.", "RtlLookupFunctionEntry": "Searches the active function tables for an entry that corresponds to the specified PC value.", "RtlCaptureContext": "Retrieves a context record in the context of the caller.", "MessageBox": "Displays a modal dialog box that contains a system icon, a set of buttons, and a brief application-specific message, such as status or error information."}