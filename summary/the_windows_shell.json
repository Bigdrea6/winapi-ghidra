{"AssocGetDetailsOfPropKey": "Retrieves the value for a given property key using the file association information provided by the Namespace Extensions.", "CDefFolderMenu_Create2": "Creates a context menu for a selected group of file folder objects.", "CIDLData_CreateFromIDArray": "CIDLData_CreateFromIDArray may be altered or unavailable.", "DAD_AutoScroll": "Scrolls the window while an image is being dragged.", "DAD_DragEnterEx": "Locks updates to the specified window during a drag operation and displays the drag image at the specified position within the window.", "DAD_DragEnterEx2": "Locks updates to the specified window during a drag-and-drop operation and displays the drag image at the specified position within the window.", "DAD_DragLeave": "Unlocks the window locked by the DAD_DragEnterEx function.", "DAD_DragMove": "Moves the image that is being dragged during a drag-and-drop operation.", "DAD_SetDragImage": "Sets the drag image.", "DAD_ShowDragImage": "Shows or hides the image being dragged.", "DriveType": "DriveType may be altered or unavailable.", "GetFileNameFromBrowse": "Creates an Open dialog box so that the user can specify the drive, directory, and name of a file to open.", "IDListContainerIsConsistent": "Verifies that the container structure of an IDList is valid.", "ILAppendID": "Appends or prepends an SHITEMID structure to an ITEMIDLIST structure.", "ILClone": "Clones an ITEMIDLIST structure.", "ILCloneChild": "Clones a child ITEMIDLIST structure.", "ILCloneFirst": "Clones the first SHITEMID structure in an ITEMIDLIST structure.", "ILCloneFull": "Clones a full, or absolute, ITEMIDLIST structure.", "ILCombine": "Combines two ITEMIDLIST structures.", "ILCreateFromPath": "Returns the ITEMIDLIST structure associated with a specified file path.", "ILFindChild": "Determines whether a specified ITEMIDLIST structure is the child of another ITEMIDLIST structure.", "ILFindLastID": "Returns a pointer to the last SHITEMID structure in an ITEMIDLIST structure.", "ILFree": "Frees an ITEMIDLIST structure allocated by the Shell.", "ILGetNext": "Retrieves the next SHITEMID structure in an ITEMIDLIST structure.", "ILGetSize": "Returns the size, in bytes, of an ITEMIDLIST structure.", "ILIsAligned": "Verifies whether a constant ITEMIDLIST is aligned on a pointer boundary, which is a DWORD on 32-bit architectures and a QWORD on 64-bit architectures.", "ILIsChild": "Verifies whether a pointer to an item identifier list (PIDL) is a child PIDL, which is a PIDL with exactly one SHITEMID.", "ILIsEmpty": "Verifies whether an ITEMIDLIST structure is empty.", "ILIsEqual": "Tests whether two ITEMIDLIST structures are equal in a binary comparison.", "ILIsParent": "Tests whether an ITEMIDLIST structure is the parent of another ITEMIDLIST structure.", "ILLoadFromStream": "Deprecated. Loads an ITEMIDLIST structure from a stream.", "ILLoadFromStreamEx": "This function may be altered or unavailable.", "ILNext": "", "ILRemoveLastID": "Removes the last SHITEMID structure from an ITEMIDLIST structure.", "ILSaveToStream": "Saves an ITEMIDLIST structure to a stream.", "ILSkip": "Skips a given number of bytes in a constant, unaligned, relative ITEMIDLIST structure.", "IsNetDrive": "Tests whether a drive is a network drive.", "IsUserAnAdmin": "IsUserAnAdmin may be altered or unavailable.", "OpenRegStream": "OpenRegStream may be altered or unavailable. Instead, use SHOpenRegStream2 or SHOpenRegStream.", "PathCleanupSpec": "PathCleanupSpec may be altered or unavailable.", "PathGetShortPath": "PathGetShortPath may be altered or unavailable.", "PathIsExe": "PathIsExe may be altered or unavailable.", "PathMakeUniqueName": "Creates a unique path name from a template.", "PathResolve": "PathResolve may be altered or unavailable.", "PathYetAnotherMakeUniqueName": "Creates a unique filename based on an existing filename.", "PickIconDlg": "PickIconDlg may be altered or unavailable.", "PifMgr_CloseProperties": "Closes application properties that were opened with PifMgr_OpenProperties.", "PifMgr_GetProperties": "Returns a specified block of data from a .pif file.", "PifMgr_OpenProperties": "Opens the .pif file associated with a Microsoft MS-DOS application, and returns a handle to the application's properties.", "PifMgr_SetProperties": "Assigns values to a block of data from a .pif file.", "ReadCabinetState": "ReadCabinetState may be altered or unavailable.", "RealDriveType": "RealDriveType may be altered or unavailable.", "RestartDialog": "Displays a dialog box that prompts the user to restart Windows. When the user clicks the button, the function calls ExitWindowsEx to attempt to restart Windows.", "RestartDialogEx": "Displays a dialog box that asks the user to restart Windows. When the user clicks the button, the function calls ExitWindowsEx to attempt to restart Windows.", "SHAddFromPropSheetExtArray": "Adds pages to a property sheet extension array created by SHCreatePropSheetExtArray.", "SHAddToRecentDocs": "Notifies the system that an item has been accessed, for the purposes of tracking those items used most recently and most frequently. This function can also be used to clear all usage data.", "SHAlloc": "Allocates memory from the Shell's heap.", "SHBindToFolderIDListParent": "Given a Shell namespace item specified in the form of a folder, and an item identifier list relative to that folder, this function binds to the parent of the namespace item and optionally returns a pointer to the final component of the item identifier list.", "SHBindToFolderIDListParentEx": "Extends the SHBindToFolderIDListParent function by allowing the caller to specify a bind context.", "SHBindToObject": "Retrieves and binds to a specified object by using the Shell namespace IShellFolder::BindToObject method.", "SHBindToParent": "Takes a pointer to a fully qualified item identifier list (PIDL), and returns a specified interface pointer on the parent object.", "SHBrowseForFolder": "Displays a dialog box that enables the user to select a Shell folder.", "SHChangeNotification_Lock": "Locks the shared memory associated with a Shell change notification event.", "SHChangeNotification_Unlock": "Unlocks shared memory for a change notification.", "SHChangeNotify": "Notifies the system of an event that an application has performed. An application should use this function if it performs an action that may affect the Shell.", "SHChangeNotifyDeregister": "Unregisters the client's window process from receiving SHChangeNotify messages.", "SHChangeNotifyRegister": "Registers a window to receive notifications from the file system or Shell, if the file system supports notifications.", "SHCloneSpecialIDList": "SHCloneSpecialIDList may be altered or unavailable. Instead, use SHGetSpecialFolderLocation.", "SHCLSIDFromString": "Takes the string form of a class identifier (CLSID) and creates the corresponding CLSID.", "SHCoCreateInstance": "SHCoCreateInstance may be altered or unavailable. Instead, use CoCreateInstance.", "SHCreateDataObject": "Creates a data object in a parent folder.", "SHCreateDefaultContextMenu": "Creates an object that represents the Shell's default context menu implementation.", "SHCreateDirectory": "Creates a new file system folder.", "SHCreateDirectoryEx": "Creates a new file system folder, with optional security attributes.", "SHCreateFileExtractIcon": "SHCreateFileExtractIcon may be altered or unavailable.", "SHCreateShellFolderView": "Creates a new instance of the default Shell folder view object (DefView).", "SHCreateShellFolderViewEx": "Creates a new instance of the default Shell folder view object. It is recommended that you use SHCreateShellFolderView rather than this function.", "SHCreateShellItem": "Creates an IShellItem object.", "SHCreateStdEnumFmtEtc": "SHCreateStdEnumFmtEtc may be altered or unavailable.", "SHDefExtractIcon": "Provides a default handler to extract an icon from a file.", "SHDestroyPropSheetExtArray": "Frees property sheet handlers that are pointed to an array created by SHCreatePropSheetExtArray.", "SHDoDragDrop": "Executes a drag-and-drop operation. Supports drag source creation on demand, as well as drag images.", "Shell_GetCachedImageIndex": "Shell_GetCachedImageIndex may be altered or unavailable.", "Shell_GetImageLists": "Retrieves system image lists for large and small icons.", "Shell_MergeMenus": "Shell_MergeMenus may be altered or unavailable.", "SHFind_InitMenuPopup": "SHFind_InitMenuPopup may be altered or unavailable.", "SHFindFiles": "SHFindFiles may be altered or unavailable.", "SHFlushSFCache": "SHFlushSFCache may be altered or unavailable.", "SHFormatDrive": "SHFormatDrive may be altered or unavailable.", "SHFree": "Frees the memory allocated by SHAlloc.", "SHGetAttributesFromDataObject": "SHGetAttributesFromDataObject may be altered or unavailable.", "SHGetDataFromIDList": "Retrieves extended property data from a relative identifier list.", "SHGetDesktopFolder": "Retrieves the IShellFolder interface for the desktop folder, which is the root of the Shell's namespace.", "SHGetFolderLocation": "Deprecated. Retrieves the path of a folder as an ITEMIDLIST structure.", "SHGetFolderPath": "Deprecated.", "SHGetFolderPathAndSubDir": "Gets the path of a folder and appends a user-provided subfolder path.", "SHGetIconOverlayIndex": "Returns the index of the overlay icon in the system image list.", "SHGetInstanceExplorer": "Retrieves an interface that allows hosted Shell extensions and other components to prevent their host process from closing prematurely.", "SHGetKnownFolderIDList": "Retrieves the path of a known folder as an ITEMIDLIST structure.", "SHGetKnownFolderItem": "Retrieves an IShellItem object that represents a known folder.", "SHGetKnownFolderPath": "Retrieves the full path of a known folder identified by the folder's KNOWNFOLDERID.", "SHGetMalloc": "Retrieves a pointer to the Shell's IMalloc interface.", "SHGetPathFromIDList": "Converts an item identifier list to a file system path.", "SHGetPathFromIDListEx": "Converts an item identifier list to a file system path. This function extends SHGetPathFromIDList by allowing you to set the initial size of the string buffer and declare the options below.", "SHGetRealIDL": "SHGetRealIDL may be altered or unavailable.", "SHGetSetFolderCustomSettings": "SHGetSetFolderCustomSettings may be altered or unavailable.", "SHGetSetSettings": "SHGetSetSettings may be altered or unavailable.", "SHGetSettings": "Retrieves the current Shell option settings.", "SHGetSpecialFolderLocation": "SHGetSpecialFolderLocation is not supported and may be altered or unavailable in the future. Instead, use SHGetFolderLocation.", "SHGetSpecialFolderPath": "SHGetSpecialFolderPath is not supported. Instead, use ShGetFolderPath.", "SHHandleUpdateImage": "SHHandleUpdateImage may be altered or unavailable.", "SHILCreateFromPath": "SHILCreateFromPath may be altered or unavailable.", "SHLimitInputEdit": "Sets limits on valid characters for an edit control.", "SHLoadInProc": "Creates an instance of the specified object class from within the context of the Shell's process. Windows Vista and later:_This function has been disabled and returns E_NOTIMPL.", "SHMapPIDLToSystemImageListIndex": "SHMapPIDLToSystemImageListIndex may be altered or unavailable.", "SHObjectProperties": "SHObjectProperties may be altered or unavailable.", "SHOpenFolderAndSelectItems": "Opens a Windows Explorer window with specified items in a particular folder selected.", "SHOpenWithDialog": "Displays the Open With dialog box.", "SHParseDisplayName": "Translates a Shell namespace object's display name into an item identifier list and returns the attributes of the object. This function is the preferred method to convert a string to a pointer to an item identifier list (PIDL).", "SHPathPrepareForWrite": "Checks to see if the path exists.", "SHPropStgCreate": "Ensures proper handling of code page retrieval or assignment for the requested property set operation.", "SHPropStgReadMultiple": "Wraps the IPropertyStorage::ReadMultiple function to ensure that ANSI and Unicode translations are handled properly for deprecated property sets.", "SHPropStgWriteMultiple": "Wraps the IPropertyStorage::WriteMultiple function to ensure that ANSI and Unicode translations are handled properly for deprecated property sets.", "SHReplaceFromPropSheetExtArray": "Requests each property sheet in a property sheet extension array to replace pages. Each page is allowed up to one replacement.", "SHRestricted": "SHRestricted may be altered or unavailable.", "SHSetFolderPath": "Deprecated. Assigns a new path to a system folder identified by its CSIDL.", "SHSetInstanceExplorer": "Provides an interface that allows hosted Shell extensions and other components to prevent their host process from closing prematurely.", "SHSetKnownFolderPath": "Redirects a known folder to a new location.", "SHShellFolderView_Message": "SHShellFolderView_Message may be altered or unavailable.", "SHStartNetConnectionDialog": "SHStartNetConnectionDialog may be altered or unavailable.", "SHUpdateImage": "Notifies the Shell that an image in the system image list has changed.", "SHValidateUNC": "SHValidateUNC may be altered or unavailable.", "SignalFileOpen": "SignalFileOpen may be altered or unavailable.", "StgMakeUniqueName": "Creates a unique name for a stream or storage object from a template.", "Win32DeleteFile": "Win32DeleteFile may be altered or unavailable.", "WriteCabinetState": "WriteCabinetState may be altered or unavailable.", "GetLocalManagedApplications": "The GetLocalManagedApplications function can be run on the target computer to get a list of managed applications on that computer.", "GetManagedApplicationCategories": "The GetManagedApplicationCategories function gets a list of application categories for a domain. The list is the same for all users in the domain.", "GetManagedApplications": "The GetManagedApplications function gets a list of applications that are displayed in the Add pane of Add/Remove Programs (ARP) for a specified user context.", "InstallApplication": "The InstallApplication function can install applications that have been deployed to target users that belong to a domain.", "UninstallApplication": "The UninstallApplication function uninstalls a group policy application that handles setup and installation using Windows Installer .msi files.", "RegisterAppStateChangeNotification": "Enables an app to register a callback function through which it can be notified that its library is going into or coming out of a suspended state.", "UnregisterAppStateChangeNotification": "Cancels a change notification registered through RegisterAppStateChangeNotification.", "CLSIDFromProgID": "Looks up a CLSID in the registry, given a ProgID.", "CLSIDFromProgIDEx": "Triggers automatic installation if the COMClassStore policy is enabled.", "CLSIDFromString": "Converts a string generated by the StringFromCLSID function back into the original CLSID.", "CoAddRefServerProcess": "Increments a global per-process reference count.", "CoAllowUnmarshalerCLSID": "Adds an unmarshaler CLSID to the allowed list for the calling process only.", "CoCancelCall": "Requests cancellation of an outbound DCOM method call pending on a specified thread.", "CoCopyProxy": "Makes a private copy of the specified proxy.", "CoCreateFreeThreadedMarshaler": "Creates an aggregatable object capable of context-dependent marshaling.", "CoCreateGuid": "Creates a GUID, a unique 128-bit integer used for CLSIDs and interface identifiers.", "CoCreateInstance": "Creates a single uninitialized object of the class associated with a specified CLSID.", "CoCreateInstanceEx": "Creates an instance of a specific class on a specific computer.", "CoCreateInstanceFromApp": "Creates an instance of a specific class on a specific computer from within an app container.", "CoDecodeProxy": "Locates the implementation of a Component Object Model (COM) interface in a server process given an interface to a proxied object.", "CoDecrementMTAUsage": "Releases the increment made by a previous call to the CoIncrementMTAUsage function.", "CoDisableCallCancellation": "Undoes the action of a call to CoEnableCallCancellation. Disables cancellation of synchronous calls on the calling thread when all calls to CoEnableCallCancellation are balanced by calls to CoDisableCallCancellation.", "CoDisconnectContext": "Disconnects all proxy connections that are being maintained on behalf of all interface pointers that point to objects in the current context.", "CoDisconnectObject": "Disconnects all remote process connections being maintained on behalf of all the interface pointers that point to a specified object.", "CoEnableCallCancellation": "Enables cancellation of synchronous calls on the calling thread.", "CoFileTimeNow": "Returns the current time as a FILETIME structure.", "CoFreeUnusedLibraries": "Unloads any DLLs that are no longer in use, probably because the DLL no longer has any instantiated COM objects outstanding.", "CoFreeUnusedLibrariesEx": "Unloads any DLLs that are no longer in use and whose unload delay has expired.", "CoGetApartmentType": "Returns the current apartment type and type qualifier.", "CoGetCallContext": "Retrieves the context of the current call on the current thread.", "CoGetCallerTID": "Returns a pointer to a DWORD that contains the apartment ID of the caller's thread.", "CoGetCancelObject": "Obtains a pointer to a call control interface, normally ICancelMethodCalls, on the cancel object corresponding to an outbound COM method call pending on the same or another client thread.", "CoGetClassObject": "Provides a pointer to an interface on a class object associated with a specified CLSID.", "CoGetContextToken": "Returns a pointer to an implementation of IObjContext for the current context.", "CoGetCurrentLogicalThreadId": "Returns the logical thread identifier of the current physical thread.", "CoGetCurrentProcess": "Returns a value that is unique to the current thread. CoGetCurrentProcess can be used to avoid thread ID reuse problems.", "CoGetDefaultContext": "Retrieves a reference to the default context of the specified apartment.", "CoGetInterfaceAndReleaseStream": "Unmarshals a buffer containing an interface pointer and releases the stream when an interface pointer has been marshaled from another thread to the calling thread.", "CoGetMalloc": "Retrieves a pointer to the default OLE task memory allocator (which supports the system implementation of the IMalloc interface) so applications can call its methods to manage memory.", "CoGetMarshalSizeMax": "Returns an upper bound on the number of bytes needed to marshal the specified interface pointer to the specified object.", "CoGetObjectContext": "Returns the context for the current object.", "CoGetPSClsid": "Returns the CLSID of the DLL that implements the proxy and stub for the specified interface.", "CoGetStandardMarshal": "Creates a default, or standard, marshaling object in either the client process or the server process, depending on the caller, and returns a pointer to that object's IMarshal implementation.", "CoGetStdMarshalEx": "Creates an aggregated standard marshaler for use with lightweight client-side handlers.", "CoGetTreatAsClass": "Returns the CLSID of an object that can emulate the specified object.", "CoImpersonateClient": "Enables the server to impersonate the client of the current call for the duration of the call.", "CoIncrementMTAUsage": "Keeps MTA support active when no MTA threads are running.", "CoInitializeEx": "Initializes the COM library for use by the calling thread, sets the thread's concurrency model, and creates a new apartment for the thread if one is required.", "CoInitializeSecurity": "Registers security and sets the default security values for the process.", "CoInvalidateRemoteMachineBindings": "Tells the service control manager to flush any cached RPC binding handles for the specified computer.", "CoIsHandlerConnected": "Determines whether a remote object is connected to the corresponding in-process object.", "CoLockObjectExternal": "Called either to lock an object to ensure that it stays in memory, or to release such a lock.", "CoMarshalHresult": "Marshals an HRESULT to the specified stream, from which it can be unmarshaled using the CoUnmarshalHresult function.", "CoMarshalInterface": "Writes into a stream the data required to initialize a proxy object in some client process.", "CoMarshalInterThreadInterfaceInStream": "Marshals an interface pointer from one thread to another thread in the same process.", "CoQueryAuthenticationServices": "Retrieves a list of the authentication services registered when the process called CoInitializeSecurity.", "CoQueryClientBlanket": "Called by the server to find out about the client that invoked the method executing on the current thread.", "CoQueryProxyBlanket": "Retrieves the authentication information the client uses to make calls on the specified proxy.", "CoRegisterActivationFilter": "Registers a process-wide filter to process activation requests.", "CoRegisterClassObject": "Registers an EXE class object with OLE so other applications can connect to it.", "CoRegisterPSClsid": "Enables a downloaded DLL to register its custom interfaces within its running process so that the marshaling code will be able to marshal those interfaces.", "CoRegisterSurrogate": "Registers the surrogate process through its ISurrogate interface pointer.", "CoReleaseMarshalData": "Destroys a previously marshaled data packet.", "CoReleaseServerProcess": "Decrements the global per-process reference count.", "CoResumeClassObjects": "Called by a server that can register multiple class objects to inform the SCM about all registered classes, and permits activation requests for those class objects.", "CoRevertToSelf": "Restores the authentication information on a thread of execution.", "CoRevokeClassObject": "Informs OLE that a class object, previously registered with the CoRegisterClassObject function, is no longer available for use.", "CoSetCancelObject": "Sets (registers) or resets (unregisters) a cancel object for use during subsequent cancel operations on the current thread.", "CoSetProxyBlanket": "Sets the authentication information that will be used to make calls on the specified proxy.", "CoSuspendClassObjects": "Prevents any new activation requests from the SCM on all class objects registered within the process.", "CoSwitchCallContext": "Switches the call context object used by CoGetCallContext.", "CoTaskMemAlloc": "Allocates a block of task memory in the same way that IMalloc::Alloc does.", "CoTaskMemFree": "Frees a block of task memory previously allocated through a call to the CoTaskMemAlloc or CoTaskMemRealloc function.", "CoTaskMemRealloc": "Changes the size of a previously allocated block of task memory.", "CoTestCancel": "Determines whether the call being executed on the server has been canceled by the client.", "CoUninitialize": "Closes the COM library on the current thread, unloads all DLLs loaded by the thread, frees any other resources that the thread maintains, and forces all RPC connections on the thread to close.", "CoUnmarshalHresult": "Unmarshals an HRESULT type from the specified stream.", "CoUnmarshalInterface": "Initializes a newly created proxy using data written into the stream by a previous call to the CoMarshalInterface function, and returns an interface pointer to that proxy.", "CoWaitForMultipleHandles": "Waits for specified handles to be signaled or for a specified timeout period to elapse.", "CoWaitForMultipleObjects": "A replacement for CoWaitForMultipleHandles. This replacement API hides the options for CoWaitForMultipleHandles that are not supported in ASTA.", "CreateStreamOnHGlobal": "Creates a stream object that uses an HGLOBAL memory handle to store the stream contents.", "DllCanUnloadNow": "Determines whether the DLL that implements this function is in use. If not, the caller can unload the DLL from memory.", "DllGetClassObject": "Retrieves the class object from a DLL object handler or object application.", "FreePropVariantArray": "Frees the memory and references used by an array of PROPVARIANT structures.", "GetHGlobalFromStream": "The GetHGlobalFromStream function retrieves the global memory handle to a stream that was created through a call to the CreateStreamOnHGlobal function.", "IID_PPV_ARGS": "Used to retrieve an interface pointer, supplying the IID value of the requested interface automatically based on the type of the interface pointer used. This avoids a common coding error by checking the type of the value passed at compile time.", "IIDFromString": "Converts a string generated by the StringFromIID function back into the original interface identifier (IID).", "ProgIDFromCLSID": "Retrieves the ProgID for a given CLSID.", "PropVariantClear": "Clears a PROPVARIANT structure.", "PropVariantCopy": "Creates a copy of a PROPVARIANT structure.", "RoGetAgileReference": "Creates an agile reference for an object specified by the given interface.", "StringFromCLSID": "Converts a CLSID into a string of printable characters. Different CLSIDs always convert to different strings.", "StringFromGUID2": "Converts a globally unique identifier (GUID) into a string of printable characters.", "StringFromIID": "Converts an interface identifier into a string of printable characters.", "InetIsOffline": "Determines whether the system is connected to the Internet.", "MIMEAssociationDialog": "Runs the unregistered MIME content type dialog box.Note\u00c2\u00a0\u00c2\u00a0Windows\u00c2\u00a0XP Service Pack\u00c2\u00a02 (SP2) or later:_This function is no longer supported.", "TranslateURL": "Applies common translations to a given URL string, creating a new URL string.", "URLAssociationDialog": "Invokes the unregistered URL protocol dialog box.", "BindIFilterFromStorage": "Retrieves the IFilter interface pointer for the specified storage object. This is especially useful when filtering the contents of a document and processing embedded OLE objects that are accessible through their IStorage interfaces.", "BindIFilterFromStream": "Retrieves the IFilter interface pointer for the specified storage object. This is especially useful when filtering the contents of a document and processing embedded OLE objects accessible through their IStream interfaces.", "LoadIFilter": "Retrieves IFilter from path name for object.", "SetCatalogState": "Sets the catalog state for backup or other purposes.", "PropVariantInit": "The PropVariantInit function initializes a PROPVARIANT structure.Note\u00c2\u00a0\u00c2\u00a0This function is implemented as a macro, available by including the provided ole2.h header file.", "StgConvertPropertyToVariant": "Converts a SERIALIZEDPROPERTYVALUE data type to a PROPVARIANT data type.", "StgConvertVariantToProperty": "Converts a PROPVARIANT data type to a SERIALIZEDPROPERTYVALUE data type.", "DefScreenSaverProc": "Provides default processing for any messages that a screen saver application does not process.", "RegisterDialogClasses": "Registers any nonstandard window classes required by a screen saver's configuration dialog box.", "ScreenSaverConfigureDialog": "Receives messages sent to a screen saver's configuration dialog box. A screen saver that allows user configuration must define this function.", "ScreenSaverProc": "Receives messages sent to the specified screen saver window.", "AssocCreateForClasses": "Retrieves an object that implements an IQueryAssociations interface.", "CommandLineToArgv": "Parses a Unicode command line string and returns an array of pointers to the command line arguments, along with a count of such arguments, in a way that is similar to the standard C run-time argv and argc values.", "DoEnvironmentSubst": "Parses an input string that contains references to one or more environment variables and replaces them with their fully expanded values.", "DragAcceptFiles": "Registers whether a window accepts dropped files.", "DragFinish": "Releases memory that the system allocated for use in transferring file names to the application.", "DragQueryFile": "Retrieves the names of dropped files that result from a successful drag-and-drop operation.", "DragQueryPoint": "Retrieves the position of the mouse pointer at the time a file was dropped during a drag-and-drop operation.", "DuplicateIcon": "Creates a duplicate of a specified icon.", "ExtractAssociatedIcon": "Gets a handle to an icon stored as a resource in a file or an icon stored in a file's associated executable file.", "ExtractAssociatedIconEx": "ExtractAssociatedIconEx may be altered or unavailable.", "ExtractIcon": "Gets a handle to an icon from the specified executable file, DLL, or icon file. To retrieve an array of handles to large or small icons, use the ExtractIconEx function.", "ExtractIconEx": "The ExtractIconEx function creates an array of handles to large or small icons extracted from the specified executable file, DLL, or icon file.", "FindExecutable": "Retrieves the name of and handle to the executable (.exe) file associated with a specific document file.", "InitNetworkAddressControl": "Initializes the network address control window class.", "NetAddr_DisplayErrorTip": "Displays an error message in the balloon tip associated with the network address control.", "NetAddr_GetAddress": "Indicates whether a network address conforms to a specified type and format.", "NetAddr_GetAllowType": "Retrieves the network address types that a specified network address control accepts.", "NetAddr_SetAllowType": "Sets the network address types that a specified network address control accepts.", "SHAppBarMessage": "Sends an appbar message to the system.", "SHCreateProcessAsUser": "Creates a new user-mode process and its primary thread to run a specified executable file.", "Shell_NotifyIcon": "Sends a message to the taskbar's status area.", "Shell_NotifyIconGetRect": "Gets the screen coordinates of the bounding rectangle of a notification icon.", "ShellAbout": "Displays a ShellAbout dialog box.", "ShellExecute": "Performs an operation on a specified file.", "ShellExecuteEx": "ShellMessageBox may be altered or unavailable.", "ShellMessageBox": "Empties the Recycle Bin on the specified drive.", "SHEmptyRecycleBin": "Enumerates the user accounts that have unread email.", "SHEnumerateUnreadMailAccounts": "Enforces strict validation of parameters used in a call to CreateProcess or ShellExecute.", "SHEvaluateSystemCommandTemplate": "Copies, moves, renames, or deletes a file system object. This function has been replaced in Windows\u00c2\u00a0Vista by IFileOperation.", "SHFileOperation": "Copies, moves, renames, or deletes a file system object. On Windows\u00c2\u00a0Vista and later releases, we recommend that you use IFileOperation instead of this function.", "SHFreeNameMappings": "Frees a file name mapping object that was retrieved by the SHFileOperation function.", "SHGetDiskFreeSpaceEx": "Retrieves disk space information for a disk volume.", "SHGetDriveMedia": "Returns the type of media that is in the given drive.", "SHGetFileInfo": "Retrieves information about an object in the file system, such as a file, folder, directory, or drive root.", "SHGetImageList": "Retrieves an image list.", "SHGetLocalizedName": "Retrieves the localized name of a file in a Shell folder.", "SHGetNewLinkInfo": "Creates a name for a new shortcut based on the shortcut's proposed target. This function does not create the shortcut, just the name.", "SHGetPropertyStoreForWindow": "Retrieves an object that represents a specific window's collection of properties, which allows those properties to be queried or set.", "SHGetStockIconInfo": "Retrieves information about system-defined Shell icons.", "SHGetUnreadMailCount": "Retrieves a specified user's unread message count for any or all email accounts.", "SHInvokePrinterCommand": "Executes a command on a printer object.", "SHIsFileAvailableOffline": "Determines whether a file or folder is available for offline use. This function also determines whether the file would be opened from the network, from the local Offline Files cache, or from both locations.", "SHLoadNonloadedIconOverlayIdentifiers": "Signals the Shell that during the next operation requiring overlay information, it should load icon overlay identifiers that either failed creation or were not present for creation at startup. Identifiers that have already been loaded are not affected.", "SHQueryRecycleBin": "Retrieves the size of the Recycle Bin and the number of items in it, for a specified drive.", "SHQueryUserNotificationState": "Checks the state of the computer for the current user to determine whether sending a notification is appropriate.", "SHRemoveLocalizedName": "Removes the localized name of a file in a Shell folder.", "SHSetLocalizedName": "Sets the localized name of a file in a Shell folder.", "SHSetUnreadMailCount": "Stores the current user's unread message count for a specified email account in the registry.", "SHTestTokenMembership": "Uses CheckTokenMembership to test whether the given token is a member of the local group with the specified RID.", "GetDpiForMonitor": "Queries the dots per inch (dpi) of a display.", "GetDpiForShellUIComponent": "Retrieves the dots per inch (dpi) occupied by a SHELL_UI_COMPONENT based on the current scale factor and PROCESS_DPI_AWARENESS.", "GetProcessDpiAwareness": "Retrieves the dots per inch (dpi) awareness of the specified process.", "GetScaleFactorForDevice": "Gets the preferred scale factor for a display device.", "GetScaleFactorForMonitor": "Gets the scale factor of a specific monitor. This function replaces GetScaleFactorForDevice.", "RegisterScaleChangeEvent": "Registers for an event that is triggered when the scale has possibly changed. This function replaces RegisterScaleChangeNotifications.", "RegisterScaleChangeNotifications": "Registers a window to receive callbacks when scaling information changes.", "RevokeScaleChangeNotifications": "Revokes the registration of a window, preventing it from receiving callbacks when scaling information changes.", "SetProcessDpiAwareness": "Sets the process-default DPI awareness level. This is equivalent to calling SetProcessDpiAwarenessContext with the corresponding DPI_AWARENESS_CONTEXT value.", "UnregisterScaleChangeEvent": "Unregisters for the scale change event registered through RegisterScaleChangeEvent. This function replaces RevokeScaleChangeNotifications.", "PathIsSlow": "PathIsSlow may be altered or unavailable.", "PathProcessCommand": "Deprecated. Processes a string that contains a command line and generates a suitably quoted string, with arguments attached if required.", "PerUserInit": "Creates My Documents and other special folders, initializes them as needed, and creates the Send To shortcut menu item for My Documents.", "SHChangeNotifyRegisterThread": "Enables asynchronous register and deregister of a thread.", "SHCreatePropSheetExtArray": "SHCreatePropSheetExtArray may be altered or unavailable.", "SHCreateQueryCancelAutoPlayMoniker": "Deprecated. Creates a QueryCancelAutoPlay class moniker, which can then be used to register the IQueryCancelAutoPlay handler in the running object table (ROT).", "SHLoadOLE": "Deprecated. Provided for backward compatibility.", "SHMultiFileProperties": "Displays a merged property sheet for a set of files. Property values common to all the files are shown while those that differ display the string (multiple values).", "SHOpenPropSheet": "SHOpenPropSheet may be altered or unavailable.", "SHRunControlPanel": "Opens a Control Panel item.", "SoftwareUpdateMessageBox": "Displays a standard message box that can be used to notify a user that an application has been updated.", "SHAddDefaultPropertiesByExt": "Adds default properties to the property store as registered for the specified file extension.", "SHCreateDefaultPropertiesOp": "Creates a file operation that sets the default properties on the Shell item that have not already been set.", "SHResolveFolderPathInLibrary": "Attempts to resolve the target location of a library folder that has been moved or renamed.", "SHSetDefaultProperties": "Applies the default set of properties on a Shell item.", "FreeIDListArray": "Frees the memory used by a pointer to an item identifier list (PIDL) list array.", "FreeIDListArrayChild": "Releases the memory space for the array of pointers to child item IDs. This releases both the PITEMID_CHILDs within the array and the array itself.", "FreeIDListArrayFull": "Releases the memory space for the pointer to an item identifier list (PIDL) array. This releases both the PIDLIST_ABSOLUTEs within the array and the array itself.", "FreeKnownFolderDefinitionFields": "Frees the allocated fields in the result from IKnownFolder::GetFolderDefinition.", "GetCurrentProcessExplicitAppUserModelID": "Retrieves the application-defined, explicit Application User Model ID (AppUserModelID) for the current process.", "SetContractDelegateWindow": "Associates an app window other than the primary foreground window with an app's contracts. Use this function if you are a developer writing a Windows Store app in native C++.", "SetCurrentProcessExplicitAppUserModelID": "Specifies a unique application-defined Application User Model ID (AppUserModelID) that identifies the current process to the taskbar. This identifier allows an application to group its associated processes and windows under a single taskbar button.", "SHAddFolderPathToLibrary": "Adds a folder to a library.", "SHAssocEnumHandlers": "Returns an enumeration object for a specified set of file name extension handlers.", "SHAssocEnumHandlersForProtocolByApplication": "Gets an enumeration interface that provides access to handlers associated with a given protocol.", "SHCreateAssociationRegistration": "Creates an IApplicationAssociationRegistration object based on the stock implementation of the interface provided by Windows.", "SHCreateDefaultExtractIcon": "Creates a standard icon extractor, whose defaults can be further configured via the IDefaultExtractIconInit interface.", "SHCreateItemFromIDList": "Creates and initializes a Shell item object from a pointer to an item identifier list (PIDL). The resulting shell item object supports the IShellItem interface.", "SHCreateItemFromParsingName": "Creates and initializes a Shell item object from a parsing name.", "SHCreateItemFromRelativeName": "Creates and initializes a Shell item object from a relative parsing name.", "SHCreateItemInKnownFolder": "Creates a Shell item object for a single file that exists inside a known folder.", "SHCreateItemWithParent": "Create a Shell item, given a parent folder and a child item ID.", "SHCreateLibrary": "Creates an IShellLibrary object.", "SHCreateShellItemArray": "Creates a Shell item array object.", "SHCreateShellItemArrayFromDataObject": "Creates a Shell item array object from a data object.", "SHCreateShellItemArrayFromIDLists": "Creates a Shell item array object from a list of ITEMIDLIST structures.", "SHCreateShellItemArrayFromShellItem": "Creates an array of one element from a single Shell item.", "SHGetIDListFromObject": "Retrieves the pointer to an item identifier list (PIDL) of an object.", "SHGetItemFromDataObject": "Creates an IShellItem or related object based on an item specified by an IDataObject.", "SHGetItemFromObject": "Retrieves an IShellItem for an object.", "SHGetNameFromIDList": "Retrieves the display name of an item identified by its IDList.", "SHGetPropertyStoreFromIDList": "Retrieves an object that supports IPropertyStore or related interfaces from a pointer to an item identifier list (PIDL).", "SHGetPropertyStoreFromParsingName": "Returns a property store for an item, given a path or parsing name.", "SHGetTemporaryPropertyForItem": "Retrieves the temporary property for the given item. A temporary property is a read/write store that holds properties only for the lifetime of the IShellItem object, rather than being persisted back into the item.", "SHLoadLibraryFromItem": "Creates and loads an IShellLibrary object from a specified library definition file.", "SHLoadLibraryFromKnownFolder": "Creates and loads an IShellLibrary object for a specified known folder ID.", "SHLoadLibraryFromParsingName": "Creates and loads an IShellLibrary object for a specified path.", "SHRemoveFolderPathFromLibrary": "Removes a folder from a library.", "SHResolveLibrary": "Resolves all locations in a library, even those locations that have been moved or renamed.", "SHSaveLibraryInFolderPath": "Saves an IShellLibrary object to disk.", "SHSetTemporaryPropertyForItem": "Sets a temporary property for the specified item. A temporary property is kept in a read/write store that holds properties only for the lifetime of the IShellItem object, instead of writing them back into the item.", "SHShowManageLibraryUI": "Shows the library management dialog box, which enables users to manage the library folders and default save location.", "SHSimpleIDListFromPath": "Deprecated. Returns a pointer to an ITEMIDLIST structure when passed a path.", "FreeConfirmConflictItem": "Frees the resources that have been allocated for a CONFIRM_CONFLICT_ITEM structure.", "CreateAsyncBindCtx": "Creates an asynchronous bind context for use with asynchronous monikers.", "CreateFormatEnumerator": "Creates an object that implements IEnumFORMATETC over a static array of FORMATETC structures.", "CreateAppContainerProfile": "Creates a per-user, per-app profile for Windows Store apps.", "CreateEnvironmentBlock": "Retrieves the environment variables for the specified user. This block can then be passed to the CreateProcessAsUser function.", "CreateProfile": "Creates a new user profile.", "DeleteAppContainerProfile": "Deletes the specified per-user, per-app profile.", "DeleteProfile": "Deletes the user profile and all user-related settings from the specified computer. The caller must have administrative privileges to delete a user's profile.", "DeriveAppContainerSidFromAppContainerName": "Gets the SID of the specified profile.", "DeriveRestrictedAppContainerSidFromAppContainerSidAndRestrictedName": "DeriveRestrictedAppContainerSidFromAppContainerSidAndRestrictedName is reserved for future use.", "DestroyEnvironmentBlock": "Frees environment variables created by the CreateEnvironmentBlock function.", "EnterCriticalPolicySection": "The EnterCriticalPolicySection function pauses the application of policy to allow applications to safely read policy settings.", "ExpandEnvironmentStringsForUser": "Expands the source string by using the environment block established for the specified user.", "FreeGPOList": "The FreeGPOList function frees the specified list of GPOs.", "GetAllUsersProfileDirectory": "Retrieves the path to the root of the directory that contains program data shared by all users.", "GetAppContainerFolderPath": "Gets the path of the local app data folder for the specified app container.", "GetAppContainerRegistryLocation": "Gets the location of the registry storage associated with an app container.", "GetAppliedGPOList": "The GetAppliedGPOList function retrieves the list of GPOs applied for the specified user or computer.", "GetDefaultUserProfileDirectory": "Retrieves the path to the root of the default user's profile.", "GetGPOList": "The GetGPOList function retrieves the list of GPOs for the specified user or computer.", "GetProfilesDirectory": "Retrieves the path to the root directory where user profiles are stored.", "GetProfileType": "Retrieves the type of profile loaded for the current user.", "GetUserProfileDirectory": "Retrieves the path to the root directory of the specified user's profile.", "LeaveCriticalPolicySection": "The LeaveCriticalPolicySection function resumes the background application of policy. This function closes the handle to the policy section.", "LoadUserProfile": "Loads the specified user's profile. The profile can be a local user profile or a roaming user profile.", "ProcessGroupPolicyCompleted": "The ProcessGroupPolicyCompleted function notifies the system that the specified extension has finished applying policy.", "ProcessGroupPolicyCompletedEx": "The ProcessGroupPolicyCompletedEx function notifies the system that the specified policy extension has finished applying policy. The function also reports the status of Resultant Set of Policy (RSoP) logging.", "RefreshPolicy": "The RefreshPolicy function causes policy to be applied immediately on the client computer.", "RefreshPolicyEx": "The RefreshPolicyEx function causes policy to be applied immediately on the computer. The extended function allows you to specify the type of policy refresh to apply.", "RegisterGPNotification": "The RegisterGPNotification function enables an application to receive notification when there is a change in policy. When a policy change occurs, the specified event object is set to the signaled state.", "RsopAccessCheckByType": "The RSoPAccessCheckByType function determines whether a security descriptor grants a specified set of access rights to the client identified by an RSOPTOKEN.", "RsopFileAccessCheck": "The RSoPFileAccessCheck function determines whether a file's security descriptor grants a specified set of file access rights to the client identified by an RSOPTOKEN.", "RsopResetPolicySettingStatus": "The RSoPResetPolicySettingStatus function unlinks the RSOP_PolicySettingStatus instance from its RSOP_PolicySetting instance.", "RsopSetPolicySettingStatus": "The RSoPSetPolicySettingStatus function creates an instance of RSOP_PolicySettingStatus and an instance of RSOP_PolicySettingLink. The function links (associates) RSOP_PolicySettingStatus to its RSOP_PolicySetting instance.", "UnloadUserProfile": "Unloads a user's profile that was loaded by the LoadUserProfile function. The caller must have administrative privileges on the computer. For more information, see the Remarks section of the LoadUserProfile function.", "UnregisterGPNotification": "The UnregisterGPNotification function unregisters the specified policy-notification handle from receiving policy change notifications."}