{"ActivateActCtx": "The ActivateActCtx function activates the specified activation context.", "AddRefActCtx": "The AddRefActCtx function increments the reference count of the specified activation context.", "Clone": "The Clone method copies the current side-by-side assembly name to a new instance of IAssemblyName.", "CloseCUB": "The CloseCUB method closes an open Internal Consistency Evaluator .cub files can be opened using the OpenCUB method.", "CloseDatabase": "The CloseDatabase method closes the currently open Windows Installer database.", "CloseLog": "The CloseLog function method closes the current log.", "CloseModule": "The CloseModule method closes the currently open Windows Installer merge module.", "Commit": "The Commit method copies information into the side-by-side store.", "Connect": "The Connect method connects a module that has been, or will be, merged into the database to an additional feature.", "CreateActCtxA": "The CreateActCtx function creates an activation context.", "CreateActCtxW": "The CreateActCtx function creates an activation context.", "CreateAssemblyCache": "The CreateAssemblyCache function obtains an instance of the IAssemblyCache interface.", "CreateAssemblyCacheItem": "The CreateAssemblyCacheItem method creates an item in the assembly cache that corresponds to the side-by-side assembly being installed.", "CreateAssemblyNameObject": "The CreateAssemblyNameObject function obtains an instance of the IAssemblyName interface.", "CreateSourceImage": "The CreateSourceImage method enables the client to extract the files from a module to a source image on disk after a merge, taking into account changes to the module that might have been made during module configuration.", "CreateStream": "The CreateStream method copies the source of a manifest or module into a stream.", "DeactivateActCtx": "The DeactivateActCtx function deactivates the activation context corresponding to the specified cookie.", "ExtractCAB": "The ExtractCAB method extracts the embedded.cab file from a module and saves it as the specified file.", "ExtractFiles": "The ExtractFiles method extracts the embedded.cab file from a module and then writes those files to the destination directory.", "ExtractFilesEx": "The ExtractFilesEx method extracts the embedded.cab file from a module and then writes those files to the destination directory.", "Finalize": "The Finalize method prevents a side-by-side assembly name from being changed.", "FindActCtxSectionGuid": "The FindActCtxSectionGuid function retrieves information on a specific GUID in the current activation context and returns a ACTCTX_SECTION_KEYED_DATA structure.", "FindActCtxSectionStringA": "The FindActCtxSectionString function retrieves information on a specific string in the current activation context and returns a ACTCTX_SECTION_KEYED_DATA structure.", "FindActCtxSectionStringW": "The FindActCtxSectionString function retrieves information on a specific string in the current activation context and returns a ACTCTX_SECTION_KEYED_DATA structure.", "get_Attributes": "The get_Attributes method retrieves the Attributes property of the ConfigurableItem object.", "get_ConfigurableItems": "The get_ConfigurableItems method retrieves the ConfigurableItems property of the Merge object.", "get_Context": "The get_Context method retrieves the Context property of the ConfigurableItem object.", "get_DatabaseKeys": "The get_DatabaseKeys method retrieves the DatabaseKeys property of the Error object.", "get_DatabaseTable": "The get_DatabaseTable method retrieves the DatabaseTable property of the Error object.", "get_DefaultValue": "The get_DefaultValue method retrieves the DefaultValue property of the ConfigurableItem object.", "get_Dependencies": "The get_Dependencies method retrieves the Dependencies property of the Merge object.", "get_Description": "The get_Description method retrieves the Description property of the ConfigurableItem object.", "get_DisplayName": "The get_DisplayName method retrieves the DisplayName property of the ConfigurableItem object.", "get_Errors": "The get_Errors method retrieves the Errors property of the Merge object.", "get_Format": "The get_Format method retrieves the Format property of the ConfigurableItem object.", "get_HelpKeyword": "The get_HelpKeyword method retrieves the HelpKeyword property of the ConfigurableItem object.", "get_HelpLocation": "The get_HelpLocation method retrieves the HelpLocation property of the ConfigurableItem object.", "get_Language": "The get_Language method retrieves the Language property of the Error object.", "get_Module": "The get_Module method retrieves the Module property of the Dependency object.", "get_ModuleFiles": "The get_ModuleFiles method retrieves the ModuleFiles property of the GetFiles object.", "get_ModuleKeys": "The get_ModuleKeys method retrieves the ModuleKeys property of the Error object.", "get_ModuleTable": "The get_ModuleTable method retrieves the ModuleTable property of the Error object.", "get_Name": "The get_Name method retrieves the Name property of the ConfigurableItem object.", "get_Path": "The get_Path method retrieves the Path property of the Error object.", "get_Type": "The get_Type method retrieves the Type property of the Error object.", "get_Version": "The get_Version method retrieves the Version property of the Dependency object.", "GetCurrentActCtx": "The GetCurrentActCtx function returns the handle to the active activation context of the calling thread.", "GetDisplayName": "The GetDisplayName method gets a string representation of the side-by-side assembly name.", "GetName": "The GetName method returns the name portion of the assembly name.", "GetProperty": "The GetProperty method gets the value of a name-value pair in the assembly name.", "InstallAssembly": "The InstallAssembly method adds an application reference to an assembly to the side-by-side store and copies the files of the assembly to the side-by-side store.", "InstallHinfSectionA": "InstallHinfSection is an entry-point function exported by Setupapi.dll that you can use to execute a section of an.inf file.", "InstallHinfSectionW": "InstallHinfSection is an entry-point function exported by Setupapi.dll that you can use to execute a section of an.inf file.", "INSTALLUI_HANDLER_RECORD": "The INSTALLUI_HANDLER_RECORD function prototype defines a callback function that the installer calls for progress notification and error messages.", "INSTALLUI_HANDLERA": "The INSTALLUI_HANDLER function prototype defines a callback function that the installer calls for progress notification and error messages.", "INSTALLUI_HANDLERW": "The INSTALLUI_HANDLER function prototype defines a callback function that the installer calls for progress notification and error messages.", "IsEqual": "The IsEqual method compares the current assembly name to another assembly name.", "Log": "The Log method writes a text string to the currently open log file.", "LPDISPLAYVAL": "The LPDISPLAYVAL function specification defines a callback function prototype.", "LPEVALCOMCALLBACK": "The LPEVALCOMCALLBACK specification defines a callback function prototype.", "Merge": "The Merge method executes a merge of the current database and current module.", "MergeEx": "The MergeEx method executes a merge of the current database and current module.", "MsiAdvertiseProductA": "The MsiAdvertiseProduct function generates an advertise script or advertises a product to the computer.", "MsiAdvertiseProductExA": "The MsiAdvertiseProductEx function generates an advertise script or advertises a product to the computer.", "MsiAdvertiseProductExW": "The MsiAdvertiseProductEx function generates an advertise script or advertises a product to the computer.", "MsiAdvertiseProductW": "The MsiAdvertiseProduct function generates an advertise script or advertises a product to the computer.", "MsiAdvertiseScriptA": "The MsiAdvertiseScript function copies an advertised script file into the specified locations.", "MsiAdvertiseScriptW": "The MsiAdvertiseScript function copies an advertised script file into the specified locations.", "MsiApplyMultiplePatchesA": "Applies one or more patches to products eligible to receive the patches.", "MsiApplyMultiplePatchesW": "Applies one or more patches to products eligible to receive the patches.", "MsiApplyPatchA": "For each product listed by the patch package as eligible to receive the patch, the MsiApplyPatch function invokes an installation and sets the PATCH property to the path of the patch package.", "MsiApplyPatchW": "For each product listed by the patch package as eligible to receive the patch, the MsiApplyPatch function invokes an installation and sets the PATCH property to the path of the patch package.", "MsiBeginTransactionA": "The MsiBeginTransaction function starts transaction processing of a multiple-package installation and returns an identifier for the transaction.", "MsiBeginTransactionW": "The MsiBeginTransaction function starts transaction processing of a multiple-package installation and returns an identifier for the transaction.", "MsiCloseAllHandles": "The MsiCloseAllHandles function closes all open installation handles allocated by the current thread.", "MsiCloseHandle": "The MsiCloseHandle function closes an open installation handle.", "MsiCollectUserInfoA": "The MsiCollectUserInfo function obtains and stores the user information and product ID from an installation wizard.", "MsiCollectUserInfoW": "The MsiCollectUserInfo function obtains and stores the user information and product ID from an installation wizard.", "MsiConfigureFeatureA": "The MsiConfigureFeature function configures the installed state for a product feature.", "MsiConfigureFeatureW": "The MsiConfigureFeature function configures the installed state for a product feature.", "MsiConfigureProductA": "The MsiConfigureProduct function installs or uninstalls a product.", "MsiConfigureProductExA": "Installs or uninstalls a product.", "MsiConfigureProductExW": "Installs or uninstalls a product.", "MsiConfigureProductW": "The MsiConfigureProduct function installs or uninstalls a product.", "MsiCreateRecord": "The MsiCreateRecord function creates a new record object with the specified number of fields.", "MsiCreateTransformSummaryInfoA": "The MsiCreateTransformSummaryInfo function creates summary information of an existing transform to include validation and error conditions.", "MsiCreateTransformSummaryInfoW": "The MsiCreateTransformSummaryInfo function creates summary information of an existing transform to include validation and error conditions.", "MsiDatabaseApplyTransformA": "The MsiDatabaseApplyTransform function applies a transform to a database.", "MsiDatabaseApplyTransformW": "The MsiDatabaseApplyTransform function applies a transform to a database.", "MsiDatabaseCommit": "The MsiDatabaseCommit function commits changes to a database.", "MsiDatabaseExportA": "The MsiDatabaseExport function exports a Microsoft Installer table from an open database to a Text Archive File.", "MsiDatabaseExportW": "The MsiDatabaseExport function exports a Microsoft Installer table from an open database to a Text Archive File.", "MsiDatabaseGenerateTransformA": "The MsiDatabaseGenerateTransform function generates a transform file of differences between two databases.", "MsiDatabaseGenerateTransformW": "The MsiDatabaseGenerateTransform function generates a transform file of differences between two databases.", "MsiDatabaseGetPrimaryKeysA": "The MsiDatabaseGetPrimaryKeys function returns a record containing the names of all the primary key columns for a specified table.", "MsiDatabaseGetPrimaryKeysW": "The MsiDatabaseGetPrimaryKeys function returns a record containing the names of all the primary key columns for a specified table.", "MsiDatabaseImportA": "The MsiDatabaseImport function imports an installer text archive file into an open database table.", "MsiDatabaseImportW": "The MsiDatabaseImport function imports an installer text archive file into an open database table.", "MsiDatabaseIsTablePersistentA": "The MsiDatabaseIsTablePersistent function returns an enumeration that describes the state of a specific table.", "MsiDatabaseIsTablePersistentW": "The MsiDatabaseIsTablePersistent function returns an enumeration that describes the state of a specific table.", "MsiDatabaseMergeA": "The MsiDatabaseMerge function merges two databases together, which allows duplicate rows.", "MsiDatabaseMergeW": "The MsiDatabaseMerge function merges two databases together, which allows duplicate rows.", "MsiDatabaseOpenViewA": "The MsiDatabaseOpenView function prepares a database query and creates a view object.", "MsiDatabaseOpenViewW": "The MsiDatabaseOpenView function prepares a database query and creates a view object.", "MsiDetermineApplicablePatchesA": "The MsiDetermineApplicablePatches function takes a set of patch files, XML files, and XML blobs and determines which patches apply to a specified Windows Installer package and in what sequence.", "MsiDetermineApplicablePatchesW": "The MsiDetermineApplicablePatches function takes a set of patch files, XML files, and XML blobs and determines which patches apply to a specified Windows Installer package and in what sequence.", "MsiDeterminePatchSequenceA": "Takes a set of patch files, XML files, and XML blobs and determines the best sequence of application for the patches to a specified installed product.", "MsiDeterminePatchSequenceW": "Takes a set of patch files, XML files, and XML blobs and determines the best sequence of application for the patches to a specified installed product.", "MsiDoActionA": "The MsiDoAction function executes a built-in action, custom action, or user-interface wizard action.", "MsiDoActionW": "The MsiDoAction function executes a built-in action, custom action, or user-interface wizard action.", "MsiEnableLogA": "The MsiEnableLog function sets the log mode for all subsequent installations that are initiated in the calling process.", "MsiEnableLogW": "The MsiEnableLog function sets the log mode for all subsequent installations that are initiated in the calling process.", "MsiEnableUIPreview": "The MsiEnableUIPreview function enables preview mode of the user interface to facilitate authoring of user-interface dialog boxes.", "MsiEndTransaction": "The MsiEndTransaction function can commit or roll back all the installations belonging to the transaction opened by the MsiBeginTransaction function.", "MsiEnumClientsA": "The MsiEnumClients function enumerates the clients for a given installed component.", "MsiEnumClientsExA": "The MsiEnumClientsEx function enumerates the installed applications that use a specified component.", "MsiEnumClientsExW": "The MsiEnumClientsEx function enumerates the installed applications that use a specified component.", "MsiEnumClientsW": "The MsiEnumClients function enumerates the clients for a given installed component.", "MsiEnumComponentCostsA": "The MsiEnumComponentCosts function enumerates the disk-space per drive required to install a component.", "MsiEnumComponentCostsW": "The MsiEnumComponentCosts function enumerates the disk-space per drive required to install a component.", "MsiEnumComponentQualifiersA": "The MsiEnumComponentQualifiers function enumerates the advertised qualifiers for the given component.", "MsiEnumComponentQualifiersW": "The MsiEnumComponentQualifiers function enumerates the advertised qualifiers for the given component.", "MsiEnumComponentsA": "The MsiEnumComponents function enumerates the installed components for all products.", "MsiEnumComponentsExA": "The MsiEnumComponentsEx function enumerates installed components.", "MsiEnumComponentsExW": "The MsiEnumComponentsEx function enumerates installed components.", "MsiEnumComponentsW": "The MsiEnumComponents function enumerates the installed components for all products.", "MsiEnumFeaturesA": "The MsiEnumFeatures function enumerates the published features for a given product.", "MsiEnumFeaturesW": "The MsiEnumFeatures function enumerates the published features for a given product.", "MsiEnumPatchesA": "The MsiEnumPatches function enumerates all of the patches that have been applied to a product.", "MsiEnumPatchesExA": "Enumerates all patches in a specific context or across all contexts.", "MsiEnumPatchesExW": "Enumerates all patches in a specific context or across all contexts.", "MsiEnumPatchesW": "The MsiEnumPatches function enumerates all of the patches that have been applied to a product.", "MsiEnumProductsA": "The MsiEnumProducts function enumerates through all the products currently advertised or installed.", "MsiEnumProductsExA": "Enumerates through one or all the instances of products that are currently advertised or installed in the specified contexts.", "MsiEnumProductsExW": "Enumerates through one or all the instances of products that are currently advertised or installed in the specified contexts.", "MsiEnumProductsW": "The MsiEnumProducts function enumerates through all the products currently advertised or installed.", "MsiEnumRelatedProductsA": "The MsiEnumRelatedProducts function enumerates products with a specified upgrade code.", "MsiEnumRelatedProductsW": "The MsiEnumRelatedProducts function enumerates products with a specified upgrade code.", "MsiEvaluateConditionA": "The MsiEvaluateCondition function evaluates a conditional expression containing property names and values.", "MsiEvaluateConditionW": "The MsiEvaluateCondition function evaluates a conditional expression containing property names and values.", "MsiExtractPatchXMLDataA": "The MsiExtractPatchXMLData function extracts information from a patch that can be used to determine if the patch applies to a target system.", "MsiExtractPatchXMLDataW": "The MsiExtractPatchXMLData function extracts information from a patch that can be used to determine if the patch applies to a target system.", "MsiFormatRecordA": "The MsiFormatRecord function formats record field data and properties using a format string.", "MsiFormatRecordW": "The MsiFormatRecord function formats record field data and properties using a format string.", "MsiGetActiveDatabase": "The MsiGetActiveDatabase function returns the active database for the installation.", "MsiGetComponentPathA": "The MsiGetComponentPath function returns the full path to an installed component.", "MsiGetComponentPathExA": "Returns the full path to an installed component.", "MsiGetComponentPathExW": "Returns the full path to an installed component.", "MsiGetComponentPathW": "The MsiGetComponentPath function returns the full path to an installed component.", "MsiGetComponentStateA": "The MsiGetComponentState function obtains the state of a component.", "MsiGetComponentStateW": "The MsiGetComponentState function obtains the state of a component.", "MsiGetDatabaseState": "The MsiGetDatabaseState function returns the state of the database.", "MsiGetFeatureCostA": "The MsiGetFeatureCost function returns the disk space required by a feature and its selected children and parent features.", "MsiGetFeatureCostW": "The MsiGetFeatureCost function returns the disk space required by a feature and its selected children and parent features.", "MsiGetFeatureInfoA": "Returns descriptive information for a feature.", "MsiGetFeatureInfoW": "Returns descriptive information for a feature.", "MsiGetFeatureStateA": "The MsiGetFeatureState function gets the requested state of a feature.", "MsiGetFeatureStateW": "The MsiGetFeatureState function gets the requested state of a feature.", "MsiGetFeatureUsageA": "The MsiGetFeatureUsage function returns the usage metrics for a product feature.", "MsiGetFeatureUsageW": "The MsiGetFeatureUsage function returns the usage metrics for a product feature.", "MsiGetFeatureValidStatesA": "The MsiGetFeatureValidStates function returns a valid installation state.", "MsiGetFeatureValidStatesW": "The MsiGetFeatureValidStates function returns a valid installation state.", "MsiGetFileHashA": "The MsiGetFileHash function takes the path to a file and returns a 128-bit hash of that file.", "MsiGetFileHashW": "The MsiGetFileHash function takes the path to a file and returns a 128-bit hash of that file.", "MsiGetFileSignatureInformationA": "The MsiGetFileSignatureInformation function takes the path to a file that has been digitally signed and returns the file's signer certificate and hash.", "MsiGetFileSignatureInformationW": "The MsiGetFileSignatureInformation function takes the path to a file that has been digitally signed and returns the file's signer certificate and hash.", "MsiGetFileVersionA": "The MsiGetFileVersion returns the version string and language string in the format that the installer expects to find them in the database.", "MsiGetFileVersionW": "The MsiGetFileVersion returns the version string and language string in the format that the installer expects to find them in the database.", "MsiGetLanguage": "The MsiGetLanguage function returns the numeric language of the installation that is currently running.", "MsiGetLastErrorRecord": "The MsiGetLastErrorRecord function returns the error record that was last returned for the calling process.", "MsiGetMode": "The MsiGetMode function is used to determine whether the installer is currently running in a specified mode, as listed in the table.", "MsiGetPatchFileListA": "The MsiGetPatchFileList function is provided a list of.msp files, delimited by semicolons, and retrieves the list of files that can be updated by the patches.", "MsiGetPatchFileListW": "The MsiGetPatchFileList function is provided a list of.msp files, delimited by semicolons, and retrieves the list of files that can be updated by the patches.", "MsiGetPatchInfoA": "The MsiGetPatchInfo function returns information about a patch.", "MsiGetPatchInfoExA": "Queries for information about the application of a patch to a specified instance of a product.", "MsiGetPatchInfoExW": "Queries for information about the application of a patch to a specified instance of a product.", "MsiGetPatchInfoW": "The MsiGetPatchInfo function returns information about a patch.", "MsiGetProductCodeA": "The MsiGetProductCode function returns the product code of an application by using the component code of an installed or advertised component of the application.", "MsiGetProductCodeW": "The MsiGetProductCode function returns the product code of an application by using the component code of an installed or advertised component of the application.", "MsiGetProductInfoA": "The MsiGetProductInfo function returns product information for published and installed products.", "MsiGetProductInfoExA": "Returns product information for advertised and installed products.", "MsiGetProductInfoExW": "Returns product information for advertised and installed products.", "MsiGetProductInfoFromScriptA": "The MsiGetProductInfoFromScript function returns product information for a Windows Installer script file.", "MsiGetProductInfoFromScriptW": "The MsiGetProductInfoFromScript function returns product information for a Windows Installer script file.", "MsiGetProductInfoW": "The MsiGetProductInfo function returns product information for published and installed products.", "MsiGetProductPropertyA": "The MsiGetProductProperty function retrieves product properties.", "MsiGetProductPropertyW": "The MsiGetProductProperty function retrieves product properties.", "MsiGetPropertyA": "The MsiGetProperty function gets the value for an installer property.", "MsiGetPropertyW": "The MsiGetProperty function gets the value for an installer property.", "MsiGetShortcutTargetA": "The MsiGetShortcutTarget function examines a shortcut and returns its product, feature name, and component if available.", "MsiGetShortcutTargetW": "The MsiGetShortcutTarget function examines a shortcut and returns its product, feature name, and component if available.", "MsiGetSourcePathA": "The MsiGetSourcePath function returns the full source path for a folder in the Directory table.", "MsiGetSourcePathW": "The MsiGetSourcePath function returns the full source path for a folder in the Directory table.", "MsiGetSummaryInformationA": "The MsiGetSummaryInformation function obtains a handle to the _ SummaryInformation stream for an installer database.", "MsiGetSummaryInformationW": "The MsiGetSummaryInformation function obtains a handle to the _ SummaryInformation stream for an installer database.", "MsiGetTargetPathA": "The MsiGetTargetPath function returns the full target path for a folder in the Directory table.", "MsiGetTargetPathW": "The MsiGetTargetPath function returns the full target path for a folder in the Directory table.", "MsiGetUserInfoA": "The MsiGetUserInfo function returns the registered user information for an installed product.", "MsiGetUserInfoW": "The MsiGetUserInfo function returns the registered user information for an installed product.", "MsiInstallMissingComponentA": "The MsiInstallMissingComponent function installs files that are unexpectedly missing.", "MsiInstallMissingComponentW": "The MsiInstallMissingComponent function installs files that are unexpectedly missing.", "MsiInstallMissingFileA": "The MsiInstallMissingFile function installs files that are unexpectedly missing.", "MsiInstallMissingFileW": "The MsiInstallMissingFile function installs files that are unexpectedly missing.", "MsiInstallProductA": "Installs or uninstalls a product.", "MsiInstallProductW": "Installs or uninstalls a product.", "MsiIsProductElevatedA": "The MsiIsProductElevated function returns whether or not the product is managed.", "MsiIsProductElevatedW": "The MsiIsProductElevated function returns whether or not the product is managed.", "MsiJoinTransaction": "The MsiJoinTransaction function requests that the Windows Installer make the current process the owner of the transaction installing the multiple-package installation.", "MsiLocateComponentA": "The MsiLocateComponent function returns the full path to an installed component without a product code.", "MsiLocateComponentW": "The MsiLocateComponent function returns the full path to an installed component without a product code.", "MsiNotifySidChangeA": "The MsiNotifySidChange function notifies and updates the Windows Installer internal information with changes to user SIDs.", "MsiNotifySidChangeW": "The MsiNotifySidChange function notifies and updates the Windows Installer internal information with changes to user SIDs.", "MsiOpenDatabaseA": "The MsiOpenDatabase function opens a database file for data access.", "MsiOpenDatabaseW": "The MsiOpenDatabase function opens a database file for data access.", "MsiOpenPackageA": "The MsiOpenPackage function opens a package to use with the functions that access the product database.", "MsiOpenPackageExA": "The MsiOpenPackageEx function opens a package to use with functions that access the product database.", "MsiOpenPackageExW": "The MsiOpenPackageEx function opens a package to use with functions that access the product database.", "MsiOpenPackageW": "The MsiOpenPackage function opens a package to use with the functions that access the product database.", "MsiOpenProductA": "The MsiOpenProduct function opens a product for use with the functions that access the product database.", "MsiOpenProductW": "The MsiOpenProduct function opens a product for use with the functions that access the product database.", "MsiPreviewBillboardA": "The MsiPreviewBillboard function displays a billboard with the host control in the displayed dialog box.", "MsiPreviewBillboardW": "The MsiPreviewBillboard function displays a billboard with the host control in the displayed dialog box.", "MsiPreviewDialogA": "The MsiPreviewDialog function displays a dialog box as modeless and inactive.", "MsiPreviewDialogW": "The MsiPreviewDialog function displays a dialog box as modeless and inactive.", "MsiProcessAdvertiseScriptA": "The MsiProcessAdvertiseScript function processes an advertise script file into the specified locations.", "MsiProcessAdvertiseScriptW": "The MsiProcessAdvertiseScript function processes an advertise script file into the specified locations.", "MsiProcessMessage": "The MsiProcessMessage function sends an error record to the installer for processing.", "MsiProvideAssemblyA": "The MsiProvideAssembly function returns the full path to a Windows Installer component that contains an assembly.", "MsiProvideAssemblyW": "The MsiProvideAssembly function returns the full path to a Windows Installer component that contains an assembly.", "MsiProvideComponentA": "The MsiProvideComponent function returns the full component path, performing any necessary installation.", "MsiProvideComponentW": "The MsiProvideComponent function returns the full component path, performing any necessary installation.", "MsiProvideQualifiedComponentA": "The MsiProvideQualifiedComponent function returns the full component path for a qualified component and performs any necessary installation.", "MsiProvideQualifiedComponentExA": "The MsiProvideQualifiedComponentEx function returns the full component path for a qualified component that is published by a product and performs any necessary installation.", "MsiProvideQualifiedComponentExW": "The MsiProvideQualifiedComponentEx function returns the full component path for a qualified component that is published by a product and performs any necessary installation.", "MsiProvideQualifiedComponentW": "The MsiProvideQualifiedComponent function returns the full component path for a qualified component and performs any necessary installation.", "MsiQueryComponentStateA": "The MsiQueryComponentState function returns the installed state for a component.", "MsiQueryComponentStateW": "The MsiQueryComponentState function returns the installed state for a component.", "MsiQueryFeatureStateA": "The MsiQueryFeatureState function returns the installed state for a product feature.", "MsiQueryFeatureStateExA": "The MsiQueryFeatureStateEx function returns the installed state for a product feature.", "MsiQueryFeatureStateExW": "The MsiQueryFeatureStateEx function returns the installed state for a product feature.", "MsiQueryFeatureStateW": "The MsiQueryFeatureState function returns the installed state for a product feature.", "MsiQueryProductStateA": "The MsiQueryProductState function returns the installed state for a product.", "MsiQueryProductStateW": "The MsiQueryProductState function returns the installed state for a product.", "MsiRecordClearData": "The MsiRecordClearData function sets all fields in a record to null.", "MsiRecordDataSize": "The MsiRecordDataSize function returns the length of a record field.", "MsiRecordGetFieldCount": "Returns the number of fields in a record.", "MsiRecordGetInteger": "The MsiRecordGetInteger function returns the integer value from a record field.", "MsiRecordGetStringA": "The MsiRecordGetString function returns the string value of a record field.", "MsiRecordGetStringW": "The MsiRecordGetString function returns the string value of a record field.", "MsiRecordIsNull": "Reports a null record field.", "MsiRecordReadStream": "The MsiRecordReadStream function reads bytes from a record stream field into a buffer.", "MsiRecordSetInteger": "Sets a record field to an integer field.", "MsiRecordSetStreamA": "The MsiRecordSetStream function sets a record stream field from a file.", "MsiRecordSetStreamW": "The MsiRecordSetStream function sets a record stream field from a file.", "MsiRecordSetStringA": "The MsiRecordSetString function copies a string into the designated field.", "MsiRecordSetStringW": "The MsiRecordSetString function copies a string into the designated field.", "MsiReinstallFeatureA": "Reinstalls features.", "MsiReinstallFeatureW": "Reinstalls features.", "MsiReinstallProductA": "Reinstalls products.", "MsiReinstallProductW": "Reinstalls products.", "MsiRemovePatchesA": "Removes one or more patches from a single product.", "MsiRemovePatchesW": "Removes one or more patches from a single product.", "MsiSequenceA": "The MsiSequence function executes another action sequence, as described in the specified table.", "MsiSequenceW": "The MsiSequence function executes another action sequence, as described in the specified table.", "MsiSetComponentStateA": "The MsiSetComponentState function sets a component to the requested state.", "MsiSetComponentStateW": "The MsiSetComponentState function sets a component to the requested state.", "MsiSetExternalUIA": "The MsiSetExternalUI function enables an external user-interface handler.", "MsiSetExternalUIRecord": "The MsiSetExternalUIRecord function enables an external user-interface handler.", "MsiSetExternalUIW": "The MsiSetExternalUI function enables an external user-interface handler.", "MsiSetFeatureAttributesA": "The MsiSetFeatureAttributes function can modify the default attributes of a feature at runtime.", "MsiSetFeatureAttributesW": "The MsiSetFeatureAttributes function can modify the default attributes of a feature at runtime.", "MsiSetFeatureStateA": "The MsiSetFeatureState function sets a feature to a specified state.", "MsiSetFeatureStateW": "The MsiSetFeatureState function sets a feature to a specified state.", "MsiSetInstallLevel": "The MsiSetInstallLevel function sets the installation level for a full product installation.", "MsiSetInternalUI": "The MsiSetInternalUI function enables the installer 's internal user interface.", "MsiSetMode": "The MsiSetMode function sets an internal engine Boolean state.", "MsiSetPropertyA": "The MsiSetProperty function sets the value for an installation property.", "MsiSetPropertyW": "The MsiSetProperty function sets the value for an installation property.", "MsiSetTargetPathA": "The MsiSetTargetPath function sets the full target path for a folder in the Directory table.", "MsiSetTargetPathW": "The MsiSetTargetPath function sets the full target path for a folder in the Directory table.", "MsiSourceListAddMediaDiskA": "The MsiSourceListAddMediaDisk function adds or updates a disk of the media source of a registered product or patch.", "MsiSourceListAddMediaDiskW": "The MsiSourceListAddMediaDisk function adds or updates a disk of the media source of a registered product or patch.", "MsiSourceListAddSourceA": "Adds to the list of valid network sources that contain the specified type of sources for a product or patch in a specified user context.", "MsiSourceListAddSourceExA": "Adds or reorders the set of sources of a patch or product in a specified context.", "MsiSourceListAddSourceExW": "Adds or reorders the set of sources of a patch or product in a specified context.", "MsiSourceListAddSourceW": "Adds to the list of valid network sources that contain the specified type of sources for a product or patch in a specified user context.", "MsiSourceListClearAllA": "The MsiSourceListClearAll function removes all network sources from the source list of a patch or product in a specified context.", "MsiSourceListClearAllExA": "The MsiSourceListClearAllEx function removes all the existing sources of a given source type for the specified product or patch instance.", "MsiSourceListClearAllExW": "The MsiSourceListClearAllEx function removes all the existing sources of a given source type for the specified product or patch instance.", "MsiSourceListClearAllW": "The MsiSourceListClearAll function removes all network sources from the source list of a patch or product in a specified context.", "MsiSourceListClearMediaDiskA": "The MsiSourceListClearMediaDisk function provides the ability to remove an existing registered disk under the media source for a product or patch in a specific context.", "MsiSourceListClearMediaDiskW": "The MsiSourceListClearMediaDisk function provides the ability to remove an existing registered disk under the media source for a product or patch in a specific context.", "MsiSourceListClearSourceA": "Removes an existing source for a product or patch in a specified context.", "MsiSourceListClearSourceW": "Removes an existing source for a product or patch in a specified context.", "MsiSourceListEnumMediaDisksA": "The MsiSourceListEnumMediaDisks function enumerates the list of disks registered for the media source for a patch or product.", "MsiSourceListEnumMediaDisksW": "The MsiSourceListEnumMediaDisks function enumerates the list of disks registered for the media source for a patch or product.", "MsiSourceListEnumSourcesA": "The MsiSourceListEnumSources function enumerates the sources in the source list of a specified patch or product.", "MsiSourceListEnumSourcesW": "The MsiSourceListEnumSources function enumerates the sources in the source list of a specified patch or product.", "MsiSourceListForceResolutionA": "The MsiSourceListForceResolution function forces the installer to search the source list for a valid product source the next time a source is required.", "MsiSourceListForceResolutionExA": "The MsiSourceListForceResolutionEx function removes the registration of the property called \"LastUsedSource\".", "MsiSourceListForceResolutionExW": "The MsiSourceListForceResolutionEx function removes the registration of the property called \"LastUsedSource\".", "MsiSourceListForceResolutionW": "The MsiSourceListForceResolution function forces the installer to search the source list for a valid product source the next time a source is required.", "MsiSourceListGetInfoA": "The MsiSourceListGetInfo function retrieves information about the source list for a product or patch in a specific context.", "MsiSourceListGetInfoW": "The MsiSourceListGetInfo function retrieves information about the source list for a product or patch in a specific context.", "MsiSourceListSetInfoA": "Sets information about the source list for a product or patch in a specific context.", "MsiSourceListSetInfoW": "Sets information about the source list for a product or patch in a specific context.", "MsiSummaryInfoGetPropertyA": "The MsiSummaryInfoGetProperty function gets a single property from the summary information stream.", "MsiSummaryInfoGetPropertyCount": "The MsiSummaryInfoGetPropertyCount function returns the number of existing properties in the summary information stream.", "MsiSummaryInfoGetPropertyW": "The MsiSummaryInfoGetProperty function gets a single property from the summary information stream.", "MsiSummaryInfoPersist": "The MsiSummaryInfoPersist function writes changed summary information back to the summary information stream.", "MsiSummaryInfoSetPropertyA": "The MsiSummaryInfoSetProperty function sets a single summary information property.", "MsiSummaryInfoSetPropertyW": "The MsiSummaryInfoSetProperty function sets a single summary information property.", "MsiUseFeatureA": "The MsiUseFeature function increments the usage count for a particular feature and indicates the installation state for that feature.", "MsiUseFeatureExA": "The MsiUseFeatureEx function increments the usage count for a particular feature and indicates the installation state for that feature.", "MsiUseFeatureExW": "The MsiUseFeatureEx function increments the usage count for a particular feature and indicates the installation state for that feature.", "MsiUseFeatureW": "The MsiUseFeature function increments the usage count for a particular feature and indicates the installation state for that feature.", "MsiVerifyDiskSpace": "The MsiVerifyDiskSpace function checks to see if sufficient disk space is present for the current installation.", "MsiVerifyPackageA": "The MsiVerifyPackage function verifies that the given file is an installation package.", "MsiVerifyPackageW": "The MsiVerifyPackage function verifies that the given file is an installation package.", "MsiViewClose": "The MsiViewClose function releases the result set for an executed view.", "MsiViewExecute": "The MsiViewExecute function executes a SQL view query and supplies any required parameters.", "MsiViewFetch": "The MsiViewFetch function fetches the next sequential record from the view.", "MsiViewGetColumnInfo": "The MsiViewGetColumnInfo function returns a record containing column names or definitions.", "MsiViewGetErrorA": "The MsiViewGetError function returns the error that occurred in the MsiViewModify function.", "MsiViewGetErrorW": "The MsiViewGetError function returns the error that occurred in the MsiViewModify function.", "MsiViewModify": "The MsiViewModify function updates a fetched record.", "OpenCUB": "The OpenCUB method opens an Internal Consistency Evaluator file that is to be used for validation.", "OpenDatabase": "The OpenDatabase method opens a Windows Installer installation database, located at a specified path, that is to be merged with a module.", "OpenLog": "The OpenLog method opens a log file that receives progress and error messages.", "OpenModule": "The OpenModule method opens a Windows Installer merge module in read-only mode.", "ProvideIntegerData": "The ProvideIntegerData method retrieves integer data from the client tool.", "ProvideTextData": "The ProvideTextData method retrieves text data from the client tool.", "PSP_FILE_CALLBACK_A": "The FileCallback callback function is used by a few setup functions.", "PSP_FILE_CALLBACK_W": "The FileCallback callback function is used by a few setup functions.", "QueryActCtxSettingsW": "The QueryActCtxSettingsW function specifies the activation context, and the namespace and name of the attribute that is to be queried.", "QueryActCtxW": "The QueryActCtxW function queries the activation context.", "QueryAssemblyInfo": "The QueryAssemblyInfo method queries the side-by-side assembly store for assembly information and validates the files in the side-by-side assembly store against the assembly manifest.", "ReleaseActCtx": "The ReleaseActCtx function decrements the reference count of the specified activation context.", "SetDisplay": "The SetDisplay method enables an authoring tool to obtain ICE status messages through a callback function.", "SetProperty": "The SetProperty method adds a name-value pair to the side-by-side assembly name.", "SetStatus": "The SetStatus method enables an authoring tool to receive information about the progress of validation through a registered callback function.", "SetupAddInstallSectionToDiskSpaceListA": "The SetupAddInstallSectionToDiskSpaceList function searches for CopyFile and DelFile lines in an Install section of an INF file.", "SetupAddInstallSectionToDiskSpaceListW": "The SetupAddInstallSectionToDiskSpaceList function searches for CopyFile and DelFile lines in an Install section of an INF file.", "SetupAddSectionToDiskSpaceListA": "The SetupAddSectionToDiskSpaceList function adds to a disk-space list all the file delete or copy operations listed in a Copy Files or Delete Files section of an INF file.", "SetupAddSectionToDiskSpaceListW": "The SetupAddSectionToDiskSpaceList function adds to a disk-space list all the file delete or copy operations listed in a Copy Files or Delete Files section of an INF file.", "SetupAddToDiskSpaceListA": "The SetupAddToDiskSpaceList function adds a single delete or copy operation to a disk-space list.", "SetupAddToDiskSpaceListW": "The SetupAddToDiskSpaceList function adds a single delete or copy operation to a disk-space list.", "SetupAddToSourceListA": "The SetupAddToSourceList function appends a value to the list of installation sources for either the current user or the system.", "SetupAddToSourceListW": "The SetupAddToSourceList function appends a value to the list of installation sources for either the current user or the system.", "SetupAdjustDiskSpaceListA": "The SetupAdjustDiskSpaceList function adjusts the amount of required space for a specified drive.", "SetupAdjustDiskSpaceListW": "The SetupAdjustDiskSpaceList function adjusts the amount of required space for a specified drive.", "SetupBackupErrorA": "The SetupBackupError function generates a dialog box that informs the user of a backup error.", "SetupBackupErrorW": "The SetupBackupError function generates a dialog box that informs the user of a backup error.", "SetupCancelTemporarySourceList": "The SetupCancelTemporarySourceList function cancels any temporary list and no-browse behavior and reestablishes standard list behavior.", "SetupCloseFileQueue": "The SetupCloseFileQueue function destroys a setup file queue.", "SetupCloseInfFile": "The SetupCloseInfFile function closes the INF file opened by a call to SetupOpenInfFile.", "SetupCloseLog": "The SetupCloseLog function closes the log files.", "SetupCommitFileQueueA": "The SetupCommitFileQueue function performs file operations queued on a setup file queue.", "SetupCommitFileQueueW": "The SetupCommitFileQueue function performs file operations queued on a setup file queue.", "SetupConfigureWmiFromInfSectionA": "The SetupConfigureWmiFromInfSection function configures the security of the WMI data that is exposed by an INF file when passed to the [ DDInstall.", "SetupConfigureWmiFromInfSectionW": "The SetupConfigureWmiFromInfSection function configures the security of the WMI data that is exposed by an INF file when passed to the [ DDInstall.", "SetupCopyErrorA": "The SetupCopyError function generates a dialog box to notify a user of a copy file error.", "SetupCopyErrorW": "The SetupCopyError function generates a dialog box to notify a user of a copy file error.", "SetupCopyOEMInfA": "The SetupCopyOEMInf function copies a specified.inf file to the % windir%/Inf directory.", "SetupCopyOEMInfW": "The SetupCopyOEMInf function copies a specified.inf file to the % windir%/Inf directory.", "SetupCreateDiskSpaceListA": "The SetupCreateDiskSpaceList function creates a disk-space list.", "SetupCreateDiskSpaceListW": "The SetupCreateDiskSpaceList function creates a disk-space list.", "SetupDecompressOrCopyFileA": "The SetupDecompressOrCopyFile function copies a file, decompressing it if necessary.", "SetupDecompressOrCopyFileW": "The SetupDecompressOrCopyFile function copies a file, decompressing it if necessary.", "SetupDefaultQueueCallbackA": "The SetupDefaultQueueCallback function is the default queue callback routine included with the Setup API.", "SetupDefaultQueueCallbackW": "The SetupDefaultQueueCallback function is the default queue callback routine included with the Setup API.", "SetupDeleteErrorA": "The SetupDeleteError function generates a dialog box that informs the user of a delete error.", "SetupDeleteErrorW": "The SetupDeleteError function generates a dialog box that informs the user of a delete error.", "SetupDestroyDiskSpaceList": "The SetupDestroyDiskSpaceList function destroys a disk-space list and releases the resources allocated to it.", "SetupDiGetClassDevsA": "The SetupDiGetClassDevs function returns a handle to a device information set that contains requested device information elements for a local computer.", "SetupDuplicateDiskSpaceListA": "The SetupDuplicateDiskSpaceList function duplicates a disk-space list as a new independent disk-space list.", "SetupDuplicateDiskSpaceListW": "The SetupDuplicateDiskSpaceList function duplicates a disk-space list as a new independent disk-space list.", "SetupEnumInfSectionsA": "The SetupEnumInfSections function retrieves section names from an INF file.", "SetupEnumInfSectionsW": "The SetupEnumInfSections function retrieves section names from an INF file.", "SetupFindFirstLineA": "The SetupFindFirstLine function locates a line in the specified section of an INF file.", "SetupFindFirstLineW": "The SetupFindFirstLine function locates a line in the specified section of an INF file.", "SetupFindNextLine": "The SetupFindNextLine returns the location of the next line in an INF file section relative to ContextIn.", "SetupFindNextMatchLineA": "The SetupFindNextMatchLine function returns the location of the next line in an INF file relative to ContextIn.", "SetupFindNextMatchLineW": "The SetupFindNextMatchLine function returns the location of the next line in an INF file relative to ContextIn.", "SetupFreeSourceListA": "The SetupFreeSourceList function frees the system resources allocated to a source list.", "SetupFreeSourceListW": "The SetupFreeSourceList function frees the system resources allocated to a source list.", "SetupGetBinaryField": "The SetupGetBinaryField function retrieves binary data from a line in an INF file section, from the specified field to the end of the line.", "SetupGetFieldCount": "The SetupGetFieldCount function retrieves the number of fields in the specified line in an INF file.", "SetupGetFileCompressionInfoA": "The SetupGetFileCompressionInfo function examines a physical file to determine if it is compressed and gets its full path, size, and the size of the uncompressed target file.", "SetupGetFileCompressionInfoExA": "The SetupGetFileCompressionInfoEx function examines a potentially compressed file and gets the type of compression, the file's full path, the compressed size, and the size of the uncompressed target file.", "SetupGetFileCompressionInfoExW": "The SetupGetFileCompressionInfoEx function examines a potentially compressed file and gets the type of compression, the file's full path, the compressed size, and the size of the uncompressed target file.", "SetupGetFileCompressionInfoW": "The SetupGetFileCompressionInfo function examines a physical file to determine if it is compressed and gets its full path, size, and the size of the uncompressed target file.", "SetupGetFileQueueCount": "The SetupGetFileQueueCount function gets the count from a setup file queue.", "SetupGetFileQueueFlags": "The SetupGetFileQueueFlags function gets the flags from a setup file queue.", "SetupGetInfFileListA": "The SetupGetInfFileList function returns a list of INF files located in a caller-specified directory to a call-supplied buffer.", "SetupGetInfFileListW": "The SetupGetInfFileList function returns a list of INF files located in a caller-specified directory to a call-supplied buffer.", "SetupGetInfInformationA": "The SetUpGetInfInformation function returns the SP_INF_INFORMATION structure for the specified INF file to a buffer.", "SetupGetInfInformationW": "The SetUpGetInfInformation function returns the SP_INF_INFORMATION structure for the specified INF file to a buffer.", "SetupGetIntField": "The SetupGetIntField function retrieves an integer value from the specified field of a line in an INF file.", "SetupGetLineByIndexA": "The SetupGetLineByIndex function locates a line by its index value in the specified section in the INF file.", "SetupGetLineByIndexW": "The SetupGetLineByIndex function locates a line by its index value in the specified section in the INF file.", "SetupGetLineCountA": "The SetupGetLineCount function returns the number of lines in a specified section of an INF file.", "SetupGetLineCountW": "The SetupGetLineCount function returns the number of lines in a specified section of an INF file.", "SetupGetLineTextA": "The SetupGetLineText function returns the contents of a line in an INF file in a compact form.", "SetupGetLineTextW": "The SetupGetLineText function returns the contents of a line in an INF file in a compact form.", "SetupGetMultiSzFieldA": "The SetupGetMultiSzField function retrieves multiple strings stored in a line of an INF file, from the specified field to the end of the line.", "SetupGetMultiSzFieldW": "The SetupGetMultiSzField function retrieves multiple strings stored in a line of an INF file, from the specified field to the end of the line.", "SetupGetSourceFileLocationA": "The SetupGetSourceFileLocation function retrieves the location of a source file listed in an INF file.", "SetupGetSourceFileLocationW": "The SetupGetSourceFileLocation function retrieves the location of a source file listed in an INF file.", "SetupGetSourceFileSizeA": "The SetupGetSourceFileSize function reads the uncompressed size of a source file listed in an INF file.", "SetupGetSourceFileSizeW": "The SetupGetSourceFileSize function reads the uncompressed size of a source file listed in an INF file.", "SetupGetSourceInfoA": "The SetupGetSourceInfo function retrieves the path, tag file, or media description for a source listed in an INF file.", "SetupGetSourceInfoW": "The SetupGetSourceInfo function retrieves the path, tag file, or media description for a source listed in an INF file.", "SetupGetStringFieldA": "The SetupGetStringField function retrieves a string from the specified field of a line in an INF file.", "SetupGetStringFieldW": "The SetupGetStringField function retrieves a string from the specified field of a line in an INF file.", "SetupGetTargetPathA": "The SetupGetTargetPath function determines the target directory for a file list section.", "SetupGetTargetPathW": "The SetupGetTargetPath function determines the target directory for a file list section.", "SetupInitDefaultQueueCallback": "The SetupInitDefaultQueueCallback function initializes the context used by the default queue callback routine included with the Setup API.", "SetupInitDefaultQueueCallbackEx": "Initializes the context used by the default queue callback routine included with the Setup API in the same manner as SetupInitDefaultQueueCallback, except that an additional window is provided to the callback function to accept progress messages.", "SetupInitializeFileLogA": "The SetupInitializeFileLog function initializes a file to record installation operations and outcomes.", "SetupInitializeFileLogW": "The SetupInitializeFileLog function initializes a file to record installation operations and outcomes.", "SetupInstallFileA": "The SetupInstallFile function installs a file as specified either by an INFCONTEXT returned by SetupFindXXXLine or explicitly by the file name and path.", "SetupInstallFileExA": "The SetupInstallFileEx function installs a file as specified either by an INFCONTEXT returned by SetupFindXXXLine or explicitly by the filename and path information.", "SetupInstallFileExW": "The SetupInstallFileEx function installs a file as specified either by an INFCONTEXT returned by SetupFindXXXLine or explicitly by the filename and path information.", "SetupInstallFilesFromInfSectionA": "The SetupInstallFilesFromInfSection function queues all the files for an installation that are specified in the Copy Files, Delete Files, and Rename Files sections that are listed by an Install section.", "SetupInstallFilesFromInfSectionW": "The SetupInstallFilesFromInfSection function queues all the files for an installation that are specified in the Copy Files, Delete Files, and Rename Files sections that are listed by an Install section.", "SetupInstallFileW": "The SetupInstallFile function installs a file as specified either by an INFCONTEXT returned by SetupFindXXXLine or explicitly by the file name and path.", "SetupInstallFromInfSectionA": "The SetupInstallFromInfSection function carries out all the directives in an INF file Install section.", "SetupInstallFromInfSectionW": "The SetupInstallFromInfSection function carries out all the directives in an INF file Install section.", "SetupInstallServicesFromInfSectionA": "The SetupInstallServicesFromInfSection function performs service installation and deletion operations that are specified in the Service Install sections listed in the Service section of an INF file.", "SetupInstallServicesFromInfSectionExA": "The SetupInstallServicesFromInfSectionEx function performs service installation and deletion operations that are specified in the Service Install sections listed in the Service section of an INF file.", "SetupInstallServicesFromInfSectionExW": "The SetupInstallServicesFromInfSectionEx function performs service installation and deletion operations that are specified in the Service Install sections listed in the Service section of an INF file.", "SetupInstallServicesFromInfSectionW": "The SetupInstallServicesFromInfSection function performs service installation and deletion operations that are specified in the Service Install sections listed in the Service section of an INF file.", "SetupIterateCabinetA": "The SetupIterateCabinet function iterates through all the files in a cabinet and sends a notification to a callback function for each file found.", "SetupIterateCabinetW": "The SetupIterateCabinet function iterates through all the files in a cabinet and sends a notification to a callback function for each file found.", "SetupLogErrorA": "The SetupLogError function writes an error message to a log file.", "SetupLogErrorW": "The SetupLogError function writes an error message to a log file.", "SetupLogFileA": "The SetupLogFile function adds an entry to the log file.", "SetupLogFileW": "The SetupLogFile function adds an entry to the log file.", "SetupOpenAppendInfFileA": "The SetupOpenAppendInfFile function appends the information in an INF file to an INF file previously opened by SetupOpenInfFile.", "SetupOpenAppendInfFileW": "The SetupOpenAppendInfFile function appends the information in an INF file to an INF file previously opened by SetupOpenInfFile.", "SetupOpenFileQueue": "The SetupOpenFileQueue function creates a setup file queue.", "SetupOpenInfFileA": "The SetupOpenInfFile function opens an INF file and returns a handle to it.", "SetupOpenInfFileW": "The SetupOpenInfFile function opens an INF file and returns a handle to it.", "SetupOpenLog": "The SetupOpenLog function opens the log files.", "SetupOpenMasterInf": "The SetupOpenMasterInf function opens the master INF file that contains file and layout information for files shipped with Windows.", "SetupPromptForDiskA": "The SetupPromptForDisk function displays a dialog box that prompts the user for a disk.", "SetupPromptForDiskW": "The SetupPromptForDisk function displays a dialog box that prompts the user for a disk.", "SetupPromptReboot": "The SetupPromptReboot function asks the user if he wants to reboot the system, optionally dependent on whether any files in a committed file queue were in use during a file operation.", "SetupQueryDrivesInDiskSpaceListA": "The SetupQueryDrivesInDiskSpaceList function fills a buffer with a list of the drives referenced by the file operations listed in the disk-space list.", "SetupQueryDrivesInDiskSpaceListW": "The SetupQueryDrivesInDiskSpaceList function fills a buffer with a list of the drives referenced by the file operations listed in the disk-space list.", "SetupQueryFileLogA": "The SetupQueryFileLog function returns information from a setup file log.", "SetupQueryFileLogW": "The SetupQueryFileLog function returns information from a setup file log.", "SetupQueryInfFileInformationA": "The SetupQueryInfFileInformation function returns an INF filename from an SP_INF_INFORMATION structure to a buffer.", "SetupQueryInfFileInformationW": "The SetupQueryInfFileInformation function returns an INF filename from an SP_INF_INFORMATION structure to a buffer.", "SetupQueryInfOriginalFileInformationA": "The SetupQueryInfOriginalFileInformation function returns the original name of an OEM INF file.", "SetupQueryInfOriginalFileInformationW": "The SetupQueryInfOriginalFileInformation function returns the original name of an OEM INF file.", "SetupQueryInfVersionInformationA": "The SetupQueryInfVersionInformation function returns INF file version information from an SP_INF_INFORMATION structure to a buffer.", "SetupQueryInfVersionInformationW": "The SetupQueryInfVersionInformation function returns INF file version information from an SP_INF_INFORMATION structure to a buffer.", "SetupQuerySourceListA": "The SetupQuerySourceList function queries the current list of installation sources.", "SetupQuerySourceListW": "The SetupQuerySourceList function queries the current list of installation sources.", "SetupQuerySpaceRequiredOnDriveA": "The SetupQuerySpaceRequiredOnDrive function examines a disk space list to determine the space that is required to perform all the file operations listed for a specific drive.", "SetupQuerySpaceRequiredOnDriveW": "The SetupQuerySpaceRequiredOnDrive function examines a disk space list to determine the space that is required to perform all the file operations listed for a specific drive.", "SetupQueueCopyA": "The SetupQueueCopy function adds a single file copy operation to a setup file queue.", "SetupQueueCopyIndirectA": "The SetupQueueCopyIndirect function is an extended form of SetupQueueCopy passing additional parameters as a structure.", "SetupQueueCopyIndirectW": "The SetupQueueCopyIndirect function is an extended form of SetupQueueCopy passing additional parameters as a structure.", "SetupQueueCopySectionA": "The SetupQueueCopySection function places all the files in a section of an INF file in a setup queue for copying.", "SetupQueueCopySectionW": "The SetupQueueCopySection function places all the files in a section of an INF file in a setup queue for copying.", "SetupQueueCopyW": "The SetupQueueCopy function adds a single file copy operation to a setup file queue.", "SetupQueueDefaultCopyA": "The SetupQueueDefaultCopy function adds a single file to a setup file queue for copying, using the default source media and destination as specified in an INF file.", "SetupQueueDefaultCopyW": "The SetupQueueDefaultCopy function adds a single file to a setup file queue for copying, using the default source media and destination as specified in an INF file.", "SetupQueueDeleteA": "The SetupQueueDelete function places an individual file delete operation on a setup file queue.", "SetupQueueDeleteSectionA": "The SetupQueueDeleteSection function queues all the files in a section of an INF file for deletion.", "SetupQueueDeleteSectionW": "The SetupQueueDeleteSection function queues all the files in a section of an INF file for deletion.", "SetupQueueDeleteW": "The SetupQueueDelete function places an individual file delete operation on a setup file queue.", "SetupQueueRenameA": "The SetupQueueRename function places an individual file rename operation on a setup file queue.", "SetupQueueRenameSectionA": "The SetupQueueRenameSection function queues a section in an INF file for renaming.", "SetupQueueRenameSectionW": "The SetupQueueRenameSection function queues a section in an INF file for renaming.", "SetupQueueRenameW": "The SetupQueueRename function places an individual file rename operation on a setup file queue.", "SetupRemoveFileLogEntryA": "The SetupRemoveFileLogEntry function removes an entry or section from a file log.", "SetupRemoveFileLogEntryW": "The SetupRemoveFileLogEntry function removes an entry or section from a file log.", "SetupRemoveFromDiskSpaceListA": "The SetupRemoveFromDiskSpaceList function removes a file delete or copy operation from a disk-space list.", "SetupRemoveFromDiskSpaceListW": "The SetupRemoveFromDiskSpaceList function removes a file delete or copy operation from a disk-space list.", "SetupRemoveFromSourceListA": "The SetupRemoveFromSourceList function removes a value from the list of installation sources for either the current user or the system.", "SetupRemoveFromSourceListW": "The SetupRemoveFromSourceList function removes a value from the list of installation sources for either the current user or the system.", "SetupRemoveInstallSectionFromDiskSpaceListA": "The SetupRemoveInstallSectionFromDiskSpaceList function searches an Install section of an INF file for CopyFiles and DelFiles lines, and removes the file operations specified in those sections from a disk-space list.", "SetupRemoveInstallSectionFromDiskSpaceListW": "The SetupRemoveInstallSectionFromDiskSpaceList function searches an Install section of an INF file for CopyFiles and DelFiles lines, and removes the file operations specified in those sections from a disk-space list.", "SetupRemoveSectionFromDiskSpaceListA": "The SetupRemoveSectionFromDiskSpaceList function removes the file delete or copy operations listed in a Copy Files section of an INF file from a disk-space list.", "SetupRemoveSectionFromDiskSpaceListW": "The SetupRemoveSectionFromDiskSpaceList function removes the file delete or copy operations listed in a Copy Files section of an INF file from a disk-space list.", "SetupRenameErrorA": "The RenameError function generates a dialog box that informs the user of a file renaming error.", "SetupRenameErrorW": "The RenameError function generates a dialog box that informs the user of a file renaming error.", "SetupScanFileQueueA": "The SetupScanFileQueue function scans a setup file queue, performing an operation on each node in its copy list.", "SetupScanFileQueueW": "The SetupScanFileQueue function scans a setup file queue, performing an operation on each node in its copy list.", "SetupSetDirectoryIdA": "The SetupSetDirectoryId function associates a directory identifier in an INF file with a specific directory.", "SetupSetDirectoryIdExA": "The SetupSetDirectoryIdEx function associates a directory identifier in an INF file with a specific directory.", "SetupSetDirectoryIdExW": "The SetupSetDirectoryIdEx function associates a directory identifier in an INF file with a specific directory.", "SetupSetDirectoryIdW": "The SetupSetDirectoryId function associates a directory identifier in an INF file with a specific directory.", "SetupSetFileQueueAlternatePlatformA": "The SetupSetFileQueueAlternatePlatform function associates the file queue with a target platform that is different from the platform running the function.", "SetupSetFileQueueAlternatePlatformW": "The SetupSetFileQueueAlternatePlatform function associates the file queue with a target platform that is different from the platform running the function.", "SetupSetFileQueueFlags": "The SetupSetFileQueueFlags function sets the flags on a setup file queue.", "SetupSetPlatformPathOverrideA": "The SetupSetPlatformPathOverride function is used to set a platform path override for a target machine when working with INFs from a different machine.", "SetupSetPlatformPathOverrideW": "The SetupSetPlatformPathOverride function is used to set a platform path override for a target machine when working with INFs from a different machine.", "SetupSetSourceListA": "The SetupSetSourceList function allows the caller to set the list of installation sources for either the current user or the system.", "SetupSetSourceListW": "The SetupSetSourceList function allows the caller to set the list of installation sources for either the current user or the system.", "SetupTermDefaultQueueCallback": "The SetupTermDefaultQueueCallback function is called after a queue has finished committing.", "SetupTerminateFileLog": "The SetupTerminateFileLog function releases resources associated with a file log.", "SetupUninstallNewlyCopiedInfs": "The SetupUninstallNewlyCopiedInfs function uninstalls INF files that are previously installed during the committal of the specified file queue.", "SetupUninstallOEMInfA": "The SetupUninstallOEMInf function uninstalls a specified.inf file and any associated.pnf file.", "SetupUninstallOEMInfW": "The SetupUninstallOEMInf function uninstalls a specified.inf file and any associated.pnf file.", "SetupVerifyInfFileA": "The SetupVerifyInfFile function verifies the digital signature of the specified INF file by using its corresponding catalog.", "SetupVerifyInfFileW": "The SetupVerifyInfFile function verifies the digital signature of the specified INF file by using its corresponding catalog.", "SfcGetNextProtectedFile": "Retrieves the complete list of protected files.", "SfcIsFileProtected": "Determines whether the specified file is protected.", "SfcIsKeyProtected": "Determines whether the specified registry key is protected.", "UninstallAssembly": "The UnistallAssembly method removes an application reference to an assembly from the side-by-side store.", "Validate": "The Validate method performs validation of the installation package or merge module using the specified internal consistency evaluator file.", "ZombifyActCtx": "The ZombifyActCtx function deactivates the specified activation context, but does not deallocate it."}