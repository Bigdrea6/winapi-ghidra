{"AdjustWindowRect": "Calculates the required size of the window rectangle, based on the desired client - rectangle size.", "AdjustWindowRectEx": "Calculates the required size of the window rectangle, based on the desired size of the client rectangle.", "AllowSetForegroundWindow": "The calling process must already be able to set the foreground window.", "AnimateWindow": "Enables you to produce special effects when showing or hiding windows.", "AnyPopup": "The function searches the entire screen, not just the calling application 's client area.", "ArrangeIconicWindows": "Arranges all the minimized child windows of the specified parent window.", "BeginDeferWindowPos": "Allocates memory for a multiple-window- position structure and returns the handle to the structure.", "BringWindowToTop": "If the window is a top - level window, it is activated.", "BroadcastSystemMessage": "Sends a message to the specified recipients.", "BroadcastSystemMessageA": "Sends a message to the specified recipients.", "BroadcastSystemMessageExA": "Sends a message to the specified recipients.", "BroadcastSystemMessageExW": "Sends a message to the specified recipients.", "BroadcastSystemMessageW": "Sends a message to the specified recipients.", "CalculatePopupWindowPosition": "Calculates an appropriate pop-up window position using the specified anchor point, pop-up window size, flags, and the optional exclude rectangle.", "CallMsgFilterA": "Passes the specified message and hook code to the hook procedures associated with the WH_SYSMSGFILTER and WH_MSGFILTER hooks.", "CallMsgFilterW": "Passes the specified message and hook code to the hook procedures associated with the WH_SYSMSGFILTER and WH_MSGFILTER hooks.", "CallNextHookEx": "Passes the hook information to the next hook procedure in the current hook chain.", "CallWindowProcA": "Passes message information to the specified window procedure.", "CallWindowProcW": "Passes message information to the specified window procedure.", "CascadeWindows": "Cascades the specified child windows of the specified parent window.", "ChangeWindowMessageFilter": "Adds or removes a message from the User Interface Privilege Isolation message filter.", "ChangeWindowMessageFilterEx": "Modifies the User Interface Privilege Isolation message filter for a specified window.", "ChildWindowFromPoint": "The search is restricted to immediate child windows.", "ChildWindowFromPointEx": "Determines which, if any, of the child windows belonging to the specified parent window contains the specified point.", "CloseWindow": "Minimizes the specified window.", "CreateMDIWindowA": "Creates a multiple-document interface child window.", "CreateMDIWindowW": "Creates a multiple-document interface child window.", "CreateWindowA": "Creates an overlapped, pop-up, or child window.", "CreateWindowExA": "Creates an overlapped, pop-up, or child window with an extended window style; otherwise, this function is identical to the CreateWindow function.", "CreateWindowExW": "Creates an overlapped, pop-up, or child window with an extended window style; otherwise, this function is identical to the CreateWindow function.", "CreateWindowW": "Creates an overlapped, pop-up, or child window.", "DeferWindowPos": "Updates the specified multiple-window \u00ef\u00bf\u00bd position structure for the specified window.", "DefFrameProcA": "Provides default processing for any window messages that the window procedure of a multiple-document interface frame window does not process.", "DefFrameProcW": "Provides default processing for any window messages that the window procedure of a multiple-document interface frame window does not process.", "DefMDIChildProcA": "Provides default processing for any window message that the window procedure of a multiple-document interface child window does not process.", "DefMDIChildProcW": "Provides default processing for any window message that the window procedure of a multiple-document interface child window does not process.", "DefWindowProcA": "Calls the default window procedure to provide default processing for any window messages that an application does not process.", "DefWindowProcW": "Calls the default window procedure to provide default processing for any window messages that an application does not process.", "DeregisterShellHookWindow": "Unregisters a specified Shell window that is registered to receive Shell hook messages.", "DestroyWindow": "Destroys the specified window.", "DispatchMessage": "Dispatches a message to a window procedure.", "DispatchMessageA": "Dispatches a message to a window procedure.", "DispatchMessageW": "Dispatches a message to a window procedure.", "EndDeferWindowPos": "Simultaneously updates the position and size of one or more windows in a single screen-refreshing cycle.", "EndTask": "Forcibly closes the specified window.", "EnumChildWindows": "Enumerates the child windows that belong to the specified parent window by passing the handle to each child window, in turn, to an application-defined callback function.", "EnumPropsA": "Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function.", "EnumPropsExA": "Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function.", "EnumPropsExW": "Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function.", "EnumPropsW": "Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function.", "EnumThreadWindows": "Enumerates all nonchild windows associated with a thread by passing the handle to each window, in turn, to an application-defined callback function.", "EnumWindows": "EnumWindows continues until the last top - level window is enumerated or the callback function returns FALSE.", "FindWindowA": "This function does not search child windows.", "FindWindowExA": "The function searches child windows, beginning with the one following the specified child window.", "FindWindowExW": "The function searches child windows, beginning with the one following the specified child window.", "FindWindowW": "This function does not search child windows.", "GET_X_LPARAM": "Retrieves the signed x-coordinate from the specified LPARAM value.", "GET_Y_LPARAM": "Retrieves the signed y-coordinate from the given LPARAM value.", "GetAltTabInfoA": "Retrieves status information for the specified window if it is the application-switching window.", "GetAltTabInfoW": "Retrieves status information for the specified window if it is the application-switching window.", "GetAncestor": "Retrieves the handle to the ancestor of the specified window.", "GetClassInfoA": "Retrieves information about a window class.", "GetClassInfoExA": "Retrieves information about a window class, including a handle to the small icon associated with the window class.", "GetClassInfoExW": "Retrieves information about a window class, including a handle to the small icon associated with the window class.", "GetClassInfoW": "Retrieves information about a window class.", "GetClassLongA": "Retrieves the specified 32-bit value from the WNDCLASSEX structure associated with the specified window.", "GetClassLongPtrA": "Retrieves the specified value from the WNDCLASSEX structure associated with the specified window.", "GetClassLongPtrW": "Retrieves the specified value from the WNDCLASSEX structure associated with the specified window.", "GetClassLongW": "Retrieves the specified 32-bit value from the WNDCLASSEX structure associated with the specified window.", "GetClassName": "Retrieves the name of the class to which the specified window belongs.", "GetClassNameA": "Retrieves the name of the class to which the specified window belongs.", "GetClassNameW": "Retrieves the name of the class to which the specified window belongs.", "GetClassWord": "Retrieves the 16-bit value at the specified offset into the extra class memory for the window class to which the specified window belongs.", "GetClientRect": "Retrieves the coordinates of a window's client area.", "GetDesktopWindow": "Retrieves a handle to the desktop window.", "GetForegroundWindow": "Retrieves a handle to the foreground window.", "GetGUIThreadInfo": "Retrieves information about the active window or a specified GUI thread.", "GetInputState": "Determines whether there are mouse-button or keyboard messages in the calling thread's message queue.", "GetLastActivePopup": "Determines which pop-up window owned by the specified window was most recently active.", "GetLayeredWindowAttributes": "Retrieves the opacity and transparency color key of a layered window.", "GetMessage": "Retrieves a message from the calling thread 's message queue.", "GetMessageA": "Retrieves a message from the calling thread 's message queue.", "GetMessageExtraInfo": "Retrieves the extra message information for the current thread.", "GetMessagePos": "Retrieves the cursor position for the last message retrieved by the GetMessage function.", "GetMessageTime": "Retrieves the message time for the last message retrieved by the GetMessage function.", "GetMessageW": "Retrieves a message from the calling thread 's message queue.", "GetNextWindow": "The next window is below the specified window ; the previous window is above.", "GetParent": "Retrieves a handle to the specified window's parent or owner.", "GetProcessDefaultLayout": "Retrieves the default layout that is used when windows are created with no parent or owner.", "GetPropA": "Retrieves a data handle from the property list of the specified window.", "GetPropW": "Retrieves a data handle from the property list of the specified window.", "GetQueueStatus": "Retrieves the type of messages found in the calling thread's message queue.", "GetShellWindow": "Retrieves a handle to the Shell's desktop window.", "GetSysColor": "Retrieves the current color of the specified display element.", "GetSystemMetrics": "Retrieves the specified system metric or system configuration setting.", "GetTitleBarInfo": "Retrieves information about the specified title bar.", "GetTopWindow": "Examines the Z order of the child windows associated with the specified parent window and retrieves a handle to the child window at the top of the Z order.", "GetWindow": "Retrieves a handle to a window that has the specified relationship to the specified window.", "GetWindowDisplayAffinity": "Retrieves the current display affinity setting, from any process, for a given window.", "GetWindowInfo": "Retrieves information about the specified window.", "GetWindowLongA": "Retrieves information about the specified window.", "GetWindowLongPtrA": "Retrieves information about the specified window.", "GetWindowLongPtrW": "Retrieves information about the specified window.", "GetWindowLongW": "Retrieves information about the specified window.", "GetWindowModuleFileNameA": "Retrieves the full path and file name of the module associated with the specified window handle.", "GetWindowModuleFileNameW": "Retrieves the full path and file name of the module associated with the specified window handle.", "GetWindowPlacement": "Retrieves the show state and the restored, minimized, and maximized positions of the specified window.", "GetWindowRect": "The dimensions are given in screen coordinates that are relative to the upper - left corner of the screen.", "GetWindowTextA": "If the specified window is a control, the text of the control is copied.", "GetWindowTextLengthA": "Retrieves the length, in characters, of the specified window's title bar text.", "GetWindowTextLengthW": "Retrieves the length, in characters, of the specified window's title bar text.", "GetWindowTextW": "If the specified window is a control, the text of the control is copied.", "GetWindowThreadProcessId": "Retrieves the identifier of the thread that created the specified window and, optionally, the identifier of the process that created the window.", "HOOKPROC": "An application - defined or library - defined callback function used with the SetWindowsHookEx function.", "InSendMessage": "Determines whether the current window procedure is processing a message that was sent from another thread by a call to the SendMessage function.", "InSendMessageEx": "Determines whether the current window procedure is processing a message that was sent from another thread.", "InternalGetWindowText": "Copies the text of the specified window's title bar into a buffer.", "IsChild": "Determines whether a window is a child window or descendant window of a specified parent window.", "IsGUIThread": "Determines whether the calling thread is already a GUI thread.", "IsHungAppWindow": "Determines whether the system considers that a specified application is not responding.", "IsIconic": "Determines whether the specified window is minimized.", "IsProcessDPIAware": "IsProcessDPIAware may be altered or unavailable.", "IsWindow": "Determines whether the specified window handle identifies an existing window.", "IsWindowUnicode": "Determines whether the specified window is a native Unicode window.", "IsWindowVisible": "Determines the visibility state of the specified window.", "IsZoomed": "Determines whether a window is maximized.", "KillTimer": "Destroys the specified timer.", "LockSetForegroundWindow": "The foreground process can call the LockSetForegroundWindow function to disable calls to the SetForegroundWindow function.", "LogicalToPhysicalPoint": "Converts the logical coordinates of a point in a window to physical coordinates.", "MAKELPARAM": "Creates a value for use as an lParam parameter in a message.", "MAKELRESULT": "Creates a value for use as a return value from a window procedure.", "MAKEWPARAM": "Creates a value for use as a wParam parameter in a message.", "MoveWindow": "Changes the position and dimensions of the specified window.", "OpenIcon": "Restores a minimized window to its previous size and position; it then activates the window.", "PeekMessageA": "Dispatches incoming sent messages, checks the thread message queue for a posted message, and retrieves the message.", "PeekMessageW": "Dispatches incoming sent messages, checks the thread message queue for a posted message, and retrieves the message.", "PhysicalToLogicalPoint": "Converts the physical coordinates of a point in a window to logical coordinates.", "PostMessageA": "Places a message in the message queue associated with the thread that created the specified window and returns without waiting for the thread to process the message.", "PostMessageW": "Places a message in the message queue associated with the thread that created the specified window and returns without waiting for the thread to process the message.", "PostQuitMessage": "It is typically used in response to a WM_DESTROY message.", "PostThreadMessageA": "Posts a message to the message queue of the specified thread.", "PostThreadMessageW": "Posts a message to the message queue of the specified thread.", "PROPENUMPROCA": "An application-defined callback function used with the EnumProps function.", "PROPENUMPROCEXA": "Application-defined callback function used with the EnumPropsEx function.", "PROPENUMPROCEXW": "Application-defined callback function used with the EnumPropsEx function.", "PROPENUMPROCW": "An application-defined callback function used with the EnumProps function.", "RealChildWindowFromPoint": "The search is restricted to immediate child windows ; grandchildren and deeper descendant windows are not searched.", "RealGetWindowClassA": "Retrieves a string that specifies the window type.", "RealGetWindowClassW": "Retrieves a string that specifies the window type.", "RegisterClassA": "Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function.", "RegisterClassExA": "Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function.", "RegisterClassExW": "Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function.", "RegisterClassW": "Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function.", "RegisterShellHookWindow": "Registers a specified Shell window to receive certain messages for events or notifications that are useful to Shell applications.", "RegisterWindowMessageA": "The message value can be used when sending or posting messages.", "RegisterWindowMessageW": "The message value can be used when sending or posting messages.", "RemovePropA": "Removes an entry from the property list of the specified window.", "RemovePropW": "Removes an entry from the property list of the specified window.", "ReplyMessage": "Replies to a message sent from another thread by the SendMessage function.", "SENDASYNCPROC": "An application-defined callback function used with the SendMessageCallback function.", "SendMessage": "The SendMessage function calls the window procedure for the specified window and does not return until the window procedure has processed the message.", "SendMessageA": "The SendMessage function calls the window procedure for the specified window and does not return until the window procedure has processed the message.", "SendMessageCallbackA": "Sends the specified message to a window or windows.", "SendMessageCallbackW": "Sends the specified message to a window or windows.", "SendMessageTimeoutA": "Sends the specified message to one or more windows.", "SendMessageTimeoutW": "Sends the specified message to one or more windows.", "SendMessageW": "The SendMessage function calls the window procedure for the specified window and does not return until the window procedure has processed the message.", "SendNotifyMessageA": "Sends the specified message to a window or windows.", "SendNotifyMessageW": "Sends the specified message to a window or windows.", "SetClassLongA": "Replaces the specified 32-bit value at the specified offset into the extra class memory or the WNDCLASSEX structure for the class to which the specified window belongs.", "SetClassLongPtrA": "Replaces the specified value at the specified offset in the extra class memory or the WNDCLASSEX structure for the class to which the specified window belongs.", "SetClassLongPtrW": "Replaces the specified value at the specified offset in the extra class memory or the WNDCLASSEX structure for the class to which the specified window belongs.", "SetClassLongW": "Replaces the specified 32-bit value at the specified offset into the extra class memory or the WNDCLASSEX structure for the class to which the specified window belongs.", "SetClassWord": "Replaces the 16-bit value at the specified offset into the extra class memory for the window class to which the specified window belongs.", "SetCoalescableTimer": "Creates a timer with the specified time-out value and coalescing tolerance delay.", "SetForegroundWindow": "Brings the thread that created the specified window into the foreground and activates the window.", "SetLayeredWindowAttributes": "Sets the opacity and transparency color key of a layered window.", "SetMessageExtraInfo": "Sets the extra message information for the current thread.", "SetParent": "Changes the parent window of the specified child window.", "SetProcessDefaultLayout": "Changes the default layout when windows are created with no parent or owner only for the currently running process.", "SetProcessDPIAware": "SetProcessDPIAware may be altered or unavailable.", "SetPropA": "Adds a new entry or changes an existing entry in the property list of the specified window.", "SetPropW": "Adds a new entry or changes an existing entry in the property list of the specified window.", "SetSysColors": "Sets the colors for the specified display elements.", "SetTimer": "Creates a timer with the specified time-out value.", "SetWindowDisplayAffinity": "Stores the display affinity setting in kernel mode on the hWnd associated with the window.", "SetWindowLongA": "Changes an attribute of the specified window.", "SetWindowLongPtrA": "Changes an attribute of the specified window.", "SetWindowLongPtrW": "Changes an attribute of the specified window.", "SetWindowLongW": "Changes an attribute of the specified window.", "SetWindowPlacement": "Sets the show state and the restored, minimized, and maximized positions of the specified window.", "SetWindowPos": "The topmost window receives the highest rank and is the first window in the Z order.", "SetWindowsHookExA": "Installs an application-defined hook procedure into a hook chain.", "SetWindowsHookExW": "Installs an application-defined hook procedure into a hook chain.", "SetWindowTextA": "If the specified window is a control, the text of the control is changed.", "SetWindowTextW": "If the specified window is a control, the text of the control is changed.", "ShowOwnedPopups": "Shows or hides all pop-up windows owned by the specified window.", "ShowWindow": "Sets the specified window's show state.", "ShowWindowAsync": "Sets the show state of a window without waiting for the operation to complete.", "SoundSentry": "Triggers a visual signal to indicate that a sound is playing.", "SwitchToThisWindow": "Switches focus to the specified window and brings it to the foreground.", "SystemParametersInfoA": "Retrieves or sets the value of one of the system-wide parameters.", "SystemParametersInfoW": "Retrieves or sets the value of one of the system-wide parameters.", "TileWindows": "Tiles the specified child windows of the specified parent window.", "TIMERPROC": "TimerProc is a placeholder for the application - defined function name.", "TranslateMDISysAccel": "Processes accelerator keystrokes for window menu commands of the multiple-document interface child windows associated with the specified MDI client window.", "TranslateMessage": "Translates virtual - key messages into character messages.", "UnhookWindowsHookEx": "Removes a hook procedure installed in a hook chain by the SetWindowsHookEx function.", "UnregisterClassA": "Unregisters a window class, freeing the memory required for the class.", "UnregisterClassW": "Unregisters a window class, freeing the memory required for the class.", "UpdateLayeredWindow": "Updates the position, size, shape, content, and translucency of a layered window.", "WaitMessage": "The WaitMessage function suspends the thread and does not return until a new message is placed in the thread 's message queue.", "WindowFromPhysicalPoint": "Retrieves a handle to the window that contains the specified physical point.", "WindowFromPoint": "Retrieves a handle to the window that contains the specified point.", "WinMain": "The user-provided entry point for a graphical Windows-based application.", "WNDPROC": "A callback function, which you define in your application, that processes messages sent to a window."}