{"acceptFilePKCS7": "Accepts and processes a file that contains a PKCS", "acceptFilePKCS7WStr": "Accepts and processes a PKCS", "acceptFileResponse": "Accepts delivery of the credentials issued in response to an earlier call to createFileRequest, and it places the credentials in the appropriate store.", "acceptFileResponseWStr": "Accepts delivery of the credentials issued in response to an earlier call to createFileRequestWStr, and it places the credentials in the appropriate store.", "acceptPKCS7": "Accepts and processes a PKCS", "acceptPKCS7Blob": "Accepts and processes a PKCS", "acceptResponse": "Accepts delivery of the credentials issued in response to an earlier call to createRequest and places the credentials in the appropriate store.", "acceptResponseBlob": "Accepts delivery of the credentials issued in response to an earlier call to createRequestWStr and places the credentials in the appropriate store.", "AcceptSecurityContext": "Lets the server component of a transport application establish a security context between the server and a remote client.", "AccessCheck": "Determines whether the current client context is allowed to perform the specified operations.", "AccessCheck2": "Returns a value that specifies whether the principal represented by the current client context is allowed to perform the specified operation.", "AccessCheckAndAuditAlarmA": "Determines whether a security descriptor grants a specified set of access rights to the client being impersonated by the calling thread.", "AccessCheckAndAuditAlarmW": "Determines whether a security descriptor grants a specified set of access rights to the client being impersonated by the calling thread.", "AccessCheckByType": "Determines whether a security descriptor grants a specified set of access rights to the client identified by an access token.", "AccessCheckByTypeAndAuditAlarmA": "Determines whether a security descriptor grants a specified set of access rights to the client being impersonated by the calling thread.", "AccessCheckByTypeAndAuditAlarmW": "Determines whether a security descriptor grants a specified set of access rights to the client being impersonated by the calling thread.", "AccessCheckByTypeResultList": "Determines whether a security descriptor grants a specified set of access rights to the client identified by an access token.", "AccessCheckByTypeResultListAndAuditAlarmA": "Determines whether a security descriptor grants a specified set of access rights to the client being impersonated by the calling thread.", "AccessCheckByTypeResultListAndAuditAlarmByHandleA": "Determines whether a security descriptor grants a specified set of access rights to the client that the calling thread is impersonating.", "AccessCheckByTypeResultListAndAuditAlarmByHandleW": "Determines whether a security descriptor grants a specified set of access rights to the client that the calling thread is impersonating.", "AccessCheckByTypeResultListAndAuditAlarmW": "Determines whether a security descriptor grants a specified set of access rights to the client being impersonated by the calling thread.", "AcquireCredentialsHandleA": "The AcquireCredentialsHandle function acquires a handle to preexisting credentials of a security principal.", "AcquireCredentialsHandleW": "The AcquireCredentialsHandle function acquires a handle to preexisting credentials of a security principal.", "Add": "Adds an ICertSrvSetupKeyInformation object to the collection.", "AddAccessAllowedAce": "Adds an access-allowed access control entry.", "AddAccessAllowedAceEx": "Adds an access-allowed access control entry.", "AddAccessAllowedObjectAce": "Adds an access-allowed access control entry.", "AddAccessDeniedAce": "Adds an access-denied access control entry.", "AddAccessDeniedAceEx": "Adds an access-denied access control entry.", "AddAccessDeniedObjectAce": "Adds an access-denied access control entry.", "AddAce": "Adds one or more access control entries.", "AddApplicationGroups": "Adds the specified array of existing IAzApplicationGroup objects to the client context object.", "AddAppMember": "Adds the specified IAzApplicationGroup object to the list of application groups that belong to this role.", "AddAppNonMember": "Adds the specified IAzApplicationGroup object to the list of application groups that are refused membership in this application group.", "addAttributeToRequest": "Adds an attribute to the certificate request.", "addAttributeToRequestWStr": "Adds an attribute to the certificate request.", "AddAuditAccessAce": "Adds a system-audit access control entry is audited.", "AddAuditAccessAceEx": "Adds a system-audit access control entry.", "AddAuditAccessObjectAce": "Adds a system-audit access control entry.", "AddAuthenticatedAttributesToPKCS7Request": "The AddAuthenticatedAttributesToPKCS7Request method adds authenticated attributes to a PKCS", "AddAvailableCsps": "Adds the providers installed on the computer to the collection.", "AddAvailableSmimeCapabilities": "Adds ISmimeCapability objects to the collection by identifying the encryption algorithms supported by the default RSA cryptographic provider.", "addBlobPropertyToCertificate": "Adds a BLOB property to a certificate.", "addBlobPropertyToCertificateWStr": "The IEnroll4::addBlobPropertyToCertificateWStr method adds a BLOB property to a certificate.", "AddCertificate": "Add an endorsement key certificate to the key storage provider that supports endorsement keys.", "addCertTypeToRequest": "Adds a certificate template to a request.", "addCertTypeToRequestEx": "Adds a certificate template to a request.", "AddCertTypeToRequestWStr": "Adds a certificate template to a request.", "AddCertTypeToRequestWStrEx": "Adds a certificate template to a request.", "AddConditionalAce": "Adds a conditional access control entry.", "AddConnectNotify": "Called before and after each add connection operation.", "AddDelegatedPolicyUser": "Adds the specified security identifier in text form to the list of principals that act as delegated policy users.", "AddDelegatedPolicyUserName": "Adds the specified account name to the list of principals that act as delegated policy users.", "AddEnrollmentServer": "Saves certificate enrollment server access credentials in the credential cache.", "AddExtensionsToRequest": "The AddExtensionsToRequest method adds extensions to the certificate request.", "addExtensionToRequest": "The ICEnroll4::addExtensionToRequest method adds an extension to the request.", "addExtensionToRequestWStr": "Adds an extension to the request.", "AddFromCsp": "Adds objects to the collection by identifying the encryption algorithms supported by a specific cryptographic provider.", "AddInterface": "Adds the specified interface to the list of IDispatch interfaces that can be called by business rule scripts.", "AddInterfaces": "Adds the specified interfaces to the list of IDispatch interfaces that can be called by business rule scripts.", "AddMandatoryAce": "Adds a SYSTEM_MANDATORY_LABEL_ACE access control entry.", "AddMember": "Adds the specified security identifier in text form to the list of Windows accounts that belong to the role.", "AddMemberName": "Adds the specified account name to the list of accounts that belong to the role.", "addNameValuePairToRequest": "Adds an unauthenticated name-value string pair to the request.", "addNameValuePairToRequestWStr": "Adds an unauthenticated name-value string pair to the request.", "addNameValuePairToSignature": "Adds the authenticated name-value pair of an attribute to the request.", "AddNameValuePairToSignatureWStr": "Adds the authenticated name-value pair of an attribute to the request.", "AddNonMember": "Adds the specified security identifier in text form to the list of accounts that are refused membership in the application group.", "AddNonMemberName": "Adds the specified account name to the list of accounts that are refused membership in the application group.", "AddOperation": "Adds the IAzOperation object with the specified name to the task.", "AddParameter": "Adds a parameter to the list of parameters available to business rule scripts.", "AddParameters": "Adds parameters to the list of parameters available to business rule scripts.", "AddPolicyAdministrator": "The AddPolicyAdministrator method of IAzScope adds the specified security identifier in text form to the list of principals that act as policy administrators.", "AddPolicyAdministratorName": "The AddPolicyAdministratorName method of IAzScope adds the specified account name to the list of principals that act as policy administrators.", "AddPolicyReader": "The AddPolicyReader method of IAzScope adds the specified security identifier in text form to the list of principals that act as policy readers.", "AddPolicyReaderName": "The AddPolicyReaderName method of IAzScope adds the specified account name to the list of principals that act as policy readers.", "AddPolicyServer": "Registers a certificate enrollment policy server and saves CEP access credentials in the credential cache.", "AddPropertyItem": "Adds the specified entity to the specified list.", "AddRange": "Adds a range of IX509Extension objects to the collection.", "AddResourceAttributeAce": "Adds a SYSTEM_RESOURCE_ATTRIBUTE_ACEaccess control entry.", "AddRoleDefinition": "Adds the specified IAzRoleDefinition object to this IAzRoleDefinition object.", "AddRoles": "Adds the specified array of existing IAzRole objects to the client context.", "AddScopedPolicyIDAce": "Adds a SYSTEM_SCOPED_POLICY_ID_ACEaccess control entry.", "AddSecurityPackageA": "Adds a security support provider to the list of providers supported by Microsoft Negotiate.", "AddSecurityPackageW": "Adds a security support provider to the list of providers supported by Microsoft Negotiate.", "AddStringSids": "Adds an array of string representations of security identifiers to the client context.", "AddTask": "Adds the IAzTask object with the specified name to the task.", "AddToCache": "Caches the specified identity in the registry.", "AdjustTokenGroups": "Enables or disables groups already present in the specified access token.", "AdjustTokenPrivileges": "Enables or disables privileges in the specified access token.", "Advise": "Allows a calling application to specify the list of identity events for which the application is to be notified.", "AllocateAndInitializeSid": "Allocates and initializes a security identifier with up to eight subauthorities.", "AllocateLocallyUniqueId": "Allocates a locally unique identifier.", "AppendText": "Appends a string to the status information contained in the Text property.", "ApplyControlToken": "Provides a way to apply a control token to a security context.", "AreAllAccessesGranted": "Checks whether a set of requested access rights has been granted.", "AreAnyAccessesGranted": "Tests whether any of a set of requested access rights has been granted.", "AssociateIdentity": "Associates an identity with a local user account.", "AuditComputeEffectivePolicyBySid": "Computes the effective audit policy for one or more subcategories for the specified security principal.", "AuditComputeEffectivePolicyByToken": "Computes the effective audit policy for one or more subcategories for the security principal associated with the specified token.", "AuditEnumerateCategories": "Enumerates the available audit-policy categories.", "AuditEnumeratePerUserPolicy": "Enumerates users for whom per-user auditing policy is specified.", "AuditEnumerateSubCategories": "Enumerates the available audit-policy subcategories.", "AuditFree": "Frees the memory allocated by audit functions for the specified buffer.", "AuditLookupCategoryGuidFromCategoryId": "Retrieves a GUID structure that represents the specified audit-policy category.", "AuditLookupCategoryIdFromCategoryGuid": "Retrieves an element of the POLICY_AUDIT_EVENT_TYPE enumeration that represents the specified audit-policy category.", "AuditLookupCategoryNameA": "Retrieves the display name of the specified audit-policy category.", "AuditLookupCategoryNameW": "Retrieves the display name of the specified audit-policy category.", "AuditLookupSubCategoryNameA": "Retrieves the display name of the specified audit-policy subcategory.", "AuditLookupSubCategoryNameW": "Retrieves the display name of the specified audit-policy subcategory.", "AuditQueryGlobalSaclA": "Retrieves a global system access control list that delegates access to the audit messages.", "AuditQueryGlobalSaclW": "Retrieves a global system access control list that delegates access to the audit messages.", "AuditQueryPerUserPolicy": "Retrieves per-user audit policy in one or more audit-policy subcategories for the specified principal.", "AuditQuerySecurity": "Retrieves security descriptor that delegates access to audit policy.", "AuditQuerySystemPolicy": "Retrieves system audit policy for one or more audit-policy subcategories.", "AuditSetGlobalSaclA": "Sets a global system access control list that delegates access to the audit messages.", "AuditSetGlobalSaclW": "Sets a global system access control list that delegates access to the audit messages.", "AuditSetPerUserPolicy": "Sets per-user audit policy in one or more audit subcategories for the specified principal.", "AuditSetSecurity": "Sets a security descriptor that delegates access to audit policy.", "AuditSetSystemPolicy": "Sets system audit policy for one or more audit-policy subcategories.", "AuthzAccessCheck": "Determines which access bits can be granted to a client for a given set of security descriptors.", "AuthzAddSidsToContext": "Creates a copy of an existing context and appends a given set of security identifiers and restricted SIDs.", "AuthzCachedAccessCheck": "Performs a fast access check based on a cached handle containing the static granted bits from a previous AuthzAccessCheck call.", "AuthzEnumerateSecurityEventSources": "Retrieves the registered security event sources that are not installed by default.", "AuthzFreeAuditEvent": "Frees the structure allocated by the AuthzInitializeObjectAccessAuditEvent function.", "AuthzFreeCentralAccessPolicyCache": "Decreases the CAP cache reference count by one so that the CAP cache can be deallocated.", "AuthzFreeContext": "Frees all structures and memory associated with the client context.", "AuthzFreeHandle": "Finds and deletes a handle from the handle list.", "AuthzFreeResourceManager": "Frees a resource manager object.", "AuthzGetInformationFromContext": "Returns information about an Authz context.", "AuthzInitializeCompoundContext": "Creates a user-mode context from the given user and device security contexts.", "AuthzInitializeContextFromAuthzContext": "Creates a new client context based on an existing client context.", "AuthzInitializeContextFromSid": "Creates a user-mode client context from a user security identifier.", "AuthzInitializeContextFromToken": "Initializes a client authorization context from a kernel token.", "AuthzInitializeObjectAccessAuditEvent": "Initializes auditing for an object.", "AuthzInitializeObjectAccessAuditEvent2": "Allocates and initializes an AUTHZ_AUDIT_EVENT_HANDLE handle for use with the AuthzAccessCheck function.", "AuthzInitializeRemoteResourceManager": "Allocates and initializes a remote resource manager.", "AuthzInitializeResourceManager": "Uses Authz to verify that clients have access to various resources.", "AuthzInitializeResourceManagerEx": "Allocates and initializes a resource manager structure.", "AuthzInstallSecurityEventSource": "Installs the specified source as a security event source.", "AuthzModifyClaims": "Adds, deletes, or modifies user and device claims in the Authz client context.", "AuthzModifySecurityAttributes": "Modifies the security attribute information in the specified client context.", "AuthzModifySids": "Adds, deletes, or modifies user and device groups in the Authz client context.", "AuthzOpenObjectAudit": "Reads the system access control list of the specified security descriptor and generates any appropriate audits specified by that SACL.", "AuthzRegisterCapChangeNotification": "Registers a CAP update notification callback.", "AuthzRegisterSecurityEventSource": "Registers a security event source with the Local Security Authority.", "AuthzReportSecurityEvent": "Generates a security audit for a registered security event source.", "AuthzReportSecurityEventFromParams": "Generates a security audit for a registered security event source by using the specified array of audit parameters.", "AuthzSetAppContainerInformation": "Sets the app container and capability information in a current Authz context.", "AuthzUninstallSecurityEventSource": "Removes the specified source from the list of valid security event sources.", "AuthzUnregisterCapChangeNotification": "Removes a previously registered CAP update notification callback.", "AuthzUnregisterSecurityEventSource": "Unregisters a security event source with the Local Security Authority.", "BCRYPT_INIT_AUTH_MODE_INFO": "Initializes a BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO structure for use in calls to BCryptEncrypt and BCryptDecrypt functions.", "BCryptAddContextFunction": "Adds a cryptographic function to the list of functions that are supported by an existing CNG context.", "BCryptCloseAlgorithmProvider": "Closes an algorithm provider.", "BCryptConfigureContext": "Sets the configuration information for an existing CNG context.", "BCryptConfigureContextFunction": "Sets the configuration information for the cryptographic function of an existing CNG context.", "BCryptCreateContext": "Creates a new CNG configuration context.", "BCryptCreateHash": "Called to create a hash or Message Authentication Code object.", "BCryptCreateMultiHash": "The BCryptCreateMultiHash function creates a multi-hash state that allows for the parallel computation of multiple hash operations.", "BCryptDecrypt": "Decrypts a block of data.", "BCryptDeleteContext": "Deletes an existing CNG configuration context.", "BCryptDeriveKey": "Derives a key from a secret agreement value.", "BCryptDeriveKeyCapi": "Derives a key from a hash value.", "BCryptDeriveKeyPBKDF2": "Derives a key from a hash value by using the PBKDF2 key derivation algorithm as defined by RFC 2898.", "BCryptDestroyHash": "Destroys a hash or Message Authentication Code object.", "BCryptDestroyKey": "Destroys a key.", "BCryptDestroySecret": "Destroys a secret agreement handle that was created by using the BCryptSecretAgreement function.", "BCryptDuplicateHash": "Duplicates an existing hash or Message Authentication Code object.", "BCryptDuplicateKey": "Creates a duplicate of a symmetric key.", "BCryptEncrypt": "Encrypts a block of data.", "BCryptEnumAlgorithms": "Gets a list of the registered algorithm identifiers.", "BCryptEnumContextFunctionProviders": "Obtains the providers for the cryptographic functions for a context in the specified configuration table.", "BCryptEnumContextFunctions": "Obtains the cryptographic functions for a context in the specified configuration table.", "BCryptEnumContexts": "Obtains the identifiers of the contexts in the specified configuration table.", "BCryptEnumProviders": "Obtains all of the CNG providers that support a specified algorithm.", "BCryptEnumRegisteredProviders": "Retrieves information about the registered providers.", "BCryptExportKey": "Exports a key to a memory BLOB that can be persisted for later use.", "BCryptFinalizeKeyPair": "Completes a public/private key pair.", "BCryptFinishHash": "Retrieves the hash or Message Authentication Code value for the data accumulated from prior calls to BCryptHashData.", "BCryptFreeBuffer": "Used to free memory that was allocated by one of the CNG functions.", "BCryptGenerateKeyPair": "Creates an empty public/private key pair.", "BCryptGenerateSymmetricKey": "Creates a key object for use with a symmetrical key encryption algorithm from a supplied key.", "BCryptGenRandom": "Generates a random number.", "BCryptGetFipsAlgorithmMode": "Determines whether Federal Information Processing Standard compliance is enabled.", "BCryptGetProperty": "Retrieves the value of a named property for a CNG object.", "BCryptHash": "Performs a single hash computation.", "BCryptHashData": "Performs a one way hash or Message Authentication Code on a data buffer.", "BCryptImportKey": "Imports a symmetric key from a key BLOB.", "BCryptImportKeyPair": "Imports a public/private key pair from a key BLOB.", "BCryptKeyDerivation": "Derives a key without requiring a secret agreement.", "BCryptOpenAlgorithmProvider": "Loads and initializes a CNG provider.", "BCryptProcessMultiOperations": "The BCryptProcessMultiOperations function processes a sequence of operations on a multi-object state.", "BCryptQueryContextConfiguration": "Retrieves the current configuration for the specified CNG context.", "BCryptQueryContextFunctionConfiguration": "Obtains the cryptographic function configuration information for an existing CNG context.", "BCryptQueryContextFunctionProperty": "Obtains the value of a named property for a cryptographic function in an existing CNG context.", "BCryptQueryProviderRegistration": "Retrieves information about a CNG provider.", "BCryptRegisterConfigChangeNotify": "Creates a user mode CNG configuration change event handler.", "BCryptRemoveContextFunction": "Removes a cryptographic function from the list of functions that are supported by an existing CNG context.", "BCryptResolveProviders": "Obtains a collection of all of the providers that meet the specified criteria.", "BCryptSecretAgreement": "Creates a secret agreement value from a private and a public key.", "BCryptSetContextFunctionProperty": "Sets the value of a named property for a cryptographic function in an existing CNG context.", "BCryptSetProperty": "Sets the value of a named property for a CNG object.", "BCryptSignHash": "Creates a signature of a hash value.", "BCryptUnregisterConfigChangeNotify": "Removes a user mode CNG configuration change event handler that was created by using the BCryptRegisterConfigChangeNotify function.", "BCryptVerifySignature": "Verifies that the specified signature matches the specified hash.", "binaryBlobToString": "Converts a binary data BLOB to a string.", "binaryToString": "Converts a binary data BLOB to a string.", "BizruleGroupSupported": "Returns a Boolean value that specifies whether this IAzAuthorizationStore3 object supports application groups that use business rule scripts.", "BuildExplicitAccessWithNameA": "Initializes an EXPLICIT_ACCESS structure with data specified by the caller.", "BuildExplicitAccessWithNameW": "Initializes an EXPLICIT_ACCESS structure with data specified by the caller.", "BuildSecurityDescriptorA": "Allocates and initializes a new security descriptor.", "BuildSecurityDescriptorW": "Allocates and initializes a new security descriptor.", "BuildTrusteeWithNameA": "Initializes a TRUSTEE structure.", "BuildTrusteeWithNameW": "Initializes a TRUSTEE structure.", "BuildTrusteeWithObjectsAndNameA": "Initializes a TRUSTEE structure with the object-specific access control entry information and initializes the remaining members of the structure to default values.", "BuildTrusteeWithObjectsAndNameW": "Initializes a TRUSTEE structure with the object-specific access control entry information and initializes the remaining members of the structure to default values.", "BuildTrusteeWithObjectsAndSidA": "Initializes a TRUSTEE structure with the object-specific access control entry information and initializes the remaining members of the structure to default values.", "BuildTrusteeWithObjectsAndSidW": "Initializes a TRUSTEE structure with the object-specific access control entry information and initializes the remaining members of the structure to default values.", "BuildTrusteeWithSidA": "Initializes a TRUSTEE structure.", "BuildTrusteeWithSidW": "Initializes a TRUSTEE structure.", "CAImportPFX": "Imports a certification authority certificate and its associated private key into the local computer store.", "CancelConnectNotify": "Calls CancelConnectNotify before and after each cancel connection operation.", "CertAddCertificateContextToStore": "Adds a certificate context to the certificate store.", "CertAddCertificateLinkToStore": "Adds a link in a certificate store to a certificate context in a different store.", "CertAddCRLContextToStore": "Adds a certificate revocation list context to the specified certificate store.", "CertAddCRLLinkToStore": "Adds a link in a store to a certificate revocation list context in a different store.", "CertAddCTLContextToStore": "Adds a certificate trust list context to a certificate store.", "CertAddCTLLinkToStore": "The CertAddCTLLinkToStore function adds a link in a store to a certificate trust list context in a different store.", "CertAddEncodedCertificateToStore": "Creates a certificate context from an encoded certificate and adds it to the certificate store.", "CertAddEncodedCertificateToSystemStoreA": "Opens the specified system store and adds the encoded certificate to it.", "CertAddEncodedCertificateToSystemStoreW": "Opens the specified system store and adds the encoded certificate to it.", "CertAddEncodedCRLToStore": "Creates a certificate revocation list context from an encoded CRL and adds it to the certificate store.", "CertAddEncodedCTLToStore": "Creates a certificate trust list context from an encoded CTL and adds it to the certificate store.", "CertAddEnhancedKeyUsageIdentifier": "The CertAddEnhancedKeyUsageIdentifier function adds a usage identifier object identifier extended property of the certificate.", "CertAddRefServerOcspResponse": "Increments the reference count for an HCERT_SERVER_OCSP_RESPONSE handle.", "CertAddRefServerOcspResponseContext": "Increments the reference count for a CERT_SERVER_OCSP_RESPONSE_CONTEXT structure.", "CertAddSerializedElementToStore": "Adds a serialized certificate, certificate revocation list element to the store.", "CertAddStoreToCollection": "The CertAddStoreToCollection function adds a sibling certificate store to a collection certificate store.", "CertAlgIdToOID": "Converts a CryptoAPI algorithm identifier string.", "CertCloseServerOcspResponse": "Closes an online certificate status protocol server response handle.", "CertCloseStore": "Closes a certificate store handle and reduces the reference count on the store.", "CertCompareCertificate": "Determines whether two certificates are identical by comparing the issuer name and serial number of the certificates.", "CertCompareCertificateName": "The CertCompareCertificateName function compares two certificate CERT_NAME_BLOB structures to determine whether they are identical.", "CertCompareIntegerBlob": "The CertCompareIntegerBlob function compares two integer BLOBs to determine whether they represent equal numeric values.", "CertComparePublicKeyInfo": "The CertComparePublicKeyInfo function compares two encoded public keys to determine whether they are identical.", "CertControlStore": "Allows an application to be notified when there is a difference between the contents of a cached store in use and the contents of that store as it is persisted to storage.", "CertCreateCertificateChainEngine": "The CertCreateCertificateChainEngine function creates a new, nondefault chain engine for an application.", "CertCreateCertificateContext": "Creates a certificate context from an encoded certificate.", "CertCreateContext": "Creates the specified context from the encoded bytes.", "CertCreateCRLContext": "The CertCreateCRLContext function creates a certificate revocation list context from an encoded CRL.", "CertCreateCTLContext": "The CertCreateCTLContext function creates a certificate trust list context from an encoded CTL.", "CertCreateCTLEntryFromCertificateContextProperties": "The CertCreateCTLEntryFromCertificateContextProperties function creates a certificate trust list entry whose attributes are the properties of the certificate context.", "CertCreateSelfSignCertificate": "Builds a self-signed certificate and returns a pointer to a CERT_CONTEXT structure that represents the certificate.", "CertDeleteCertificateFromStore": "The CertDeleteCertificateFromStore function deletes the specified certificate context from the certificate store.", "CertDeleteCRLFromStore": "The CertDeleteCRLFromStore function deletes the specified certificate revocation list context from the certificate store.", "CertDeleteCTLFromStore": "The CertDeleteCTLFromStore function deletes the specified certificate trust list context from a certificate store.", "CertDuplicateCertificateChain": "The CertDuplicateCertificateChain function duplicates a pointer to a certificate chain by incrementing the chain's reference count.", "CertDuplicateCertificateContext": "Duplicates a certificate context by incrementing its reference count.", "CertDuplicateCRLContext": "The CertDuplicateCRLContext function duplicates a certificate revocation list context by incrementing its reference count.", "CertDuplicateCTLContext": "The CertDuplicateCTLContext function duplicates a certificate trust list context by incrementing its reference count.", "CertDuplicateStore": "Duplicates a store handle by incrementing the store's reference count.", "CertEnumCertificateContextProperties": "The CertEnumCertificateContextProperties function retrieves the first or next extended property associated with a certificate context.", "CertEnumCertificatesInStore": "Retrieves the first or next certificate in a certificate store.", "CertEnumCRLContextProperties": "The CertEnumCRLContextProperties function retrieves the first or next extended property associated with a certificate revocation list context.", "CertEnumCRLsInStore": "The CertEnumCRLsInStore function retrieves the first or next certificate revocation list context in a certificate store.", "CertEnumCTLContextProperties": "The CertEnumCTLContextProperties function retrieves the first or next extended property associated with a certificate trust list context.", "CertEnumCTLsInStore": "The CertEnumCTLsInStore function retrieves the first or next certificate trust list context in a certificate store.", "CertEnumPhysicalStore": "The CertEnumPhysicalStore function retrieves the physical stores on a computer.", "CertEnumSubjectInSortedCTL": "Retrieves the first or next TrustedSubject in a sorted certificate trust list.", "CertEnumSystemStore": "The CertEnumSystemStore function retrieves the system stores available.", "CertEnumSystemStoreLocation": "The CertEnumSystemStoreLocation function retrieves all of the system store locations.", "CertFindAttribute": "The CertFindAttribute function finds the first attribute in the CRYPT_ATTRIBUTE array, as identified by its object identifier.", "CertFindCertificateInCRL": "The CertFindCertificateInCRL function searches the certificate revocation list for the specified certificate.", "CertFindCertificateInStore": "Finds the first or next certificate context in a certificate store that matches a search criteria established by the dwFindType and its associated pvFindPara.", "CertFindChainInStore": "Finds the first or next certificate in a store that meets the specified criteria.", "CertFindCRLInStore": "Finds the first or next certificate revocation list context in a certificate store that matches a search criterion established by the dwFindType parameter and the associated pvFindPara parameter.", "CertFindCTLInStore": "Finds the first or next certificate trust list context that matches search criteria established by the dwFindType and its associated pvFindPara.", "CertFindExtension": "The CertFindExtension function finds the first extension in the CERT_EXTENSION array, as identified by its object identifier.", "CertFindRDNAttr": "The CertFindRDNAttr function finds the first RDN attribute identified by its object identifier.", "CertFindSubjectInCTL": "The CertFindSubjectInCTL function attempts to find the specified subject in a certificate trust list.", "CertFindSubjectInSortedCTL": "The CertFindSubjectInSortedCTL function attempts to find the specified subject in a sorted certificate trust list.", "CertFreeCertificateChain": "The CertFreeCertificateChain function frees a certificate chain by reducing its reference count.", "CertFreeCertificateChainEngine": "The CertFreeCertificateChainEngine function frees a certificate trust engine.", "CertFreeCertificateChainList": "Frees the array of pointers to chain contexts.", "CertFreeCertificateContext": "Frees a certificate context by decrementing its reference count.", "CertFreeCRLContext": "Frees a certificate revocation list context by decrementing its reference count.", "CertFreeCTLContext": "Frees a certificate trust list context by decrementing its reference count.", "CertFreeServerOcspResponseContext": "Decrements the reference count for a CERT_SERVER_OCSP_RESPONSE_CONTEXT structure.", "CertGetCertificateChain": "Builds a certificate chain context starting from an end certificate and going back, if possible, to a trusted root certificate.", "CertGetCertificateContextProperty": "Retrieves the information contained in an extended property of a certificate context.", "CertGetCRLContextProperty": "Gets an extended property for the specified certificate revocation list context.", "CertGetCRLFromStore": "Gets the first or next certificate revocation list context from the certificate store for the specified issuer.", "CertGetCTLContextProperty": "Retrieves an extended property of a certificate trust list context.", "CertGetEnhancedKeyUsage": "Returns information from the enhanced key usage extension or the EKU extended property of a certificate.", "CertGetIntendedKeyUsage": "Acquires the intended key usage bytes from a certificate.", "CertGetIssuerCertificateFromStore": "Retrieves the certificate context from the certificate store for the first or next issuer of the specified subject certificate.", "CertGetNameStringA": "Obtains the subject or issuer name from a certificate CERT_CONTEXT structure and converts it to a null-terminated character string.", "CertGetNameStringW": "Obtains the subject or issuer name from a certificate CERT_CONTEXT structure and converts it to a null-terminated character string.", "CertGetPublicKeyLength": "The CertGetPublicKeyLength function acquires the bit length of public/private keys from a public key BLOB.", "CertGetServerOcspResponseContext": "Retrieves a non-blocking, time valid online certificate status protocol response context for the specified handle.", "CertGetStoreProperty": "Retrieves a store property.", "CertGetSubjectCertificateFromStore": "Returns from a certificate store a subject certificate context uniquely identified by its issuer and serial number.", "CertGetValidUsages": "Returns an array of usages that consist of the intersection of the valid usages for all certificates in an array of certificates.", "CertIsRDNAttrsInCertificateName": "The CertIsRDNAttrsInCertificateName function compares the attributes in the certificate name with the specified CERT_RDN to determine whether all attributes are included there.", "CertIsStrongHashToSign": "Determines whether the specified hash algorithm and the public key in the signing certificate can be used to perform strong signing.", "CertIsValidCRLForCertificate": "The CertIsValidCRLForCertificate function checks a CRL to find out if it is a CRL that would include a specific certificate if that certificate were revoked.", "CertModifyCertificatesToTrust": "Modifies the set of certificates in a certificate trust list for a given purpose.", "CertNameToStrA": "Converts an encoded name in a CERT_NAME_BLOB structure to a null-terminated character string.", "CertNameToStrW": "Converts an encoded name in a CERT_NAME_BLOB structure to a null-terminated character string.", "CertOIDToAlgId": "Use the CryptFindOIDInfo function instead of this function because ALG_ID identifiers are no longer supported in CNG.", "CertOpenServerOcspResponse": "Opens a handle to an online certificate status protocol response associated with a server certificate chain.", "CertOpenStore": "Opens a certificate store by using a specified store provider type.", "CertOpenSystemStoreA": "Opens the most common system certificate store.", "CertOpenSystemStoreW": "Opens the most common system certificate store.", "CertRDNValueToStrA": "The CertRDNValueToStr function converts a name in a CERT_RDN_VALUE_BLOB to a null-terminated character string.", "CertRDNValueToStrW": "The CertRDNValueToStr function converts a name in a CERT_RDN_VALUE_BLOB to a null-terminated character string.", "CertRegisterPhysicalStore": "Adds a physical store to a registry system store collection.", "CertRegisterSystemStore": "Registers a system store.", "CertRemoveEnhancedKeyUsageIdentifier": "The CertRemoveEnhancedKeyUsageIdentifier function removes a usage identifier object identifier extended property of the certificate.", "CertRemoveStoreFromCollection": "Removes a sibling certificate store from a collection store.", "CertResyncCertificateChainEngine": "Resyncs the certificate chain engine, which resynchronizes the stores the store's engine and updates the engine caches.", "CertRetrieveLogoOrBiometricInfo": "Performs a URL retrieval of logo or biometric information specified in either the szOID_LOGOTYPE_EXT or szOID_BIOMETRIC_EXT certificate extension.", "CertSaveStore": "Saves the certificate store to a file or to a memory BLOB.", "CertSelectCertificateA": "Presents a dialog box that allows the user to select certificates from a set of certificates that match the given criteria.", "CertSelectCertificateChains": "Retrieves certificate chains based on specified selection criteria.", "CertSelectCertificateW": "Presents a dialog box that allows the user to select certificates from a set of certificates that match the given criteria.", "CertSelectionGetSerializedBlob": "A helper function used to retrieve a serialized certificate BLOB from a CERT_SELECTUI_INPUT structure.", "CertSerializeCertificateStoreElement": "The CertSerializeCertificateStoreElement function serializes a certificate context 's encoded certificate and its encoded properties.", "CertSerializeCRLStoreElement": "The CertSerializeCRLStoreElement function serializes an encoded certificate revocation list context and the encoded representation of its properties.", "CertSerializeCTLStoreElement": "The CertSerializeCTLStoreElement function serializes an encoded certificate trust list context and the encoded representation of its properties.", "CertSetCertificateContextPropertiesFromCTLEntry": "Sets the properties on the certificate context by using the attributes in the specified certificate trust list entry.", "CertSetCertificateContextProperty": "Sets an extended property for a specified certificate context.", "CertSetCRLContextProperty": "Sets an extended property for the specified certificate revocation list context.", "CertSetCTLContextProperty": "Sets an extended property for the specified certificate trust list context.", "CertSetEnhancedKeyUsage": "The CertSetEnhancedKeyUsage function sets the enhanced key usage property for the certificate.", "CertSetStoreProperty": "The CertSetStoreProperty function sets a store property.", "CertSrvBackupClose": "Closes the file opened by the CertSrvBackupOpenFile function.", "CertSrvBackupEnd": "Ends a Certificate Services backup session.", "CertSrvBackupFree": "Used to free memory allocated from certain Certificate Services Backup APIs.", "CertSrvBackupGetBackupLogsW": "Retrieves the list of Certificate Services log file names that need to be backed up for the given backup context.", "CertSrvBackupGetDatabaseNamesW": "Retrieves the list of Certificate Services database file names that need to be backed up for the given backup context.", "CertSrvBackupGetDynamicFileListW": "Retrieves the list of Certificate Services dynamic file names that need to be backed up for the given backup context.", "CertSrvBackupOpenFileW": "Opens a file for backup.", "CertSrvBackupPrepareW": "Used to prepare a Certificate Services server for backup operations.", "CertSrvBackupRead": "Reads bytes from a Certificate Services file.", "CertSrvBackupTruncateLogs": "Eliminates redundant records and reduces the disk storage space used by log files.", "CertSrvIsServerOnlineW": "Determines if a Certificate Services server is online; if the Certificate Services server is not online, backup operations will not be successful.", "CertSrvRestoreEnd": "Ends a Certificate Services restore session.", "CertSrvRestoreGetDatabaseLocationsW": "Used both in backup and restore scenarios and retrieves the list of Certificate Services database location names for all the files being backed up or restored.", "CertSrvRestorePrepareW": "Prepares a Certificate Services instance for restore operations.", "CertSrvRestoreRegisterComplete": "Completes a registered Certificate Services restore operation.", "CertSrvRestoreRegisterThroughFile": "Registers a Certificate Services restore.", "CertSrvRestoreRegisterW": "Registers a Certificate Services restore.", "CertSrvServerControlW": "Issues a service control command to programmatically stop Certificate Services.", "CertStrToNameA": "Converts a null-terminated X.500 string to an encoded certificate name.", "CertStrToNameW": "Converts a null-terminated X.500 string to an encoded certificate name.", "CertUnregisterPhysicalStore": "The CertUnregisterPhysicalStore function removes a physical store from a specified system store collection.", "CertUnregisterSystemStore": "The CertUnregisterSystemStore function unregisters a specified system store.", "CertVerifyCertificateChainPolicy": "Checks a certificate chain to verify its validity, including its compliance with any specified validity policy criteria.", "CertVerifyCRLRevocation": "Check a certificate revocation list to determine whether a subject's certificate has or has not been revoked.", "CertVerifyCRLTimeValidity": "The CertVerifyCRLTimeValidity function verifies the time validity of a CRL.", "CertVerifyCTLUsage": "Verifies that a subject is trusted for a specified usage by finding a signed and time-valid certificate trust list with the usage identifiers that contain the subject.", "CertVerifyRevocation": "Checks the revocation status of the certificates contained in the rgpvContext array.", "CertVerifySubjectCertificateContext": "The CertVerifySubjectCertificateContext function performs the enabled verification checks on a certificate by checking the validity of the certificate 's issuer.", "CertVerifyTimeValidity": "The CertVerifyTimeValidity function verifies the time validity of a certificate.", "CertVerifyValidityNesting": "The CertVerifyValidityNesting function verifies that a subject certificate's time validity nests correctly within its issuer's time validity.", "CertViewPropertiesA": "The CertViewProperties function displays the properties for a certificate in a user interface dialog box.", "CertViewPropertiesW": "The CertViewProperties function displays the properties for a certificate in a user interface dialog box.", "ChangeAccountPasswordA": "Changes the password for a Windows domain account by using the specified Security Support Provider.", "ChangeAccountPasswordW": "Changes the password for a Windows domain account by using the specified Security Support Provider.", "ChangeCredential": "Changes the credentials associated with the specified identity.", "ChangeServiceConfig2A": "Changes the optional configuration parameters of a service.", "ChangeServiceConfig2W": "Changes the optional configuration parameters of a service.", "CheckCertificateSignature": "Verifies the certificate signature.", "CheckPublicKeySignature": "Verifies the certificate signature by using the public key of the signing certificate.", "CheckSignature": "Verifies that the certificate request has been signed and that the signature is valid.", "CheckTokenCapability": "Checks the capabilities of a given token.", "CheckTokenMembership": "Determines whether a specified security identifier is enabled in an access token.", "CheckTokenMembershipEx": "Determines whether the specified SID is enabled in the specified token.", "Clear": "Removes all IX509PolicyServerUrl objects from the collection.", "Clone": "Creates a copy of the extension-enumeration sequence.", "Close": "Releases the handle of the cryptographic service provider.", "CloseApplication": "Unloads a specified IAzApplication object from the cache.", "CloseHandle": "The CloseHandle method closes a handle opened during a previous call to ISceSvcAttachmentData::Initialize.", "CloseServiceHandle": "Closes a handle to a service control manager or service object.", "Commit": "Deletes a template from or saves it to Active Directory.", "CompleteAuthToken": "Completes an authentication token.", "ComputeEffectivePermissionWithSecondarySecurity": "Computes the effective permissions by using the secondary security for an object.", "ComputeKeyIdentifier": "Creates an identifier from a 160-bit SHA-1 hash of the public key.", "ComputeSiteCosts": "Is not currently used.", "Configure": "Displays the module user interface.", "ConnectIdentity": "Connects an identity to a domain user.", "ControlService": "Sends a control code to a service.", "ControlServiceExA": "Sends a control code to a service.", "ControlServiceExW": "Sends a control code to a service.", "ConvertSecurityDescriptorToStringSecurityDescriptorA": "Converts a security descriptor to a string format.", "ConvertSecurityDescriptorToStringSecurityDescriptorW": "Converts a security descriptor to a string format.", "ConvertSidToStringSidA": "Converts a security identifier to a string format suitable for display, storage, or transmission.", "ConvertSidToStringSidW": "Converts a security identifier to a string format suitable for display, storage, or transmission.", "ConvertStringSecurityDescriptorToSecurityDescriptorA": "Converts a string-format security descriptor into a valid, functional security descriptor.", "ConvertStringSecurityDescriptorToSecurityDescriptorW": "Converts a string-format security descriptor into a valid, functional security descriptor.", "ConvertStringSidToSidA": "Converts a string-format security identifier into a valid, functional SID.", "ConvertStringSidToSidW": "Converts a string-format security identifier into a valid, functional SID.", "ConvertToAutoInheritPrivateObjectSecurity": "Converts a security descriptor and its access control lists.", "ConvertToSid": "Retrieves the security identifier associated with the specified identity and identity provider.", "CopySid": "Copies a security identifier to a buffer.", "Create": "Creates an asymmetric private key.", "CreateApplication": "Creates an IAzApplication object with the specified name.", "CreateApplication2": "Creates an IAzApplication2 object by using the specified name.", "CreateApplicationGroup": "Creates an IAzApplicationGroup object with the specified name.", "CreateCAConfiguration": "Creates a new certification authority configuration and adds it to the configuration set.", "createFilePFX": "Saves the accepted certificate chain and private key in a file in Personal Information Exchange format.", "createFilePFXWStr": "Saves the accepted certificate chain and private key in a file in Personal Information Exchange format.", "createFilePKCS10": "Creates a base64-encoded PKCS", "createFilePKCS10WStr": "Creates a base64-encoded PKCS", "createFileRequest": "Creates a PKCS", "createFileRequestWStr": "Creates a PKCS", "CreateObject": "Creates an IX509EnrollmentHelper object on a webpage.", "CreateOperation": "Creates an IAzOperation object with the specified name.", "createPFX": "Saves the accepted certificate chain and private key in a Personal Information Exchange format string. The PFX format is also known as PKCS", "CreatePFX": "Creates a Personal Information Exchange message.", "createPFXWStr": "Saves the accepted certificate chain and private key in a Personal Information Exchange format string. The PFX format is also known as PKCS", "createPKCS10": "Creates a base64-encoded PKCS", "createPKCS10WStr": "Creates a base64-encoded PKCS", "CreatePKCS7RequestFromRequest": "The CreatePKCS7RequestFromRequest method creates a PKCS", "CreatePrivateObjectSecurity": "Allocates and initializes a self-relative security descriptor for a new private object.", "CreatePrivateObjectSecurityEx": "Allocates and initializes a self-relative security descriptor for a new private object created by the resource manager calling this function.", "CreatePrivateObjectSecurityWithMultipleInheritance": "Allocates and initializes a self-relative security descriptor for a new private object created by the resource manager calling this function.", "CreateProperty": "Creates a new property and adds it to a property set.", "createRequest": "Creates a PKCS", "CreateRequest": "Retrieves an encoded certificate request.", "CreateRequestMessage": "Create a PKCS10 request message with a challenge password.", "createRequestWStr": "Creates a PKCS", "CreateRestrictedToken": "Creates a new access token that is a restricted version of an existing access token.", "CreateRetrieveCertificateMessage": "Retrieve a previously issued certificate.", "CreateRetrievePendingMessage": "Create a message for certificate polling.", "CreateRole": "Creates an IAzRole object with the specified name.", "CreateRoleAssignment": "Creates a new IAzRoleAssignment object with the specified name in this scope.", "CreateRoleDefinition": "Creates a new IAzRoleDefinition object with the specified name in this scope.", "CreateScope": "Creates an IAzScope object with the specified name.", "CreateScope2": "Creates a new IAzScope2 object with the specified name.", "CreateSecurityPage": "Creates a basic security property page that enables the user to view and edit the access rights allowed or denied by the access control entries.", "CreateTask": "Creates an IAzTask object with the specified name.", "CreateVirtualSmartCard": "Creates a TPM virtual smart card with the given parameters.", "CreateWellKnownSid": "Creates a SID for predefined aliases.", "CredDeleteA": "Deletes a credential from the user's credential set.", "CredDeleteW": "Deletes a credential from the user's credential set.", "CredEnumerateA": "Enumerates the credentials from the user's credential set.", "CredEnumerateW": "Enumerates the credentials from the user's credential set.", "CredFindBestCredentialA": "Searches the Credentials Management database for the set of generic credentials that are associated with the current logon session and that best match the specified target resource.", "CredFindBestCredentialW": "Searches the Credentials Management database for the set of generic credentials that are associated with the current logon session and that best match the specified target resource.", "CredFree": "The CredFree function frees a buffer returned by any of the credentials management functions.", "CredFreeCredentialsFn": "Frees memory used to store credentials used by a security package.", "CredGetSessionTypes": "The CredGetSessionTypes function returns the maximum persistence supported by the current logon session.", "CredGetTargetInfoA": "The CredGetTargetInfo function retrieves all known target name information for the named target computer.", "CredGetTargetInfoW": "The CredGetTargetInfo function retrieves all known target name information for the named target computer.", "CredIsMarshaledCredentialA": "Determines whether a specified user name string is a marshaled credential previously marshaled by CredMarshalCredential.", "CredIsMarshaledCredentialW": "Determines whether a specified user name string is a marshaled credential previously marshaled by CredMarshalCredential.", "CredIsProtectedA": "Specifies whether the specified credentials are encrypted by a previous call to the CredProtect function.", "CredIsProtectedW": "Specifies whether the specified credentials are encrypted by a previous call to the CredProtect function.", "CrediUnmarshalandDecodeStringFn": "Transforms a marshaled string back into its original form, and decrypts the unmarshaled string.", "CredMarshalCredentialA": "The CredMarshalCredential function transforms a credential into a text string.", "CredMarshalCredentialW": "The CredMarshalCredential function transforms a credential into a text string.", "CredMarshalTargetInfo": "Serializes the specified target into an array of byte values.", "CredPackAuthenticationBufferA": "Converts a string user name and password into an authentication buffer.", "CredPackAuthenticationBufferW": "Converts a string user name and password into an authentication buffer.", "CredProtectA": "Encrypts the specified credentials so that only the current security context can decrypt them.", "CredProtectW": "Encrypts the specified credentials so that only the current security context can decrypt them.", "CredReadA": "Reads a credential from the user's credential set.", "CredReadDomainCredentialsA": "Reads the domain credentials from the user's credential set.", "CredReadDomainCredentialsFn": "Reads a domain credential from the Credential Manager.", "CredReadDomainCredentialsW": "Reads the domain credentials from the user's credential set.", "CredReadFn": "Reads a credential from the Credential Manager.", "CredReadW": "Reads a credential from the user's credential set.", "CredRenameA": "CredRename is no longer supported.", "CredRenameW": "CredRename is no longer supported.", "CredUICmdLinePromptForCredentialsA": "Prompts for and accepts credential information from a user working in a command-line application.", "CredUICmdLinePromptForCredentialsW": "Prompts for and accepts credential information from a user working in a command-line application.", "CredUIConfirmCredentialsA": "Is called after CredUIPromptForCredentials or CredUICmdLinePromptForCredentials, to confirm the validity of the credential harvested.", "CredUIConfirmCredentialsW": "Is called after CredUIPromptForCredentials or CredUICmdLinePromptForCredentials, to confirm the validity of the credential harvested.", "CredUIParseUserNameA": "The CredUIParseUserName function extracts the domain and user account name from a fully qualified user name.", "CredUIParseUserNameW": "The CredUIParseUserName function extracts the domain and user account name from a fully qualified user name.", "CredUIPromptForCredentialsA": "Creates and displays a configurable dialog box that accepts credentials information from a user.", "CredUIPromptForWindowsCredentialsA": "Creates and displays a configurable dialog box that allows users to supply credential information by using any credential provider installed on the local computer.", "CredUIPromptForWindowsCredentialsW": "Creates and displays a configurable dialog box that allows users to supply credential information by using any credential provider installed on the local computer.", "CredUIReadSSOCredW": "The CredUIReadSSOCredW function retrieves the user name for a single logon credential.", "CredUIStoreSSOCredW": "The CredUIStoreSSOCredW function stores a single logon credential.", "CredUnmarshalCredentialA": "The CredUnmarshalCredential function transforms a marshaled credential back into its original form.", "CredUnmarshalCredentialW": "The CredUnmarshalCredential function transforms a marshaled credential back into its original form.", "CredUnPackAuthenticationBufferA": "Converts an authentication buffer returned by a call to the CredUIPromptForWindowsCredentials function into a string user name and password.", "CredUnPackAuthenticationBufferW": "Converts an authentication buffer returned by a call to the CredUIPromptForWindowsCredentials function into a string user name and password.", "CredUnprotectA": "Decrypts credentials that were previously encrypted by using the CredProtect function.", "CredUnprotectW": "Decrypts credentials that were previously encrypted by using the CredProtect function.", "CredWriteA": "Creates a new credential or modifies an existing credential in the user's credential set.", "CredWriteDomainCredentialsA": "Writes domain credentials to the user's credential set.", "CredWriteDomainCredentialsW": "Writes domain credentials to the user's credential set.", "CredWriteFn": "Writes the specified credential to the Credential Manager.", "CredWriteW": "Creates a new credential or modifies an existing credential in the user's credential set.", "CryptAcquireCertificatePrivateKey": "Obtains the private key for a certificate.", "CryptAcquireContextA": "Used to acquire a handle to a particular key container within a particular cryptographic service provider.", "CryptAcquireContextW": "Used to acquire a handle to a particular key container within a particular cryptographic service provider.", "CryptBinaryToStringA": "Converts an array of bytes into a formatted string.", "CryptBinaryToStringW": "Converts an array of bytes into a formatted string.", "CryptCATAdminAcquireContext": "Acquires a handle to a catalog administrator context.", "CryptCATAdminAcquireContext2": "Acquires a handle to a catalog administrator context for a given hash algorithm and hash policy.", "CryptCATAdminAddCatalog": "Adds a catalog to the catalog database.", "CryptCATAdminCalcHashFromFileHandle": "Calculates the hash for a file.", "CryptCATAdminCalcHashFromFileHandle2": "Calculates the hash for a file by using the specified algorithm.", "CryptCATAdminEnumCatalogFromHash": "Enumerates the catalogs that contain a specified hash.", "CryptCATAdminReleaseCatalogContext": "Releases a handle to a catalog context previously returned by the CryptCATAdminAddCatalog function.", "CryptCATAdminReleaseContext": "Releases the handle previously assigned by the CryptCATAdminAcquireContext function.", "CryptCATAdminRemoveCatalog": "Deletes a catalog file and removes that catalog's entry from the Windows catalog database.", "CryptCATAdminResolveCatalogPath": "Retrieves the fully qualified path of the specified catalog.", "CryptCATCatalogInfoFromContext": "Retrieves catalog information from a specified catalog context.", "CryptCATCDFClose": "Closes a catalog definition file and frees the memory for the corresponding CRYPTCATCDF structure.", "CryptCATCDFEnumCatAttributes": "Enumerates catalog-level attributes within the CatalogHeader section of a catalog definition file.", "CryptCATCDFOpen": "Opens an existing catalog definition file for reading and initializes a CRYPTCATCDF structure.", "CryptCATClose": "Closes a catalog handle opened previously by the CryptCATOpen function.", "CryptCATEnumerateAttr": "Enumerates the attributes associated with a member of a catalog.", "CryptCATEnumerateCatAttr": "Enumerates the attributes associated with a catalog.", "CryptCATEnumerateMember": "Enumerates the members of a catalog.", "CryptCATGetAttrInfo": "Retrieves information about an attribute of a member of a catalog.", "CryptCATGetMemberInfo": "Retrieves member information from the catalog 's PKCS", "CryptCATHandleFromStore": "Retrieves a catalog handle from memory.", "CryptCATOpen": "Opens a catalog and returns a context handle to the open catalog.", "CryptCATPersistStore": "Saves the information in the specified catalog store to an unsigned catalog file.", "CryptCATPutAttrInfo": "Allocates memory for an attribute and adds it to a catalog member.", "CryptCATPutCatAttrInfo": "Allocates memory for a catalog file attribute and adds it to the catalog.", "CryptCATPutMemberInfo": "Allocates memory for a catalog member and adds it to the catalog.", "CryptCATStoreFromHandle": "Retrieves a CRYPTCATSTORE structure from a catalog handle.", "CryptContextAddRef": "Adds one to the reference count of an HCRYPTPROV cryptographic service provider handle.", "CryptCreateHash": "Initiates the hashing of a stream of data.", "CryptCreateKeyIdentifierFromCSP": "Important\u00c2\u00a0\u00c2\u00a0This API is deprecated.", "CryptDecodeMessage": "Decodes, decrypts, and verifies a cryptographic message.", "CryptDecodeObject": "The CryptDecodeObject function decodes a structure of the type indicated by the lpszStructType parameter.", "CryptDecodeObjectEx": "Decodes a structure of the type indicated by the lpszStructType parameter.", "CryptDecrypt": "Decrypts data previously encrypted by using the CryptEncrypt function.", "CryptDecryptAndVerifyMessageSignature": "The CryptDecryptAndVerifyMessageSignature function decrypts a message and verifies its signature.", "CryptDecryptMessage": "The CryptDecryptMessage function decodes and decrypts a message.", "CryptDeriveKey": "Generates cryptographic session keys derived from a base data value.", "CryptDestroyHash": "Destroys the hash object referenced by the hHash parameter.", "CryptDestroyKey": "Releases the handle referenced by the hKey parameter.", "CryptDuplicateHash": "Makes an exact copy of a hash to the point when the duplication is done.", "CryptDuplicateKey": "Makes an exact copy of a key and the state of the key.", "CryptEncodeObject": "The CryptEncodeObject function encodes a structure of the type indicated by the value of the lpszStructType parameter.", "CryptEncodeObjectEx": "Encodes a structure of the type indicated by the value of the lpszStructType parameter.", "CryptEncrypt": "Encrypts data.", "CryptEncryptMessage": "The CryptEncryptMessage function encrypts and encodes a message.", "CryptEnumKeyIdentifierProperties": "The CryptEnumKeyIdentifierProperties function enumerates key identifiers and their properties.", "CryptEnumOIDFunction": "The CryptEnumOIDFunction function enumerates the registered object identifier functions.", "CryptEnumOIDInfo": "Enumerates predefined and registered object identifier CRYPT_OID_INFO structures.", "CryptEnumProvidersA": "Important\u00c2\u00a0\u00c2\u00a0This API is deprecated.", "CryptEnumProvidersW": "Important\u00c2\u00a0\u00c2\u00a0This API is deprecated.", "CryptEnumProviderTypesA": "Retrieves the first or next types of cryptographic service provider supported on the computer.", "CryptEnumProviderTypesW": "Retrieves the first or next types of cryptographic service provider supported on the computer.", "CryptExportKey": "Exports a cryptographic key or a key pair from a cryptographic service provider in a secure manner.", "CryptExportPKCS8": "Exports the private key in PKCS", "CryptExportPKCS8Ex": "Exports the private key in PKCS", "CryptExportPublicKeyInfo": "The CryptExportPublicKeyInfo function exports the public key information associated with the corresponding private key of the provider.", "CryptExportPublicKeyInfoEx": "Exports the public key information associated with the provider's corresponding private key.", "CryptExportPublicKeyInfoFromBCryptKeyHandle": "Exports the public key information associated with a provider's corresponding private key.", "CryptFindCertificateKeyProvInfo": "Enumerates the cryptographic providers and their containers to find the private key that corresponds to the certificate's public key.", "CryptFindLocalizedName": "Finds the localized name for the specified name, such as the localize name of the \"Root\" system store.", "CryptFindOIDInfo": "Retrieves the first predefined or registered CRYPT_OID_INFO structure that matches a specified key type and key.", "CryptFormatObject": "The CryptFormatObject function formats the encoded data and returns a Unicode string in the allocated buffer according to the certificate encoding type.", "CryptFreeOIDFunctionAddress": "The CryptFreeOIDFunctionAddress function releases a handle returned by CryptGetOIDFunctionAddress or CryptGetDefaultOIDFunctionAddress by decrementing the reference count on the function handle.", "CryptGenKey": "Generates a random cryptographic session key or a public / private key pair.", "CryptGenRandom": "Fills a buffer with cryptographically random bytes.", "CryptGetDefaultOIDDllList": "The CryptGetDefaultOIDDllList function acquires the list of the names of DLL files that contain registered default object identifier functions for a specified function set and encoding type.", "CryptGetDefaultOIDFunctionAddress": "The CryptGetDefaultOIDFunctionAddress function loads the DLL that contains a default function address.", "CryptGetDefaultProviderA": "Finds the default cryptographic service provider of a specified provider type for the local computer or current user.", "CryptGetDefaultProviderW": "Finds the default cryptographic service provider of a specified provider type for the local computer or current user.", "CryptGetHashParam": "Retrieves data that governs the operations of a hash object.", "CryptGetKeyIdentifierProperty": "The CryptGetKeyIdentifierProperty acquires a specific property from a specified key identifier.", "CryptGetKeyParam": "Retrieves data that governs the operations of a key.", "CryptGetMessageCertificates": "The CryptGetMessageCertificates function returns the handle of an open certificate store containing the message 's certificates and CRLs.", "CryptGetMessageSignerCount": "The CryptGetMessageSignerCount function returns the number of signers of a signed message.", "CryptGetObjectUrl": "Acquires the URL of the remote object from a certificate, certificate trust list.", "CryptGetOIDFunctionAddress": "Searches the list of registered and installed functions for an encoding type and object identifier match.", "CryptGetOIDFunctionValue": "The CryptGetOIDFunctionValue function queries a value associated with an OID.", "CryptGetProvParam": "Retrieves parameters that govern the operations of a cryptographic service provider.", "CryptGetTimeValidObject": "Retrieves a CRL, an OCSP response, or CTL object that is valid within a given context and time.", "CryptGetUserKey": "Retrieves a handle of one of a user's two public/private key pairs.", "CryptHashCertificate": "The CryptHashCertificate function hashes the entire encoded content of a certificate including its signature.", "CryptHashCertificate2": "Hashes a block of data by using a CNG hash provider.", "CryptHashData": "Adds data to a specified hash object.", "CryptHashMessage": "Creates a hash of the message.", "CryptHashPublicKeyInfo": "Encodes the public key information in a CERT_PUBLIC_KEY_INFO structure and computes the hash of the encoded bytes.", "CryptHashSessionKey": "Computes the cryptographic hash of a session key object.", "CryptHashToBeSigned": "Important\u00c2\u00a0\u00c2\u00a0This API is deprecated.", "CryptImportKey": "Transfers a cryptographic key from a key BLOB into a cryptographic service provider.", "CryptImportPKCS8": "Imports the private key in PKCS", "CryptImportPublicKeyInfo": "Converts and imports the public key information into the provider and returns a handle of the public key.", "CryptImportPublicKeyInfoEx": "Important\u00c2\u00a0\u00c2\u00a0This API is deprecated.", "CryptImportPublicKeyInfoEx2": "Imports a public key into the CNG asymmetric provider that corresponds to the public key object identifier and returns a CNG handle to the key.", "CryptInitOIDFunctionSet": "The CryptInitOIDFunctionSet initializes and returns the handle of the OID function set identified by a supplied function set name.", "CryptInstallDefaultContext": "Installs a specific provider to be the default context provider for the specified algorithm.", "CryptInstallOIDFunctionAddress": "The CryptInstallOIDFunctionAddress function installs a set of callable object identifier function addresses.", "CryptMemAlloc": "The CryptMemAlloc function allocates memory for a buffer.", "CryptMemFree": "The CryptMemFree function frees memory allocated by CryptMemAlloc or CryptMemRealloc.", "CryptMemRealloc": "The CryptMemRealloc function frees the memory currently allocated for a buffer and allocates memory for a new buffer.", "CryptMsgCalculateEncodedLength": "Calculates the maximum number of bytes needed for an encoded cryptographic message given the message type, encoding parameters, and total length of the data to be encoded.", "CryptMsgClose": "The CryptMsgClose function closes a cryptographic message handle.", "CryptMsgControl": "Performs a control operation after a message has been decoded by a final call to the CryptMsgUpdate function.", "CryptMsgCountersign": "Countersigns an existing signature in a message.", "CryptMsgCountersignEncoded": "Countersigns an existing PKCS", "CryptMsgDuplicate": "The CryptMsgDuplicate function duplicates a cryptographic message handle by incrementing its reference count.", "CryptMsgEncodeAndSignCTL": "The CryptMsgEncodeAndSignCTL function encodes a CTL and creates a signed message containing the encoded CTL.This function first encodes the CTL pointed to by pCtlInfo and then calls CryptMsgSignCTL to sign the encoded message.", "CryptMsgGetAndVerifySigner": "The CryptMsgGetAndVerifySigner function verifies a cryptographic message's signature.", "CryptMsgGetParam": "Acquires a message parameter after a cryptographic message has been encoded or decoded.", "CryptMsgOpenToDecode": "Opens a cryptographic message for decoding and returns a handle of the opened message.", "CryptMsgOpenToEncode": "Opens a cryptographic message for encoding and returns a handle of the opened message.", "CryptMsgSignCTL": "The CryptMsgSignCTL function creates a signed message containing an encoded CTL.", "CryptMsgUpdate": "Adds contents to a cryptographic message.", "CryptMsgVerifyCountersignatureEncoded": "Verifies a countersignature in terms of the SignerInfo structure ( as defined by PKCS", "CryptMsgVerifyCountersignatureEncodedEx": "Verifies that the pbSignerInfoCounterSignature parameter contains the encrypted hash of the encryptedDigest field of the pbSignerInfo parameter structure.", "CryptProtectData": "Performs encryption on the data in a DATA_BLOB structure.", "CryptProtectMemory": "encrypts memory to prevent others from viewing sensitive information in your process.", "CryptQueryObject": "Retrieves information about the contents of a cryptography API object, such as a certificate, a certificate revocation list, or a certificate trust list.", "CryptRegisterDefaultOIDFunction": "The CryptRegisterDefaultOIDFunction registers a DLL containing the default function to be called for the specified encoding type and function name.", "CryptRegisterOIDFunction": "Registers a DLL that contains the function to be called for the specified encoding type, function name, and object identifier.", "CryptRegisterOIDInfo": "The CryptRegisterOIDInfo function registers the OID information specified in the CRYPT_OID_INFO structure, persisting it to the registry.", "CryptReleaseContext": "Releases the handle of a cryptographic service provider and a key container.", "CryptRetrieveObjectByUrlA": "Retrieves the public key infrastructure object from a location specified by a URL.", "CryptRetrieveObjectByUrlW": "Retrieves the public key infrastructure object from a location specified by a URL.", "CryptRetrieveTimeStamp": "Encodes a time stamp request and retrieves the time stamp token from a location specified by a URL to a Time Stamping Authority.", "CryptSetHashParam": "Customizes the operations of a hash object, including setting up initial hash contents and selecting a specific hashing algorithm.", "CryptSetKeyIdentifierProperty": "The CryptSetKeyIdentifierProperty function sets the property of a specified key identifier.", "CryptSetKeyParam": "Customizes various aspects of a session key's operations.", "CryptSetOIDFunctionValue": "The CryptSetOIDFunctionValue function sets a value for the specified encoding type, function name, OID, and value name.", "CryptSetProviderA": "Specifies the current user's default cryptographic service provider.", "CryptSetProviderExA": "Specifies the default cryptographic service provider of a specified provider type for the local computer or current user.", "CryptSetProviderExW": "Specifies the default cryptographic service provider of a specified provider type for the local computer or current user.", "CryptSetProviderW": "Specifies the current user's default cryptographic service provider.", "CryptSetProvParam": "Customizes the operations of a cryptographic service provider.", "CryptSignAndEncodeCertificate": "Encodes and signs a certificate, certificate revocation list, or certificate request.", "CryptSignAndEncryptMessage": "The CryptSignAndEncryptMessage function creates a hash of the specified content, signs the hash, encrypts the content, hashes the encrypted contents and the signed hash, and then encodes both the encrypted content and the signed hash.", "CryptSignCertificate": "The CryptSignCertificate function signs the \"to be signed\" information in the encoded signed content.", "CryptSignHashA": "Signs data.", "CryptSignHashW": "Signs data.", "CryptSignMessage": "The CryptSignMessage function creates a hash of the specified content, signs the hash, and then encodes both the original message content and the signed hash.", "CryptSignMessageWithKey": "Signs a message by using a CSP's private key specified in the parameters.", "CryptSIPAddProvider": "The CryptSIPAddProvider function registers functions that are exported by a given DLL file that implements a Subject Interface Package.", "CryptSIPCreateIndirectData": "Returns a SIP_INDIRECT_DATA structure that contains a hash of the supplied SIP_SUBJECTINFO structure, the digest algorithm, and an encoding attribute.", "CryptSIPGetCaps": "Retrieves the capabilities of a subject interface package.", "CryptSIPGetSignedDataMsg": "Retrieves an Authenticode signature from the file.", "CryptSIPLoad": "Loads the dynamic-link library and assigns appropriate library export functions to a SIP_DISPATCH_INFO structure.", "CryptSIPPutSignedDataMsg": "Stores an Authenticode signature in the target file.", "CryptSIPRemoveProvider": "Removes registry details of a Subject Interface Package DLL file added by a previous call to the CryptSIPAddProvider function.", "CryptSIPRemoveSignedDataMsg": "Removes a specified Authenticode signature.", "CryptSIPRetrieveSubjectGuid": "Retrieves a GUID based on the header information in a specified file.", "CryptSIPRetrieveSubjectGuidForCatalogFile": "Retrieves the subject GUID associated with the specified file.", "CryptSIPVerifyIndirectData": "Validates the indirect hashed data against the supplied subject.", "CryptStringToBinaryA": "Converts a formatted string into an array of bytes.", "CryptStringToBinaryW": "Converts a formatted string into an array of bytes.", "CryptUIDlgCertMgr": "Displays a dialog box that allows the user to manage certificates.", "CryptUIDlgSelectCertificateFromStore": "Displays a dialog box that allows the selection of a certificate from a specified store.", "CryptUIDlgViewCertificateA": "Presents a dialog box that displays a specified certificate.", "CryptUIDlgViewCertificateW": "Presents a dialog box that displays a specified certificate.", "CryptUIDlgViewContext": "Displays a certificate, CTL, or CRL context.", "CryptUIWizDigitalSign": "Digitally signs a document or BLOB.", "CryptUIWizExport": "Exports a certificate, a certificate trust list, or a certificate store to a file.", "CryptUIWizFreeDigitalSignContext": "Frees the CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT structure allocated by the CryptUIWizDigitalSign function.", "CryptUIWizImport": "Imports a certificate, a certificate trust list, or a certificate store to a certificate store.", "CryptUninstallDefaultContext": "Important\u00c2\u00a0\u00c2\u00a0This API is deprecated.", "CryptUnprotectData": "Decrypts and does an integrity check of the data in a DATA_BLOB structure.", "CryptUnprotectMemory": "Decrypts memory that was encrypted using the CryptProtectMemory function.", "CryptUnregisterDefaultOIDFunction": "The CryptUnregisterDefaultOIDFunction removes the registration of a DLL containing the default function to be called for the specified encoding type and function name.", "CryptUnregisterOIDFunction": "Removes the registration of a DLL that contains the function to be called for the specified encoding type, function name, and OID.", "CryptUnregisterOIDInfo": "The CryptUnregisterOIDInfo function removes the registration of a specified CRYPT_OID_INFO OID information structure.", "CryptUpdateProtectedState": "Migrates the current user's master keys after the user's security identifier has changed.", "CryptVerifyCertificateSignature": "Verifies the signature of a certificate, certificate revocation list, or certificate request by using the public key in a CERT_PUBLIC_KEY_INFO structure.", "CryptVerifyCertificateSignatureEx": "Verifies the signature of a subject certificate, certificate revocation list, certificate request, or keygen request by using the issuer's public key.", "CryptVerifyDetachedMessageHash": "The CryptVerifyDetachedMessageHash function verifies a detached hash.", "CryptVerifyDetachedMessageSignature": "The CryptVerifyDetachedMessageSignature function verifies a signed message containing a detached signature or signatures.", "CryptVerifyMessageHash": "The CryptVerifyMessageHash function verifies the hash of specified content.", "CryptVerifyMessageSignature": "Verifies a signed message's signature.", "CryptVerifyMessageSignatureWithKey": "Verifies a signed message's signature by using specified public key information.", "CryptVerifySignatureA": "Verifies the signature of a hash object.", "CryptVerifySignatureW": "Verifies the signature of a hash object.", "CryptVerifyTimeStampSignature": "Validates the time stamp signature on a specified array of bytes.", "CryptXmlAddObject": "Adds the Object element to the Signature in the Document Context opened for encoding.", "CryptXmlClose": "Closes a cryptographic XML object handle.", "CryptXmlCreateReference": "Creates a reference to an XML signature.", "CryptXmlDigestReference": "Is used by an application to digest the resolved reference.", "CryptXmlDllCloseDigest": "Frees the CRYPT_XML_DIGEST allocated by the CryptXmlDllCreateDigest function.", "CryptXmlDllCreateDigest": "Creates a digest object for the specified method.", "CryptXmlDllCreateKey": "Parses the KeyValue element and creates a Cryptography API:_Next Generation BCrypt key handle to verify a signature.", "CryptXmlDllDigestData": "Puts data into the digest.", "CryptXmlDllEncodeAlgorithm": "Encodes SignatureMethod or DigestMethod elements for agile algorithms with default parameters.", "CryptXmlDllEncodeKeyValue": "Encodes a KeyValue element.", "CryptXmlDllFinalizeDigest": "Retrieves the digest value.", "CryptXmlDllGetAlgorithmInfo": "Decodes the XML algorithm and returns information about the algorithm.", "CryptXmlDllGetInterface": "Retrieves a pointer to the cryptographic extension functions for the specified algorithm.", "CryptXmlDllSignData": "Signs data.", "CryptXmlDllVerifySignature": "Verifies a signature.", "CryptXmlEncode": "Encodes signature data by using the supplied XML writer callback function.", "CryptXmlGetAlgorithmInfo": "Decodes the CRYPT_XML_ALGORITHM structure and returns information about the algorithm.", "CryptXmlGetDocContext": "Returns the document context specified by the supplied handle.", "CryptXmlGetReference": "Returns the Reference element specified by the supplied handle.", "CryptXmlGetSignature": "Returns an XML Signature element.", "CryptXmlGetStatus": "Returns a CRYPT_XML_STATUS structure that contains status information about the object specified by the supplied handle.", "CryptXmlGetTransforms": "Returns information about the default transform chain engine.", "CryptXmlImportPublicKey": "Imports the public key specified by the supplied handle.", "CryptXmlOpenToDecode": "Opens an XML digital signature to decode and returns the handle of the document context that encapsulates a CRYPT_XML_SIGNATURE structure.", "CryptXmlOpenToEncode": "Opens an XML digital signature to encode and returns a handle of the opened Signature element.", "CryptXmlSetHMACSecret": "Sets the HMAC secret on the handle before calling the CryptXmlSign or CryptXmlVerify function.", "CryptXmlSign": "Creates a cryptographic signature of a SignedInfo element.", "CryptXmlVerifySignature": "Performs a cryptographic signature validation of a SignedInfo element.", "DdqCancelDiagnosticRecordOperation": "Cancels all outstanding Diagnostic Data Query API internal query operations for this session.", "DdqCloseSession": "Closes a Diagnostic Data Query session handle.", "DdqCreateSession": "Creates a Diagnostic Data Query API session handle to be used to uniquely identify a Diagnostic Data Query session.", "DdqExtractDiagnosticReport": "Used for retrieving Windows Error Reporting reports, this API extracts cabs to destination path specified.", "DdqFreeDiagnosticRecordLocaleTags": "Frees memory allocated for tag information referenced by HDIAGNOSTIC_EVENT_TAG_DESCRIPTION handle.", "DdqFreeDiagnosticRecordPage": "Frees memory allocated for the diagnostic record page referenced by HDIAGNOSTIC_RECORD handle.", "DdqFreeDiagnosticRecordProducerCategories": "Frees memory allocated for set of categories and the text representation of the categories referenced by HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION handle.", "DdqFreeDiagnosticRecordProducers": "Frees memory allocated for the set of producers referenced by HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION handle.", "DdqFreeDiagnosticReport": "Frees memory allocated for error reports referenced by HDIAGNOSTIC_REPORT_DATA handle.", "DdqGetDiagnosticDataAccessLevelAllowed": "Returns the highest available data access level for the API caller.", "DdqGetDiagnosticRecordAtIndex": "Fetches diagnostic data record information at the specified index in the resource pointed to by the HDIAGNOSTIC_DATA_RECORD handle.", "DdqGetDiagnosticRecordBinaryDistribution": "Fetches binary name and associated estimated total upload of Diagnostic Data Events volume in bytes for top N noisiest binaries based on total estimated upload size, where N is the value passed in for topNBinaries.", "DdqGetDiagnosticRecordCategoryAtIndex": "Fetches a diagnostic record category at the specified index in the resource pointed to by the HDIAGNOSTIC_DATA_EVENT_CATEGORY_DESCRIPTION handle.", "DdqGetDiagnosticRecordCategoryCount": "Fetches the number of diagnostic record categories in the resource pointed by the HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION handle.", "DdqGetDiagnosticRecordCount": "Fetches number of elements in the resource pointed to by the HDIAGNOSTIC_DATA_RECORD handle.", "DdqGetDiagnosticRecordLocaleTagAtIndex": "Fetches tag description at the specified index in the resource pointed to by the HDIAGNOSTIC_DATA_EVENT_TAG_DESCRIPTION handle.", "DdqGetDiagnosticRecordLocaleTagCount": "Fetches the number of tags in the resource pointed to by the HDIAGNOSTIC_DATA_EVENT_TAG_DESCRIPTION handle.", "DdqGetDiagnosticRecordPage": "Fetches a page of filtered records.", "DdqGetDiagnosticRecordPayload": "Fetches the payload text for the event record specified by rowId.", "DdqGetDiagnosticRecordProducerAtIndex": "Fetches the description of a producer at the specified index in the resource pointed to by the HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION handle.", "DdqGetDiagnosticRecordProducerCategories": "Producers and categories have a hierarchical relationship -- that is, categories belong to producers.", "DdqGetDiagnosticRecordProducerCount": "Fetches the number of producers in the resource pointed to by the HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION.", "DdqGetDiagnosticRecordProducers": "Fetches Diagnostic Data Producers available for a Diagnostic Data Query session.", "DdqGetDiagnosticRecordStats": "A change in the output parameters indicate a change in state of the event transcript record state.", "DdqGetDiagnosticRecordSummary": "Fetches general statistics about the diagnostic data records, filterable by producer.", "DdqGetDiagnosticRecordTagDistribution": "Fetches Diagnostic Data Events per privacy tag event distribution statistics based on the specified producer names.", "DdqGetDiagnosticReport": "Fetches error reports uploaded or enqueued for upload from this PC via HDIAGNOSTIC_REPORT_DATA handle.", "DdqGetDiagnosticReportAtIndex": "Fetches an error report and its information at the specified index in the resource pointed to by the HDIAGNOSTIC_REPORT_DATA handle.", "DdqGetDiagnosticReportCount": "Fetches the number of error reports in the resource pointed to by HDIAGNOSTIC_REPORT_DATA handle.", "DdqGetDiagnosticReportStoreReportCount": "Fetches the number of reports stored in the requested store.", "DdqGetSessionAccessLevel": "Returns the data access level of the current Diagnostic Data Query session.", "DdqGetTranscriptConfiguration": "Gets event transcript configuration, such as maximum storage size and hours of data history.", "DdqIsDiagnosticRecordSampledIn": "Fetches the sampled-in state of the device for an event.", "DdqSetTranscriptConfiguration": "Sets event transcript configuration, such as maximum storage size and hours of data history.", "Decode": "Decodes an Abstract Syntax Notation One -encoded string array and stores the resulting array of strings in the CertEncodeStringArray object.", "DecryptChallenge": "Decrypts the challenge from the Certificate Management over CMS response and creates a re-encrypted response to send to the CA.", "DecryptMessage": "Decrypts a message by using Digest.", "Delete": "Releases the handle of the cryptographic service provider and deletes the key from disk or smart card.", "DeleteAce": "Deletes an access control entry.", "DeleteApplication": "Removes the IAzApplication object with the specified name from the AzAuthorizationStore object.", "DeleteApplicationGroup": "Removes the IAzApplicationGroup object with the specified name from the IAzScope object.", "DeleteAppMember": "Removes the specified IAzApplicationGroup object from the list of application groups that belong to the role.", "DeleteAppNonMember": "Removes the specified IAzApplicationGroup object from the list of application groups that are refused membership in this application group.", "DeleteCAConfiguration": "Removes a named certification authority configuration from the configuration set.", "DeleteDelegatedPolicyUser": "Removes the specified security identifier in text form from the list of principals that act as delegated policy users.", "DeleteDelegatedPolicyUserName": "Removes the specified account name from the list of principals that act as delegated policy users.", "DeleteMember": "Removes the specified security identifier in text form from the list of Windows accounts that belong to the role.", "DeleteMemberName": "Removes the specified account name from the list of accounts that belong to the role.", "DeleteNonMember": "Removes the specified security identifier in text form from the list of accounts that are refused membership in the application group.", "DeleteNonMemberName": "Removes the specified account name from the list of accounts that are refused membership in the application group.", "DeleteOperation": "Removes the IAzOperation object with the specified name from the task.", "DeletePolicyAdministrator": "The DeletePolicyAdministrator method of IAzScope removes the specified security identifier in text form from the list of principals that act as policy administrators.", "DeletePolicyAdministratorName": "The DeletePolicyAdministratorName method of IAzScope removes the specified account name from the list of principals that act as policy administrators.", "DeletePolicyReader": "The DeletePolicyReader method of IAzScope removes the specified security identifier in text form from the list of principals that act as policy readers.", "DeletePolicyReaderName": "The DeletePolicyReaderName method of IAzScope removes the specified account name from the list of principals that act as policy readers.", "DeleteProperty": "Removes a named property from a property set.", "DeletePropertyItem": "Removes the specified entity from the specified list.", "DeleteRequest": "Delete any certificates or keys created for the request.", "DeleteRole": "Removes the IAzRole object with the specified name from the IAzScope object.", "DeleteRoleAssignment": "Removes the specified IAzRoleAssignment object from this scope.", "DeleteRoleDefinition": "Removes the specified IAzRoleDefinition object from this scope.", "DeleteRow": "The DeleteRow method deletes a row or set of rows from a database table.", "DeleteScope": "Removes the IAzScope object with the specified name from the IAzApplication object.", "DeleteScope2": "Removes the specified IAzScope2 object from the IAzApplication3 object.", "DeleteSecurityContext": "Deletes the local data structures associated with the specified security context initiated by a previous call to the InitializeSecurityContext function.", "DeleteSecurityPackageA": "Deletes a security support provider from the list of providers supported by Microsoft Negotiate.", "DeleteSecurityPackageW": "Deletes a security support provider from the list of providers supported by Microsoft Negotiate.", "DeleteService": "Marks the specified service for deletion from the service control manager database.", "DeleteTask": "Removes the IAzTask object with the specified name from the task.", "DenyRequest": "Denies a specified certificate request that is pending.", "DeriveCapabilitySidsFromName": "This function constructs two arrays of SIDs out of a capability name.", "DestroyPrivateObjectSecurity": "Deletes a private object's security descriptor.", "DestroyVirtualSmartCard": "Destroys the TPM virtual smart card that has the given instance ID.", "DisassociateIdentity": "Disassociates the specified identity from a local user account.", "DisconnectIdentity": "Disconnects an online identity from the current domain user.", "DSCreateISecurityInfoObject": "Creates an instance of the ISecurityInformation interface associated with the specified directory service object.", "DSCreateISecurityInfoObjectEx": "Creates an instance of the ISecurityInformation interface associated with the specified directory service object on the specified server.", "DSCreateSecurityPage": "Creates a security property page for an Active Directory object.", "DSEditSecurity": "Displays a modal dialog box for editing security on a Directory Services object.", "DuplicateToken": "Creates a new access token that duplicates one already in existence.", "DuplicateTokenEx": "Creates a new access token that duplicates an existing token.", "EditSecurity": "Displays a property sheet that contains a basic security property page.", "EditSecurityAdvanced": "Extends the EditSecurity function to include the security page type when displaying the property sheet that contains a basic security property page.", "Encode": "Returns an ASN.1-encoded string of the string array stored in this object.", "EncryptMessage": "Encrypts a message to provide privacy by using Digest.", "Enroll": "Enrolls a certificate request and retrieves the issued certificate.", "EnumAlgs": "Retrieves the IDs of cryptographic algorithms in a given algorithm class that are supported by the current cryptographic service provider.", "EnumCertViewAttribute": "Obtains an instance of an attribute-enumeration sequence for the current row of the row-enumeration sequence.", "EnumCertViewColumn": "Obtains an instance of a column-enumeration sequence for the current row of the row-enumeration sequence.", "EnumCertViewExtension": "Obtains an instance of an extension-enumeration sequence for the current row of the row-enumeration sequence.", "enumContainers": "Retrieves the names of containers for the cryptographic service provider specified by the ProviderName property.", "enumContainersWStr": "Retrieves the names of containers for the cryptographic service provider specified by the ProviderNameWStr property.", "EnumDependentServicesA": "Retrieves the name and status of each service that depends on the specified service.", "EnumDependentServicesW": "Retrieves the name and status of each service that depends on the specified service.", "EnumerateAttributes": "Retrieves the name of the current attribute and moves the internal enumeration pointer to the next attribute.", "EnumerateAttributesClose": "Frees the resources connected with attribute enumeration.", "EnumerateAttributesSetup": "Initializes the internal enumeration pointer to the first request attribute associated with the current context.", "EnumerateExtensions": "Retrieves the object identifier of the current extension and moves the internal enumeration pointer to the next extension.", "EnumerateExtensionsClose": "Frees the resources connected with extension enumeration.", "EnumerateExtensionsSetup": "Initializes the internal enumeration pointer to the first certificate extension associated with the current context.", "EnumerateIdentities": "Gets a pointer to an IEnumUnknown interface pointer that can be used to enumerate identities across identity providers.", "EnumerateSecurityPackagesA": "Returns an array of SecPkgInfo structures that provide information about the security packages available to the client.", "EnumerateSecurityPackagesW": "Returns an array of SecPkgInfo structures that provide information about the security packages available to the client.", "enumPendingRequest": "Enumerates pending certificate requests and retrieves a specified property from each.", "enumPendingRequestWStr": "Enumerates pending certificate requests and retrieves a specified property from each.", "enumProviders": "Retrieves the names of the available cryptographic service providers specified by the ProviderType property.", "enumProvidersWStr": "The IEnroll4::enumProvidersWStr method retrieves the names of the available cryptographic service providers specified by the ProviderType property.", "EnumServicesStatusA": "Enumerates services in the specified service control manager database.", "EnumServicesStatusExA": "Enumerates services in the specified service control manager database.", "EnumServicesStatusExW": "Enumerates services in the specified service control manager database.", "EnumServicesStatusW": "Enumerates services in the specified service control manager database.", "EqualDomainSid": "Determines whether two SIDs are from the same domain.", "EqualPrefixSid": "Tests two security-identifier prefix values for equality.", "EqualSid": "Tests two security identifier values for equality.", "Export": "Copies the private key to a byte array.", "ExportPublicKey": "Exports the public key portion of the asymmetric key pair.", "ExportSecurityContext": "The ExportSecurityContext function creates a serialized representation of a security context that can later be imported into a different process by calling ImportSecurityContext.", "Find": "Retrieves the index number of an ISignerCertificate object.", "FindByUniqueID": "Retrieves a pointer to the IPropertyStore interface instance associated with the specified identity.", "FindFirstFreeAce": "Retrieves a pointer to the first free byte in an access control list.", "FreeBuffer": "The FreeBuffer method frees memory allocated by the attachment snap-in extension.", "FreeContextBuffer": "Enables callers of security package functions to free memory buffers allocated by the security package.", "FreeCredentialsHandle": "Notifies the security system that the credentials are no longer needed.", "FreeInheritedFromArray": "Frees memory allocated by the GetInheritanceSource function.", "freeRequestInfo": "Releases session identifiers when they are no longer needed.", "freeRequestInfoBlob": "The freeRequestInfoBlob method deletes a certificate context.", "FreeSid": "Frees a security identifier previously allocated by using the AllocateAndInitializeSid function.", "GenerateChallenge": "Performs the policy decision whether to issue a challenge password to the SCEP client.", "get__NewEnum": "Gets an enumerator for a property set.", "get_Algorithm": "Retrieves an object identifier for the public key algorithm.", "get_AlternateSignatureAlgorithm": "Specifies and retrieves a Boolean value that specifies whether the GetSignatureAlgorithm method should retrieve a discrete or combined algorithm object identifier for a PKCS", "get_AlternateSignatureAlgorithmSet": "Retrieves a Boolean value that specifies whether the AlternateSignatureAlgorithm property has been explicitly set by a caller.", "get_AlternativeNames": "Retrieves a collection of subject alternative names.", "get_ApplicationData": "The ApplicationData property of IAzTask sets or retrieves an opaque field that can be used by the application to store information.", "get_ApplicationGroups": "Retrieves an IAzApplicationGroups object that is used to enumerate IAzApplicationGroup objects from the policy data.", "get_Applications": "Retrieves an IAzApplications object that is used to enumerate IAzApplication objects from the policy store.", "get_ApplyStoreSacl": "Sets or retrieves a value that indicates whether policy audits should be generated when the authorization store is modified.", "get_AppMembers": "Retrieves the application groups that belong to the role.", "get_AppNonMembers": "Retrieves the application groups that are refused membership in this application group.", "get_Archived": "Retrieves a Boolean value that specifies whether the certificate has been archived.", "get_ArchivedKeyHash": "Retrieves a SHA-1 hash of the private key.", "get_ArchivePrivateKey": "Specifies or retrieves a Boolean value that indicates whether to archive a private key on the certification authority.", "get_AttestationEncryptionCertificate": "The certificate used to encrypt the EKPUB and EKCERT values from the client.", "get_AttestPrivateKey": "True if the created private key needs to be attested ; otherwise false.", "get_AuthFlags": "Specifies and retrieves a value that indicates the authentication type used by the client to authenticate itself to the certificate enrollment policy server.", "get_AuthorityKeyIdentifier": "Retrieves a byte array that contains the extension value.", "get_AuthzInterfaceClsid": "Sets or retrieves the class identifier uses to perform application-specific operations.", "get_BackedUpTime": "Retrieves the date and time at which the certificate was backed up.", "get_BackedUpValue": "Retrieves a Boolean value that identifies whether the certificate was backed up.", "get_BitCount": "Retrieves the length, in bits, of the encryption key.", "get_BizRule": "Sets or retrieves the text of the script that implements the business rule.", "get_BizRuleImportedPath": "Sets or retrieves the path to the file from which the business rule is imported.", "get_BizRuleInterfaces": "Gets the collection of IDispatch interfaces that can be called by the business rule script associated with this client context.", "get_BizRuleLanguage": "Sets or retrieves the scripting language in which the business rule is implemented.", "get_BizRuleParameters": "Gets the collection of parameters that can be passed by the business rule script associated with this client context.", "get_BizRulesEnabled": "Gets or sets a value that indicates whether business rules are enabled for this application.", "get_BizrulesWritable": "Retrieves a value that indicates whether a non-delegated scope is writable.", "get_BusinessRuleString": "Sets or retrieves an application-specific string for the Business Rule.", "get_CACertificate": "Gets an X.509 certificate that has been encoded by using Distinguished Encoding Rules.", "get_CAConfig": "Gets or sets a certification authority name with which a signing certificate must be signed.", "get_CAConfigString": "Retrieves the configuration string that identifies the certification authority to which the certificate request was submitted.", "get_CADnsName": "Retrieves the Domain Naming System.", "get_CAErrorId": "Gets the ID for additional error information related to a failed certification authority specification.", "get_CAErrorString": "Gets the string data for additional error information related to a failed certification authority specification.", "get_CAName": "Retrieves the common name.", "get_CanBeDelegated": "Retrieves a value that indicates whether the scope can be delegated.", "get_CAStoreFlags": "The CAStoreFlags property of IEnroll4 sets or retrieves a flag that controls the certification authority store when the store is opened.", "get_CAStoreName": "Sets or retrieves the name of the store where all non-\"ROOT\" and non-\"MY\" certificates are kept.", "get_CAStoreNameWStr": "The CAStoreNameWStr property of IEnroll4 sets or retrieves the name of the store where all non-\"ROOT\" and non-\"MY\" certificates are kept.", "get_CAStoreType": "Sets or retrieves the type of store to use for the store specified by the CAStoreName property.", "get_CAStoreTypeWStr": "Sets or retrieves the type of store to use for the store specified by the CAStoreNameWStr property.", "get_Certificate": "Gets the certificate for the request.", "get_CertificateDescription": "Specifies or retrieves a string that contains a description of the certificate.", "get_CertificateFriendlyName": "Gets or sets the friendly name for the certificate.", "get_ChallengePassword": "The password to use when creating a request with a challenge.", "get_ClientId": "The ClientId property sets or retrieves a client ID request attribute.", "get_ContainerName": "The ContainerName property of ICEnroll4 sets or retrieves the name of the key container to use.", "get_ContainerNamePrefix": "Specifies or retrieves a prefix added to the name of the key container.", "get_ContainerNameWStr": "Sets or retrieves the name of the key container to use.", "get_Cost": "Specifies and retrieves an arbitrary cost for contacting the certificate enrollment policy server.", "get_Count": "Gets the number of properties in a property set.", "get_Critical": "Specifies and retrieves a Boolean value that identifies whether the certificate extension is critical.", "get_CriticalExtensions": "Retrieves an IObjectIds collection that identifies the version 3 certificate extensions marked as critical.", "get_CryptAttributes": "Retrieves an ICryptAttributes collection of optional certificate attributes.", "get_CspAlgorithm": "Retrieves an ICspAlgorithm object that contains information about an algorithm supported by the provider.", "get_CspAlgorithms": "Retrieves a collection of ICspAlgorithm interfaces that contain information about the algorithms supported by the provider.", "get_CspInformation": "Retrieves an ICspInformation object that contains general information about the provider.", "get_CspInformations": "Specifies or retrieves a collection of ICspInformation objects that contain information about the available cryptographic providers that support the public key algorithm associated with the private key.", "get_CSPName": "Gets a cryptographic service provider name.", "get_CspStatus": "Specifies or retrieves an ICspStatus object that contains information about the cryptographic provider and algorithm pair associated with the private key.", "get_CspStatuses": "Retrieves a collection of ICspStatus objects that matches the intended use of the private key associated with the certificate request.", "get_Default": "Specifies and retrieves a Boolean value that indicates whether this is the default certificate enrollment policy server.", "get_DefaultContainer": "Retrieves a Boolean value that specifies whether the private key represents the default key container.", "get_DefaultLength": "Retrieves the default length of a key.", "get_DelegatedPolicyUsers": "Retrieves the security identifiers of principals that act as delegated policy users in text form.", "get_DelegatedPolicyUsersName": "Retrieves the account names of principals that act as delegated policy users.", "get_DeleteRequestCert": "The DeleteRequestCert property of IEnroll4 sets or retrieves a Boolean value that determines whether dummy certificates in the request store are deleted.", "get_Description": "Specifies or retrieves a string that contains a description of the private key.", "get_Display": "Specifies or retrieves a value that indicates whether to display the status information in a user interface.", "get_DisplayName": "Retrieves a string that contains the name of the provider, the algorithm name, and the operations that can be performed by the algorithm.", "get_DomainTimeout": "Sets or retrieves the time in milliseconds after which a domain is determined to be unreachable.", "get_EnableSMIMECapabilities": "Controls whether the PKCS", "get_EnableT61DNEncoding": "Sets or retrieves a Boolean value that determines whether the distinguished name in the request is encoded as a T61 string instead of as a Unicode string.", "get_EncodedKey": "Retrieves a byte array that contains the public key.", "get_EncodedName": "Retrieves a Unicode-encoded distinguished name.", "get_EncodedParameters": "Retrieves a byte array that contains the parameters associated with the public key algorithm.", "get_EncryptedKeyBlob": "Retrieves a byte array that contains the encrypted key.", "get_EncryptedKeyHash": "Retrieves a hash of the private key to be archived.", "get_EncryptedKeyHashBlob": "Retrieves a string that contains a hash of the encrypted private key.", "get_EncryptionAlgorithm": "The encryption algorithm used to encrypt the EKPUB and EKCERT values from the client.", "get_EncryptionStrength": "Identifies the bit length for the EncryptionAlgorithm to use for encryption.", "get_EnhancedKeyUsage": "Retrieves a collection of key usage object identifiers.", "get_EnrollmentContext": "Retrieves an enrollment context that identifies whether the certificate is intended for a computer or an end-user.", "get_EnrollmentStatus": "Retrieves an IX509EnrollmentStatus object that contains information about the certificate enrollment.", "get_Error": "Specifies and retrieves a value that identifies the error status of the certificate enrollment process.", "get_ErrorCode": "Gets a code that identifies an error condition in a CA configuration.", "get_ErrorString": "Retrieves a string that contains additional information about Certificate Enrollment Web Service setup failure.", "get_ErrorText": "Retrieves a string that contains the message associated with the error result code returned by the Error property.", "get_Existing": "Gets or sets a value that indicates whether the private key already exists.", "get_ExistingCACertificate": "Gets or sets the binary value that has been encoded by using Distinguished Encoding Rules certificate that corresponds to an existing key.", "get_ExportPolicy": "Specifies or retrieves export constraints for a private key.", "get_FailInfo": "Gets information when the ProcessResponseMessage method detects a failed environment.", "get_Flags": "Specifies or retrieves a value that indicates whether the certificate enrollment policy server policy information can be loaded from group policy, from the registry, or both.", "get_FriendlyName": "Specifies or retrieves a display name for the private key.", "get_GenerateAudits": "Sets or retrieves a value that indicates whether run-time audits should be generated.", "get_GenKeyFlags": "Sets or retrieves the values passed to CryptGenKey when the certificate request is generated.", "get_HashAlgID": "The HashAlgID property of IEnroll4 sets or retrieves the hash algorithm used when signing a PKCS", "get_HashAlgorithm": "Gets or sets an identifier for the hash algorithm used to sign a certificate.", "get_HashAlgorithmWStr": "Sets or retrieves only the signature hashing algorithm used to sign the PKCS", "get_HasHardwareRandomNumberGenerator": "Retrieves a Boolean value that specifies whether the provider supports a hardware random number generator that can be used to create random bytes for cryptographic operations.", "get_Identifier": "Gets a name for the certification authority configuration.", "get_IncludeSubjectKeyID": "The IncludeSubjectKeyID property of IEnroll4 determines whether the subject key ID extension is added to the certificate request that is generated.", "get_IncrementLength": "Retrieves a value, in bits, that can be used to determine valid incremental key lengths for algorithms that support multiple key sizes.", "get_IndexByObjectId": "Retrieves the index of an extension in the collection by object identifier.", "get_IsCA": "Retrieves a Boolean value that identifies whether the subject of the certificate is a certification authority.", "get_IsHardwareDevice": "Retrieves a Boolean value that determines whether the provider is implemented in a hardware device.", "get_IsRemovable": "Retrieves a Boolean value that specifies whether the token that contains the key can be removed.", "get_IsRoleDefinition": "Sets or retrieves a value that indicates whether the task is a role definition.", "get_IsSmartCard": "Retrieves a Boolean value that specifies whether the provider is a smart card provider.", "get_IsSoftwareDevice": "Retrieves a Boolean value that specifies whether the provider is implemented in software.", "get_Issuer": "Specifies or retrieves the name of the certificate issuer.", "get_Item": "Gets the property identified by index in a property set.", "get_ItemByName": "Gets the property identified by name in a property set.", "get_ItemByOid": "Retrieves an IX509CertificateTemplate object from the collection by object identifier.", "get_ItemByOperations": "Retrieves an ICspStatus object that has the same name as the provider specified on input and the same algorithm but identifies a different cryptographic operation.", "get_ItemByOrdinal": "Retrieves an ICspStatus object from the collection by ordinal number.", "get_ItemByProvider": "Retrieves an ICspStatus object that has the same name as the provider specified on input but identifies an algorithm that supports a different intended key use.", "get_KeyArchivalCertificate": "Specifies or retrieves a certification authority encryption certificate.", "get_KeyContainerNamePrefix": "Specifies or retrieves a prefix used to create the container name for a new private key.", "get_KeyProtection": "Specifies or retrieves a value that indicates how a private key is protected before use.", "get_KeySpec": "Gets a value that indicates whether the key bound to the configuration is used for encryption or for signing content.", "get_KeyUsage": "Specifies or retrieves a value that identifies the specific purpose for which a private key can be used.", "get_LdapQuery": "Sets or retrieves the Lightweight Directory Access Protocol query used to define membership for an LDAP query application group.", "get_LDAPQueryDN": "Retrieves or sets the domain name of the directory object to be used during evaluation of LDAP query groups.", "get_LegacyCsp": "Specifies or retrieves a Boolean value that indicates whether the provider is a CryptoAPI.", "get_Length": "Gets or sets the strength of the key to one of the values supported by the cryptographic service provider.", "get_LimitExchangeKeyToEncipherment": "The LimitExchangeKeyToEncipherment property of IEnroll4 sets or retrieves a Boolean value that determines whether an AT_KEYEXCHANGE request contains digital signature and nonrepudiation key usages.", "get_LocalRevocationInformation": "Gets or sets the certificate revocation list of the local machine.", "get_LongName": "Retrieves the full name of the algorithm.", "get_MachineContext": "Specifies or retrieves a Boolean value that identifies the local certificate store context.", "get_MachineDnsName": "Retrieves the Domain Name System name of the computer that generated the request.", "get_MajorVersion": "Retrieves the minimum major version number of the certificate template.", "get_MaxKeyContainerNameLength": "Retrieves the maximum supported length for the name of the private key container associated with the provider.", "get_MaxLength": "Retrieves the maximum permitted length for a key.", "get_MaxScriptEngines": "Sets or retrieves the maximum number of Business Rule script engines that will be cached.", "get_Members": "Retrieves the security identifiers, in text form, of Windows accounts that belong to the role.", "get_MembersName": "Retrieves the account names of accounts that belong to the role.", "get_MinLength": "Retrieves the minimum permitted length for a key.", "get_MinorVersion": "Retrieves the minimum minor version number of the certificate template.", "get_Modified": "Gets a value that indicates whether an OCSPProperty object has been modified since it was instantiated.", "get_MSCEPErrorId": "Gets the ID for additional error information related to a failed Network Device Enrollment Service specification.", "get_MSCEPErrorString": "Contains the string data for additional error information related to a failed Network Device Enrollment Service specification.", "get_MyStoreFlags": "Sets or retrieves the registry location used for the MY store.", "get_MyStoreName": "Sets or retrieves the name of the store where certificates with linked private keys are kept.", "get_MyStoreNameWStr": "The MyStoreNameWStr property of IEnroll4 sets or retrieves the name of the store where certificates with linked private keys are kept.", "get_MyStoreType": "Sets or retrieves the type of store specified by the MyStoreName property.", "get_MyStoreTypeWStr": "Sets or retrieves the type of store specified by the MyStoreTypeWStr property.", "get_Name": "Gets the identifier part of the name-value pair represented by an OCSPProperty object.", "get_NameResolver": "Gets a pointer to the IAzNameResolver interface associated with this IAzPrincipalLocator object.", "get_NameValuePairs": "Retrieves a collection of name-value pairs associated with the enrollment object.", "get_NonMembers": "Retrieves the security identifiers, in text form, of accounts that are refused membership in the application group.", "get_NonMembersName": "Retrieves the account names of accounts that are refused membership in the application group.", "get_NotAfter": "Specifies or retrieves the date and time after which the certificate is no longer valid.", "get_NotBefore": "Specifies or retrieves the date and time before which the certificate is not valid.", "get_NullSigned": "Specifies and retrieves a Boolean value that indicates whether the certificate request is null-signed.", "get_ObjectId": "Retrieves the object identifier for the extension.", "get_ObjectPicker": "Gets a pointer to the IAzObjectPicker interface associated with this IAzPrincipalLocator object.", "get_OCSPCAConfigurationCollection": "Gets an instance of an OCSPCAConfigurationCollection object.", "get_OCSPServiceProperties": "Gets an instance of an OCSPPropertyCollection object.", "get_OldCertificate": "Gets or sets an old certificate that a request is intended to replace.", "get_Opened": "Retrieves a Boolean value that specifies whether the private key is open.", "get_OperationID": "Sets or retrieves an application-specific value that uniquely identifies the operation within the application.", "get_Operations": "Retrieves the operations that can be performed by the algorithm.", "get_Ordinal": "Specifies or retrieves the position of the ICspStatus object in the ICspStatuses collection.", "get_OSVersion": "Retrieves the client operating system version information.", "get_Parameters": "Retrieves a byte array that contains the parameters associated with the signature algorithm.", "get_ParentWindow": "Specifies or retrieves the ID of the window used to display key information.", "get_PathLenConstraint": "Retrieves the depth of the subordinate certification authority chain.", "get_Policies": "Retrieves a collection of application policies.", "get_PolicyAdministrators": "The PolicyAdministrators property of IAzScope retrieves the security identifiers, in text form, of principals that act as policy administrators.", "get_PolicyAdministratorsName": "Retrieves the account names of principals that act as policy administrators.", "get_PolicyQualifiers": "Retrieves a collection of optional policy qualifiers that can be applied to a certificate policy.", "get_PolicyReaders": "The PolicyReaders property of IAzScope retrieves the security identifiers, in text form, of principals that act as policy readers.", "get_PolicyReadersName": "Retrieves the account names of principals that act as policy readers.", "get_PolicyServer": "Retrieves the certificate enrollment policy server that contains the template used during initialization.", "get_PrivateKey": "Retrieves an IX509PrivateKey object that contains the private key used to sign the certificate request.", "get_PrivateKeyArchiveCertificate": "Sets or retrieves the certificate that is used to archive a private key with a PKCS", "get_ProcessName": "Retrieves the name of the application that generated the request.", "get_Property": "Specifies or retrieves a property value for the IX509CertificateTemplateWritable object.", "get_PropertyId": "Specifies or retrieves a value of the CERTENROLL_PROPERTYID enumeration that identifies an external certificate property.", "get_ProviderCLSID": "Gets or sets the CLSID of the revocation information provider used by the CA configuration.", "get_ProviderFlags": "The ProviderFlags property of IEnroll4 sets or retrieves the provider type.", "get_ProviderName": "The ProviderName property of ICEnroll4 sets or retrieves the name of the cryptographic service provider to use.", "get_ProviderNameWStr": "Sets or retrieves the name of the cryptographic service provider to use.", "get_ProviderProperties": "Gets or sets information that provides certificate status responses.", "get_ProviderType": "Sets or retrieves the type of provider.", "get_PublicKey": "Retrieves the IX509PublicKey object that contains the public key included in the certificate request.", "get_PublicKeyAlgorithm": "Specifies and retrieves an object identifier for the public key algorithm used in the GetSignatureAlgorithm method.", "get_PVKFileName": "The PVKFileName property of ICEnroll4 sets or retrieves the name of the file that will contain exported keys.", "get_PVKFileNameWStr": "Sets or retrieves the name of the file that will contain exported keys.", "get_Qualifier": "Retrieves a string that contains the qualifier used to initialize the object.", "get_RawData": "Retrieves a byte array that contains the extension value.", "get_RawDataToBeSigned": "Retrieves the unsigned certificate request created by the Encode method.", "get_ReaderName": "Specifies or retrieves the name of a smart card reader.", "get_ReminderDuration": "Gets or sets the percentage of a signing certificate lifetime after which a warning event is logged.", "get_Renewal": "Retrieves the SHA-1 hash of the new certificate.", "get_RenewalCertificate": "Specifies the certificate context for the renewal certificate.", "get_Request": "Gets the inner PKCS10 request.", "get_RequesterName": "Specifies or retrieves a string that contains the Security Account Manager name of the end-entity requesting the certificate.", "get_RequestId": "Retrieves a unique identifier for the certificate request sent to the certification authority by the Enroll method.", "get_RequestID": "Gets the request ID from the Certificate Management over CMS response.", "get_RequestIdString": "Retrieves a string that contains a unique identifier for the certificate request sent to the certification enrollment server.", "get_RequestOriginator": "Retrieves a string that contains the DNS name of the originating computer.", "get_RequestStoreFlags": "The RequestStoreFlags property of IEnroll4 sets or retrieves the registry location used for the request store.", "get_RequestStoreName": "Sets or retrievesICEnroll the name of the store that contains the dummy certificate.", "get_RequestStoreNameWStr": "The RequestStoreNameWStr property of IEnroll4 sets or retrieves the name of the store that contains the dummy certificate.", "get_RequestStoreType": "Sets or retrieves the type of store to use for the store specified by the RequestStoreName property.", "get_RequestStoreTypeWStr": "Sets or retrieves the type of store to use for the store specified by the RequestStoreNameWStr property.", "get_Response": "Retrieves the certificate response returned from a certification authority.", "get_ReuseHardwareKeyIfUnableToGenNew": "The ReuseHardwareKeyIfUnableToGenNew property of IEnroll4 sets or retrieves a Boolean value that determines the action taken by the certificate enrollment control object if an error is encountered when generating a new key.", "get_ReuseKey": "Retrieves a Boolean value that indicates whether an existing private key was used to sign the request.", "get_RoleAssignments": "Retrieves an IAzRoleAssignments object that represents the collection of IAzRoleAssignment objects associated with this scope.", "get_RoleDefinitions": "Retrieves an IAzRoleDefinitions object that represents the collection of IAzRoleDefinition objects associated with this scope.", "get_RoleForAccessCheck": "Sets or retrieves the role that is used to perform the access check.", "get_Roles": "Retrieves an IAzRoles object that is used to enumerate IAzRole objects from the policy data.", "get_RootStoreFlags": "Sets or retrieves the registry location used for the root store.", "get_RootStoreName": "Sets or retrieves the name of the root store where all intrinsically trusted, self-signed root certificates are kept.", "get_RootStoreNameWStr": "The RootStoreNameWStr property of IEnroll4 sets or retrieves the name of the root store where all intrinsically trusted, self-signed root certificates are kept.", "get_RootStoreType": "Sets or retrieves the type of store to use for the store specified by the RootStoreName property.", "get_RootStoreTypeWStr": "Sets or retrieves the type of store to use for the store specified by the RootStoreNameWStr property.", "get_Scope": "Retrieves the IAzScope object that represents the scope in which this IAzRoleAssignment object is defined.", "get_Scopes": "Retrieves an IAzScopes object that is used to enumerate IAzScope objects from the policy data.", "get_ScriptEngineTimeout": "Sets or retrieves the time in milliseconds that the IAzClientContext::AccessCheck method will wait for a Business Rule to complete execution before canceling it.", "get_SecurityDescriptor": "Specifies or retrieves the security descriptor for the private key.", "get_Selected": "Specifies or retrieves a value that indicates whether an item can be used during the enrollment process.", "get_SenderNonce": "Specifies or retrieves a byte array that contains a nonce.", "get_SerialNumber": "Specifies and retrieves the certificate serial number.", "get_SHA1Hash": "Retrieves the SHA-1 hash of a certificate.", "get_Sids": "Gets an array of the security identifiers associated with this client context.", "get_Signature": "Retrieves the request signature created by the Encode method.", "get_SignatureInformation": "Retrieves the IX509SignatureInformation object that contains information about the certificate request signature.", "get_SignerCertificate": "Gets or sets the signer certificate for the request.", "get_SignerCertificates": "Retrieves a collection of certificates used to sign the request.", "get_SigningCertificate": "Gets or sets a signing certificate that has been encoded by using Distinguished Encoding Rules responder service uses this certificate to sign its responses to certificate status requests.", "get_SigningCertificateTemplate": "Gets or sets the template name for a signing certificate.", "get_SigningFlags": "Gets or sets a combination of flag values.", "get_Silent": "Specifies or retrieves a Boolean value that indicates whether the Certificate Enrollment Control is allowed to display a dialog box when the private key is accessed.", "get_SmimeCapabilities": "Retrieves a collection of ISmimeCapability objects.", "get_SPCFileName": "Sets or retrieves the name of the file to which to write the base64-encoded PKCS", "get_SPCFileNameWStr": "The SPCFileNameWStr property of IEnroll4 sets or retrieves the name of the file to which to write the base64-encoded PKCS", "get_Status": "Gets the status of the request.", "get_StrValue": "Retrieves a string that contains an email address, a Domain Name System.", "get_Subject": "Specifies or retrieves the X.500 distinguished name of the entity requesting the certificate.", "get_SubjectKeyIdentifier": "Retrieves a byte array that contains the key identifier.", "get_SuppressDefaults": "Specifies or retrieves a Boolean value that indicates whether the default extensions and attributes are included in the request.", "get_SuppressOids": "Retrieves a collection of the default extension and attribute object identifiers that were not added to the request when the request was encoded.", "get_TargetMachine": "Retrieves the name of the computer on which account resolution should occur.", "get_Tasks": "Retrieves the tasks associated with the task.", "get_Template": "Retrieves the certificate request template used during initialization.", "get_TemplateName": "Retrieves the name of the template.", "get_TemplateObjectId": "Retrieves the object identifier of the template used to create the certificate request.", "get_TemplateOid": "Retrieves the template object identifier.", "get_Text": "Specifies or retrieves a string that contains a message associated with the status of the enrollment process.", "get_ThumbPrint": "Sets or retrieves a hash of the certificate data.", "get_ThumbPrintWStr": "Sets or retrieves a hash of the certificate data.", "get_TransactionId": "Gets or sets the transaction id for the request.", "get_Type": "Retrieves a value that specifies the type of the request object.", "get_UIContextMessage": "Specifies or retrieves a string that contains user interface text associated with the private key.", "get_UniqueContainerName": "Retrieves a unique name for the key container.", "get_Url": "Specifies or retrieves the URL for the certificate enrollment policy server.", "get_UseExistingKeySet": "The UseExistingKeySet property of IEnroll4 sets or retrieves a Boolean value that determines whether the existing keys should be used.", "get_UserCanonical": "Retrieves the name of the current client in canonical format.", "get_UserDisplay": "Retrieves the name of the current client in user display name format.", "get_UserDn": "Retrieves the name of the current client in distinguished name format.", "get_UserDnsSamCompat": "Retrieves the name of the current client in a DNS format compatible with Windows\u00ef\u00bf\u00bdSecurity\u00ef\u00bf\u00bdAccount\u00ef\u00bf\u00bdManager.", "get_UserGuid": "Retrieves the name of the current client in GUID format.", "get_UserSamCompat": "Retrieves the name of the current client in a format compatible with Windows\u00ef\u00bf\u00bdSecurity\u00ef\u00bf\u00bdAccount\u00ef\u00bf\u00bdManager.", "get_UserSamName": "Retrieves the Security Accounts Manager name of the user.", "get_UserUpn": "Retrieves the name of the current client in user principal name format.", "get_Valid": "Retrieves a Boolean value that specifies whether the provider is installed on the client computer.", "get_Value": "Gets or sets the data part of the name-value pair represented by an OCSPProperty object.", "get_Values": "Retrieves an IX509Attributes object that contains a collection of attributes.", "get_Version": "Retrieves the version number of the provider.", "get_Writable": "Retrieves a value that indicates whether the task can be modified by the user context that initialized it.", "get_WriteCertToCSP": "Sets or retrieves a Boolean value that determines whether a certificate should be written to the cryptographic service provider.", "get_WriteCertToUserDS": "The WriteCertToUserDS property of IEnroll4 sets or retrieves a Boolean value that determines whether the certificate is written to the user's Active Directory store.", "get_X509Extensions": "Retrieves a collection of the extensions included in the certificate request.", "GetAccessRights": "The GetAccessRights method requests information about the access rights that can be controlled for a securable object.", "GetAce": "Obtains a pointer to an access control entry.", "GetAclInformation": "Retrieves information about an access control list.", "GetAlgName": "Retrieves the name of a cryptographic algorithm given its ID.", "GetAlgNameWStr": "Retrieves the name of a cryptographic algorithm given its ID.", "GetAlgorithmName": "Retrieves the display name associated with an algorithm object identifier.", "GetAlgorithmOid": "Retrieves the algorithm object identifier.", "GetAllowUnTrustedCA": "Retrieves a value that specifies whether to allow an untrusted certification authority certificate.", "GetAllProperties": "Gets all properties in a property set.", "GetAppContainerNamedObjectPath": "Retrieves the named object path for the app container.", "GetArchivedKey": "Retrieves an archived key recovery BLOB.", "GetAssignedScopesPage": "Retrieves a list of the scopes in which the client represented by the current IAzClientContext2 object is assigned to at least one role.", "GetAt": "Retrieves an IIdentityProvider interface pointer for the specified identity provider.", "GetAuditedPermissionsFromAclA": "Retrieves the audited access rights for a specified trustee.", "GetAuditedPermissionsFromAclW": "Retrieves the audited access rights for a specified trustee.", "GetAuthentication": "The GetAuthentication method retrieves a value that specifies the type of authentication used by the certificate enrollment policy server to authenticate a client.", "GetAuthFlags": "Retrieves a value that specifies the authentication type used by the client to authenticate itself to the certificate enrollment policy server.", "GetBitCount": "Returns the number of bits in a bit string that belongs to the CertEncodeBitString object and has been initialized by an earlier call to ICertEncodeBitString::Decode.", "GetBitString": "Returns the string of bits in the object's bit string.", "GetBusinessRuleString": "Returns the application-specific string for the business rule.", "GetCACertificate": "Returns the certification authority certificate for the Certificate Services server.", "GetCacheDir": "Retrieves the name of the directory on the certificate enrollment policy server that contains the policy cache file.", "GetCachePath": "Retrieves the path of the policy cache file on the certificate enrollment policy server.", "GetCAProperty": "Retrieves a property value for the certification authority.", "GetCAPropertyDisplayName": "The ICertAdmin2::GetCAPropertyDisplayName method retrieves the property display name for a certification authority property.", "GetCAPropertyFlags": "The ICertAdmin2::GetCAPropertyFlags method retrieves the property flags for a certification authority property.", "GetCAs": "Retrieves a collection of certification enrollment servers included in the policy.", "GetCASetupProperty": "Gets a property value for a certification authority configuration.", "GetCAsForTemplate": "Retrieves a collection of certificate enrollment servers that support a specified template.", "getCAStore": "The getCAStore method is not implemented.", "getCertContextFromFileResponseWStr": "Retrieves the certificate from a file containing a response from a certification authority.", "getCertContextFromPKCS7": "Retrieves a certificate context based on a PKCS", "getCertContextFromResponseBlob": "Retrieves the certificate from a certification authority's response.", "getCertFromFileResponse": "Retrieves the certificate from a file containing a response from a certification authority.", "getCertFromPKCS7": "Retrieves the certificate, contained in a PKCS", "getCertFromResponse": "Retrieves the certificate from a certification authority 's response.", "GetCertificate": "Returns the certificate issued for the request as an X.509 certificate, or optionally packaged in a Public Key Cryptography Standards ", "GetCertificateCount": "Gets the count of the endorsement certificates in the key storage provider.", "GetCertificateExtension": "Retrieves a specific certificate extension.", "GetCertificateExtensionFlags": "Retrieves the flags associated with the extension acquired by the most recent call to GetCertificateExtension.", "GetCertificateProperty": "Returns a named property from a certificate.", "GetColumnCount": "Retrieves the number of columns in the view of the Certificate Services database.", "GetConfig": "Retrieves the configuration string for a Certificate Services server.", "GetConfigEntry": "Retrieves configuration information for a certification authority.", "GetConfiguration": "Connects to an Online Certificate Status Protocol responder server and initializes an OCSPAdmin object with the configuration information from the server.", "GetCount": "Returns the number of string values in the string array.", "GetCRL": "Retrieves the current certificate revocation list.", "GetCspStatuses": "Retrieves an ICspStatuses collection that contains all provider/algorithm pairs consistent with the intended use of the private key as specified by the caller.", "GetCspStatusesFromOperations": "Retrieves an ICspStatuses collection by supported key operations and optional provider information.", "GetCspStatusFromOperations": "Creates an ICspStatus object for the first supported algorithm that is consistent with the specified signature, encryption, hashing, or cipher operation.", "GetCspStatusFromProviderName": "Retrieves an ICspStatus object for a legacy provider by provider name and supported key operations.", "GetCurrentProcessToken": "Retrieves a pseudo-handle that you can use as a shorthand way to refer to the access token associated with a process.", "GetCurrentThreadEffectiveToken": "Retrieves a pseudo-handle that you can use as a shorthand way to refer to the token that is currently in effect for the thread, which is the thread token if one exists and the process token otherwise.", "GetCurrentThreadToken": "Retrieves a pseudo-handle that you can use as a shorthand way to refer to the impersonation token that was assigned to the current thread.", "GetCustomOids": "Is not implemented.", "GetData": "The GetData method retrieves configuration information from the Security Configuration snap-in.", "GetDefaultSecurityDescriptor": "Retrieves the default private key security descriptor.", "GetDescription": "Returns a human-readable description of the exit module and its function.", "GetDisplayName": "Retrieves the localized name of the current column in the column-enumeration sequence.", "GetDispositionMessage": "Gets a human-readable message that gives the current disposition of the certificate request.", "GetDistPointCount": "Returns the number of certificate revocation list distribution points in a CRL distribution information array.", "GetEffectivePermission": "Returns the effective permission for an object type.", "GetEffectiveRightsFromAclA": "Retrieves the effective access rights that an ACL structure grants to a specified trustee.", "GetEffectiveRightsFromAclW": "Retrieves the effective access rights that an ACL structure grants to a specified trustee.", "GetEncryptionCspAlgorithms": "Retrieves the collection of encryption algorithms supported by a provider.", "GetEncSChannel": "This function is unavailable.", "GetEnrollmentServerAuthentication": "The GetEnrollmentServerAuthentication method retrieves a value that specifies the type of authentication used by the certificate enrollment server to authenticate a client.", "GetEnrollmentServerUrl": "Retrieves a string that contains the URL for the certificate enrollment server.", "GetErrorMessageText": "Retrieves the error message text for an HRESULT error code.", "GetExistingCACertificates": "Gets the collection of CertSrvSetupKeyInformation objects that represent valid certification authority certificates currently installed on the computer.", "GetExplicitEntriesFromAclA": "Retrieves an array of structures that describe the access control entries.", "GetExplicitEntriesFromAclW": "Retrieves an array of structures that describe the access control entries.", "GetField": "Gets a specific field from the current record of the configuration database.", "GetFileSecurityA": "Obtains specified information about the security of a file or directory.", "GetFileSecurityW": "Obtains specified information about the security of a file or directory.", "GetFlags": "Retrieves the policy and origin flags of the current extension in the extension-enumeration sequence.", "GetFriendlyName": "Retrieves a display name for the certificate enrollment policy server.", "GetFriendlyNameOfCertA": "Retrieves the display name for a certificate.", "GetFriendlyNameOfCertW": "Retrieves the display name for a certificate.", "GetFullResourceName": "Retrieves the full path and file name of the object associated with the access control editor that is displayed by calling the OpenElevatedEditor method.", "GetFullResponseProperty": "Retrieves the cached response data returned by the server.", "GetGroups": "Returns an array of the application groups associated with this client context.", "GetHashAlgorithmList": "Gets the list of hash algorithms supported by the specified cryptographic service provider for an asymmetric signature key algorithm.", "GetHashAlgorithms": "Gets a list of hash-algorithm names.", "GetIdentityEnum": "Retrieves an IEnumUnknown interface pointer that can be used to enumerate identities.", "GetInheritanceSourceA": "Returns information about the source of inherited access control entries.", "GetInheritanceSourceW": "Returns information about the source of inherited access control entries.", "GetInheritSource": "The ISecurityObjectTypeInfo::GetInheritSource method provides a means of determining the source of inherited access control entries in discretionary access control lists and system access control lists.", "GetInheritTypes": "The GetInheritTypes method requests information about how ACEs can be inherited by child objects.", "GetInnerRequest": "Retrieves a nested request object.", "GetInterfaceValue": "Gets the ID and flags of the interface that corresponds to the specified interface name.", "GetIsDefaultCEP": "Retrieves a Boolean value that specifies whether this is the default certificate enrollment policy server.", "GetIssuedCertificate": "Retrieves a certificate's disposition by specifying either the request ID or the certificate serial number.", "GetIssuedCertificate2": "Retrieves a certificate's disposition by specifying either the request ID string or the certificate serial number.", "GetKernelObjectSecurity": "Retrieves a copy of the security descriptor that protects a kernel object.", "GetKeyLen": "The IEnroll4::GetKeyLen method retrieves the minimum and maximum key lengths for the signature and exchange keys.", "GetKeyLenEx": "Retrieves size information for the signature and exchange keys.", "GetKeyLengthList": "Gets the list of key lengths supported by the specified cryptographic service provider.", "GetLastStatus": "Gets the last return code for this request.", "GetLastUpdateTime": "Retrieves the date and time at which the policy was last downloaded.", "GetLengthSid": "Returns the length, in bytes, of a valid security identifier.", "GetMachineTypeAttributes": "Queries if the specified architecture is supported on the current system, either natively or by any form of compatibility or emulation layer.", "GetManageModule": "Retrieves the ICertManageModule interface associated with the ICertExit2 interface by calling GetManageModule and passing in the address of a pointer to an ICertManageModule.", "GetMaxLength": "Retrieves the maximum allowable length, in bytes, for the column data.", "GetMSCEPSetupProperty": "Gets a property value for a Network Device Enrollment Service configuration.", "GetMyRoles": "Gets the access mask of privilege roles for a user on a given Online Certificate Status Protocol responder server.", "getMyStore": "The getMyStore method is not implemented.", "GetName": "Retrieves the name of the current extension in the extension-enumeration sequence.", "GetNameChoice": "Returns the name choice at a specified index of a certificate revocation list distribution information point.", "GetNameCount": "Returns the number of names in a certificate revocation list distribution point.", "GetNamedSecurityInfoA": "Retrieves a copy of the security descriptor for an object specified by name.", "GetNamedSecurityInfoW": "Retrieves a copy of the security descriptor for an object specified by name.", "GetNextUpdateTime": "Retrieves the date and time at which the policy expires and should be refreshed.", "GetObjectInformation": "The GetObjectInformation method requests information that the access control editor uses to initialize its pages and to determine the editing options available to the user.", "GetOpenCardNameA": "The GetOpenCardName function displays the smart card \"select card\" dialog box.", "GetOpenCardNameW": "The GetOpenCardName function displays the smart card \"select card\" dialog box.", "GetOperations": "Returns a collection of the operations, within the specified scope, that the principal represented by the current client context has permission to perform.", "GetParameter": "Gets the specified value from the varParameterValues parameter of the IAzClientContext::AccessCheck method.", "GetParameterValue": "Gets the value type of the business rule parameter with the specified name.", "GetPasswordCredentials": "Returns credentials to authenticate a non-domain joined container with Active Directory.", "GetPolicyServerId": "Retrieves a string value that uniquely identifies the certificate enrollment policy server.", "GetPolicyServerUrl": "Retrieves a string value that contains the URL for the certificate enrollment policy server.", "GetPrincipals": "Displays a dialog box from which users can choose one or more principals, and then returns the chosen list of principals and their corresponding security identifiers.", "GetPrivateKeyArchiveCertificate": "The GetPrivateKeyArchiveCertificate method retrieves the certificate used to archive the private key.", "GetPrivateKeyContainerList": "Gets the list of key container names stored by the specified cryptographic service provider for asymmetric signature key algorithms.", "GetPrivateObjectSecurity": "Retrieves information from a private object's security descriptor.", "GetProperty": "Retrieves a module's property value.", "GetPropertyFlags": "Retrieves a value that specifies the default policy server URL.", "GetProviderNameList": "Gets the list of cryptographic service providers that provide asymmetric key signature and exchange algorithms on the computer.", "GetProviderPropertyStore": "Retrieves a pointer to the IPropertyStore interface associated with the identity provider.", "getProviderType": "Retrieves the type of the specified cryptographic service provider.", "getProviderTypeWStr": "Retrieves the type of the specified cryptographic service provider.", "GetRefreshPolicy": "Returns a value that indicates whether a client's cached certificate enrollment policy is out of date and needs to be refreshed.", "GetRequestAttribute": "Returns a named attribute from a request.", "GetRequestId": "Gets the current internal request number for the request and subsequent certificate.", "GetRequestIdString": "Gets the current internal request number, formatted as a string, for the request and subsequent certificate.", "GetRequestProperty": "Retrieves a specific property from a request.", "GetRevocationReason": "Returns the reason a certificate was revoked.", "GetRoles": "Returns the roles for the client context.", "getROOTHStore": "The getROOTHStore method is not implemented.", "GetSchemaVersion": "Gets the version number of this authorization store.", "GetSecondarySecurity": "Returns additional security contexts that may impact access to the resource.", "GetSecurity": "Gets security descriptor information for an Online Certificate Status Protocol responder server.", "GetSecurityDescriptorControl": "Retrieves a security descriptor control and revision information.", "GetSecurityDescriptorDacl": "Retrieves a pointer to the discretionary access control list in a specified security descriptor.", "GetSecurityDescriptorGroup": "Retrieves the primary group information from a security descriptor.", "GetSecurityDescriptorLength": "Returns the length, in bytes, of a structurally valid security descriptor.", "GetSecurityDescriptorOwner": "Retrieves the owner information from a security descriptor.", "GetSecurityDescriptorRMControl": "Retrieves the resource manager control bits.", "GetSecurityDescriptorSacl": "Retrieves a pointer to the system access control list in a specified security descriptor.", "GetSecurityInfo": "Retrieves a copy of the security descriptor for an object specified by a handle.", "GetServiceDirectory": "Returns a path for a per-service filesystem location for a service to read and/or write state to.", "GetServiceDisplayNameA": "Retrieves the display name of the specified service.", "GetServiceDisplayNameW": "Retrieves the display name of the specified service.", "GetServiceKeyNameA": "Retrieves the service name of the specified service.", "GetServiceKeyNameW": "Retrieves the service name of the specified service.", "GetServiceRegistryStateKey": "Returns a handle for a registry key for a service to read and/or write state to.", "GetSharedServiceDirectory": "Returns a path for a per-service filesystem location for a service and associated programs to read and/or write state to.", "GetSharedServiceRegistryStateKey": "Returns a handle for a registry key for a service and associated programs to read and/or write state to.", "GetSidIdentifierAuthority": "Returns a pointer to the SID_IDENTIFIER_AUTHORITY structure in a specified security identifier.", "GetSidLengthRequired": "Returns the length, in bytes, of the buffer required to store a SID with a specified number of subauthorities.", "GetSidSubAuthority": "Returns a pointer to a specified subauthority in a security identifier.", "GetSidSubAuthorityCount": "Returns a pointer to the member in a security identifier structure that contains the subauthority count.", "GetSignatureAlgorithm": "Retrieves the signing algorithm object identifier.", "GetSigningCertificates": "Gets the signing certificates that are available on a responder server for a given certification authority certificate.", "GetStringProperty": "Retrieves the certificate enrollment policy server ID or the display name of the CEP server.", "GetStringType": "Returns the type of string values that the string array contains.", "GetSupportedCATypes": "Gets the types of certification authorities that can be installed on a computer under the caller context.", "GetSupportedKeySpec": "Retrieves information regarding the current cryptographic service provider support for signature and/or exchange operations.", "GetTasks": "Returns a collection of the tasks, within the specified scope, that the principal represented by the current client context has permission to perform.", "GetTemplates": "Retrieves a collection of the templates supported by the certificate enrollment policy server.", "GetTokenInformation": "Retrieves a specified type of information about an access token.", "GetTrusteeFormA": "Retrieves the trustee name from the specified TRUSTEE structure.", "GetTrusteeFormW": "Retrieves the trustee name from the specified TRUSTEE structure.", "GetTrusteeNameA": "Retrieves the trustee name from the specified TRUSTEE structure.", "GetTrusteeNameW": "Retrieves the trustee name from the specified TRUSTEE structure.", "GetTrusteeTypeA": "Retrieves the trustee type from the specified TRUSTEE structure.", "GetTrusteeTypeW": "Retrieves the trustee type from the specified TRUSTEE structure.", "GetType": "Retrieves the data type of the current column in the column-enumeration sequence.", "GetUrl": "Returns the URL string for the specified wizard or webpage.", "GetUrlFlags": "Retrieves a set of flags that contain miscellaneous policy information about the certificate enrollment policy server.", "GetUseClientId": "Retrieves a value that specifies whether the ClientId attribute is set in the policy server flags of the certificate enrollment policy server.", "GetUserObjectSecurity": "Retrieves security information for the specified user object.", "GetValue": "Retrieves the value of the current extension in the extension-enumeration sequence.", "GetWindowsAccountDomainSid": "Receives a security identifier and returns a SID representing the domain of that SID.", "IdentityUpdated": "Is called by an identity provider to notify a calling application that an identity event occurred.", "ImpersonateAnonymousToken": "Enables the specified thread to impersonate the system's anonymous logon token.", "ImpersonateLoggedOnUser": "Lets the calling thread impersonate the security context of a logged-on user.", "ImpersonateNamedPipeClient": "Impersonates a named-pipe client application.", "ImpersonateSecurityContext": "Allows a server to impersonate a client by using a token previously obtained by a call to AcceptSecurityContext or QuerySecurityContextToken.", "ImpersonateSelf": "Obtains an access token that impersonates the security context of the calling process.", "Import": "Imports an existing private key into a key container within a cryptographic provider.", "ImportCertificate": "Takes a previously issued certificate and imports it to the certification authority 's database.", "ImportKey": "Adds an encrypted key set to an item in the Certificate Services database.", "ImportPFXToProvider": "Imports a PFX certificate.", "ImportPFXToProviderFreeData": "Frees PFX certificate context.", "ImportSecurityContextA": "Imports a security context.", "ImportSecurityContextW": "Imports a security context.", "Initialize": "The Initialize method informs the Security Configuration snap-in that the snap-in extension is loaded, and it establishes a context for communications.", "InitializeAcl": "Initializes a new ACL structure.", "InitializeClientContext2": "Retrieves an IAzClientContext2 object pointer.", "InitializeClientContextFromName": "Gets an IAzClientContext object pointer from the client identity as a pair.", "InitializeClientContextFromStringSid": "Gets an IAzClientContext object pointer from the specified security identifier in text form.", "InitializeClientContextFromToken": "Gets an IAzClientContext object pointer from the specified client token.", "InitializeClientContextFromToken2": "Retrieves an IAzClientContext2 object pointer from the specified client token.", "InitializeDecode": "Initializes the extension from a Distinguished Encoding Rules encoded byte array that contains the extension value.", "InitializeDefaults": "Initializes a CMSCEPSetup object with default values to enable installation of a Network Device Enrollment Service role.", "InitializeEncode": "Initializes the extension from a string that contains the template name.", "InitializeEncodeFromEncryptedKeyBlob": "Initializes the attribute from an encrypted private key.", "InitializeForPending": "Initialize the instance to prepare to generate a message to either retrieve an issued certificate, or install a response for a previous request by the issuer.", "InitializeFromAlgorithmName": "Initializes the object from an algorithm name or an object identifier.", "InitializeFromCertificate": "Initializes the certificate request by using an existing certificate.", "InitializeFromCertificateHash": "Initializes the object from the new certificate.", "InitializeFromCurrentTime": "Initializes the property from a Boolean value and the current system date and time.", "InitializeFromEncodedPublicKeyInfo": "Initializes the object from a byte array that contains a public key.", "InitializeFromInnerRequest": "Initializes the certificate request from the inner PKCS", "InitializeFromInnerRequestTemplate": "Initializes the certificate request from an inner request object and a template.", "InitializeFromInnerRequestTemplateName": "The InitializeFromInnerRequestTemplateName method initializes the certificate request from an inner request object and a template.", "InitializeFromLocalRequestOriginator": "Initializes the object from the DNS name of the local computer.", "InitializeFromName": "Initializes the object from a CERTENROLL_OBJECTID enumeration value.", "InitializeFromObjectId": "Initializes a cryptographic attribute by using an object identifier.", "InitializeFromOtherName": "Initializes the object from an object identifier.", "InitializeFromPrivateKey": "Initializes the certificate request by using an IX509PrivateKey object and, optionally, a template.", "InitializeFromPrivateKeyTemplate": "Initializes the certificate request by using an IX509PrivateKey object and a certificate template.", "InitializeFromProperties": "Creates a property set from the properties contained in an existing server configuration.", "InitializeFromPublicKey": "Initializes a null-signed certificate request by using an IX509PublicKey object and, optionally, a template.", "InitializeFromPublicKeyTemplate": "Initializes a null-signed certificate request by using an IX509PublicKey object and a template.", "InitializeFromRawData": "Initializes the object from a Digital Signature Algorithm encoded byte array.", "InitializeFromRequest": "Initializes the enrollment object from an existing IX509CertificateRequest object.", "InitializeFromString": "Initializes the object from a string that contains an email address, a Domain Name System.", "InitializeFromTemplate": "Initializes the enrollment object by using a template.", "InitializeFromTemplateName": "Initializes the enrollment object from a template common name.", "InitializeFromType": "Initializes the object from the default cryptographic provider.", "InitializeFromValue": "Initializes the object from a string that contains a dotted decimal object identifier.", "InitializeFromValues": "Initializes a cryptographic attribute by using an IX509Attributes object.", "InitializeImport": "Initializes the certificate enrollment policy server from a collection of templates and object identifiers.", "InitializeInstallDefaults": "Initializes the ICertificateEnrollmentServerSetup object with a default configuration.", "InitializeSecurityContextA": "Initiates the client side, outbound security context from a credential handle.", "InitializeSecurityContextW": "Initiates the client side, outbound security context from a credential handle.", "InitializeSecurityDescriptor": "Initializes a new security descriptor.", "InitializeSid": "Initializes a security identifier.", "InitSecurityInterfaceA": "The InitSecurityInterface function returns a pointer to an SSPI dispatch table.", "InitSecurityInterfaceW": "The InitSecurityInterface function returns a pointer to an SSPI dispatch table.", "Install": "Installs a Network Device Enrollment Service role as configured in a CMSCEPSetup object.", "InstallPKCS7": "Processes a certificate or chain of certificates, placing them into the appropriate certificate stores.", "InstallPKCS7Blob": "Processes a certificate or chain of certificates, placing them into the appropriate certificate stores.", "InstallPKCS7BlobEx": "The same as InstallPKCS7Blob except that it returns the number of certificates actually installed in local stores.", "InstallPKCS7Ex": "Processes a certificate or chain of certificates, placing them into the appropriate certificate stores.", "InstallResponse": "Installs a certificate chain on the end-entity computer.", "InstallResponse2": "Installs a certificate chain on the end-entity computer.", "IsCatalogFile": "Retrieves a Boolean value that indicates whether the specified file is a catalog file.", "IsDaclCanonical": "The IsDaclCanonical method determines whether the ACEs contained in the specified DACL structure are ordered according to the definition of DACL ordering implemented by the client.", "IsDirty": "The IsDirty method returns a value indicating whether data in the attachment snap-in has been modified since it was last saved.", "IsFunctionalLevelUpgradeSupported": "Gets a Boolean value that indicates whether the version of this authorization store can be upgraded.", "IsIndexed": "Reports whether the data in the column is indexed.", "IsInRoleAssignment": "Checks whether the principal represented by the current client context is a member of the specified role in the specified scope.", "IsMSCEPStoreEmpty": "Always returns VARIANT_TRUE.", "IsPropertyEditable": "Indicates to the caller whether a specified property can be edited.", "IsSmartCard": "Retrieves a Boolean value that indicates whether any of the cryptographic providers associated with the request object is a smart card provider.", "IsTokenRestricted": "Indicates whether a token contains a list of restricted security identifiers.", "IsUpdateNeeded": "Checks whether the persisted version of this authorization store is newer than the cached version.", "IsValidAcl": "Validates an access control list.", "IsValidCertificate": "Verifies the certificate against the certification authority key and checks that the certificate has not been revoked.", "IsValidSecurityDescriptor": "Determines whether the components of a security descriptor are valid.", "IsValidSid": "Validates a security identifier by verifying that the revision number is within a known range, and that the number of subauthorities is less than the maximum.", "IsWellKnownSid": "Compares a SID to a well-known SID and returns TRUE if they match.", "KeyCredentialManagerFreeInformation": "API to free the KeyCredentialManagerInfo pointer variable from the KeyCredentialManagerGetInformation call.", "KeyCredentialManagerGetInformation": "API to get a unique identifier of the users enrollment.", "KeyCredentialManagerGetOperationErrorStates": "Prerequisite API to call to determine if the operation will be successful prior.", "KeyCredentialManagerShowUIOperation": "API to perform the requested WHFB operation.", "KspDeleteContextFn": "Deletes a security context.", "KspMakeSignatureFn": "Generates a signature based on the specified message and security context.", "KspVerifySignatureFn": "Verifies that the message received is correct according to the signature.", "LoadPolicy": "Retrieves policy information from the certificate enrollment policy server.", "LockServiceDatabase": "Requests ownership of the service control manager database lock.", "LogonUserA": "The Win32 LogonUser function attempts to log a user on to the local computer.", "LogonUserExA": "The LogonUserEx function attempts to log a user on to the local computer.", "LogonUserExW": "The LogonUserEx function attempts to log a user on to the local computer.", "LogonUserW": "The Win32 LogonUser function attempts to log a user on to the local computer.", "LookupAccountNameA": "Accepts the name of a system and an account as input.", "LookupAccountNameW": "Accepts the name of a system and an account as input.", "LookupAccountSidA": "Accepts a security identifier as input.", "LookupAccountSidLocalA": "Retrieves the name of the account for the specified SID on the local machine.", "LookupAccountSidLocalW": "Retrieves the name of the account for the specified SID on the local machine.", "LookupAccountSidW": "Accepts a security identifier as input.", "LookupPrivilegeDisplayNameA": "Retrieves the display name that represents a specified privilege.", "LookupPrivilegeDisplayNameW": "Retrieves the display name that represents a specified privilege.", "LookupPrivilegeNameA": "Retrieves the name that corresponds to the privilege represented on a specific system by a specified locally unique identifier.", "LookupPrivilegeNameW": "Retrieves the name that corresponds to the privilege represented on a specific system by a specified locally unique identifier.", "LookupPrivilegeValueA": "Retrieves the locally unique identifier used on a specified system to locally represent the specified privilege name.", "LookupPrivilegeValueW": "Retrieves the locally unique identifier used on a specified system to locally represent the specified privilege name.", "LookupSecurityDescriptorPartsA": "Retrieves security information from a self-relative security descriptor.", "LookupSecurityDescriptorPartsW": "Retrieves security information from a self-relative security descriptor.", "LookupSids": "The LookupSids method returns the common names corresponding to each of the elements in the specified list of SIDs.", "LPHANDLER_FUNCTION": "An application-defined callback function used with the RegisterServiceCtrlHandler function.", "LPHANDLER_FUNCTION_EX": "An application-defined callback function used with the RegisterServiceCtrlHandlerEx function.", "LPSERVICE_MAIN_FUNCTIONA": "The entry point for a service.", "LPSERVICE_MAIN_FUNCTIONW": "The entry point for a service.", "LSA_ADD_CREDENTIAL": "Adds credentials to a logon session.", "LSA_ALLOCATE_CLIENT_BUFFER": "Allocates a buffer in the client's address space.", "LSA_ALLOCATE_LSA_HEAP": "Allocates memory on the heap.", "LSA_ALLOCATE_PRIVATE_HEAP": "Allocates memory on the private heap.", "LSA_ALLOCATE_SHARED_MEMORY": "The AllocateSharedMemory function allocates a block of shared memory from a section of memory previously reserved by a call to the CreateSharedMemory function.", "LSA_AP_CALL_PACKAGE": "Called by the Local Security Authority when a logon application with a trusted connection to the LSA calls the LsaCallAuthenticationPackage function and specifies the authentication package's identifier.", "LSA_AP_CALL_PACKAGE_PASSTHROUGH": "The dispatch function for pass-through logon requests sent to the LsaCallAuthenticationPackage function.", "LSA_AP_INITIALIZE_PACKAGE": "Called once by the Local Security Authority during system initialization to provide the authentication package a chance to initialize itself.", "LSA_AP_LOGON_TERMINATED": "Used to notify an authentication package when a logon session terminates.", "LSA_AP_LOGON_USER": "Authenticates a user's logon credentials.", "LSA_AP_LOGON_USER_EX": "Authenticates a user's logon credentials.", "LSA_AP_LOGON_USER_EX2": "Used to authenticate a user logon attempt on the user 's initial logon.", "LSA_AUDIT_ACCOUNT_LOGON": "The AuditAccountLogon function produces an audit record that represents the mapping of a foreign principal name onto a Windows account.", "LSA_AUDIT_LOGON": "The AuditLogon function is used to audit a logon attempt.", "LSA_CALL_PACKAGE": "The CallPackage function is used to call another security package to access its services.", "LSA_CALL_PACKAGE_PASSTHROUGH": "The CallPackagePassthrough function is used to call another security package to access its services.", "LSA_CALL_PACKAGEEX": "The CallPackageEx function is used to call another security package to access its services.", "LSA_CANCEL_NOTIFICATION": "The CancelNotification function cancels a previously registered notification.", "LSA_CLIENT_CALLBACK": "Allows a Local Security Authority -mode security package to call back to its user-mode package and invoke a function in its DLL there.", "LSA_CLOSE_SAM_USER": "Closes a handle to a Security Accounts Manager user account.", "LSA_CONVERT_AUTH_DATA_TO_TOKEN": "The ConvertAuthDataToToken function creates an access token from the authorization data returned from the GetAuthDataForUser or GetUserAuthData functions.", "LSA_COPY_FROM_CLIENT_BUFFER": "Copies information from the address space of a client process into a buffer in the current process.", "LSA_COPY_TO_CLIENT_BUFFER": "Copies information from a buffer in the current process into a client process's address space.", "LSA_CRACK_SINGLE_NAME": "The CrackSingleName function converts a name from one format to another.", "LSA_CREATE_LOGON_SESSION": "Creates logon sessions.", "LSA_CREATE_SHARED_MEMORY": "The CreateSharedMemory function creates a section of memory that is shared by client processes and the security package.", "LSA_CREATE_THREAD": "A wrapper for the Windows CreateThread function that should be used by the Local Security Authority.", "LSA_CREATE_TOKEN": "The CreateToken function is used by SSP/APs to create tokens while processing calls to SpAcceptLsaModeContext.", "LSA_CREATE_TOKEN_EX": "Creates tokens while processing calls to SpAcceptLsaModeContext.", "LSA_DELETE_CREDENTIAL": "Deletes an existing credential.", "LSA_DELETE_LOGON_SESSION": "Cleans up any logon sessions created while determining whether a user's authentication information is legitimate.", "LSA_DELETE_SHARED_MEMORY": "The DeleteSharedMemory function releases a section of memory that is shared by clients and a security package.", "LSA_DUPLICATE_HANDLE": "The DuplicateHandle function creates a duplicate handle.", "LSA_EXPAND_AUTH_DATA_FOR_DOMAIN": "Expands the domain groups in the specified user authentication data.", "LSA_FREE_CLIENT_BUFFER": "Frees a client buffer previously allocated with the AllocateClientBuffer function.", "LSA_FREE_LSA_HEAP": "Deallocates heap memory previously allocated by AllocateLsaHeap.", "LSA_FREE_PRIVATE_HEAP": "Frees memory that was allocated by using the AllocatePrivateHeap function.", "LSA_FREE_SHARED_MEMORY": "The FreeSharedMemory function frees a block of shared memory previously allocated by the AllocateSharedMemory function.", "LSA_GET_AUTH_DATA_FOR_USER": "The GetAuthDataForUser function retrieves authentication information for a user from the Security Accounts Manager database and puts it into a format suitable for the ConvertAuthDataToToken function.", "LSA_GET_CALL_INFO": "The GetCallInfo function retrieves information about the most recent function call.", "LSA_GET_CLIENT_INFO": "The GetClientInfo function gets information about the client process, such as thread and process ID, and flags indicating the client's state and privileges.", "LSA_GET_CREDENTIALS": "Retrieves credentials associated with a logon session.", "LSA_GET_USER_AUTH_DATA": "The GetUserAuthData function returns the authorization data for the user in a single buffer.", "LSA_MAP_BUFFER": "Maps a SecBuffer structure into the address space of the security support provider/authentication package.", "LSA_OPEN_SAM_USER": "Retrieves a handle to a user account in the Security Accounts Manager database.", "LSA_OPEN_TOKEN_BY_LOGON_ID": "Opens the user access token associated with the specified user logon.", "LSA_PROTECT_MEMORY": "Encrypts the specified memory buffer.", "LSA_REGISTER_NOTIFICATION": "Provides a mechanism whereby the security package is notified.", "LSA_UPDATE_PRIMARY_CREDENTIALS": "Provides a mechanism for one security package to notify other packages that the credentials for a logon session have changed.", "LsaAddAccountRights": "Assigns one or more privileges to an account.", "LsaCallAuthenticationPackage": "Used by a logon application to communicate with an authentication package.", "LsaClose": "The LsaClose function closes a handle to a Policy or TrustedDomain object.", "LsaConnectUntrusted": "Establishes an untrusted connection to the LSA server.", "LsaCreateTrustedDomainEx": "The LsaCreateTrustedDomainEx function establishes a new trusted domain by creating a new TrustedDomain object.", "LsaDeleteTrustedDomain": "The LsaDeleteTrustedDomain function removes a trusted domain from the list of trusted domains for a system and deletes the associated TrustedDomain object.", "LsaDeregisterLogonProcess": "Deletes the caller's logon application context and closes the connection to the LSA server.", "LsaEnumerateAccountRights": "The LsaEnumerateAccountRights function enumerates the privileges assigned to an account.", "LsaEnumerateAccountsWithUserRight": "Returns the accounts in the database of a Local Security Authority Policy object that hold a specified privilege.", "LsaEnumerateLogonSessions": "Retrieves the set of existing logon session identifiers and the number of sessions.", "LsaEnumerateTrustedDomains": "The LsaEnumerateTrustedDomains function retrieves the names and SIDs of domains trusted to authenticate logon credentials.", "LsaEnumerateTrustedDomainsEx": "Returns information about the domains trusted by the local system.", "LsaFreeMemory": "The LsaFreeMemory function frees memory allocated for an output buffer by an LSA function call.", "LsaFreeReturnBuffer": "Frees the memory used by a buffer previously allocated by the LSA.", "LsaGetAppliedCAPIDs": "Returns an array of central access policies of all the CAPs applied on a specific computer.", "LsaGetLogonSessionData": "Retrieves information about a specified logon session.", "LsaLogonUser": "Authenticates a security principal's logon data by using stored credentials information.", "LsaLookupAuthenticationPackage": "Obtains the unique identifier of an authentication package.", "LsaLookupNames": "Retrieves the security identifiers that correspond to an array of user, group, or local group names.", "LsaLookupPrivilegeValue": "Retrieves the locally unique identifier to represent the specified privilege name.", "LsaLookupSids": "Looks up the names that correspond to an array of security identifiers.", "LsaLookupSids2": "Looks up the names that correspond to an array of security identifiers and supports Internet provider identities.", "LsaNtStatusToWinError": "The LsaNtStatusToWinError function converts an NTSTATUS code returned by an LSA function to a Windows error code.", "LsaOpenPolicy": "Opens a handle to the Policy object on a local or remote system.", "LsaOpenTrustedDomainByName": "The LsaOpenTrustedDomainByName function opens the LSA policy handle of a remote trusted domain.", "LsaQueryCAPs": "Returns the Central Access Policies for the specified IDs.", "LsaQueryDomainInformationPolicy": "Retrieves domain information from the Policyobject.", "LsaQueryForestTrustInformation": "Retrieves forest trust information for the specified Local Security Authority\u00ef\u00bf\u00bdTrustedDomain object.", "LsaQueryInformationPolicy": "Retrieves information about a Policy object.", "LsaQueryTrustedDomainInfo": "The LsaQueryTrustedDomainInfo function retrieves information about a trusted domain.", "LsaQueryTrustedDomainInfoByName": "The LsaQueryTrustedDomainInfoByName function returns information about a trusted domain.", "LsaRegisterLogonProcess": "Establishes a connection to the LSA server and verifies that the caller is a logon application.", "LsaRegisterPolicyChangeNotification": "The LsaRegisterPolicyChangeNotification function registers an event handle with the local security authority.", "LsaRemoveAccountRights": "Removes one or more privileges from an account.", "LsaRetrievePrivateData": "Do not use the LSA private data functions.", "LsaSetDomainInformationPolicy": "Sets domain information to the Policyobject.", "LsaSetForestTrustInformation": "Sets the forest trust information for a specified Local Security Authority\u00ef\u00bf\u00bdTrustedDomain object.", "LsaSetInformationPolicy": "Modifies information in a Policy object.", "LsaSetTrustedDomainInfoByName": "The LsaSetTrustedDomainInfoByName function sets values for a TrustedDomain object.", "LsaSetTrustedDomainInformation": "The LsaSetTrustedDomainInformation function modifies a Policy object's information about a trusted domain.", "LsaStorePrivateData": "Do not use the LSA private data functions.", "LsaUnregisterPolicyChangeNotification": "The LsaUnregisterPolicyChangeNotification function disables a previously registered notification event.", "MakeAbsoluteSD": "Creates a security descriptor in absolute format by using a security descriptor in self-relative format as a template.", "MakeSelfRelativeSD": "Creates a security descriptor in self-relative format by using a security descriptor in absolute format as a template.", "MakeSignature": "Generates a cryptographic checksum of the message, and also includes sequencing information to prevent message loss or insertion.", "MapGeneric": "The MapGeneric method requests that the generic access rights in an access mask be mapped to their corresponding standard and specific access rights.", "MapGenericMask": "Maps the generic access rights in an access mask to specific and standard access rights.", "Msv1_0SubAuthenticationFilter": "Performs user logon authentication that is specific to domain controllers.", "Msv1_0SubAuthenticationRoutine": "Performs client/server-specific authentication.", "Msv1_0SubAuthenticationRoutineEx": "Performs Remote Access Service authentication when subauthentication is requested by calling the LogonUser function.", "Msv1_0SubAuthenticationRoutineGeneric": "Performs Remote Access Service authentication when subauthentication is requested by calling the LsaCallAuthenticationPackage function.", "NameFromSid": "Gets the display name that corresponds to the specified security identifier.", "NamesFromSids": "Gets the display names that correspond to the specified security identifiers.", "NCryptCloseProtectionDescriptor": "Zeros and frees a protection descriptor object and releases its handle.", "NCryptCreateClaim": "Creates a key attestation claim.", "NCryptCreatePersistedKey": "Creates a new key and stores it in the specified key storage provider.", "NCryptCreateProtectionDescriptor": "Retrieves a handle to a protection descriptor object.", "NCryptDecrypt": "Decrypts a block of encrypted data.", "NCryptDeleteKey": "Deletes a CNG key.", "NCryptDeriveKey": "Derives a key from a secret agreement value.", "NCryptEncrypt": "Encrypts a block of data.", "NCryptEnumAlgorithms": "Obtains the names of the algorithms that are supported by the specified key storage provider.", "NCryptEnumKeys": "Obtains the names of the keys that are stored by the provider.", "NCryptEnumStorageProviders": "Obtains the names of the registered key storage providers.", "NCryptExportKey": "Exports a CNG key to a memory BLOB.", "NCryptFinalizeKey": "Completes a CNG key storage key.", "NCryptFreeBuffer": "Releases a block of memory allocated by a CNG key storage provider.", "NCryptFreeObject": "Frees a CNG key storage object.", "NCryptGetProperty": "Retrieves the value of a named property for a key storage object.", "NCryptGetProtectionDescriptorInfo": "Retrieves a protection descriptor rule string.", "NCryptImportKey": "Imports a Cryptography API:_Next Generation key from a memory BLOB.", "NCryptIsAlgSupported": "Determines if a CNG key storage provider supports a specific cryptographic algorithm.", "NCryptIsKeyHandle": "Determines if the specified handle is a CNG key handle.", "NCryptKeyDerivation": "Creates a key from another key by using the specified key derivation function.", "NCryptNotifyChangeKey": "Creates or removes a key change notification.", "NCryptOpenKey": "Opens a key that exists in the specified CNG key storage provider.", "NCryptOpenStorageProvider": "Loads and initializes a CNG key storage provider.", "NCryptProtectSecret": "Encrypts data to a specified protection descriptor.", "NCryptQueryProtectionDescriptorName": "Retrieves the protection descriptor rule string associated with a registered descriptor display name.", "NCryptRegisterProtectionDescriptorName": "Registers the display name and the associated rule string for a protection descriptor.", "NCryptSecretAgreement": "Creates a secret agreement value from a private and a public key.", "NCryptSetProperty": "Sets the value for a named property for a CNG key storage object.", "NCryptSignHash": "Creates a signature of a hash value.", "NCryptStreamClose": "Closes a data protection stream object opened by using the NCryptStreamOpenToProtect or NCryptStreamOpenToUnprotect functions.", "NCryptStreamOpenToProtect": "Opens a stream object that can be used to encrypt large amounts of data to a given protection descriptor.", "NCryptStreamOpenToUnprotect": "Opens a stream object that can be used to decrypt large amounts of data to the same protection descriptor used for encryption.", "NCryptStreamOpenToUnprotectEx": "Opens a stream object that can be used to decrypt large amounts of data to the same protection descriptor used for encryption.", "NCryptStreamUpdate": "Encrypts and decrypts blocks of data.", "NCryptTranslateHandle": "Translates a CryptoAPI handle into a CNG key handle.", "NCryptUnprotectSecret": "Decrypts data to a specified protection descriptor.", "NCryptVerifyClaim": "Verifies a key attestation claim.", "NCryptVerifySignature": "Verifies that the specified signature matches the specified hash.", "NetAddServiceAccount": "Creates a standalone managed service account and stores the account information on the local computer.", "NetEnumerateServiceAccounts": "Enumerates the standalone managed service accounts on the specified server.", "NetIsServiceAccount": "Tests whether the specified standalone managed service account exists in the Netlogon store on the specified server.", "NetQueryServiceAccount": "Gets information about the specified managed service account.", "NetRemoveServiceAccount": "Deletes the specified service account from the Active Directory database if the account is a standalone managed service account.", "Next": "Moves to the next row in the row-enumeration sequence.", "Notify": "Called by the server engine to notify an exit module that an event has occurred.", "NotifyBootConfigStatus": "Reports the boot status to the service control manager.", "NotifyServiceStatusChangeA": "Enables an application to receive notification when the specified service is created or deleted or when its status changes.", "NotifyServiceStatusChangeW": "Enables an application to receive notification when the specified service is created or deleted or when its status changes.", "NPAddConnection": "Connects a local device to a network resource.", "NPAddConnection3": "Connects a local device to a network resource.", "NPCancelConnection": "Disconnects a network connection.", "NPCloseEnum": "Closes an enumeration.", "NPDeviceMode": "Specifies the parent window of a device.", "NPDirectoryNotify": "Notifies the network provider of certain directory operations.", "NPEnumResource": "Performs an enumeration based on a handle returned by NPOpenEnum.", "NPFMXEditPerm": "Enables network vendors to supply their own permission editor dialog boxes.", "NPFMXGetPermCaps": "Retrieves the capabilities of the permission editor.", "NPFMXGetPermHelp": "Retrieves the help file and help context of the permission editor dialog boxes when a menu item in the Security menu of File Manager is selected and F1 is pressed.", "NPFormatNetworkName": "Formats a network name in a provider-specific format for display in a control.", "NPGetCaps": "Returns information about which services are supported on the network.", "NPGetConnection": "Retrieves information about a connection.", "NPGetConnection3": "Retrieves information about a network connection, even if it is currently disconnected.", "NPGetConnectionPerformance": "Returns information about the expected performance of a connection used to access a network resource.", "NPGetDirectoryType": "Determines the type of a network directory.", "NPGetPropertyText": "Retrieves the names of buttons to add to a property dialog box for a network resource.", "NPGetResourceInformation": "Separates the part of a network resource accessed through the WNet API from the part accessed through APIs specific to the resource type.", "NPGetResourceParent": "Retrieves the parent of a specified network resource in the browse hierarchy.", "NPGetUniversalName": "Retrieves the universal name of a network resource.", "NPGetUser": "Retrieves the value of the current default user name or the user name used to establish a network connection.", "NPLogonNotify": "MPR calls this function to notify the credential manager that a logon event has occurred, allowing the credential manager to return a logon script.", "NPOpenEnum": "Opens an enumeration of network resources or existing connections.", "NPPasswordChangeNotify": "MPR calls this function to notify the credential manager of a password change event.", "NPPropertyDialog": "Called when the user clicks a button added by using the NPPropertyDialog function.", "NPSearchDialog": "Enables network vendors to supply their own form of browsing and search, beyond the hierarchical view presented in the Connection dialog box.", "ObjectCloseAuditAlarmA": "Generates an audit message in the security event log when a handle to a private object is deleted.", "ObjectCloseAuditAlarmW": "Generates an audit message in the security event log when a handle to a private object is deleted.", "ObjectDeleteAuditAlarmA": "Generates audit messages when an object is deleted.", "ObjectDeleteAuditAlarmW": "Generates audit messages when an object is deleted.", "ObjectOpenAuditAlarmA": "Generates audit messages when a client application attempts to gain access to an object or to create a new one.", "ObjectOpenAuditAlarmW": "Generates audit messages when a client application attempts to gain access to an object or to create a new one.", "ObjectPrivilegeAuditAlarmA": "Generates an audit message in the security event log.", "ObjectPrivilegeAuditAlarmW": "Generates an audit message in the security event log.", "Open": "Opens an existing private key.", "OpenApplication": "Opens the IAzApplication object with the specified name.", "OpenApplication2": "Opens the IAzApplication2 object with the specified name.", "OpenApplicationGroup": "Opens an IAzApplicationGroup object by specifying its name.", "OpenConnection": "Establishes a connection with a Certificate Services server.", "OpenElevatedEditor": "Opens an access control editor when a user clicks the Edit button on an access control editor page that displays an image of a shield on that Edit button.", "OpenOperation": "Opens an IAzOperation object with the specified name.", "OpenPersonalTrustDBDialog": "Displays the Certificates dialog box.", "OpenPersonalTrustDBDialogEx": "Displays the Certificates dialog box.", "OpenProcessToken": "Opens the access token associated with a process.", "OpenRole": "Opens an IAzRole object with the specified name.", "OpenRoleAssignment": "Opens an IAzRoleAssignment object with the specified name in this scope.", "OpenRoleDefinition": "Opens an IAzRoleDefinition object with the specified name in this scope.", "OpenSCManagerA": "Establishes a connection to the service control manager on the specified computer and opens the specified service control manager database.", "OpenSCManagerW": "Establishes a connection to the service control manager on the specified computer and opens the specified service control manager database.", "OpenScope": "Opens an IAzScope object with the specified name.", "OpenScope2": "Opens an IAzScope2 object with the specified name.", "OpenServiceA": "Opens an existing service.", "OpenServiceW": "Opens an existing service.", "OpenTask": "Opens an IAzTask object with the specified name.", "OpenThreadToken": "Opens the access token associated with a thread.", "OpenView": "Opens a view to a Certificate Services database and instantiates an instance of an IEnumCERTVIEWROW object.", "PCRYPT_DECRYPT_PRIVATE_KEY_FUNC": "Decrypts the private key and returns the decrypted key in the pbClearTextKey parameter.", "PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC": "Encrypts the private key and returns the encrypted contents in the pbEncryptedKey parameter.", "PCRYPT_RESOLVE_HCRYPTPROV_FUNC": "Returns a handle to a cryptographic service provider by using the phCryptProv parameter to receive the key being imported.", "pCryptSIPGetCaps": "Is implemented by a subject interface package to report capabilities.", "PFN_CDF_PARSE_ERROR_CALLBACK": "Called for Catalog Definition Function errors while parsing a catalog definition file.", "PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK": "An application-defined callback function that allows the application to filter certificates that might be added to the certificate chain.", "PFN_CERT_CREATE_CONTEXT_SORT_FUNC": "Called for each sorted context entry when a context is created.", "PFN_CERT_DLL_OPEN_STORE_PROV_FUNC": "Implemented by a store-provider and is used to open a store.", "PFN_CERT_ENUM_PHYSICAL_STORE": "The CertEnumPhysicalStoreCallback callback function formats and presents information on each physical store found by a call to CertEnumPhysicalStore.", "PFN_CERT_ENUM_SYSTEM_STORE": "The CertEnumSystemStoreCallback callback function formats and presents information on each system store found by a call to CertEnumSystemStore.", "PFN_CERT_ENUM_SYSTEM_STORE_LOCATION": "The CertEnumSystemStoreLocationCallback callback function formats and presents information on each system store location found by a call to CertEnumSystemStoreLocation.", "PFN_CERT_STORE_PROV_CLOSE": "An application-defined callback function that is called by CertCloseStore when the store's reference count is decremented to zero.", "PFN_CERT_STORE_PROV_CONTROL": "The CertStoreProvControl callback function supports the CertControlStore API.", "PFN_CERT_STORE_PROV_DELETE_CERT": "An application-defined callback function that is called by CertDeleteCertificateFromStore before deleting a certificate from the store.", "PFN_CERT_STORE_PROV_DELETE_CRL": "An application-defined callback function that is called by CertDeleteCRLFromStore before deleting the CRL from the store.", "PFN_CERT_STORE_PROV_READ_CERT": "An application-defined callback function that reads the provider's copy of the certificate context.", "PFN_CERT_STORE_PROV_READ_CRL": "An application-defined callback function that reads the provider's copy of the CRL context.", "PFN_CERT_STORE_PROV_READ_CTL": "The CertStoreProvReadCTL callback function is called to read the provider's copy of the CTL context and, if it exists, to create a new CTL context.", "PFN_CERT_STORE_PROV_SET_CERT_PROPERTY": "An application-defined callback function that is called by CertSetCertificateContextProperty before setting the certificate's property.", "PFN_CERT_STORE_PROV_SET_CRL_PROPERTY": "An application-defined callback function that is called by CertSetCRLContextProperty before setting the CRL's property.", "PFN_CERT_STORE_PROV_SET_CTL_PROPERTY": "The CertStoreProvSetCTLProperty callback function determines whether a property can be set on a CTL.", "PFN_CERT_STORE_PROV_WRITE_CERT": "An application-defined callback function that is called by CertAddEncodedCertificateToStore, CertAddCertificateContextToStore and CertAddSerializedElementToStore before adding to the store.", "PFN_CERT_STORE_PROV_WRITE_CRL": "An application-defined callback function that is called by CertAddEncodedCRLToStore, CertAddCRLContextToStore and CertAddSerializedElementToStore before adding to the store.", "PFN_CERT_STORE_PROV_WRITE_CTL": "The CertStoreProvWriteCTL callback function can be called by CertAddEncodedCTLToStore, CertAddCTLContextToStore or CertAddSerializedElementToStore before a CTL is added to the store.", "PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY": "Imports an already decrypted content encryption key.", "PFN_CMSG_CNG_IMPORT_KEY_AGREE": "Decrypts a content encryption key that is intended for a key agreement recipient.", "PFN_CMSG_CNG_IMPORT_KEY_TRANS": "Imports and decrypts a content encryption key that is intended for a key transport recipient.", "PFN_CMSG_EXPORT_KEY_AGREE": "Encrypts and exports the content encryption key for a key agreement recipient of an enveloped message.", "PFN_CMSG_EXPORT_KEY_TRANS": "Encrypts and exports the content encryption key for a key transport recipient of an enveloped message.", "PFN_CMSG_EXPORT_MAIL_LIST": "Encrypts and exports the content encryption key for a mailing list recipient of an enveloped message.", "PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY": "Generates the symmetric key used to encrypt content for an enveloped message.", "PFN_CMSG_IMPORT_KEY_AGREE": "Imports a content encryption key for a key transport recipient of an enveloped message.", "PFN_CMSG_IMPORT_KEY_TRANS": "Imports a content encryption key for a key transport recipient of an enveloped message.", "PFN_CMSG_IMPORT_MAIL_LIST": "Imports a content encryption key for a key transport recipient of an enveloped message.", "PFN_CRYPT_ENUM_KEYID_PROP": "The CRYPT_ENUM_KEYID_PROP callback function is used with the CryptEnumKeyIdentifierProperties function.", "PFN_CRYPT_ENUM_OID_FUNC": "The CRYPT_ENUM_OID_FUNCTION callback function is used with the CryptEnumOIDFunction function.", "PFN_CRYPT_ENUM_OID_INFO": "The CRYPT_ENUM_OID_INFO callback function is used with the CryptEnumOIDInfo function.", "PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC": "Called by CryptExportPublicKeyInfoEx to export a public key BLOB and encode it.", "PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC": "Called to decode and return the hash algorithm identifier and optionally the signature parameters.", "PFN_CRYPT_GET_SIGNER_CERTIFICATE": "The CryptGetSignerCertificateCallback user supplied callback function is used with the CRYPT_VERIFY_MESSAGE_PARA structure to get and verify a message signer's certificate.", "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH": "Specifies that an object has changed.", "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE": "Releases the object returned by the provider.", "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER": "Releases memory for an object identifier.", "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD": "Releases the password used to encrypt a personal information exchange byte array.", "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET": "Retrieves an object.", "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE": "Initializes the provider.", "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE": "Releases the provider.", "PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC": "Called to sign and encode a computed hash.", "PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC": "Called to decrypt an encoded signature and compare it to a computed hash.", "PFN_CRYPT_XML_CREATE_TRANSFORM": "Creates a transform for a specified data provider.", "PFN_CRYPT_XML_DATA_PROVIDER_CLOSE": "Releases the data provider.", "PFN_CRYPT_XML_DATA_PROVIDER_READ": "Reads XML data.", "PFN_CRYPT_XML_ENUM_ALG_INFO": "Enumerates predefined and registered CRYPT_XML_ALGORITHM_INFO entries.", "PFN_CRYPT_XML_WRITE_CALLBACK": "Writes XML data.", "PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC": "Called by CryptImportPublicKeyInfoEx2 to decode the public key algorithm identifier, load the algorithm provider, and import the key pair.", "PFNCFILTERPROC": "An application-defined callback function that filters the certificates that appear in the digital signature wizard that are displayed by the CryptUIWizDigitalSign function.", "PFNCMFILTERPROC": "Filters each certificate to determine whether it will appear in the certificate selection dialog box that is displayed by the CertSelectCertificate function.", "PFNCMHOOKPROC": "Called before messages are processed by the certificate selection dialog box produced by the CertSelectCertificate function.", "PFNCryptStreamOutputCallback": "Receives encrypted or decrypted data from tasks started by using the NCryptStreamOpenToProtect or NCryptStreamOpenToUnprotect functions.", "pfnIsFileSupported": "Queries the subject interface packages listed in the registry to determine which SIP handles the file type.", "pfnIsFileSupportedName": "Queries the subject interface packages listed in the registry to determine which SIP handles the file type.", "PFSCE_FREE_INFO": "Frees the memory for buffers allocated by the Security Configuration tool set when it calls PFSCE_QUERY_INFO.", "PFSCE_LOG_INFO": "Logs messages to the configuration log file or analysis log file.", "PFSCE_QUERY_INFO": "Queries service-specific information from the Security Configuration file or analysis database.", "PFSCE_SET_INFO": "Sets or overwrites service-specific configuration and analysis information.", "PFXExportCertStore": "Exports the certificates and, if available, the associated private keys from the referenced certificate store.", "PFXExportCertStoreEx": "Exports the certificates and, if available, their associated private keys from the referenced certificate store.", "PFXImportCertStore": "Imports a PFX BLOB and returns the handle of a store that contains certificates and any associated private keys.", "PFXIsPFXBlob": "The PFXIsPFXBlob function attempts to decode the outer layer of a BLOB as a PFX packet.", "PFXVerifyPassword": "The PFXVerifyPassword function attempts to decode the outer layer of a BLOB as a Personal Information Exchange packet and to decrypt it with the given password.", "Ping": "Tests a DCOM connection with an Online Certificate Status Protocol responder service.", "PostUnInstall": "Is not implemented.", "PreUnInstall": "Removes registry and IIS settings for the Network Device Enrollment Service role.", "PrivilegeCheck": "Determines whether a specified set of privileges are enabled in an access token.", "PrivilegedServiceAuditAlarmA": "Generates an audit message in the security event log.", "PrivilegedServiceAuditAlarmW": "Generates an audit message in the security event log.", "ProcessResponseMessage": "Process a response message and return the disposition of the message.", "PropertySheetPageCallback": "The PropertySheetPageCallback method notifies an EditSecurity or CreateSecurityPage caller that an access control editor property page is being created or destroyed.", "PSAM_INIT_NOTIFICATION_ROUTINE": "The InitializeChangeNotify function is implemented by a password filter DLL.", "PSAM_PASSWORD_FILTER_ROUTINE": "Implemented by a password filter DLL.", "PSAM_PASSWORD_NOTIFICATION_ROUTINE": "Is implemented by a password filter DLL.", "PstAcquirePrivateKey": "Associates the caller's private key with the specified certificate.", "PstGetCertificates": "Retrieves certificate chains that specify certificates that can be used to authenticate a user on the specified server.", "PstGetTrustAnchors": "Retrieves a list of certification authorities trusted by the specified server.", "PstGetUserNameForCertificate": "Retrieves the user name associated with the specified certificate.", "PstMapCertificate": "Retrieves a structure that specifies information that can be used to create a user token associated with the specified certificate.", "PstValidate": "Validates the specified certificate.", "PublishCRL": "Sends a request to the Certificate Services certification authority.", "PublishCRLs": "Publishes certificate revocation lists.", "put_Algorithm": "Specifies or retrieves an object identifier for the public key algorithm.", "put_AlternateSignatureAlgorithm": "Specifies and retrieves a Boolean value that specifies whether the GetSignatureAlgorithm method should retrieve a discrete or combined algorithm object identifier for a PKCS", "put_ApplicationData": "The ApplicationData property of IAzTask sets or retrieves an opaque field that can be used by the application to store information.", "put_ApplyStoreSacl": "Sets or retrieves a value that indicates whether policy audits should be generated when the authorization store is modified.", "put_ArchivePrivateKey": "Specifies or retrieves a Boolean value that indicates whether to archive a private key on the certification authority.", "put_AttestationEncryptionCertificate": "The certificate used to encrypt the EKPUB and EKCERT values from the client.", "put_AttestPrivateKey": "True if the created private key needs to be attested ; otherwise false.", "put_AuthFlags": "Specifies and retrieves a value that indicates the authentication type used by the client to authenticate itself to the certificate enrollment policy server.", "put_AuthzInterfaceClsid": "Sets or retrieves the class identifier uses to perform application-specific operations.", "put_BizRule": "Sets or retrieves the text of the script that implements the business rule.", "put_BizRuleImportedPath": "Sets or retrieves the path to the file from which the business rule is imported.", "put_BizRuleLanguage": "Sets or retrieves the scripting language in which the business rule is implemented.", "put_BizRulesEnabled": "Gets or sets a value that indicates whether business rules are enabled for this application.", "put_BusinessRuleResult": "Sets a value that indicates whether the Business Rule allows the user to perform the requested task.", "put_BusinessRuleString": "Sets or retrieves an application-specific string for the Business Rule.", "put_CAConfig": "Gets or sets a certification authority name with which a signing certificate must be signed.", "put_CAStoreFlags": "The CAStoreFlags property of IEnroll4 sets or retrieves a flag that controls the certification authority store when the store is opened.", "put_CAStoreName": "Sets or retrieves the name of the store where all non-\"ROOT\" and non-\"MY\" certificates are kept.", "put_CAStoreNameWStr": "The CAStoreNameWStr property of IEnroll4 sets or retrieves the name of the store where all non-\"ROOT\" and non-\"MY\" certificates are kept.", "put_CAStoreType": "Sets or retrieves the type of store to use for the store specified by the CAStoreName property.", "put_CAStoreTypeWStr": "Sets or retrieves the type of store to use for the store specified by the CAStoreNameWStr property.", "put_Certificate": "Specifies or retrieves a byte array that contains the certificate associated with the private key.", "put_CertificateDescription": "Specifies or retrieves a string that contains a description of the certificate.", "put_CertificateFriendlyName": "Gets or sets the friendly name for the certificate.", "put_ChallengePassword": "The password to use when creating a request with a challenge.", "put_ClientId": "The ClientId property sets or retrieves a client ID request attribute.", "put_ContainerName": "The ContainerName property of ICEnroll4 sets or retrieves the name of the key container to use.", "put_ContainerNamePrefix": "Specifies or retrieves a prefix added to the name of the key container.", "put_ContainerNameWStr": "Sets or retrieves the name of the key container to use.", "put_Cost": "Specifies and retrieves an arbitrary cost for contacting the certificate enrollment policy server.", "put_Critical": "Specifies and retrieves a Boolean value that identifies whether the certificate extension is critical.", "put_CspInformations": "Specifies or retrieves a collection of ICspInformation objects that contain information about the available cryptographic providers that support the public key algorithm associated with the private key.", "put_CspStatus": "Specifies or retrieves an ICspStatus object that contains information about the cryptographic provider and algorithm pair associated with the private key.", "put_Default": "Specifies and retrieves a Boolean value that indicates whether this is the default certificate enrollment policy server.", "put_DeleteRequestCert": "The DeleteRequestCert property of IEnroll4 sets or retrieves a Boolean value that determines whether dummy certificates in the request store are deleted.", "put_Description": "Specifies or retrieves a string that contains a description of the private key.", "put_Display": "Specifies or retrieves a value that indicates whether to display the status information in a user interface.", "put_DomainTimeout": "Sets or retrieves the time in milliseconds after which a domain is determined to be unreachable.", "put_EnableSMIMECapabilities": "Controls whether the PKCS", "put_EnableT61DNEncoding": "Sets or retrieves a Boolean value that determines whether the distinguished name in the request is encoded as a T61 string instead of as a Unicode string.", "put_EncryptionAlgorithm": "The encryption algorithm used to encrypt the EKPUB and EKCERT values from the client.", "put_EncryptionStrength": "Identifies the bit length for the EncryptionAlgorithm to use for encryption.", "put_Error": "Specifies and retrieves a value that identifies the error status of the certificate enrollment process.", "put_Existing": "Gets or sets a value that indicates whether the private key already exists.", "put_ExistingCACertificate": "Gets or sets the binary value that has been encoded by using Distinguished Encoding Rules certificate that corresponds to an existing key.", "put_ExportPolicy": "Specifies or retrieves export constraints for a private key.", "put_Flags": "Specifies or retrieves a value that indicates whether the certificate enrollment policy server policy information can be loaded from group policy, from the registry, or both.", "put_FriendlyName": "Specifies or retrieves a display name for the private key.", "put_GenerateAudits": "Sets or retrieves a value that indicates whether run-time audits should be generated.", "put_GenKeyFlags": "Sets or retrieves the values passed to CryptGenKey when the certificate request is generated.", "put_HashAlgID": "The HashAlgID property of IEnroll4 sets or retrieves the hash algorithm used when signing a PKCS", "put_HashAlgorithm": "Gets or sets an identifier for the hash algorithm used to sign a certificate.", "put_HashAlgorithmWStr": "Sets or retrieves only the signature hashing algorithm used to sign the PKCS", "put_IncludeSubjectKeyID": "The IncludeSubjectKeyID property of IEnroll4 determines whether the subject key ID extension is added to the certificate request that is generated.", "put_IsRoleDefinition": "Sets or retrieves a value that indicates whether the task is a role definition.", "put_Issuer": "Specifies or retrieves the name of the certificate issuer.", "put_KeyArchivalCertificate": "Specifies or retrieves a certification authority encryption certificate.", "put_KeyContainerNamePrefix": "Specifies or retrieves a prefix used to create the container name for a new private key.", "put_KeyProtection": "Specifies or retrieves a value that indicates how a private key is protected before use.", "put_KeySpec": "Sets or retrieves the type of key generated.", "put_KeyUsage": "Specifies or retrieves a value that identifies the specific purpose for which a private key can be used.", "put_LdapQuery": "Sets or retrieves the Lightweight Directory Access Protocol query used to define membership for an LDAP query application group.", "put_LDAPQueryDN": "Retrieves or sets the domain name of the directory object to be used during evaluation of LDAP query groups.", "put_LegacyCsp": "Specifies or retrieves a Boolean value that indicates whether the provider is a CryptoAPI.", "put_Length": "Gets or sets the strength of the key to one of the values supported by the cryptographic service provider.", "put_LimitExchangeKeyToEncipherment": "The LimitExchangeKeyToEncipherment property of IEnroll4 sets or retrieves a Boolean value that determines whether an AT_KEYEXCHANGE request contains digital signature and nonrepudiation key usages.", "put_LocalRevocationInformation": "Gets or sets the certificate revocation list of the local machine.", "put_MachineContext": "Specifies or retrieves a Boolean value that identifies the local certificate store context.", "put_MaxScriptEngines": "Sets or retrieves the maximum number of Business Rule script engines that will be cached.", "put_MyStoreFlags": "Sets or retrieves the registry location used for the MY store.", "put_MyStoreName": "Sets or retrieves the name of the store where certificates with linked private keys are kept.", "put_MyStoreNameWStr": "The MyStoreNameWStr property of IEnroll4 sets or retrieves the name of the store where certificates with linked private keys are kept.", "put_MyStoreType": "Sets or retrieves the type of store specified by the MyStoreName property.", "put_MyStoreTypeWStr": "Sets or retrieves the type of store specified by the MyStoreTypeWStr property.", "put_Name": "Sets or retrieves the name of the task.", "put_NotAfter": "Specifies or retrieves the date and time after which the certificate is no longer valid.", "put_NotBefore": "Specifies or retrieves the date and time before which the certificate is not valid.", "put_NullSigned": "Specifies and retrieves a Boolean value that indicates whether the certificate request is null-signed.", "put_OldCertificate": "Gets or sets an old certificate that a request is intended to replace.", "put_OperationID": "Sets or retrieves an application-specific value that uniquely identifies the operation within the application.", "put_Ordinal": "Specifies or retrieves the position of the ICspStatus object in the ICspStatuses collection.", "put_Parameters": "Retrieves a byte array that contains the parameters associated with the signature algorithm.", "put_ParentWindow": "Specifies or retrieves the ID of the window used to display key information.", "put_Pin": "Specifies a personal identification number that is used to authenticate users prior to accessing a private key container on a smart card.", "put_PrivateKeyArchiveCertificate": "Sets or retrieves the certificate that is used to archive a private key with a PKCS", "put_Property": "Specifies or retrieves a property value for the IX509CertificateTemplateWritable object.", "put_PropertyId": "Specifies or retrieves a value of the CERTENROLL_PROPERTYID enumeration that identifies an external certificate property.", "put_ProviderCLSID": "Gets or sets the CLSID of the revocation information provider used by the CA configuration.", "put_ProviderFlags": "The ProviderFlags property of IEnroll4 sets or retrieves the provider type.", "put_ProviderName": "The ProviderName property of ICEnroll4 sets or retrieves the name of the cryptographic service provider to use.", "put_ProviderNameWStr": "Sets or retrieves the name of the cryptographic service provider to use.", "put_ProviderProperties": "Gets or sets information that provides certificate status responses.", "put_ProviderType": "Sets or retrieves the type of provider.", "put_PublicKeyAlgorithm": "Specifies and retrieves an object identifier for the public key algorithm used in the GetSignatureAlgorithm method.", "put_PVKFileName": "The PVKFileName property of ICEnroll4 sets or retrieves the name of the file that will contain exported keys.", "put_PVKFileNameWStr": "Sets or retrieves the name of the file that will contain exported keys.", "put_ReaderName": "Specifies or retrieves the name of a smart card reader.", "put_ReminderDuration": "Gets or sets the percentage of a signing certificate lifetime after which a warning event is logged.", "put_RenewalCertificate": "Specifies the certificate context for the renewal certificate.", "put_RequesterName": "Specifies or retrieves a string that contains the Security Account Manager name of the end-entity requesting the certificate.", "put_RequestStoreFlags": "The RequestStoreFlags property of IEnroll4 sets or retrieves the registry location used for the request store.", "put_RequestStoreName": "Sets or retrievesICEnroll the name of the store that contains the dummy certificate.", "put_RequestStoreNameWStr": "The RequestStoreNameWStr property of IEnroll4 sets or retrieves the name of the store that contains the dummy certificate.", "put_RequestStoreType": "Sets or retrieves the type of store to use for the store specified by the RequestStoreName property.", "put_RequestStoreTypeWStr": "Sets or retrieves the type of store to use for the store specified by the RequestStoreNameWStr property.", "put_ReuseHardwareKeyIfUnableToGenNew": "The ReuseHardwareKeyIfUnableToGenNew property of IEnroll4 sets or retrieves a Boolean value that determines the action taken by the certificate enrollment control object if an error is encountered when generating a new key.", "put_RoleForAccessCheck": "Sets or retrieves the role that is used to perform the access check.", "put_RootStoreFlags": "Sets or retrieves the registry location used for the root store.", "put_RootStoreName": "Sets or retrieves the name of the root store where all intrinsically trusted, self-signed root certificates are kept.", "put_RootStoreNameWStr": "The RootStoreNameWStr property of IEnroll4 sets or retrieves the name of the root store where all intrinsically trusted, self-signed root certificates are kept.", "put_RootStoreType": "Sets or retrieves the type of store to use for the store specified by the RootStoreName property.", "put_RootStoreTypeWStr": "Sets or retrieves the type of store to use for the store specified by the RootStoreNameWStr property.", "put_ScriptEngineTimeout": "Sets or retrieves the time in milliseconds that the IAzClientContext::AccessCheck method will wait for a Business Rule to complete execution before canceling it.", "put_SecurityDescriptor": "Specifies or retrieves the security descriptor for the private key.", "put_Selected": "Specifies or retrieves a value that indicates whether an item can be used during the enrollment process.", "put_SenderNonce": "Specifies or retrieves a byte array that contains a nonce.", "put_SerialNumber": "Specifies and retrieves the certificate serial number.", "put_ServerCapabilities": "Sets the preferred hash and encryption algorithms for the request.", "put_SignerCertificate": "Sets the signer's certificate.", "put_SigningCertificate": "Gets or sets a signing certificate that has been encoded by using Distinguished Encoding Rules responder service uses this certificate to sign its responses to certificate status requests.", "put_SigningCertificateTemplate": "Gets or sets the template name for a signing certificate.", "put_SigningFlags": "Gets or sets a combination of flag values.", "put_Silent": "Gets or sets whether to allow UI during the request.", "put_SmimeCapabilities": "Specifies or retrieves a Boolean value that tells the Encode method whether to create an IX509ExtensionSmimeCapabilities collection that identifies the encryption capabilities supported by the computer.", "put_SPCFileName": "Sets or retrieves the name of the file to which to write the base64-encoded PKCS", "put_SPCFileNameWStr": "The SPCFileNameWStr property of IEnroll4 sets or retrieves the name of the file to which to write the base64-encoded PKCS", "put_Status": "Specifies or retrieves a value that indicates the status of the enrollment process.", "put_Subject": "Specifies or retrieves the X.500 distinguished name of the entity requesting the certificate.", "put_SuppressDefaults": "Specifies or retrieves a Boolean value that indicates whether the default extensions and attributes are included in the request.", "put_Text": "Specifies or retrieves a string that contains a message associated with the status of the enrollment process.", "put_ThumbPrint": "Sets or retrieves a hash of the certificate data.", "put_ThumbPrintWStr": "Sets or retrieves a hash of the certificate data.", "put_TransactionId": "Gets or sets the transaction id for the request.", "put_Type": "Sets or retrieves the group type of the application group.", "put_UIContextMessage": "Specifies or retrieves a string that contains user interface text associated with the private key.", "put_Url": "Specifies or retrieves the URL for the certificate enrollment policy server.", "put_UseExistingKeySet": "The UseExistingKeySet property of IEnroll4 sets or retrieves a Boolean value that determines whether the existing keys should be used.", "put_Value": "Gets or sets the data part of the name-value pair represented by an OCSPProperty object.", "put_Version": "Sets or retrieves the version of the application.", "put_WriteCertToCSP": "Sets or retrieves a Boolean value that determines whether a certificate should be written to the cryptographic service provider.", "put_WriteCertToUserDS": "The WriteCertToUserDS property of IEnroll4 sets or retrieves a Boolean value that determines whether the certificate is written to the user's Active Directory store.", "PWLX_ASSIGN_SHELL_PROTECTION": "Called by GINA to assign protection to the shell program of a newly logged-on user.", "PWLX_CHANGE_PASSWORD_NOTIFY": "Called by GINA to indicate it has changed a password.", "PWLX_CHANGE_PASSWORD_NOTIFY_EX": "Called by GINA to tell a specific network provider that a password has changed.", "PWLX_CLOSE_USER_DESKTOP": "Called by GINA to close an alternate user desktop and clean up after the desktop is closed.", "PWLX_CREATE_USER_DESKTOP": "Called by GINA to create alternate application desktops for the user.", "PWLX_DIALOG_BOX": "Called by the GINA to create a modal dialog box from a dialog box template.", "PWLX_DIALOG_BOX_INDIRECT": "Called by GINA to create a modal dialog box from a dialog box template in memory.", "PWLX_DIALOG_BOX_INDIRECT_PARAM": "Called by GINA to initialize dialog box controls and then create a modal dialog box from a dialog box template in memory.", "PWLX_DIALOG_BOX_PARAM": "Called by GINA to initialize dialog box controls and then create a modal dialog box from a dialog box template resource.", "PWLX_DISCONNECT": "Called by a replacement GINA DLL if Terminal Services is enabled.", "PWLX_GET_OPTION": "Called by GINA to retrieve the current value of an option.", "PWLX_GET_SOURCE_DESKTOP": "Called by GINA to determine the name and handle of the desktop that was current before Winlogon switched to the Winlogon desktop.", "PWLX_MESSAGE_BOX": "Called by GINA to create, display, and operate a message box.", "PWLX_QUERY_CLIENT_CREDENTIALS": "Called by a replacement GINA DLL if Terminal Services is enabled.", "PWLX_QUERY_CONSOLESWITCH_CREDENTIALS": "Called by GINA to read the credentials transferred from the Winlogon of the temporary session to the Winlogon of the destination session.", "PWLX_QUERY_IC_CREDENTIALS": "Called by a replacement GINA DLL if Terminal Services is enabled.", "PWLX_QUERY_TERMINAL_SERVICES_DATA": "Called by GINA to retrieve Terminal Services user configuration information after a user has logged on.", "PWLX_QUERY_TS_LOGON_CREDENTIALS": "Called by a replacement GINA DLL to retrieve credentials information if Terminal Services is enabled.", "PWLX_SAS_NOTIFY": "Called by GINA to notify Winlogon of a secure attention sequence event.", "PWLX_SET_CONTEXT_POINTER": "Called by GINA to specify the context pointer passed by Winlogon as the first parameter to all future calls to GINA functions.", "PWLX_SET_OPTION": "Called by GINA to set the value of an option.", "PWLX_SET_RETURN_DESKTOP": "Called by GINA to specify the alternate application desktop that Winlogon will switch to when the current secure attention sequence event processing function is complete.", "PWLX_SET_TIMEOUT": "Called by GINA to change the time-out associated with a dialog box.", "PWLX_SWITCH_DESKTOP_TO_USER": "Called by GINA to switch to the application desktop.", "PWLX_SWITCH_DESKTOP_TO_WINLOGON": "Allows the GINA DLL switch to the Winlogon desktop.", "PWLX_USE_CTRL_ALT_DEL": "Called by GINA to tell Winlogon to use the standard CTRL+ALT+DEL key combination as a secure attention sequence.", "PWLX_WIN31_MIGRATE": "Called by a replacement GINA DLL if Terminal Services is enabled.", "QueryChanges": "Retrieves a value that specifies whether the template or certification authority collections have changed in Active Directory.", "QueryContextAttributesA": "Lets a transport application query the Credential Security Support Provider security package for certain attributes of a security context.", "QueryContextAttributesExA": "Enables a transport application to query a security package for certain attributes of a security context.", "QueryContextAttributesExW": "Enables a transport application to query a security package for certain attributes of a security context.", "QueryContextAttributesW": "Lets a transport application query the Credential Security Support Provider security package for certain attributes of a security context.", "QueryCredentialsAttributesA": "Retrieves the attributes of a credential, such as the name associated with the credential.", "QueryCredentialsAttributesW": "Retrieves the attributes of a credential, such as the name associated with the credential.", "QuerySecurityAccessMask": "Creates an access mask that represents the access permissions necessary to query the specified object security information.", "QuerySecurityContextToken": "Obtains the access token for a client security context and uses it directly.", "QuerySecurityPackageInfoA": "Retrieves information about a specified security package.", "QuerySecurityPackageInfoW": "Retrieves information about a specified security package.", "QueryServiceConfig2A": "Retrieves the optional configuration parameters of the specified service.", "QueryServiceConfig2W": "Retrieves the optional configuration parameters of the specified service.", "QueryServiceConfigA": "Retrieves the configuration parameters of the specified service.", "QueryServiceConfigW": "Retrieves the configuration parameters of the specified service.", "QueryServiceDynamicInformation": "Retrieves dynamic information related to the current service start.", "QueryServiceLockStatusA": "Retrieves the lock status of the specified service control manager database.", "QueryServiceLockStatusW": "Retrieves the lock status of the specified service control manager database.", "QueryServiceObjectSecurity": "Retrieves a copy of the security descriptor associated with a service object.", "QueryServiceStatus": "Retrieves the current status of the specified service.", "QueryServiceStatusEx": "Retrieves the current status of the specified service based on the specified information level.", "RegGetKeySecurity": "Retrieves a copy of the security descriptor protecting the specified open registry key.", "RegisterServiceCtrlHandlerA": "Registers a function to handle service control requests.", "RegisterServiceCtrlHandlerExA": "Registers a function to handle extended service control requests.", "RegisterServiceCtrlHandlerExW": "Registers a function to handle extended service control requests.", "RegisterServiceCtrlHandlerW": "Registers a function to handle service control requests.", "RegSetKeySecurity": "Sets the security of an open registry key.", "Remove": "Removes an IX509PolicyServerUrl object from the collection by index number.", "RemoveAll": "Removes all parameters from the list of parameters available to business rule scripts.", "RemoveCertificate": "Removes an endorsement certificate related to the endorsement key from the key storage provider.", "RemoveFromCertificate": "Disassociates a property from a certificate.", "RemoveFromRegistry": "Unregisters a certificate enrollment policy server.", "removePendingRequest": "Removes a pending request from the client 's request store.", "removePendingRequestWStr": "Removes a pending request from the client's request store.", "ReportError": "Reports any errors from the requested operation.", "ReportProgress": "Reports the progress of the current operation.", "Reset": "Moves to the beginning of the row-enumeration sequence.", "resetAttributes": "Removes all attributes from the request.", "resetBlobProperties": "Resets the properties of a BLOB.", "resetExtensions": "Removes all extensions from the request.", "ResetForEncode": "Restores the state of the request object to that which existed before the Encode method was called.", "ResubmitRequest": "Submits the specified certificate request to the policy module for the specified certification authority.", "RetrievePending": "Retrieves a certificate's disposition status from an earlier request that may have previously returned CR_DISP_INCOMPLETE or CR_DISP_UNDER_SUBMISSION.", "RevertSecurityContext": "Allows a security package to discontinue the impersonation of the caller and restore its own security context.", "RevertToSelf": "Terminates the impersonation of a client application.", "RevokeCertificate": "Revokes a certificate either on a specified date or immediately.", "RoleAssignments": "Returns a collection of the role assignments associated with this task.", "RtlConvertSidToUnicodeString": "Converts a security identifier to its Unicode character representation.", "RtlDecryptMemory": "Decrypts memory contents previously encrypted by the RtlEncryptMemory function.", "RtlEncryptMemory": "Encrypts memory contents.", "RtlGenRandom": "Generates a pseudo-random number.", "SaferCloseLevel": "Closes a SAFER_LEVEL_HANDLE that was opened by using the SaferIdentifyLevel function or the SaferCreateLevel function.", "SaferComputeTokenFromLevel": "Restricts a token using restrictions specified by a SAFER_LEVEL_HANDLE.", "SaferCreateLevel": "Opens a SAFER_LEVEL_HANDLE.", "SaferGetLevelInformation": "Retrieves information about a policy level.", "SaferGetPolicyInformation": "Gets information about a policy.", "SaferIdentifyLevel": "Retrieves information about a level.", "SaferiIsExecutableFileType": "Determines whether a specified file is an executable file.", "SaferRecordEventLogEntry": "Saves messages to an event log.", "SaferSetLevelInformation": "Sets the information about a policy level.", "SaferSetPolicyInformation": "Sets the global policy controls.", "SaslAcceptSecurityContext": "Wraps a standard call to the Security Support Provider Interface AcceptSecurityContext function and includes creation of SASL server cookies.", "SaslEnumerateProfilesA": "Lists the packages that provide a SASL interface.", "SaslEnumerateProfilesW": "Lists the packages that provide a SASL interface.", "SaslGetContextOption": "Retrieves the specified property of the specified SASL context.", "SaslGetProfilePackageA": "Returns the package information for the specified package.", "SaslGetProfilePackageW": "Returns the package information for the specified package.", "SaslIdentifyPackageA": "Returns the negotiate prefix that matches the specified SASL negotiation buffer.", "SaslIdentifyPackageW": "Returns the negotiate prefix that matches the specified SASL negotiation buffer.", "SaslInitializeSecurityContextA": "Wraps a standard call to the Security Support Provider Interface InitializeSecurityContext function and processes SASL server cookies from the server.", "SaslInitializeSecurityContextW": "Wraps a standard call to the Security Support Provider Interface InitializeSecurityContext function and processes SASL server cookies from the server.", "SaslSetContextOption": "Sets the value of the specified property for the specified SASL context.", "Save": "The Save method causes the snap-in extension to return information about the data that needs to be saved.", "SCardAccessStartedEvent": "Returns an event handle when an event signals that the smart card resource manager is started.", "SCardAddReaderToGroupA": "Adds a reader to a reader group.", "SCardAddReaderToGroupW": "Adds a reader to a reader group.", "SCardAudit": "Writes event messages to the Windows application log Microsoft-Windows-SmartCard-Audit/Authentication.", "SCardBeginTransaction": "Starts a transaction.", "SCardCancel": "Terminates all outstanding actions within a specific resource manager context.", "SCardConnectA": "Establishes a connection between the calling application and a smart card contained by a specific reader.", "SCardConnectW": "Establishes a connection between the calling application and a smart card contained by a specific reader.", "SCardControl": "Gives you direct control of the reader.", "SCardDisconnect": "Terminates a connection previously opened between the calling application and a smart card in the target reader.", "SCardEndTransaction": "Completes a previously declared transaction, allowing other applications to resume interactions with the card.", "SCardEstablishContext": "Establishes the resource manager context within which database operations are performed.", "SCardForgetCardTypeA": "Removes an introduced smart card from the smart card subsystem.", "SCardForgetCardTypeW": "Removes an introduced smart card from the smart card subsystem.", "SCardForgetReaderA": "Removes a previously introduced reader from control by the smart card subsystem.", "SCardForgetReaderGroupA": "Removes a previously introduced smart card reader group from the smart card subsystem.", "SCardForgetReaderGroupW": "Removes a previously introduced smart card reader group from the smart card subsystem.", "SCardForgetReaderW": "Removes a previously introduced reader from control by the smart card subsystem.", "SCardFreeMemory": "Releases memory that has been returned from the resource manager using the SCARD_AUTOALLOCATE length designator.", "SCardGetAttrib": "Retrieves the current reader attributes for the given handle.", "SCardGetCardTypeProviderNameA": "Returns the name of the module that contains the provider for a given card name and provider type.", "SCardGetCardTypeProviderNameW": "Returns the name of the module that contains the provider for a given card name and provider type.", "SCardGetDeviceTypeIdA": "Gets the device type identifier of the card reader for the given reader name.", "SCardGetDeviceTypeIdW": "Gets the device type identifier of the card reader for the given reader name.", "SCardGetProviderIdA": "Returns the identifier of the primary service provider for a given card.", "SCardGetProviderIdW": "Returns the identifier of the primary service provider for a given card.", "SCardGetReaderDeviceInstanceIdA": "Gets the device instance identifier of the card reader for the given reader name.", "SCardGetReaderDeviceInstanceIdW": "Gets the device instance identifier of the card reader for the given reader name.", "SCardGetReaderIconA": "Gets an icon of the smart card reader for a given reader's name.", "SCardGetReaderIconW": "Gets an icon of the smart card reader for a given reader's name.", "SCardGetStatusChangeA": "Blocks execution until the current availability of the cards in a specific set of readers changes.", "SCardGetStatusChangeW": "Blocks execution until the current availability of the cards in a specific set of readers changes.", "SCardGetTransmitCount": "Retrieves the number of transmit operations that have completed since the specified card reader was inserted.", "SCardIntroduceCardTypeA": "Introduces a smart card to the smart card subsystem by adding it to the smart card database.", "SCardIntroduceCardTypeW": "Introduces a smart card to the smart card subsystem by adding it to the smart card database.", "SCardIntroduceReaderA": "Introduces a new name for an existing smart card reader.", "SCardIntroduceReaderGroupA": "Introduces a reader group to the smart card subsystem.", "SCardIntroduceReaderGroupW": "Introduces a reader group to the smart card subsystem.", "SCardIntroduceReaderW": "Introduces a new name for an existing smart card reader.", "SCardIsValidContext": "Determines whether a smart card context handle is valid.", "SCardListCardsA": "Searches the smart card database and provides a list of named cards previously introduced to the system by the user.", "SCardListCardsW": "Searches the smart card database and provides a list of named cards previously introduced to the system by the user.", "SCardListInterfacesA": "Provides a list of interfaces supplied by a given card.", "SCardListInterfacesW": "Provides a list of interfaces supplied by a given card.", "SCardListReaderGroupsA": "Provides the list of reader groups that have previously been introduced to the system.", "SCardListReaderGroupsW": "Provides the list of reader groups that have previously been introduced to the system.", "SCardListReadersA": "Provides the list of readers within a set of named reader groups, eliminating duplicates.", "SCardListReadersW": "Provides the list of readers within a set of named reader groups, eliminating duplicates.", "SCardListReadersWithDeviceInstanceIdA": "Gets the list of readers that have provided a device instance identifier.", "SCardListReadersWithDeviceInstanceIdW": "Gets the list of readers that have provided a device instance identifier.", "SCardLocateCardsA": "Searches the readers listed in the rgReaderStates parameter for a card with an ATR string that matches one of the card names specified in mszCards, returning immediately with the result.", "SCardLocateCardsByATRA": "Searches the readers listed in the rgReaderStates parameter for a card with a name that matches one of the card names contained in one of the SCARD_ATRMASK structures specified by the rgAtrMasks parameter.", "SCardLocateCardsByATRW": "Searches the readers listed in the rgReaderStates parameter for a card with a name that matches one of the card names contained in one of the SCARD_ATRMASK structures specified by the rgAtrMasks parameter.", "SCardLocateCardsW": "Searches the readers listed in the rgReaderStates parameter for a card with an ATR string that matches one of the card names specified in mszCards, returning immediately with the result.", "SCardReadCacheA": "Retrieves the value portion of a name-value pair from the global cache maintained by the Smart Card Resource Manager.", "SCardReadCacheW": "Retrieves the value portion of a name-value pair from the global cache maintained by the Smart Card Resource Manager.", "SCardReconnect": "Reestablishes an existing connection between the calling application and a smart card.", "SCardReleaseContext": "Closes an established resource manager context, freeing any resources allocated under that context, including SCARDHANDLE objects and memory allocated using the SCARD_AUTOALLOCATE length designator.", "SCardReleaseStartedEvent": "Decrements the reference count for a handle acquired by a previous call to the SCardAccessStartedEvent function.", "SCardRemoveReaderFromGroupA": "Removes a reader from an existing reader group.", "SCardRemoveReaderFromGroupW": "Removes a reader from an existing reader group.", "SCardSetAttrib": "Sets the given reader attribute for the given handle.", "SCardSetCardTypeProviderNameA": "Specifies the name of the module containing the provider for a given card name and provider type.", "SCardSetCardTypeProviderNameW": "Specifies the name of the module containing the provider for a given card name and provider type.", "SCardStatusA": "Provides the current status of a smart card in a reader.", "SCardStatusW": "Provides the current status of a smart card in a reader.", "SCardTransmit": "Sends a service request to the smart card and expects to receive data back from the card.", "SCardUIDlgSelectCardA": "Displays the smart card Select Card dialog box.", "SCardUIDlgSelectCardW": "Displays the smart card Select Card dialog box.", "SCardWriteCacheA": "Writes a name-value pair from a smart card to the global cache maintained by the Smart Card Resource Manager.", "SCardWriteCacheW": "Writes a name-value pair from a smart card to the global cache maintained by the Smart Card Resource Manager.", "ScopeExists": "Indicates whether the specified scope exists in this IAzApplication3 object.", "SendSAS": "Simulates a secure attention sequence.", "SetAccountInformation": "Sets the user account information used by the IIS Network Device Enrollment Service extension to perform enrollment on behalf of network devices.", "SetAclInformation": "Sets information about an access control list.", "SetApplicationPoolCredentials": "Specifies user account information for the application pool in which the Certificate Enrollment Web Service runs.", "SetCADistinguishedName": "Sets a certification authority common name and an optional distinguished name suffix.", "SetCAProperty": "Sets a property value for the certification authority.", "SetCASetupProperty": "Sets a property value for a certification authority configuration.", "SetCertificateExtension": "Adds a new extension to the certificate.", "SetCertificateProperty": "To set a property associated with a certificate.", "SetConfigEntry": "Sets configuration information for a certification authority.", "SetConfiguration": "Updates a responder service with configuration changes.", "SetContext": "Specifies the request to be used as the context for subsequent calls to Certificate Services.", "SetContextAttributesA": "Enables a transport application to set attributes of a security context for a security package.", "SetContextAttributesW": "Enables a transport application to set attributes of a security context for a security package.", "SetCredential": "Sets the credential used to contact the Certificate Enrollment Web Service.", "SetCredentialsAttributesA": "Sets the attributes of a credential, such as the name associated with the credential.", "SetCredentialsAttributesW": "Sets the attributes of a credential, such as the name associated with the credential.", "SetDatabaseInformation": "Sets the database related information for the certification authority role.", "SetDefaultValues": "Specifies a default hashing algorithm used to create a digest of the certificate request prior to signing.", "SetEntriesInAclA": "Creates a new access control list by merging new access control or audit control information into an existing ACL structure.", "SetEntriesInAclW": "Creates a new access control list by merging new access control or audit control information into an existing ACL structure.", "SetFileSecurityA": "Sets the security of a file or directory object.", "SetFileSecurityW": "Sets the security of a file or directory object.", "SetHStoreCA": "The SetHStoreCA method specifies the handle to use for the CA store.", "SetHStoreMy": "The SetHStoreMy method specifies the handle to use for the MY store.", "SetHStoreRequest": "The SetHStoreRequest method specifies the handle to use for the request store.", "SetHStoreROOT": "The SetHStoreROOT method specifies the handle to use for the Root store.", "SetKernelObjectSecurity": "Sets the security of a kernel object.", "SetMSCEPSetupProperty": "Sets a property value for a Network Device Enrollment Service configuration.", "SetNameCount": "Sets a name count for the specified distribution point in a certificate revocation list distribution information array.", "SetNamedSecurityInfoA": "Sets specified security information in the security descriptor of a specified object.", "SetNamedSecurityInfoW": "Sets specified security information in the security descriptor of a specified object.", "SetNameEntry": "Sets a name at a specified index of a distribution point in a certificate revocation list distribution information array.", "SetParentCAInformation": "Sets the parent certification authority information for a subordinate CA configuration.", "setPendingRequestInfo": "Sets properties for a pending request.", "setPendingRequestInfoWStr": "Sets properties for a pending request.", "SetPrivateKeyArchiveCertificate": "The SetPrivateKeyArchiveCertificate method specifies the certificate used to archive the private key.", "SetPrivateObjectSecurity": "Modifies a private object's security descriptor.", "SetPrivateObjectSecurityEx": "Modifies the security descriptor of a private object maintained by the resource manager calling this function.", "SetProperty": "Allows a module to set a property value.", "SetRequestAttributes": "Sets attributes in the specified pending certificate request.", "SetRestriction": "Sets the sorting and qualifying restrictions on a column.", "SetResultColumn": "Specifies a column for the result set of a customized view of the Certificate Services database.", "SetResultColumnCount": "Specifies the maximum number of columns for the result set of a customized view of the Certificate Services database.", "SetSecurity": "Updates security descriptor information for an Online Certificate Status Protocol responder server.", "SetSecurityAccessMask": "Creates an access mask that represents the access permissions necessary to set the specified object security information.", "SetSecurityDescriptorControl": "Sets the control bits of a security descriptor.", "SetSecurityDescriptorDacl": "Sets information in a discretionary access control list.", "SetSecurityDescriptorGroup": "Sets the primary group information of an absolute-format security descriptor, replacing any primary group information already present in the security descriptor.", "SetSecurityDescriptorOwner": "Sets the owner information of an absolute-format security descriptor.", "SetSecurityDescriptorRMControl": "Sets the resource manager control bits in the SECURITY_DESCRIPTOR structure.", "SetSecurityDescriptorSacl": "Sets information in a system access control list.", "SetSecurityInfo": "Sets specified security information in the security descriptor of a specified object.", "SetServiceObjectSecurity": "Sets the security descriptor of a service object.", "SetServiceStatus": "Updates the service control manager's status information for the calling service.", "SetSharedFolder": "Specifies the path to be used as the certification authority's shared folder.", "SetSignerCertificate": "The SetSignerCertificate method specifies the signer 's certificate.", "SetStringProperty": "Specifies the certificate enrollment policy server ID or the display name of the CEP server.", "SetTable": "Specifies which Certificate Services database table is used for subsequent calls to the methods of the ICertView2 interface.", "SetThreadToken": "Assigns an impersonation token to a thread.", "SetTokenInformation": "Sets various types of information for a specified access token.", "SetUserObjectSecurity": "Sets the security of a user object.", "SetValue": "Sets a string value at the specified index of the string array.", "SetValueOnCertificate": "Associates a property value with an existing certificate.", "SetWebCAInformation": "Sets the certification authority information for the Certification Authority Web Enrollment role.", "ShutDown": "Called by the server engine before the server is terminated.", "Skip": "Skips a specified number of rows in the row enumeration sequence.", "SLAcquireGenuineTicket": "Gets a XrML genuine ticket acquired from the Software Licensing Server.", "SLActivateProduct": "Acquires a use license from the Software License Server.", "SLClose": "Closes the Software Licensing Client context handle.", "SLConsumeRight": "Let an application to exercise rights on a locally-stored licenses.", "SLDepositMigrationBlob": "Deposits licensing information previously collected and gathered using the SLGatherMigrationBlob function.", "SLDepositOfflineConfirmationId": "Deposits Installation ID for offline activation.", "SLDepositOfflineConfirmationIdEx": "Deposits Installation ID for offline activation.", "SLFireEvent": "Sends a specified event to a registered listener.", "SLGatherMigrationBlob": "Gathers licensing information for the provided file handle.", "SLGenerateOfflineInstallationId": "Generates the Installation ID.", "SLGenerateOfflineInstallationIdEx": "Generates Installation ID.", "SLGetApplicationInformation": "Gets information about the specified application.", "SLGetApplicationPolicy": "Queries a policy from the set stored with the SLPersistApplicationPolicies function and loaded using the SLLoadApplicationPolicies function.", "SLGetAuthenticationResult": "Gets the authentication results.", "SLGetGenuineInformation": "Gets information about the genuine state of a Windows computer.", "SLGetGenuineInformationEx": "Specifies information about the genuine status of a Windows computer.", "SLGetInstalledProductKeyIds": "This function returns a list of product key IDs associated with the specified Product SKU ID.", "SLGetLicense": "Returns the license file BLOB.", "SLGetLicenseFileId": "Checks if the license BLOB has been installed already.", "SLGetLicenseInformation": "Gets the specified license information.", "SLGetLicensingStatusInformation": "Gets the licensing status of the specified application or SKU.", "SLGetPKeyId": "Gets the registered product key ID associated with the product.", "SLGetPKeyInformation": "Gets the information of the specified product key.", "SLGetPolicyInformation": "Gets the policy information after right has been consumed successfully.", "SLGetPolicyInformationDWORD": "Gets the policy information after right has been consumed successfully.", "SLGetProductSkuInformation": "Gets information about the specified product SKU.", "SLGetReferralInformation": "Gets referral information for the specified product.", "SLGetServerStatus": "Checks the server status according to the specified URL and RequestType.", "SLGetServiceInformation": "Gets global data information.", "SLGetSLIDList": "Gets a list of SLIDs according to the input query ID type and the ID value.", "SLGetWindowsInformation": "Retrieves the value portion of a name-value pair from the licensing policy of a software component.", "SLGetWindowsInformationDWORD": "Retrieves the DWORD value portion of a name-value pair from the licensing policy of a software component.", "SLInstallLicense": "Stores the specified license and returns a license file ID.", "SLInstallProofOfPurchase": "Registers the product key with SL.", "SLInstallProofOfPurchaseEx": "Register the product key with SL.", "SLIsGenuineLocal": "Checks whether the specified application is a genuine Windows installation.", "SLIsGenuineLocalEx": "Checks whether the specified application installation is genuine.", "SLLoadApplicationPolicies": "Loads the application policies set with the SLPersistApplicationPolicies function for use by the SLGetApplicationPolicy function.", "SLOpen": "Initializes the Software Licensing Client.", "SLPersistApplicationPolicies": "Stores the current consumed policies to disk for fast policy access.", "SLPersistRTSPayloadOverride": "Associates information with the specified product for both online and phone activation.", "SLQueryLicenseValueFromApp": "Gets the value for the specified component policy.", "SLReArm": "This function is rearm application activation.", "SLRegisterEvent": "Registers an event in the SL service.", "SLSetAuthenticationData": "Sets authentication data.", "SLSetCurrentProductKey": "Sets the current product key to the previously installed product key.", "SLSetGenuineInformation": "Specifies information about the genuine status of a Windows computer.", "SLUninstallLicense": "Uninstalls the license specified by the license file ID and target user option.", "SLUninstallProofOfPurchase": "Unregisters the product key information.", "SLUnloadApplicationPolicies": "Releases the policy context handle returned by the SLLoadApplicationPolicies function.", "SLUnregisterEvent": "Unregisters a registered event in the SL service.", "SpAcceptCredentialsFn": "Called by the Local Security Authority to pass the security package any credentials stored for the authenticated security principal.", "SpAcceptLsaModeContextFn": "Server dispatch function used to create a security context shared by a server and client.", "SpAcquireCredentialsHandleFn": "Called to obtain a handle to a principal's credentials.", "SpAddCredentialsFn": "Used to add credentials for a security principal.", "SpApplyControlTokenFn": "Applies a control token to a security context.", "SpCompleteAuthTokenFn": "Completes an authentication token.", "SpDeleteCredentialsFn": "Deletes credentials from a security package's list of primary or supplemental credentials.", "SpExchangeMetaDataFn": "Sends metadata to a security support provider.", "SpExportSecurityContextFn": "Exports a security context to another process.", "SpFormatCredentialsFn": "Formats credentials to be stored in a user object.", "SpFreeCredentialsHandleFn": "Frees credentials acquired by calling the SpAcquireCredentialsHandle function.", "SpGetContextTokenFn": "Obtains the token to impersonate.", "SpGetCredentialsFn": "Retrieves the primary and supplemental credentials from the user object.", "SpGetCredUIContextFn": "Retrieves context information from a credential provider.", "SpGetExtendedInformationFn": "Provides extended information about a security package.", "SpGetInfoFn": "Provides general information about the security package, such as its name and capabilities.", "SpGetUserInfoFn": "Retrieves information about a logon session.", "SpImportSecurityContextFn": "Imports a security context from another process.", "SpInitializeFn": "Is called once by the Local Security Authority to provide a security package with general security information and a dispatch table of support functions.", "SpInitLsaModeContextFn": "The client dispatch function used to establish a security context between a server and client.", "SpInitUserModeContextFn": "Creates a user-mode security context from a packed Local Security Authority -mode context.", "SpInstanceInitFn": "Initializes user-mode security packages in an SSP/AP.", "SpLsaModeInitializeFn": "Provides the LSA with pointers to the functions implemented by each security package in the SSP/AP DLL.", "SpMarshallSupplementalCredsFn": "Converts supplemental credentials from a public format into a format suitable for local procedure calls.", "SpQueryContextAttributesFn": "Retrieves the attributes of a security context.", "SpQueryCredentialsAttributesFn": "Retrieves the attributes for a credential.", "SpQueryMetaDataFn": "Gets metadata from a security support provider when it is initiating a security context.", "SpSaveCredentialsFn": "Saves a supplemental credential to the user object.", "SpSealMessageFn": "Encrypts a message exchanged between a client and server.", "SpSetExtendedInformationFn": "Sets extended information about the security package.", "SpUnsealMessageFn": "Decrypts a message that was previously encrypted with the SpSealMessage function.", "SpUpdateCredentialsFn": "Updates the credentials associated with the specified context.", "SpUserModeInitializeFn": "Called when a security support provider / authentication package DLL is loaded into the process space of a client / server application.", "SpValidateTargetInfoFn": "Validates that the specified SECPKG_TARGETINFO structure represents a valid target.", "SslCrackCertificate": "Returns an X509Certificate structure with the information contained in the specified certificate BLOB.", "SslEmptyCacheA": "Removes the specified string from the Schannel cache.", "SslEmptyCacheW": "Removes the specified string from the Schannel cache.", "SslFreeCertificate": "Frees a certificate that was allocated by a previous call to the SslCrackCertificate function.", "SslGetServerIdentity": "Gets the identity of the server.", "SspiAcceptSecurityContextAsync": "Lets the server component of a transport application asynchronously establish a security context between the server and a remote client.", "SspiAcquireCredentialsHandleAsyncA": "Asynchronously acquires a handle to preexisting credentials of a security principal.", "SspiAcquireCredentialsHandleAsyncW": "Asynchronously acquires a handle to preexisting credentials of a security principal.", "SspiAsyncContextRequiresNotify": "Determines whether a given async context requires notification on completion of the call.", "SspiAsyncNotifyCallback": "Callback used for notifying completion of an async SSPI call.", "SspiCompareAuthIdentities": "Compares the two specified credentials.", "SspiCopyAuthIdentity": "Creates a copy of the specified opaque credential structure.", "SspiCreateAsyncContext": "Creates an instance of SspiAsyncContext which is used to track the async call.", "SspiDecryptAuthIdentity": "Decrypts the specified encrypted credential.", "SspiDecryptAuthIdentityEx": "Decrypts a SEC_WINNT_AUTH_IDENTITY_OPAQUE structure.", "SspiDeleteSecurityContextAsync": "Deletes the local data structures associated with the specified security context initiated by a previous call to the SspiInitializeSecurityContextAsync function or the SspiAcceptSecurityContextAsync function.", "SspiEncodeAuthIdentityAsStrings": "Encodes the specified authentication identity as three strings.", "SspiEncodeStringsAsAuthIdentity": "Encodes a set of three credential strings as an authentication identity structure.", "SspiEncryptAuthIdentity": "Encrypts the specified identity structure.", "SspiEncryptAuthIdentityEx": "Encrypts a SEC_WINNT_AUTH_IDENTITY_OPAQUE structure.", "SspiExcludePackage": "Creates a new identity structure that is a copy of the specified identity structure modified to exclude the specified security support provider.", "SspiFreeAsyncContext": "Frees up a context created in the call to the SspiCreateAsyncContext function.", "SspiFreeAuthIdentity": "Frees the memory allocated for the specified identity structure.", "SspiFreeCredentialsHandleAsync": "Frees up a credential handle.", "SspiGetAsyncCallStatus": "Gets the current status of an async call associated with the provided context.", "SspiGetCredUIContext": "Retrieves context information from a credential provider.", "SspiGetTargetHostName": "Gets the host name associated with the specified target.", "SspiInitializeSecurityContextAsyncA": "Initializes an async security context.", "SspiInitializeSecurityContextAsyncW": "Initializes an async security context.", "SspiIsAuthIdentityEncrypted": "Indicates whether the specified identity structure is encrypted.", "SspiIsPromptingNeeded": "Indicates whether an error returned after a call to either the InitializeSecurityContext or the AcceptSecurityContext function requires an additional call to the SspiPromptForCredentials function.", "SspiLocalFree": "Frees the memory associated with the specified buffer.", "SspiMarshalAuthIdentity": "Serializes the specified identity structure into a byte array.", "SspiPrepareForCredRead": "Generates a target name and credential type from the specified identity structure.", "SspiPrepareForCredWrite": "Generates values from an identity structure that can be passed as the values of parameters in a call to the CredWrite function.", "SspiPromptForCredentialsA": "Allows a Security Support Provider Interface application to prompt a user to enter credentials.", "SspiPromptForCredentialsW": "Allows a Security Support Provider Interface application to prompt a user to enter credentials.", "SspiReinitAsyncContext": "Marks an async context for reuse.", "SspiSetAsyncNotifyCallback": "Registers a callback that is notified on async call completion.", "SspiUnmarshalAuthIdentity": "Deserializes the specified array of byte values into an identity structure.", "SspiUnmarshalCredUIContext": "Deserializes credential information obtained by a credential provider during a previous call to the ICredentialProvider::SetSerialization method.", "SspiUpdateCredentials": "Updates the credentials associated with the specified context.", "SspiValidateAuthIdentity": "Indicates whether the specified identity structure is valid.", "SspiZeroAuthIdentity": "Fills the block of memory associated with the specified identity structure with zeros.", "StartServiceA": "Starts a service.", "StartServiceCtrlDispatcherA": "Connects the main thread of a service process to the service control manager, which causes the thread to be the service control dispatcher thread for the calling process.", "StartServiceCtrlDispatcherW": "Connects the main thread of a service process to the service control manager, which causes the thread to be the service control dispatcher thread for the calling process.", "StartServiceW": "Starts a service.", "stringToBinary": "Converts an encoded string to a binary data BLOB.", "stringToBinaryBlob": "Converts an encoded string to a binary data BLOB.", "StringToString": "Modifies the type of Unicode encoding applied to a string.", "StringToVariantByteArray": "Creates a byte array from a Unicode encoded string.", "Submit": "Submits a request to the Certificate Services server.", "TokenBindingDeleteAllBindings": "Deletes all token binding keys that are associated with the calling user or app container.", "TokenBindingDeleteBinding": "Deletes the token binding key that is associated with the specified target string.", "TokenBindingGenerateBinding": "Constructs one token binding that contains the exported public key and signature by using the specified key type for the token binding, a target identifier string for creating and retrieving the token binding key, and the unique data.", "TokenBindingGenerateID": "Constructs the token binding identifier by extracting the signature algorithm from the key type and copying the exported public key.", "TokenBindingGenerateMessage": "Assembles the list of token bindings and generates the final message for the client device to the server.", "TokenBindingGetKeyTypesClient": "Retrieves a list of the key types that the client device supports.", "TokenBindingGetKeyTypesServer": "Retrieves a list of the key types that the server supports.", "TokenBindingVerifyMessage": "Validates the token binding message and verifies the token bindings that the message contains.", "TreeResetNamedSecurityInfoA": "Resets specified security information in the security descriptor of a specified tree of objects.", "TreeResetNamedSecurityInfoW": "Resets specified security information in the security descriptor of a specified tree of objects.", "TreeSetNamedSecurityInfoA": "Sets specified security information in the security descriptor of a specified tree of objects.", "TreeSetNamedSecurityInfoW": "Sets specified security information in the security descriptor of a specified tree of objects.", "UnAdvise": "Deletes a connection created by calling the Advise method.", "Uninitialize": "Uninitializes the NDES policy module.", "UnInstall": "Removes the Certificate Enrollment Web Service.", "UnlockServiceDatabase": "Unlocks a service control manager database by releasing the specified lock.", "UpdateCache": "Updates the cache of objects and object attributes to match the underlying policy store.", "UpdateRegistry": "Registers a certificate enrollment policy server.", "UpgradeStoresFunctionalLevel": "Upgrades this authorization store from version 1 to version 2.", "Validate": "Validates the current policy information.", "VariantByteArrayToString": "Creates a Unicode encoded string from a byte array.", "Verify": "Verifies that a private key exists and can be used by the client but does not open the key.", "VerifyRequest": "Verifies the NDES certificate request for submission to the CA.", "VerifySignature": "Verifies that a message signed by using the MakeSignature function was received in the correct sequence and has not been modified.", "WintrustAddActionID": "Adds a trust provider action to the user's system.", "WintrustAddDefaultForUsage": "Specifies the default usage identifier and callback information for a provider.", "WintrustGetDefaultForUsage": "Retrieves the default usage identifier and callback information.", "WintrustGetRegPolicyFlags": "Retrieves policy flags for a policy provider.", "WintrustLoadFunctionPointers": "Loads function entry points for a specified action GUID.", "WintrustRemoveActionID": "Removes an action added by the WintrustAddActionID function.", "WintrustSetDefaultIncludePEPageHashes": "Sets the default setting that determines whether page hashes are included when creating subject interface package indirect data for PE files.", "WintrustSetRegPolicyFlags": "Sets policy flags for a policy provider.", "WinVerifyTrust": "Performs a trust verification action on a specified object.", "WinVerifyTrustEx": "Performs a trust verification action on a specified object and takes a pointer to a WINTRUST_DATA structure.", "WlxActivateUserShell": "Activates the user shell program.", "WlxDisconnectNotify": "Winlogon calls this function when a Terminal Services network session is disconnected.", "WlxDisplayLockedNotice": "Allows the GINA to display information about the lock, such as who locked the workstation and when it was locked.", "WlxDisplaySASNotice": "Winlogon calls this function when no user is logged on.", "WlxDisplayStatusMessage": "Winlogon calls this function when the GINA DLL should display a message.", "WlxGetConsoleSwitchCredentials": "Winlogon calls this function to read the currently logged on user's credentials to transparently transfer them to a target session.", "WlxGetStatusMessage": "Winlogon calls this function to get the status message being displayed by the GINA DLL.", "WlxInitialize": "Winlogon calls this function once for each window station present on the computer.", "WlxIsLockOk": "Winlogon calls this function before attempting to lock the workstation.", "WlxIsLogoffOk": "Winlogon calls this function when the user initiates a logoff operation.", "WlxLoggedOnSAS": "Winlogon calls this function when it receives a secure attention sequence event while the user is logged on and the workstation is not locked.", "WlxLoggedOutSAS": "Winlogon calls this function when it receives a secure attention sequence event while no user is logged on.", "WlxLogoff": "Winlogon calls this function to notify the GINA of a logoff operation on this workstation, allowing the GINA to perform any logoff operations that may be required.", "WlxNegotiate": "The WlxNegotiate function must be implemented by a replacement GINA DLL.", "WlxNetworkProviderLoad": "Winlogon calls this function to collect valid authentication and identification information.", "WlxReconnectNotify": "Winlogon calls this function when a Terminal Services network session is reconnected.", "WlxRemoveStatusMessage": "Winlogon calls this function to tell the GINA DLL to stop displaying the status message.", "WlxScreenSaverNotify": "Winlogon calls this function immediately before a screen saver is activated, allowing the GINA to interact with the screen saver program.", "WlxShutdown": "Winlogon calls this function just before shutting down, allowing the GINA to perform any shutdown tasks, such as ejecting a smart card from a reader.", "WlxStartApplication": "Winlogon calls this function when the system needs an application to be started in the context of the user.", "WlxWkstaLockedSAS": "Winlogon calls this function when it receives a secure attention sequence and the workstation is locked.", "WNetSetLastErrorA": "Sets extended error information.", "WNetSetLastErrorW": "Sets extended error information.", "WTHelperCertCheckValidSignature": "Checks whether a signature is valid.", "WTHelperCertIsSelfSigned": "Checks whether a certificate is self-signed.", "WTHelperGetProvCertFromChain": "Retrieves a trust provider certificate from the certificate chain.", "WTHelperGetProvPrivateDataFromChain": "Receives a CRYPT_PROVIDER_PRIVDATA structure from the chain by using the provider ID.", "WTHelperGetProvSignerFromChain": "Retrieves a signer or countersigner by index from the chain.", "WTHelperProvDataFromStateData": "Retrieves trust provider information from a specified handle."}