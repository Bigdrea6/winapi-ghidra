{"_InlineInterlockedAdd": "Performs an atomic addition operation on the specified LONG values.", "_InlineInterlockedAdd64": "Performs an atomic addition operation on the specified LONG64 values.", "_interlockedbittestandreset": "Tests the specified bit of the specified LONG value and sets it to 0.", "_interlockedbittestandreset64": "Tests the specified bit of the specified LONG64 value and sets it to 0.", "_interlockedbittestandset": "Tests the specified bit of the specified LONG value and sets it to 1.", "_interlockedbittestandset64": "Tests the specified bit of the specified LONG64 value and sets it to 1.", "_TrackMouseEvent": "Posts messages when the mouse pointer leaves a window or hovers over a window for a specified amount of time.", "_NewEnum": "Retrieves an enumerator for the collection of Shell windows.", "_CancelPendingNavigationAsync": "Enables a derived class to request that the base class cancel any pending navigation.", "_CancelPendingView": "Enables a derived class to request that the base class cancel any pending views.", "_CloseAndReleaseToolbars": "Deprecated.", "_DisableModeless": "Enables a derived class to ask the base class whether a modal UI is visible.", "_ExecChildren": "Enables the derived class to issue a command through the IOleCommandTarget::Exec method directly, instead of relying on the base class.", "_FindTBar": "Returns the index of a browser toolbar item based on Component Object Model identity rules.", "_get_itbLastFocus": "Deprecated.", "_GetBorderDWHelper": "Deprecated.", "_GetEffectiveClientArea": "Deprecated.", "_GetToolbarCount": "Deprecated.", "_GetToolbarItem": "Gets a specific item from a toolbar.", "_GetViewBorderRect": "Deprecated.", "_Initialize": "Deprecated.", "_LoadToolbars": "Deprecated.", "_MaySaveChanges": "Enables the base class to check whether the browser view needs to save changes before closing.", "_NavigateToPidl": "Deprecated.", "_OnFocusChange": "Coordinates focus between the base and the derived class when the focus shifts between the derived class's browser toolbars and its view.", "_PauseOrResumeView": "Enables a derived class to request the base class to either pause or resume the browser view.", "_PositionViewWindow": "Deprecated.", "_put_itbLastFocus": "Deprecated.", "_ResizeAllBorders": "Deprecated.", "_ResizeNextBorder": "Resizes the border of the browser view in response to the addition or removal of toolbars.", "_ResizeNextBorderHelper": "A helper method used by the implementation of IBrowserService2::_ResizeNextBorder.", "_ResizeView": "Deprecated.", "_SaveToolbars": "Deprecated.", "_SendChildren": "Allows the derived class to send a message through the SendMessage function directly instead of relying on the base class.", "_SetFocus": "Deprecated.", "_SwitchActivationNow": "Coordinates state updates while switching between current and pending browser views.", "_TryShell2Rename": "Coordinates the renaming of the current browser view when the browser is redirected.", "_UIActivateView": "Allows a derived class to request that the base class update the browser view.", "_UpdateViewRectSize": "Called to inform other functions involved in the browser view size negotiations that the allowable browser view dimensions have changed.", "_lclose": "Win32-based applications should use the CloseHandle function.", "_lcreat": "Creates or opens the specified file.", "_llseek": "Repositions the file pointer for the specified file.", "_lopen": "The _lopen function opens an existing file and sets the file pointer to the beginning of the file.", "_lread": "The _lread function reads data from the specified file.", "_lwrite": "Writes data to the specified file.", "ActivateActCtx": "The ActivateActCtx function activates the specified activation context.", "AddRefActCtx": "The AddRefActCtx function increments the reference count of the specified activation context.", "AddIntegrityLabelToBoundaryDescriptor": "Adds a new required security identifier to the specified boundary descriptor.", "AddFile": "Adds a single file to the job.", "AddFiles": "Use the AddFiles method to add one or more files to download to the job.", "AddFileSet": "Adds multiple files to a job.", "AddFileWithRanges": "Adds a file to a download job and specifies the ranges of the file you want to download.", "AddAtomA": "Adds a character string to the local atom table and returns a unique value identifying the string.", "AddAtomW": "Adds a character string to the local atom table and returns a unique value identifying the string.", "AddClipboardFormatListener": "Places the given window in the system-maintained clipboard format listener list.", "AreFileApisANSI": "Determines whether the file I/O functions are using the ANSI or OEM character set code page.", "AccessNtmsLibraryDoor": "The AccessNtmsLibraryDoor function unlocks the door of the specified library.", "Add": "Treats the provided word as though it were part of the original dictionary.", "AddLogContainer": "Adds a container to the physical log that is associated with the log handle if the calling process has write access to the.blf file and the ability to create files in the target directory of the container.", "AddLogContainerSet": "Adds multiple log containers to the physical log that is associated with the log handle if the calling process has access to the log handle.", "AddNtmsMediaType": "The AddNtmsMediaType function adds the specified media type to the specified library if there is not currently a relation in the library object.", "AddUserName": "Adds a new quota entry on the volume for the specified user.", "AddUserSid": "Adds a new quota entry on the volume for the specified user.", "AddUsersToEncryptedFile": "Adds user keys to the specified encrypted file.", "AdvanceLogBase": "Advances the base log sequence number of a log stream to the specified LSN.", "AlignReservedLog": "Calculates the sector-aligned reservation size for a set of reserved records.", "AllocateNtmsMedia": "The AllocateNtmsMedia function allocates a piece of available media.", "AllocReservedLog": "Allocates sector-aligned space for a set of reserved records.", "AddVirtualDiskParent": "Attaches a parent to a virtual disk opened with the OPEN_VIRTUAL_DISK_FLAG_CUSTOM_DIFF_CHAIN flag.", "ApplySnapshotVhdSet": "Applies a snapshot of the current virtual disk for VHD Set files.", "AttachVirtualDisk": "Attaches a virtual hard disk by locating an appropriate VHD provider to accomplish the attachment.", "Acquire": "The IDirectInputJoyConfig8::Acquire method acquires joystick configuration mode.", "AddNewHardware": "The IDirectInputJoyConfig8::AddNewHardware method displays the Add New Hardware dialog box which guides the user through installing a new input device.", "AddRef": "The IDirectInputJoyConfig8::AddRef method increases the reference count of the DirectInputJoyConfig object by 1.", "acceptFilePKCS7": "Accepts and processes a file that contains a PKCS", "acceptFilePKCS7WStr": "Accepts and processes a PKCS", "acceptFileResponse": "Accepts delivery of the credentials issued in response to an earlier call to createFileRequest, and it places the credentials in the appropriate store.", "acceptFileResponseWStr": "Accepts delivery of the credentials issued in response to an earlier call to createFileRequestWStr, and it places the credentials in the appropriate store.", "acceptPKCS7": "Accepts and processes a PKCS", "acceptPKCS7Blob": "Accepts and processes a PKCS", "acceptResponse": "Accepts delivery of the credentials issued in response to an earlier call to createRequest and places the credentials in the appropriate store.", "acceptResponseBlob": "Accepts delivery of the credentials issued in response to an earlier call to createRequestWStr and places the credentials in the appropriate store.", "AcceptSecurityContext": "Lets the server component of a transport application establish a security context between the server and a remote client.", "AccessCheck": "Determines whether the current client context is allowed to perform the specified operations.", "AccessCheck2": "Returns a value that specifies whether the principal represented by the current client context is allowed to perform the specified operation.", "AccessCheckAndAuditAlarmA": "Determines whether a security descriptor grants a specified set of access rights to the client being impersonated by the calling thread.", "AccessCheckAndAuditAlarmW": "Determines whether a security descriptor grants a specified set of access rights to the client being impersonated by the calling thread.", "AccessCheckByType": "Determines whether a security descriptor grants a specified set of access rights to the client identified by an access token.", "AccessCheckByTypeAndAuditAlarmA": "Determines whether a security descriptor grants a specified set of access rights to the client being impersonated by the calling thread.", "AccessCheckByTypeAndAuditAlarmW": "Determines whether a security descriptor grants a specified set of access rights to the client being impersonated by the calling thread.", "AccessCheckByTypeResultList": "Determines whether a security descriptor grants a specified set of access rights to the client identified by an access token.", "AccessCheckByTypeResultListAndAuditAlarmA": "Determines whether a security descriptor grants a specified set of access rights to the client being impersonated by the calling thread.", "AccessCheckByTypeResultListAndAuditAlarmByHandleA": "Determines whether a security descriptor grants a specified set of access rights to the client that the calling thread is impersonating.", "AccessCheckByTypeResultListAndAuditAlarmByHandleW": "Determines whether a security descriptor grants a specified set of access rights to the client that the calling thread is impersonating.", "AccessCheckByTypeResultListAndAuditAlarmW": "Determines whether a security descriptor grants a specified set of access rights to the client being impersonated by the calling thread.", "AcquireCredentialsHandleA": "The AcquireCredentialsHandle function acquires a handle to preexisting credentials of a security principal.", "AcquireCredentialsHandleW": "The AcquireCredentialsHandle function acquires a handle to preexisting credentials of a security principal.", "AddAccessAllowedAce": "Adds an access-allowed access control entry.", "AddAccessAllowedAceEx": "Adds an access-allowed access control entry.", "AddAccessAllowedObjectAce": "Adds an access-allowed access control entry.", "AddAccessDeniedAce": "Adds an access-denied access control entry.", "AddAccessDeniedAceEx": "Adds an access-denied access control entry.", "AddAccessDeniedObjectAce": "Adds an access-denied access control entry.", "AddAce": "Adds one or more access control entries.", "AddApplicationGroups": "Adds the specified array of existing IAzApplicationGroup objects to the client context object.", "AddAppMember": "Adds the specified IAzApplicationGroup object to the list of application groups that belong to this role.", "AddAppNonMember": "Adds the specified IAzApplicationGroup object to the list of application groups that are refused membership in this application group.", "addAttributeToRequest": "Adds an attribute to the certificate request.", "addAttributeToRequestWStr": "Adds an attribute to the certificate request.", "AddAuditAccessAce": "Adds a system-audit access control entry is audited.", "AddAuditAccessAceEx": "Adds a system-audit access control entry.", "AddAuditAccessObjectAce": "Adds a system-audit access control entry.", "AddAuthenticatedAttributesToPKCS7Request": "The AddAuthenticatedAttributesToPKCS7Request method adds authenticated attributes to a PKCS", "AddAvailableCsps": "Adds the providers installed on the computer to the collection.", "AddAvailableSmimeCapabilities": "Adds ISmimeCapability objects to the collection by identifying the encryption algorithms supported by the default RSA cryptographic provider.", "addBlobPropertyToCertificate": "Adds a BLOB property to a certificate.", "addBlobPropertyToCertificateWStr": "The IEnroll4::addBlobPropertyToCertificateWStr method adds a BLOB property to a certificate.", "AddCertificate": "Add an endorsement key certificate to the key storage provider that supports endorsement keys.", "addCertTypeToRequest": "Adds a certificate template to a request.", "addCertTypeToRequestEx": "Adds a certificate template to a request.", "AddCertTypeToRequestWStr": "Adds a certificate template to a request.", "AddCertTypeToRequestWStrEx": "Adds a certificate template to a request.", "AddConditionalAce": "Adds a conditional access control entry.", "AddConnectNotify": "Called before and after each add connection operation.", "AddDelegatedPolicyUser": "Adds the specified security identifier in text form to the list of principals that act as delegated policy users.", "AddDelegatedPolicyUserName": "Adds the specified account name to the list of principals that act as delegated policy users.", "AddEnrollmentServer": "Saves certificate enrollment server access credentials in the credential cache.", "AddExtensionsToRequest": "The AddExtensionsToRequest method adds extensions to the certificate request.", "addExtensionToRequest": "The ICEnroll4::addExtensionToRequest method adds an extension to the request.", "addExtensionToRequestWStr": "Adds an extension to the request.", "AddFromCsp": "Adds objects to the collection by identifying the encryption algorithms supported by a specific cryptographic provider.", "AddInterface": "Adds the specified interface to the list of IDispatch interfaces that can be called by business rule scripts.", "AddInterfaces": "Adds the specified interfaces to the list of IDispatch interfaces that can be called by business rule scripts.", "AddMandatoryAce": "Adds a SYSTEM_MANDATORY_LABEL_ACE access control entry.", "AddMember": "Adds the specified security identifier in text form to the list of Windows accounts that belong to the role.", "AddMemberName": "Adds the specified account name to the list of accounts that belong to the role.", "addNameValuePairToRequest": "Adds an unauthenticated name-value string pair to the request.", "addNameValuePairToRequestWStr": "Adds an unauthenticated name-value string pair to the request.", "addNameValuePairToSignature": "Adds the authenticated name-value pair of an attribute to the request.", "AddNameValuePairToSignatureWStr": "Adds the authenticated name-value pair of an attribute to the request.", "AddNonMember": "Adds the specified security identifier in text form to the list of accounts that are refused membership in the application group.", "AddNonMemberName": "Adds the specified account name to the list of accounts that are refused membership in the application group.", "AddOperation": "Adds the IAzOperation object with the specified name to the task.", "AddParameter": "Adds a parameter to the list of parameters available to business rule scripts.", "AddParameters": "Adds parameters to the list of parameters available to business rule scripts.", "AddPolicyAdministrator": "The AddPolicyAdministrator method of IAzScope adds the specified security identifier in text form to the list of principals that act as policy administrators.", "AddPolicyAdministratorName": "The AddPolicyAdministratorName method of IAzScope adds the specified account name to the list of principals that act as policy administrators.", "AddPolicyReader": "The AddPolicyReader method of IAzScope adds the specified security identifier in text form to the list of principals that act as policy readers.", "AddPolicyReaderName": "The AddPolicyReaderName method of IAzScope adds the specified account name to the list of principals that act as policy readers.", "AddPolicyServer": "Registers a certificate enrollment policy server and saves CEP access credentials in the credential cache.", "AddPropertyItem": "Adds the specified entity to the specified list.", "AddRange": "Adds a range of IX509Extension objects to the collection.", "AddResourceAttributeAce": "Adds a SYSTEM_RESOURCE_ATTRIBUTE_ACEaccess control entry.", "AddRoleDefinition": "Adds the specified IAzRoleDefinition object to this IAzRoleDefinition object.", "AddRoles": "Adds the specified array of existing IAzRole objects to the client context.", "AddScopedPolicyIDAce": "Adds a SYSTEM_SCOPED_POLICY_ID_ACEaccess control entry.", "AddSecurityPackageA": "Adds a security support provider to the list of providers supported by Microsoft Negotiate.", "AddSecurityPackageW": "Adds a security support provider to the list of providers supported by Microsoft Negotiate.", "AddStringSids": "Adds an array of string representations of security identifiers to the client context.", "AddTask": "Adds a task to the scheduler's background queue.", "AddToCache": "Caches the specified identity in the registry.", "AdjustTokenGroups": "Enables or disables groups already present in the specified access token.", "AdjustTokenPrivileges": "Enables or disables privileges in the specified access token.", "Advise": "Enables a credential to initiate events in the Logon UI or Credential UI through a callback interface.", "AllocateAndInitializeSid": "Allocates and initializes a security identifier with up to eight subauthorities.", "AllocateLocallyUniqueId": "Allocates a locally unique identifier.", "AppendText": "Appends a string to the status information contained in the Text property.", "ApplyControlToken": "Provides a way to apply a control token to a security context.", "AreAllAccessesGranted": "Checks whether a set of requested access rights has been granted.", "AreAnyAccessesGranted": "Tests whether any of a set of requested access rights has been granted.", "AssociateIdentity": "Associates an identity with a local user account.", "AuditComputeEffectivePolicyBySid": "Computes the effective audit policy for one or more subcategories for the specified security principal.", "AuditComputeEffectivePolicyByToken": "Computes the effective audit policy for one or more subcategories for the security principal associated with the specified token.", "AuditEnumerateCategories": "Enumerates the available audit-policy categories.", "AuditEnumeratePerUserPolicy": "Enumerates users for whom per-user auditing policy is specified.", "AuditEnumerateSubCategories": "Enumerates the available audit-policy subcategories.", "AuditFree": "Frees the memory allocated by audit functions for the specified buffer.", "AuditLookupCategoryGuidFromCategoryId": "Retrieves a GUID structure that represents the specified audit-policy category.", "AuditLookupCategoryIdFromCategoryGuid": "Retrieves an element of the POLICY_AUDIT_EVENT_TYPE enumeration that represents the specified audit-policy category.", "AuditLookupCategoryNameA": "Retrieves the display name of the specified audit-policy category.", "AuditLookupCategoryNameW": "Retrieves the display name of the specified audit-policy category.", "AuditLookupSubCategoryNameA": "Retrieves the display name of the specified audit-policy subcategory.", "AuditLookupSubCategoryNameW": "Retrieves the display name of the specified audit-policy subcategory.", "AuditQueryGlobalSaclA": "Retrieves a global system access control list that delegates access to the audit messages.", "AuditQueryGlobalSaclW": "Retrieves a global system access control list that delegates access to the audit messages.", "AuditQueryPerUserPolicy": "Retrieves per-user audit policy in one or more audit-policy subcategories for the specified principal.", "AuditQuerySecurity": "Retrieves security descriptor that delegates access to audit policy.", "AuditQuerySystemPolicy": "Retrieves system audit policy for one or more audit-policy subcategories.", "AuditSetGlobalSaclA": "Sets a global system access control list that delegates access to the audit messages.", "AuditSetGlobalSaclW": "Sets a global system access control list that delegates access to the audit messages.", "AuditSetPerUserPolicy": "Sets per-user audit policy in one or more audit subcategories for the specified principal.", "AuditSetSecurity": "Sets a security descriptor that delegates access to audit policy.", "AuditSetSystemPolicy": "Sets system audit policy for one or more audit-policy subcategories.", "AuthzAccessCheck": "Determines which access bits can be granted to a client for a given set of security descriptors.", "AuthzAddSidsToContext": "Creates a copy of an existing context and appends a given set of security identifiers and restricted SIDs.", "AuthzCachedAccessCheck": "Performs a fast access check based on a cached handle containing the static granted bits from a previous AuthzAccessCheck call.", "AuthzEnumerateSecurityEventSources": "Retrieves the registered security event sources that are not installed by default.", "AuthzFreeAuditEvent": "Frees the structure allocated by the AuthzInitializeObjectAccessAuditEvent function.", "AuthzFreeCentralAccessPolicyCache": "Decreases the CAP cache reference count by one so that the CAP cache can be deallocated.", "AuthzFreeContext": "Frees all structures and memory associated with the client context.", "AuthzFreeHandle": "Finds and deletes a handle from the handle list.", "AuthzFreeResourceManager": "Frees a resource manager object.", "AuthzGetInformationFromContext": "Returns information about an Authz context.", "AuthzInitializeCompoundContext": "Creates a user-mode context from the given user and device security contexts.", "AuthzInitializeContextFromAuthzContext": "Creates a new client context based on an existing client context.", "AuthzInitializeContextFromSid": "Creates a user-mode client context from a user security identifier.", "AuthzInitializeContextFromToken": "Initializes a client authorization context from a kernel token.", "AuthzInitializeObjectAccessAuditEvent": "Initializes auditing for an object.", "AuthzInitializeObjectAccessAuditEvent2": "Allocates and initializes an AUTHZ_AUDIT_EVENT_HANDLE handle for use with the AuthzAccessCheck function.", "AuthzInitializeRemoteResourceManager": "Allocates and initializes a remote resource manager.", "AuthzInitializeResourceManager": "Uses Authz to verify that clients have access to various resources.", "AuthzInitializeResourceManagerEx": "Allocates and initializes a resource manager structure.", "AuthzInstallSecurityEventSource": "Installs the specified source as a security event source.", "AuthzModifyClaims": "Adds, deletes, or modifies user and device claims in the Authz client context.", "AuthzModifySecurityAttributes": "Modifies the security attribute information in the specified client context.", "AuthzModifySids": "Adds, deletes, or modifies user and device groups in the Authz client context.", "AuthzOpenObjectAudit": "Reads the system access control list of the specified security descriptor and generates any appropriate audits specified by that SACL.", "AuthzRegisterCapChangeNotification": "Registers a CAP update notification callback.", "AuthzRegisterSecurityEventSource": "Registers a security event source with the Local Security Authority.", "AuthzReportSecurityEvent": "Generates a security audit for a registered security event source.", "AuthzReportSecurityEventFromParams": "Generates a security audit for a registered security event source by using the specified array of audit parameters.", "AuthzSetAppContainerInformation": "Sets the app container and capability information in a current Authz context.", "AuthzUninstallSecurityEventSource": "Removes the specified source from the list of valid security event sources.", "AuthzUnregisterCapChangeNotification": "Removes a previously registered CAP update notification callback.", "AuthzUnregisterSecurityEventSource": "Unregisters a security event source with the Local Security Authority.", "Animate_Close": "You can use this macro or send the ACM_OPEN message explicitly, passing in NULL parameters.", "Animate_Create": "Creates an animation control.", "Animate_IsPlaying": "You can use this macro or send an ACM_ISPLAYING message.", "Animate_Open": "Opens an AVI clip and displays its first frame in an animation control.", "Animate_OpenEx": "You can use this macro or send the ACM_OPEN message explicitly.", "Animate_Play": "Plays an AVI clip in an animation control.", "Animate_Seek": "Directs an animation control to display a particular frame of an AVI clip.", "Animate_Stop": "Stops playing an AVI clip in an animation control.", "ActivateAs": "If objects can not be reloaded, they are deleted.", "AddMasked": "Adds an image or images to an image list, generating a mask from the specified bitmap.", "AddSubrange": "Adds a subrange to this range.", "AddTab": "Adds an item to the taskbar.", "Append": "Appends an object to the collection of managed objects.", "Apply": "Applies the formatting attributes of this text row object to the specified rows in the associated ITextRange2.", "AttachMsgFilter": "Attaches a new message filter to the edit instance.", "AutoCorrectProc": "The AutoCorrectProc function is an application-defined callback function that is used with the EM_SETAUTOCORRECTPROC message.", "add_SpellCheckerChanged": "Adds an event handler for the SpellCheckerChanged event.", "AutoCorrect": "Causes occurrences of one word to be replaced by another.", "AddDllDirectory": "Adds a directory to the process DLL search path.", "AppendMenuA": "Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu.", "AppendMenuW": "Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu.", "AccessibleChildren": "Retrieves the child ID or IDispatch of each child within an accessible container object.", "AccessibleObjectFromEvent": "Retrieves the address of the IAccessible interface for the object that generated the event that is currently being processed by the client's event hook function.", "AccessibleObjectFromPoint": "Retrieves the address of the IAccessible interface pointer for the object displayed at a specified point on the screen.", "AccessibleObjectFromWindow": "Retrieves the address of the specified interface for the object associated with the specified window.", "AccNotifyTouchInteraction": "Allows an assistive technology as a result of a touch gesture from the user.", "AccSetRunningUtilityState": "Sets system values that indicate whether an assistive technology application's current state affects functionality that is typically provided by the system.", "AbortList": "Discontinues a Jump List building session initiated by ICustomDestinationList::BeginList without committing any changes.", "Activate": "An active handler can be synchronized ; an inactive handler can not.", "ActivateApplication": "Activates the specified Windows Store app for the generic launch contract in the current session.", "ActivateBackgroundTask": "Activates the specified background task.", "ActivateForFile": "Activates the specified Windows Store app for the file contract.", "ActivateForProtocol": "Activates the specified Windows Store app for the protocol contract.", "ActivateHandler": "Activates or deactivates a handler.", "ActivatePendingView": "Coordinates state updating while the browser is switching between a current and a pending view.", "ActivateTab": "Activates an item on the taskbar.", "ActivateView": "Deprecated.", "AddBand": "Adds a band to a band site object.", "AddCheckButton": "Adds a check button to the dialog.", "AddComboBox": "Adds a combo box to the dialog.", "AddControlItem": "Adds an item to a container control in the dialog.", "AddCreateFlags": "Set additional flags that will be included in the call to CreateProcess.", "AddDataBlock": "Adds a data block to a link.", "AddEditBox": "Adds an edit box control to the dialog.", "AddEntry": "Deprecated.", "AddFolder": "Adds a folder to the library.", "AddFromArray": "Adds the objects contained in an IObjectArray to the collection.", "AddIDList": "Inserts a pointer to an item identifier list into a results folder.", "AddItem": "Adds an item to a results folder.", "AddItemToSession": "Adds a specified item to the set of items currently being synchronized.", "AddMenu": "Adds a menu to the dialog.", "AddObject": "Adds a single object to the collection.", "AddPages": "Adds one or more pages to a property sheet that the Shell displays for a file object.", "AddPlace": "Adds a folder to the list of places available for the user to open or save items.", "AddPropertySheetPages": "Allows the view to add pages to the Options property sheet from the View menu.", "AddPushButton": "Adds a button to the dialog.", "AddRadioButtonList": "Adds an option button group to the dialog.", "AddSeparator": "Adds a separator to the dialog, allowing a visual separation of controls.", "AddStartupFlags": "Additional flags that will be included in the STARTUPINFO structure passed to CreateProcess.", "AddText": "Adds text content to the dialog.", "AddToolbar": "Adds the specified IDockingWindow object to the frame.", "AddUserTasks": "Specifies items to include in the Tasks category of a custom Jump List.", "AdvanceSlideshow": "Switches the wallpaper on a specified monitor to the next image in the slideshow.", "AdviseWithHWND": "Registers the app's input pane handler object to receive notifications on behalf of a window when an event triggers the input pane.", "AllowAutoPlay": "Determines whether to play media inserted by a user and if so using what restrictions.", "AllowViewResize": "Deprecated.", "AppendCategory": "Defines a custom category and the destinations that it contains, for inclusion in a custom Jump List.", "AppendFieldComboBoxItem": "Communicates to the Logon UI or Credential UI that a combo box needs an item appended and that the UI should be updated.", "AppendKnownCategory": "Specifies that the Frequent or Recent category should be included in a custom Jump List.", "AppendRoot": "Appends a Shell item to the list of roots in a tree.", "APPLET_PROC": "Serves as the entry point for a Control Panel application.", "ApplyProperties": "Applies a set of properties to an item using the Shell's copy engine.", "ApplyPropertiesToItem": "Apply a set of property changes to an item.", "ApplyPropertiesToItems": "Declares a set of items for which to apply a common set of property values.", "AppVisibilityOnMonitorChanged": "Notifies a client that the mode of a display has changed.", "ArePrintersShared": "Determines whether any printers connected to this computer are shared.", "AreSnapshotsAvailable": "Queries for the availability of a Windows Server\u00c2\u00a02003 volume image recorded by the system at an earlier time.", "ArrangeGrid": "Arranges moved icons so that they align to an invisible grid.", "AssocCreate": "Returns a pointer to an IQueryAssociations object.", "AssocCreateForClasses": "Retrieves an object that implements an IQueryAssociations interface.", "AssocGetDetailsOfPropKey": "Retrieves the value for a given property key using the file association information provided by the Namespace Extensions.", "AssocGetPerceivedType": "Retrieves a file's perceived type based on its extension.", "AssocIsDangerous": "Determines whether a file type is considered a potential security risk.", "AssocQueryKeyA": "Searches for and retrieves a key related to a file or protocol association from the registry.", "AssocQueryKeyW": "Searches for and retrieves a key related to a file or protocol association from the registry.", "AssocQueryStringA": "Searches for and retrieves a file or protocol association-related string from the registry.", "AssocQueryStringByKeyA": "Searches for and retrieves a file association-related string from the registry starting from a specified key.", "AssocQueryStringByKeyW": "Searches for and retrieves a file association-related string from the registry starting from a specified key.", "AssocQueryStringW": "Searches for and retrieves a file or protocol association-related string from the registry.", "AutoArrange": "AutoArrange may be altered or unavailable.", "accDoDefaultAction": "The IAccessible::accDoDefaultAction method performs the specified object's default action.", "AccessibleObjectFromID": "The AccessibleObjectFromID method retrieves an IAccessibleinterface pointer for the interface associated with the given object ID.", "accHitTest": "The IAccessible::accHitTest method retrieves the child element or child object that is displayed at a specific point on the screen.", "accLocation": "All visual objects must support this method.", "accNavigate": "The IAccessible::accNavigate method traverses to another UI element within a container and retrieves the object.", "accSelect": "All objects that support selection or receive the keyboard focus must support this method.", "AcquireObjectIdRange": "Acquires a range of object IDs from the control host and marks them as reserved by a specific windowless control.", "AddActiveTextPositionChangedEventHandler": "Registers a method that handles when the active text position changes.", "AddAutomationEvent": "Raises a Microsoft UI Automation event.", "AddAutomationEventHandler": "Registers a method that handles Microsoft UI Automation events.", "AddAutomationPropertyChangedEvent": "Raises a property-changed event.", "AddChangesEventHandler": "Registers a method that handles change events.", "AddEventHandlerGroup": "Registers a collection of event handler methods specified with the CreateEventHandlerGroup.", "AddFocusChangedEventHandler": "Note Before implementing an event handler, you should be familiar with the threading issues described in Understanding Threading Issues.", "AddNotificationEventHandler": "Registers a method that handles notification events.", "AddPattern": "Adds a control pattern to the cache request.", "AddProperty": "Adds a property to the cache request.", "AddPropertyChangedEventHandler": "Registers a method that handles a property-changed event.", "AddPropertyChangedEventHandlerNativeArray": "Registers a method that handles a native array of property-changed events.", "AddStructureChangedEvent": "Raises an event to notify clients that the structure of the UI Automation tree has changed.", "AddStructureChangedEventHandler": "Registers a method that handles structure-changed events.", "AddTextEditTextChangedEventHandler": "Registers a method that handles programmatic text-edit events.", "AddToSelection": "Adds the text range to the collection of selected text ranges in a control that supports multiple, disjoint spans of selected text.", "AdviseEventAdded": "Notifies the Microsoft UI Automation provider when a UI Automation client begins listening for a specific event, including a property-changed event.", "AdviseEventRemoved": "Notifies the Microsoft UI Automation provider when a UI Automation client stops listening for a specific event, including a property-changed event.", "AddSecureMemoryCacheCallback": "Registers a callback function to be called when a secured memory range is freed or its protections are changed.", "ApplicationRecoveryFinished": "Indicates that the calling application has completed its data recovery.", "ApplicationRecoveryInProgress": "Indicates that the calling application is continuing to recover data.", "AdjustWindowRect": "Calculates the required size of the window rectangle, based on the desired client-rectangle size.", "AdjustWindowRectEx": "Calculates the required size of the window rectangle, based on the desired size of the client rectangle.", "AllowSetForegroundWindow": "Enables the specified process to set the foreground window using the SetForegroundWindow function.", "AnimateWindow": "Enables you to produce special effects when showing or hiding windows.", "AnyPopup": "Indicates whether an owned, visible, top-level pop-up, or overlapped window exists on the screen.", "ArrangeIconicWindows": "Arranges all the minimized child windows of the specified parent window.", "ActivateKeyboardLayout": "Sets the input locale identifier for the calling thread or the current process.", "AdjustWindowRectExForDpi": "Calculates the required size of the window rectangle, based on the desired size of the client rectangle and the provided DPI.", "AreDpiAwarenessContextsEqual": "Determines whether two DPI_AWARENESS_CONTEXT values are identical.", "AttachThreadInput": "Attaches or detaches the input processing mechanism of one thread to that of another thread.", "AbortSystemShutdownA": "Stops a system shutdown that has been initiated.", "AbortSystemShutdownW": "Stops a system shutdown that has been initiated.", "AllocateUserPhysicalPages": "Allocates physical memory pages to be mapped and unmapped within any Address Windowing Extensions region of a specified process.", "AllocateUserPhysicalPagesNuma": "Allocates physical memory pages to be mapped and unmapped within any Address Windowing Extensions region of a specified process and specifies the NUMA node for the physical memory.", "BackupRead": "Back up a file or directory, including the security information.", "BackupSeek": "Seeks forward in a data stream initially accessed by using the BackupRead or BackupWrite function.", "BackupWrite": "Restore a file or directory that was backed up using BackupRead.", "BindIoCompletionCallback": "Associates the I/O completion port owned by the thread pool with the specified file handle.", "BeginNtmsDeviceChangeDetection": "The BeginNtmsDeviceChangeDetection function allows the application to begin a device change detection session.", "BuildIoRingCancelRequest": "Attempts to cancel a previously submitted I/O ring operation.", "BuildIoRingReadFile": "Performs an asynchronous read from a file using an I/O ring.", "BuildIoRingRegisterBuffers": "Registers an array of buffers with the system for future I/O ring operations.", "BuildIoRingRegisterFileHandles": "Registers an array of file handles with the system for future I/O ring operations.", "BeginMonitor": "The BeginMonitor method is used to begin monitoring when a loading operation is started.", "BreakMirrorVirtualDisk": "Breaks a previously initiated mirror operation and sets the mirror to be the active virtual disk.", "BCRYPT_INIT_AUTH_MODE_INFO": "Initializes a BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO structure for use in calls to BCryptEncrypt and BCryptDecrypt functions.", "BCryptAddContextFunction": "Adds a cryptographic function to the list of functions that are supported by an existing CNG context.", "BCryptCloseAlgorithmProvider": "Closes an algorithm provider.", "BCryptConfigureContext": "Sets the configuration information for an existing CNG context.", "BCryptConfigureContextFunction": "Sets the configuration information for the cryptographic function of an existing CNG context.", "BCryptCreateContext": "Creates a new CNG configuration context.", "BCryptCreateHash": "Called to create a hash or Message Authentication Code object.", "BCryptCreateMultiHash": "The BCryptCreateMultiHash function creates a multi-hash state that allows for the parallel computation of multiple hash operations.", "BCryptDecrypt": "Decrypts a block of data.", "BCryptDeleteContext": "Deletes an existing CNG configuration context.", "BCryptDeriveKey": "Derives a key from a secret agreement value.", "BCryptDeriveKeyCapi": "Derives a key from a hash value.", "BCryptDeriveKeyPBKDF2": "Derives a key from a hash value by using the PBKDF2 key derivation algorithm as defined by RFC 2898.", "BCryptDestroyHash": "Destroys a hash or Message Authentication Code object.", "BCryptDestroyKey": "Destroys a key.", "BCryptDestroySecret": "Destroys a secret agreement handle that was created by using the BCryptSecretAgreement function.", "BCryptDuplicateHash": "Duplicates an existing hash or Message Authentication Code object.", "BCryptDuplicateKey": "Creates a duplicate of a symmetric key.", "BCryptEncrypt": "Encrypts a block of data.", "BCryptEnumAlgorithms": "Gets a list of the registered algorithm identifiers.", "BCryptEnumContextFunctionProviders": "Obtains the providers for the cryptographic functions for a context in the specified configuration table.", "BCryptEnumContextFunctions": "Obtains the cryptographic functions for a context in the specified configuration table.", "BCryptEnumContexts": "Obtains the identifiers of the contexts in the specified configuration table.", "BCryptEnumProviders": "Obtains all of the CNG providers that support a specified algorithm.", "BCryptEnumRegisteredProviders": "Retrieves information about the registered providers.", "BCryptExportKey": "Exports a key to a memory BLOB that can be persisted for later use.", "BCryptFinalizeKeyPair": "Completes a public/private key pair.", "BCryptFinishHash": "Retrieves the hash or Message Authentication Code value for the data accumulated from prior calls to BCryptHashData.", "BCryptFreeBuffer": "Used to free memory that was allocated by one of the CNG functions.", "BCryptGenerateKeyPair": "Creates an empty public/private key pair.", "BCryptGenerateSymmetricKey": "Creates a key object for use with a symmetrical key encryption algorithm from a supplied key.", "BCryptGenRandom": "Generates a random number.", "BCryptGetFipsAlgorithmMode": "Determines whether Federal Information Processing Standard compliance is enabled.", "BCryptGetProperty": "Retrieves the value of a named property for a CNG object.", "BCryptHash": "Performs a single hash computation.", "BCryptHashData": "Performs a one way hash or Message Authentication Code on a data buffer.", "BCryptImportKey": "Imports a symmetric key from a key BLOB.", "BCryptImportKeyPair": "Imports a public/private key pair from a key BLOB.", "BCryptKeyDerivation": "Derives a key without requiring a secret agreement.", "BCryptOpenAlgorithmProvider": "Loads and initializes a CNG provider.", "BCryptProcessMultiOperations": "The BCryptProcessMultiOperations function processes a sequence of operations on a multi-object state.", "BCryptQueryContextConfiguration": "Retrieves the current configuration for the specified CNG context.", "BCryptQueryContextFunctionConfiguration": "Obtains the cryptographic function configuration information for an existing CNG context.", "BCryptQueryContextFunctionProperty": "Obtains the value of a named property for a cryptographic function in an existing CNG context.", "BCryptQueryProviderRegistration": "Retrieves information about a CNG provider.", "BCryptRegisterConfigChangeNotify": "Creates a user mode CNG configuration change event handler.", "BCryptRemoveContextFunction": "Removes a cryptographic function from the list of functions that are supported by an existing CNG context.", "BCryptResolveProviders": "Obtains a collection of all of the providers that meet the specified criteria.", "BCryptSecretAgreement": "Creates a secret agreement value from a private and a public key.", "BCryptSetContextFunctionProperty": "Sets the value of a named property for a cryptographic function in an existing CNG context.", "BCryptSetProperty": "Sets the value of a named property for a CNG object.", "BCryptSignHash": "Creates a signature of a hash value.", "BCryptUnregisterConfigChangeNotify": "Removes a user mode CNG configuration change event handler that was created by using the BCryptRegisterConfigChangeNotify function.", "BCryptVerifySignature": "Verifies that the specified signature matches the specified hash.", "binaryBlobToString": "Converts a binary data BLOB to a string.", "binaryToString": "Converts a binary data BLOB to a string.", "BizruleGroupSupported": "Returns a Boolean value that specifies whether this IAzAuthorizationStore3 object supports application groups that use business rule scripts.", "BuildExplicitAccessWithNameA": "Initializes an EXPLICIT_ACCESS structure with data specified by the caller.", "BuildExplicitAccessWithNameW": "Initializes an EXPLICIT_ACCESS structure with data specified by the caller.", "BuildSecurityDescriptorA": "Allocates and initializes a new security descriptor.", "BuildSecurityDescriptorW": "Allocates and initializes a new security descriptor.", "BuildTrusteeWithNameA": "Initializes a TRUSTEE structure.", "BuildTrusteeWithNameW": "Initializes a TRUSTEE structure.", "BuildTrusteeWithObjectsAndNameA": "Initializes a TRUSTEE structure with the object-specific access control entry information and initializes the remaining members of the structure to default values.", "BuildTrusteeWithObjectsAndNameW": "Initializes a TRUSTEE structure with the object-specific access control entry information and initializes the remaining members of the structure to default values.", "BuildTrusteeWithObjectsAndSidA": "Initializes a TRUSTEE structure with the object-specific access control entry information and initializes the remaining members of the structure to default values.", "BuildTrusteeWithObjectsAndSidW": "Initializes a TRUSTEE structure with the object-specific access control entry information and initializes the remaining members of the structure to default values.", "BuildTrusteeWithSidA": "Initializes a TRUSTEE structure.", "BuildTrusteeWithSidW": "Initializes a TRUSTEE structure.", "Button_GetIdealSize": "Gets the size of the button that best fits the text and image, if an image list is present.", "Button_GetImageList": "Gets the BUTTON_IMAGELIST structure that describes the image list that is set for a button control.", "Button_GetNote": "Gets the text of the note associated with a command link button.", "Button_GetNoteLength": "Gets the length of the note text that may be displayed in the description for a command link.", "Button_GetSplitInfo": "Gets information for a specified split button control.", "Button_GetTextMargin": "Gets the margins used to draw text in a button control.", "Button_SetDropDownState": "Sets the drop down state for a specified button with style of BS_SPLITBUTTON.", "Button_SetElevationRequiredState": "Sets the elevation required state for a specified button or command link to display an elevated icon.", "Button_SetImageList": "Assigns an image list to a button control.", "Button_SetNote": "Sets the text of the note associated with a specified command link button.", "Button_SetSplitInfo": "Sets information for a specified split button control.", "Button_SetTextMargin": "Sets the margins for drawing text in a button control.", "BeginBufferedAnimation": "Begins a buffered animation operation.", "BeginBufferedPaint": "Begins a buffered paint operation.", "BeginDrag": "Begins dragging an image.", "BeginEditCollection": "Turns on edit collection.", "BeginPanningFeedback": "Notifies the system to send feedback about a target window affected by panning gestures.", "BufferedPaintClear": "Clears a specified rectangle in the buffer to ARGB = {0,0,0,0}.", "BufferedPaintInit": "Initialize buffered painting for the current thread.", "BufferedPaintRenderAnimation": "Paints the next frame of a buffered paint animation.", "BufferedPaintSetAlpha": "Sets the alpha to a specified value in a given rectangle.", "BufferedPaintStopAllAnimations": "Stops all buffered animations for the given window.", "BufferedPaintUnInit": "Closes down buffered painting for the current thread.", "BuildUpMath": "Converts the linear-format math in a range to a built-up form, or modifies the current built-up form.", "Button_Enable": "Enables or disables a button.", "Button_GetCheck": "Gets the check state of a radio button or check box.", "Button_GetState": "Retrieves the state of a button or check box.", "Button_GetText": "Gets the text of a button.", "Button_GetTextLength": "Gets the number of characters in the text of a button.", "Button_SetCheck": "Sets the check state of a radio button or check box.", "Button_SetState": "Sets the highlight state of a button.", "Button_SetStyle": "Sets the style of a button.", "Button_SetText": "Sets the text of a button.", "BeginUpdateResourceA": "Retrieves a handle that can be used by the UpdateResource function to add, delete, or replace resources in a binary module.", "BeginUpdateResourceW": "Retrieves a handle that can be used by the UpdateResource function to add, delete, or replace resources in a binary module.", "BeforeCoCreateInstance": ".", "BeforeCreateProcess": ".", "Begin": "Called when an action has begun that requires its progress be displayed to the user.", "BeginFieldUpdates": "Starts a batch update to fields in the logon or credential UI.", "BeginList": "Initiates a building session for a custom Jump List.", "BindToConflict": "Binds to a particular conflict specified by IID.", "BindToHandler": "Instantiates a specified sync handler when called by Sync Center.", "BindToObject": "Optional parameters that control the construction of the handler are passed in the bind context.", "BindToStorage": "Requests a pointer to an object's storage interface.", "BrowseObject": "Informs Windows Explorer to browse to another folder.", "BrowseToIDList": "Browses to a pointer to an item identifier list", "BrowseToObject": "Browses to an object.", "Burn": "Instructs data to be copied from the staging area to a writable CD.", "ByteToChar": "Converts a value of type BYTE to a value of type CHAR.", "ByteToInt8": "Converts a value of type BYTE to a value of type INT8.", "BuildUpdatedCache": "Retrieves a new UI Automation element with an updated cache.", "BackupEventLogA": "Saves the specified event log to a backup file.", "BackupEventLogW": "Saves the specified event log to a backup file.", "BuildCommDCBA": "Fills a specified DCB structure with values specified in a device-control string.", "BuildCommDCBAndTimeoutsA": "Translates a device-definition string into appropriate device-control block codes and places them into a device control block.", "BuildCommDCBAndTimeoutsW": "Translates a device-definition string into appropriate device-control block codes and places them into a device control block.", "BuildCommDCBW": "Fills a specified DCB structure with values specified in a device-control string.", "BeginDeferWindowPos": "Allocates memory for a multiple-window-position structure and returns the handle to the structure.", "BringWindowToTop": "Brings the specified window to the top of the Z order.", "BroadcastSystemMessage": "Sends a message to the specified recipients.", "BroadcastSystemMessageA": "Sends a message to the specified recipients.", "BroadcastSystemMessageExA": "Sends a message to the specified recipients.", "BroadcastSystemMessageExW": "Sends a message to the specified recipients.", "BroadcastSystemMessageW": "Sends a message to the specified recipients.", "BeginPaint": "The BeginPaint function prepares the specified window for painting and fills a PAINTSTRUCT structure with information about the painting.", "BlockInput": "Blocks keyboard and mouse input events from reaching applications.", "Clone": "Retrieves a new IUIAutomationTextRange identical to the original and inheriting all properties of the original.", "CloseCUB": "The CloseCUB method closes an open Internal Consistency Evaluator .cub files can be opened using the OpenCUB method.", "CloseDatabase": "The CloseDatabase method closes the currently open Windows Installer database.", "CloseLog": "The CloseLog function method closes the current log.", "CloseModule": "The CloseModule method closes the currently open Windows Installer merge module.", "Commit": "Commits library updates to an existing Library Description file.", "Connect": "This method is called after the user clicks the Submit button within the Pre-Logon-Access Provider screen and before ICredentialProviderCredential::GetSerialization is called.", "CreateActCtxA": "The CreateActCtx function creates an activation context.", "CreateActCtxW": "The CreateActCtx function creates an activation context.", "CreateAssemblyCache": "The CreateAssemblyCache function obtains an instance of the IAssemblyCache interface.", "CreateAssemblyCacheItem": "The CreateAssemblyCacheItem method creates an item in the assembly cache that corresponds to the side-by-side assembly being installed.", "CreateAssemblyNameObject": "The CreateAssemblyNameObject function obtains an instance of the IAssemblyName interface.", "CreateSourceImage": "The CreateSourceImage method enables the client to extract the files from a module to a source image on disk after a merge, taking into account changes to the module that might have been made during module configuration.", "CreateStream": "Creates and opens a stream object with the specified name contained in this storage object.", "ConvertFiberToThread": "Converts the current fiber into a thread.", "ConvertThreadToFiber": "Converts the current thread into a fiber.", "ConvertThreadToFiberEx": "Converts the current thread into a fiber.", "CreateBoundaryDescriptorA": "Creates a boundary descriptor.", "CreateFiber": "Allocates a fiber object, assigns it a stack, and sets up execution to begin at the specified start address, typically the fiber function.", "CreateFiberEx": "Allocates a fiber object, assigns it a stack, and sets up execution to begin at the specified start address, typically the fiber function.", "CreateJobObjectA": "Creates or opens a job object.", "CreateProcessWithLogonW": "Creates a new process and its primary thread.", "CreateProcessWithTokenW": "Creates a new process and its primary thread.", "CreateSemaphoreA": "Creates or opens a named or unnamed semaphore object.", "CreateSemaphoreExA": "Creates or opens a named or unnamed semaphore object and returns a handle to the object.", "CreateTapePartition": "Reformats a tape.", "CreateUmsCompletionList": "Creates a user-mode scheduling completion list.", "CreateUmsThreadContext": "Creates a user-mode scheduling thread context to represent a UMS worker thread.", "Cancel": "Causes the Microsoft UI Automation provider to stop listening for mouse or keyboard input.", "CancelGroup": "Use the CancelGroup method to remove the group from the queue.", "ClearHelperToken": "Discards the helper token, and does not change the usage flags.", "ClearPeers": "Removes all peers from the list of peers that can serve content.", "ClearRecords": "Removes all the records and files from the cache.", "Complete": "Ends the job and saves the transferred files on the client.", "CreateGroup": "Use the CreateGroup method to create a new group and add it to the download queue.", "CreateJob": "Use the CreateJob method to add a new job to the group.", "CfCloseHandle": "Closes the file or directory handle returned by CfOpenFileWithOplock.", "CfConnectSyncRoot": "Initiates bi-directional communication between a sync provider and the sync filter API.", "CfConvertToPlaceholder": "Converts a normal file/directory to a placeholder file/directory.", "CfCreatePlaceholders": "Creates one or more new placeholder files or directories under a sync root tree.", "CfDisconnectSyncRoot": "Disconnects a communication channel created by CfConnectSyncRoot.", "CfExecute": "The main entry point for all connection key based placeholder operations.", "CfGetCorrelationVector": "Allows the sync provider to query the current correlation vector for a given placeholder file.", "CfGetPlaceholderInfo": "Gets various characteristics of a placeholder file or folder.", "CfGetPlaceholderRangeInfo": "Gets range information about a placeholder file or folder.", "CfGetPlaceholderStateFromAttributeTag": "Gets a set of placeholder states based on the FileAttributes and ReparseTag values of the file.", "CfGetPlaceholderStateFromFileInfo": "Gets a set of placeholder states based on the various information of the file.", "CfGetPlaceholderStateFromFindData": "Gets a set of placeholder states based on the WIN32_FIND_DATA structure.", "CfGetPlatformInfo": "Gets the platform version information.", "CfGetSyncRootInfoByHandle": "Gets various characteristics of the sync root containing a given file specified by a file handle.", "CfGetSyncRootInfoByPath": "Gets various sync root information given a file under the sync root.", "CfGetTransferKey": "Initiates a transfer of data into a placeholder file or folder.", "CfGetWin32HandleFromProtectedHandle": "Converts a protected handle to a Win32 handle so that it can be used with all handle-based Win32 APIs.", "CfHydratePlaceholder": "Hydrates a placeholder file by ensuring that the specified byte range is present on-disk in the placeholder.", "CfOpenFileWithOplock": "Opens an asynchronous opaque handle to a file or directory and sets up a proper oplock on it based on the open flags.", "CfQuerySyncProviderStatus": "Queries a sync provider to get the status of the provider.", "CfReferenceProtectedHandle": "Allows the caller to reference a protected handle to a Win32 handle which can be used with non-CfApi Win32 APIs.", "CfRegisterSyncRoot": "Performs a one time sync root registration.", "CfReleaseProtectedHandle": "Releases a protected handle referenced by CfReferenceProtectedHandle.", "CfReleaseTransferKey": "Releases a transfer key obtained by CfGetTransferKey.", "CfReportProviderProgress": "Allows a sync provider to report progress out-of-band.", "CfReportSyncStatus": "Allows a sync provider to notify the platform of its status on a specified sync root without having to connect with a call to CfConnectSyncRoot first.", "CfRevertPlaceholder": "Reverts a placeholder back to a regular file, stripping away all special characteristics such as the reparse tag, the file identity, etc.", "CfSetCorrelationVector": "Allows a sync provider to instruct the platform to use a specific correlation vector for telemetry purposes on a placeholder file.", "CfSetInSyncState": "Sets the in-sync state for a placeholder file or folder.", "CfSetPinState": "This sets the pin state of a placeholder, used to represent a users intent.", "CfUnregisterSyncRoot": "Unregisters a previously registered sync root.", "CfUpdatePlaceholder": "Updates characteristics of the placeholder file or directory.", "CfUpdateSyncProviderStatus": "Updates the current status of the sync provider.", "ChangeClipboardChain": "Removes a specified window from the chain of clipboard viewers.", "CloseClipboard": "Closes the clipboard.", "CountClipboardFormats": "Retrieves the number of different data formats currently on the clipboard.", "CM_Add_Empty_Log_Conf": "The CM_Add_Empty_Log_Conf function creates an empty logical configuration, for a specified configuration type and a specified device instance, on the local machine.", "CM_Add_Empty_Log_Conf_Ex": "The CM_Add_Empty_Log_Conf_Ex function creates an empty logical configuration, for a specified configuration type and a specified device instance, on either the local or a remote machine.", "CM_Add_ID_ExA": "The CM_Add_ID_Ex function appends a device ID to a device instance's hardware ID list or compatible ID list, on either the local or a remote machine.", "CM_Add_ID_ExW": "The CM_Add_ID_Ex function appends a device ID to a device instance's hardware ID list or compatible ID list, on either the local or a remote machine.", "CM_Add_IDA": "The CM_Add_ID function appends a specified device ID to a device instance's hardware ID list or compatible ID list.", "CM_Add_IDW": "The CM_Add_ID function appends a specified device ID to a device instance's\u00ef\u00bf\u00bdhardware ID list or compatible ID list.", "CM_Add_Res_Des": "The CM_Add_Res_Des function adds a resource descriptor to a logical configuration.", "CM_Add_Res_Des_Ex": "The CM_Add_Res_Des_Ex function adds a resource descriptor to a logical configuration.", "CM_Connect_MachineA": "The CM_Connect_Machine function creates a connection to a remote machine.", "CM_Connect_MachineW": "The CM_Connect_Machine function creates a connection to a remote machine.", "CM_Delete_Class_Key": "The CM_Delete_Class_Key function removes the specified installed device class from the system.", "CM_Delete_Device_Interface_Key_ExA": "The CM_Delete_Device_Interface_Key_ExA function deletes the registry subkey that is used by applications and drivers to store interface-specific information.", "CM_Delete_Device_Interface_Key_ExW": "The CM_Delete_Device_Interface_Key_ExW function deletes the registry subkey that is used by applications and drivers to store interface-specific information.", "CM_Delete_Device_Interface_KeyA": "The CM_Delete_Device_Interface_Key function deletes the registry subkey that is used by applications and drivers to store interface-specific information.", "CM_Delete_Device_Interface_KeyW": "The CM_Delete_Device_Interface_Key function deletes the registry subkey that is used by applications and drivers to store interface-specific information.", "CM_Delete_DevNode_Key": "The CM_Delete_DevNode_Key function deletes the specified user-accessible registry keys that are associated with a device.", "CM_Disable_DevNode": "The CM_Disable_DevNode function disables a device.", "CM_Disconnect_Machine": "The CM_Disconnect_Machine function removes a connection to a remote machine.", "CM_Enable_DevNode": "The CM_Enable_DevNode function enables a device.", "CM_Enumerate_Classes": "The CM_Enumerate_Classes function, when called repeatedly, enumerates the local machine's installed device classes by supplying each class's GUID.", "CM_Enumerate_Classes_Ex": "The CM_Enumerate_Classes_Ex function, when called repeatedly, enumerates a local or a remote machine's installed device classes, by supplying each class's GUID.", "CM_Enumerate_Enumerators_ExA": "The CM_Enumerate_Enumerators_Ex function enumerates a local or a remote machine's device enumerators, by supplying each enumerator's name.", "CM_Enumerate_Enumerators_ExW": "The CM_Enumerate_Enumerators_Ex function enumerates a local or a remote machine's device enumerators, by supplying each enumerator's name.", "CM_Enumerate_EnumeratorsA": "The CM_Enumerate_Enumerators function enumerates the local machine's device enumerators by supplying each enumerator's name.", "CM_Enumerate_EnumeratorsW": "The CM_Enumerate_Enumerators function enumerates the local machine's device enumerators by supplying each enumerator's name.", "CM_Free_Log_Conf": "The CM_Free_Log_Conf function removes a logical configuration and all associated resource descriptors from the local machine.", "CM_Free_Log_Conf_Ex": "The CM_Free_Log_Conf_Ex function removes a logical configuration and all associated resource descriptors from either a local or a remote machine.", "CM_Free_Log_Conf_Handle": "The CM_Free_Log_Conf_Handle function invalidates a logical configuration handle and frees its associated memory allocation.", "CM_Free_Res_Des": "The CM_Free_Res_Des function removes a resource descriptor from a logical configuration on the local machine.", "CM_Free_Res_Des_Ex": "The CM_Free_Res_Des_Ex function removes a resource descriptor from a logical configuration on either a local or a remote machine.", "CM_Free_Res_Des_Handle": "The CM_Free_Res_Des_Handle function invalidates a resource description handle and frees its associated memory allocation.", "CM_Free_Resource_Conflict_Handle": "The CM_Free_Resource_Conflict_Handle function invalidates a handle to a resource conflict list, and frees the handle's associated memory allocation.", "CM_Get_Child": "The CM_Get_Child function is used to retrieve a device instance handle to the first child node of a specified device node in the local machine's device tree.", "CM_Get_Child_Ex": "The CM_Get_Child_Ex function is used to retrieve a device instance handle to the first child node of a specified device node in a local or a remote machine's device tree.", "CM_Get_Class_Property_ExW": "The CM_Get_Class_Property_ExW function retrieves a device property that is set for a device interface class or device setup class.", "CM_Get_Class_Property_Keys": "The CM_Get_Class_Property_Keys function retrieves an array of the device property keys that represent the device properties that are set for a device interface class or device setup class.", "CM_Get_Class_Property_Keys_Ex": "The CM_Get_Class_Property_Keys_Ex function retrieves an array of the device property keys that represent the device properties that are set for a device interface class or device setup class.", "CM_Get_Class_PropertyW": "The CM_Get_Class_Property function retrieves a device property that is set for a device interface class or device setup class.", "CM_Get_Class_Registry_PropertyA": "The CM_Get_Class_Registry_Property function retrieves a device setup class property.", "CM_Get_Class_Registry_PropertyW": "The CM_Get_Class_Registry_Property function retrieves a device setup class property.", "CM_Get_Depth": "The CM_Get_Depth function is used to obtain the depth of a specified device node within the local machine's device tree.", "CM_Get_Depth_Ex": "The CM_Get_Depth_Ex function is used to obtain the depth of a specified device node within a local or a remote machine's device tree.", "CM_Get_Device_ID_ExA": "The CM_Get_Device_ID_Ex function retrieves the device instance ID for a specified device instance on a local or a remote machine.", "CM_Get_Device_ID_ExW": "The CM_Get_Device_ID_Ex function retrieves the device instance ID for a specified device instance on a local or a remote machine.", "CM_Get_Device_ID_List_ExA": "The CM_Get_Device_ID_List_Ex function retrieves a list of device instance IDs for the device instances on a local or a remote machine.", "CM_Get_Device_ID_List_ExW": "The CM_Get_Device_ID_List_Ex function retrieves a list of device instance IDs for the device instances on a local or a remote machine.", "CM_Get_Device_ID_List_Size_ExA": "The CM_Get_Device_ID_List_Size_Ex function retrieves the buffer size required to hold a list of device instance IDs for a local or a remote machine's device instances.", "CM_Get_Device_ID_List_Size_ExW": "The CM_Get_Device_ID_List_Size_Ex function retrieves the buffer size required to hold a list of device instance IDs for a local or a remote machine's device instances.", "CM_Get_Device_ID_List_SizeA": "The CM_Get_Device_ID_List_Size function retrieves the buffer size required to hold a list of device instance IDs for the local machine's device instances.", "CM_Get_Device_ID_List_SizeW": "The CM_Get_Device_ID_List_Size function retrieves the buffer size required to hold a list of device instance IDs for the local machine's device instances.", "CM_Get_Device_ID_ListA": "The CM_Get_Device_ID_List function retrieves a list of device instance IDs for the local computer's device instances.", "CM_Get_Device_ID_ListW": "The CM_Get_Device_ID_List function retrieves a list of device instance IDs for the local computer's device instances.", "CM_Get_Device_ID_Size": "The CM_Get_Device_ID_Size function retrieves the buffer size required to hold a device instance ID for a device instance on the local machine.", "CM_Get_Device_ID_Size_Ex": "The CM_Get_Device_ID_Size_Ex function retrieves the buffer size required to hold a device instance ID for a device instance on a local or a remote machine.", "CM_Get_Device_IDA": "The CM_Get_Device_ID function retrieves the device instance ID for a specified device instance on the local machine.", "CM_Get_Device_IDW": "The CM_Get_Device_ID function retrieves the device instance ID for a specified device instance on the local machine.", "CM_Get_Device_Interface_AliasA": "The CM_Get_Device_Interface_Alias function returns the alias of the specified device interface instance, if the alias exists.", "CM_Get_Device_Interface_AliasW": "The CM_Get_Device_Interface_Alias function returns the alias of the specified device interface instance, if the alias exists.", "CM_Get_Device_Interface_List_SizeA": "The CM_Get_Device_Interface_List_Size function retrieves the buffer size that must be passed to the CM_Get_Device_Interface_List function.", "CM_Get_Device_Interface_List_SizeW": "The CM_Get_Device_Interface_List_Size function retrieves the buffer size that must be passed to the CM_Get_Device_Interface_List function.", "CM_Get_Device_Interface_ListA": "The CM_Get_Device_Interface_List function retrieves a list of device interface instances that belong to a specified device interface class.", "CM_Get_Device_Interface_ListW": "The CM_Get_Device_Interface_List function retrieves a list of device interface instances that belong to a specified device interface class.", "CM_Get_Device_Interface_Property_ExW": "The CM_Get_Device_Interface_Property_ExW function retrieves a device property that is set for a device interface.", "CM_Get_Device_Interface_Property_Keys_ExW": "The CM_Get_Device_Interface_Property_Keys_ExW function retrieves an array of device property keys that represent the device properties that are set for a device interface.", "CM_Get_Device_Interface_Property_KeysW": "The CM_Get_Device_Interface_Property_Keys function retrieves an array of device property keys that represent the device properties that are set for a device interface.", "CM_Get_Device_Interface_PropertyW": "The CM_Get_Device_Interface_Property function retrieves a device property that is set for a device interface.", "CM_Get_DevNode_Property_ExW": "The CM_Get_DevNode_Property_ExW function retrieves a device instance property.", "CM_Get_DevNode_Property_Keys": "The CM_Get_DevNode_Property_Keys function retrieves an array of the device property keys that represent the device properties that are set for a device instance.", "CM_Get_DevNode_Property_Keys_Ex": "The CM_Get_DevNode_Property_Keys_Ex function retrieves an array of the device property keys that represent the device properties that are set for a device instance.", "CM_Get_DevNode_PropertyW": "The CM_Get_DevNode_Property function retrieves a device instance property.", "CM_Get_DevNode_Registry_PropertyA": "The CM_Get_DevNode_Registry_Property function retrieves a specified device property from the registry.", "CM_Get_DevNode_Registry_PropertyW": "The CM_Get_DevNode_Registry_Property function retrieves a specified device property from the registry.", "CM_Get_DevNode_Status": "The CM_Get_DevNode_Status function obtains the status of a device instance from its device node in the local machine's device tree.", "CM_Get_DevNode_Status_Ex": "The CM_Get_DevNode_Status_Ex function obtains the status of a device instance from its device node on a local or a remote machine's device tree.", "CM_Get_First_Log_Conf": "The CM_Get_First_Log_Conf function obtains the first logical configuration, of a specified configuration type, associated with a specified device instance on the local machine.", "CM_Get_First_Log_Conf_Ex": "The CM_Get_First_Log_Conf_Ex function obtains the first logical configuration associated with a specified device instance on a local or a remote machine.", "CM_Get_HW_Prof_Flags_ExA": "The CM_Get_HW_Prof_Flags_Ex function retrieves the hardware profile-specific configuration flags for a device instance on a remote machine or a local machine.", "CM_Get_HW_Prof_Flags_ExW": "The CM_Get_HW_Prof_Flags_Ex function retrieves the hardware profile-specific configuration flags for a device instance on a remote machine or a local machine.", "CM_Get_HW_Prof_FlagsA": "The CM_Get_HW_Prof_Flags function retrieves the hardware profile-specific configuration flags for a device instance on a local machine.", "CM_Get_HW_Prof_FlagsW": "The CM_Get_HW_Prof_Flags function retrieves the hardware profile-specific configuration flags for a device instance on a local machine.", "CM_Get_Log_Conf_Priority": "The CM_Get_Log_Conf_Priority function obtains the configuration priority of a specified logical configuration on the local machine.", "CM_Get_Log_Conf_Priority_Ex": "The CM_Get_Log_Conf_Priority_Ex function obtains the configuration priority of a specified logical configuration on a local or a remote machine.", "CM_Get_Next_Log_Conf": "The CM_Get_Next_Log_Conf function obtains the next logical configuration associated with a specific device instance on the local machine.", "CM_Get_Next_Log_Conf_Ex": "The CM_Get_Next_Log_Conf_Ex function obtains the next logical configuration associated with a specific device instance on a local or a remote machine.", "CM_Get_Next_Res_Des": "The CM_Get_Next_Res_Des function obtains a handle to the next resource descriptor, of a specified resource type, for a logical configuration on the local machine.", "CM_Get_Next_Res_Des_Ex": "The CM_Get_Next_Res_Des_Ex function obtains a handle to the next resource descriptor, of a specified resource type, for a logical configuration on a local or a remote machine.", "CM_Get_Parent": "The CM_Get_Parent function obtains a device instance handle to the parent node of a specified device node in the local machine's device tree.", "CM_Get_Parent_Ex": "The CM_Get_Parent_Ex function obtains a device instance handle to the parent node of a specified device node in a local or a remote machine's device tree.", "CM_Get_Res_Des_Data": "The CM_Get_Res_Des_Data function retrieves the information stored in a resource descriptor on the local machine.", "CM_Get_Res_Des_Data_Ex": "The CM_Get_Res_Des_Data_Ex function retrieves the information stored in a resource descriptor on a local or a remote machine.", "CM_Get_Res_Des_Data_Size": "The CM_Get_Res_Des_Data_Size function obtains the buffer size required to hold the information contained in a specified resource descriptor on the local machine.", "CM_Get_Res_Des_Data_Size_Ex": "The CM_Get_Res_Des_Data_Size_Ex function obtains the buffer size required to hold the information contained in a specified resource descriptor on a local or a remote machine.", "CM_Get_Resource_Conflict_Count": "The CM_Get_Resource_Conflict_Count function obtains the number of conflicts contained in a specified resource conflict list.", "CM_Get_Resource_Conflict_DetailsA": "The CM_Get_Resource_Conflict_Details function obtains the details about one of the resource conflicts in a conflict list.", "CM_Get_Resource_Conflict_DetailsW": "The CM_Get_Resource_Conflict_Details function obtains the details about one of the resource conflicts in a conflict list.", "CM_Get_Sibling": "The CM_Get_Sibling function obtains a device instance handle to the next sibling node of a specified device node in the local machine's device tree.", "CM_Get_Sibling_Ex": "The CM_Get_Sibling_Ex function obtains a device instance handle to the next sibling node of a specified device node, in a local or a remote machine's device tree.", "CM_Get_Version": "The CM_Get_Version function returns version 4.0 of the Plug and Play for a local machine.", "CM_Get_Version_Ex": "The CM_Get_Version_Ex function returns version 4.0 of the Plug and Play for a local or a remote machine.", "CM_Is_Dock_Station_Present": "The CM_Is_Dock_Station_Present function identifies whether a docking station is present in a local machine.", "CM_Is_Dock_Station_Present_Ex": "The CM_Is_Dock_Station_Present_Ex function identifies whether a docking station is present in a local or a remote machine.", "CM_Is_Version_Available": "The CM_Is_Version_Available function indicates whether a specified version of the Plug and Play is supported by a local machine.", "CM_Is_Version_Available_Ex": "The CM_Is_Version_Available_Ex function indicates whether a specified version of the Plug and Play is supported by a local or a remote machine.", "CM_Locate_DevNode_ExA": "The CM_Locate_DevNode_Ex function obtains a device instance handle to the device node that is associated with a specified device instance ID, on a local machine or a remote machine.", "CM_Locate_DevNode_ExW": "The CM_Locate_DevNode_Ex function obtains a device instance handle to the device node that is associated with a specified device instance ID, on a local machine or a remote machine.", "CM_Locate_DevNodeA": "The CM_Locate_DevNode function obtains a device instance handle to the device node that is associated with a specified device instance ID on the local machine.", "CM_Locate_DevNodeW": "The CM_Locate_DevNode function obtains a device instance handle to the device node that is associated with a specified device instance ID on the local machine.", "CM_MapCrToWin32Err": "Converts a specified CONFIGRET code to its equivalent system error code.", "CM_Modify_Res_Des": "The CM_Modify_Res_Des function modifies a specified resource descriptor on the local machine.", "CM_Modify_Res_Des_Ex": "The CM_Modify_Res_Des_Ex function modifies a specified resource descriptor on a local or a remote machine.", "CM_Open_Class_KeyA": "The CM_Open_Class_Key function opens the device setup class registry key, the device interface class registry key, or a specific subkey of a class.", "CM_Open_Class_KeyW": "The CM_Open_Class_Key function opens the device setup class registry key, the device interface class registry key, or a specific subkey of a class.", "CM_Open_Device_Interface_Key_ExA": "The CM_Open_Device_Interface_Key_ExA function opens the registry subkey that is used by applications and drivers to store information that is specific to a device interface.", "CM_Open_Device_Interface_Key_ExW": "The CM_Open_Device_Interface_Key_ExW function opens the registry subkey that is used by applications and drivers to store information that is specific to a device interface.", "CM_Open_Device_Interface_KeyA": "The CM_Open_Device_Interface_Key function opens the registry subkey that is used by applications and drivers to store information that is specific to a device interface.", "CM_Open_Device_Interface_KeyW": "The CM_Open_Device_Interface_Key function opens the registry subkey that is used by applications and drivers to store information that is specific to a device interface.", "CM_Open_DevNode_Key": "The CM_Open_DevNode_Key function opens a registry key for device-specific configuration information.", "CM_Query_And_Remove_SubTree_ExA": "The CM_Query_And_Remove_SubTree_Ex function checks whether a device instance and its children can be removed and, if so, it removes them.", "CM_Query_And_Remove_SubTree_ExW": "The CM_Query_And_Remove_SubTree_Ex function checks whether a device instance and its children can be removed and, if so, it removes them.", "CM_Query_And_Remove_SubTreeA": "The CM_Query_And_Remove_SubTree function checks whether a device instance and its children can be removed and, if so, it removes them.", "CM_Query_And_Remove_SubTreeW": "The CM_Query_And_Remove_SubTree function checks whether a device instance and its children can be removed and, if so, it removes them.", "CM_Query_Resource_Conflict_List": "The CM_Query_Resource_Conflict_List function identifies device instances having resource requirements that conflict with a specified device instance's resource description.", "CM_Reenumerate_DevNode": "The CM_Reenumerate_DevNode function enumerates the devices identified by a specified device node and all of its children.", "CM_Reenumerate_DevNode_Ex": "The CM_Reenumerate_DevNode_Ex function enumerates the devices identified by a specified device node and all of its children.", "CM_Register_Notification": "Use RegisterDeviceNotification instead of CM_Register_Notification if your code targets Windows 7 or earlier versions of Windows.", "CM_Request_Device_Eject_ExA": "The CM_Request_Device_Eject_Ex function prepares a local or a remote device instance for safe removal, if the device is removable.", "CM_Request_Device_Eject_ExW": "The CM_Request_Device_Eject_Ex function prepares a local or a remote device instance for safe removal, if the device is removable.", "CM_Request_Device_EjectA": "The CM_Request_Device_Eject function prepares a local device instance for safe removal, if the device is removable.", "CM_Request_Device_EjectW": "The CM_Request_Device_Eject function prepares a local device instance for safe removal, if the device is removable.", "CM_Request_Eject_PC": "The CM_Request_Eject_PC function requests that a portable PC, which is inserted in a local docking station, be ejected.", "CM_Request_Eject_PC_Ex": "The CM_Request_Eject_PC_Ex function requests that a portable PC, which is inserted in a local or a remote docking station, be ejected.", "CM_Set_Class_Property_ExW": "The CM_Set_Class_Property_ExW function sets a class property for a device setup class or a device interface class.", "CM_Set_Class_PropertyW": "The CM_Set_Class_Property function sets a class property for a device setup class or a device interface class.", "CM_Set_Class_Registry_PropertyA": "The CM_Set_Class_Registry_Property function sets or deletes a property of a device setup class.", "CM_Set_Class_Registry_PropertyW": "The CM_Set_Class_Registry_Property function sets or deletes a property of a device setup class.", "CM_Set_Device_Interface_Property_ExW": "The CM_Set_Device_Interface_Property_ExW function sets a device property of a device interface.", "CM_Set_Device_Interface_PropertyW": "The CM_Set_Device_Interface_Property function sets a device property of a device interface.", "CM_Set_DevNode_Problem": "The CM_Set_DevNode_Problem function sets a problem code for a device that is installed in a local machine.", "CM_Set_DevNode_Problem_Ex": "The CM_Set_DevNode_Problem_Ex function sets a problem code for a device that is installed in a local or a remote machine.", "CM_Set_DevNode_Property_ExW": "The CM_Set_DevNode_Property_ExW function sets a device instance property.", "CM_Set_DevNode_PropertyW": "The CM_Set_DevNode_Property function sets a device instance property.", "CM_Set_DevNode_Registry_PropertyA": "The CM_Set_DevNode_Registry_Property function sets a specified device property in the registry.", "CM_Set_DevNode_Registry_PropertyW": "The CM_Set_DevNode_Registry_Property function sets a specified device property in the registry.", "CM_Setup_DevNode": "The CM_Setup_DevNode function restarts a device instance that is not running because there is a problem with the device configuration.", "CM_Uninstall_DevNode": "The CM_Uninstall_DevNode function removes all persistent state associated with a device instance.", "CM_Unregister_Notification": "Use UnregisterDeviceNotification instead of CM_Unregister_Notification if your code targets Windows\u00c2\u00a07 or earlier versions of Windows.", "CM_WaitNoPendingInstallEvents": "The CMP_WaitNoPendingInstallEvents function waits until there are no pending device installation activities for the PnP manager to perform.", "CompareFileTime": "Compares two file times.", "CreateDirectoryA": "Creates a new directory.", "CreateDirectoryW": "Creates a new directory.", "CreateFile2": "Creates or opens a file or I/O device.", "CreateFileA": "Creates or opens a file or I/O device.", "CreateFileW": "Creates or opens a file or I/O device.", "CopyFileFromAppW": "Copies an existing file to a new file.", "CreateDirectoryFromAppW": "Creates a new directory.", "CreateFile2FromAppW": "Creates or opens a file or I/O device.", "CreateFileFromAppW": "Creates or opens a file or I/O device.", "CancelIo": "Marks all pending input/output operations as canceled.", "CancelIoEx": "Marks any outstanding I/O operations for the specified file handle.", "CancelNtmsLibraryRequest": "The CancelNtmsLibraryRequest function cancels outstanding RSM requests, such as calls to the CleanNtmsDrive function.", "CancelNtmsOperatorRequest": "The CancelNtmsOperatorRequest function cancels the specified RSM operator request.", "CancelSynchronousIo": "Marks pending synchronous I/O operations that are issued by the specified thread as canceled.", "ChangeNtmsMediaType": "The ChangeNtmsMediaType function moves the specified PMID to the specified target media pool and sets the PMID's media type identifier to the media type of the target media pool.", "CheckNameLegalDOS8Dot3A": "Determines whether the specified name can be used to create a file on a FAT file system.", "CheckNameLegalDOS8Dot3W": "Determines whether the specified name can be used to create a file on a FAT file system.", "CLAIMMEDIALABEL": "The ClaimMediaLabel callback function determines whether a specified media label was created by the media's associated application.", "CleanNtmsDrive": "The CleanNtmsDrive function queues a cleaning request for the specified drive for cleaning.", "ClfsLsnEqual": "Determines whether two LSNs from the same stream are equal.", "ClfsLsnGreater": "Determines whether one LSN is greater than another LSN.", "ClfsLsnLess": "Determines whether one LSN is less than another LSN.", "ClfsLsnNull": "Determines whether a specified LSN is equal to the smallest possible LSN, which is CLFS_LSN_NULL.", "CloseAndResetLogFile": "Resets the log file and then shuts the log.", "CloseEncryptedFileRaw": "Closes an encrypted file after a backup or restore operation, and frees associated system resources.", "CloseIoRing": "Closes an HIORING handle that was previously opened with a call to CreateIoRing.", "CloseNtmsNotification": "The CloseNtmsNotification function closes the specified open notification channel.", "CloseNtmsSession": "The CloseNtmsSession function closes the specified RSM session.", "CommitComplete": "Indicates that a resource manager.", "CommitEnlistment": "Commits the transaction associated with this enlistment handle.", "CommitTransaction": "Requests that the specified transaction be committed.", "CommitTransactionAsync": "Requests that the specified transaction be committed.", "CopyFile": "Copies an existing file to a new file.", "CopyFile2": "Copies an existing file to a new file, notifying the application of its progress through a callback function.", "CopyFileA": "Copies an existing file to a new file.", "CopyFileExA": "Copies an existing file to a new file, notifying the application of its progress through a callback function.", "CopyFileExW": "Copies an existing file to a new file, notifying the application of its progress through a callback function.", "CopyFileTransactedA": "Copies an existing file to a new file as a transacted operation, notifying the application of its progress through a callback function.", "CopyFileTransactedW": "Copies an existing file to a new file as a transacted operation, notifying the application of its progress through a callback function.", "CopyFileW": "Copies an existing file to a new file.", "CreateDirectory": "Creates a new directory.", "CreateDirectoryExA": "Creates a new directory with the attributes of a specified template directory.", "CreateDirectoryExW": "Creates a new directory with the attributes of a specified template directory.", "CreateDirectoryTransactedA": "Creates a new directory as a transacted operation, with the attributes of a specified template directory.", "CreateDirectoryTransactedW": "Creates a new directory as a transacted operation, with the attributes of a specified template directory.", "CreateEnlistment": "Creates an enlistment, sets its initial state, and opens a handle to the enlistment with the specified access.", "CreateEnumUsers": "Creates an enumerator object for enumerating quota users on the volume.", "CreateFileTransactedA": "Creates or opens a file, file stream, or directory as a transacted operation.", "CreateFileTransactedW": "Creates or opens a file, file stream, or directory as a transacted operation.", "CreateHardLinkA": "Establishes a hard link between an existing file and a new file.", "CreateHardLinkTransactedA": "Establishes a hard link between an existing file and a new file as a transacted operation.", "CreateHardLinkTransactedW": "Establishes a hard link between an existing file and a new file as a transacted operation.", "CreateHardLinkW": "Establishes a hard link between an existing file and a new file.", "CreateIoCompletionPort": "Creates an input/output completion port and associates it with a specified file handle, or creates an I/O completion port that is not yet associated with a file handle, allowing association at a later time.", "CreateIoRing": "Creates a new instance of an I/O ring submission/completion queue pair and returns a handle for referencing the I/O ring.", "CreateLogContainerScanContext": "Creates a scan context to use with ScanLogContainers to enumerate all log containers that are associated with a log, and performs the first scan.", "CreateLogFile": "Creates or opens a log.", "CreateLogMarshallingArea": "Creates a marshaling area for a log, and when successful it returns a marshaling context.", "CreateNtmsMediaA": "The CreateNtmsMedia function creates a PMID and side for a new piece of offline media.", "CreateNtmsMediaPool": "The CreateNtmsMediaPool function creates a new application media pool.", "CreateNtmsMediaPoolA": "The CreateNtmsMediaPool function creates a new application media pool.", "CreateNtmsMediaPoolW": "The CreateNtmsMediaPool function creates a new application media pool.", "CreateNtmsMediaW": "The CreateNtmsMedia function creates a PMID and side for a new piece of offline media.", "CreateResourceManager": "Creates a new resource manager.", "CreateSymbolicLinkA": "Creates a symbolic link.", "CreateSymbolicLinkTransactedA": "Creates a symbolic link as a transacted operation.", "CreateSymbolicLinkTransactedW": "Creates a symbolic link as a transacted operation.", "CreateSymbolicLinkW": "Creates a symbolic link.", "CreateTransaction": "Creates a new transaction object.", "CreateTransactionManager": "Creates a new transaction manager object and returns a handle with the specified access.", "CreateUserBatch": "Creates a batching object for optimizing updates to the quota settings of multiple users simultaneously.", "CopyTo": "Copies a specified number of bytes from the current seek pointer in the stream to the current seek pointer in another stream.", "Create": "Creates a new dictionary file.", "CreateILockBytesOnHGlobal": "Creates a byte array object that uses an HGLOBAL memory handle to store the bytes intended for in-memory storage of a compound file.", "CreateStorage": "Creates and opens a new storage object nested within this storage object with the specified name in the specified access mode.", "CreateStreamOnHGlobal": "Creates a stream object that uses an HGLOBAL memory handle to store the stream contents.", "CompactVirtualDisk": "Reduces the size of a virtual hard disk backing store file.", "CreateVirtualDisk": "Creates a virtual hard disk image file, either using default parameters or using an existing virtual disk or physical disk.", "CloseTrace": "The CloseTrace function closes a trace processing session that was created with OpenTrace.", "ControlTraceA": "The ControlTrace function flushes, queries, updates, or stops the specified event tracing session.", "ControlTraceW": "The ControlTrace function flushes, queries, updates, or stops the specified event tracing session.", "CreateTraceInstanceId": "A RegisterTraceGuids-based event provider uses the CreateTraceInstanceId function to create a unique transaction identifier and map it to a registration handle.", "CAImportPFX": "Imports a certification authority certificate and its associated private key into the local computer store.", "CancelConnectNotify": "Calls CancelConnectNotify before and after each cancel connection operation.", "CertAddCertificateContextToStore": "Adds a certificate context to the certificate store.", "CertAddCertificateLinkToStore": "Adds a link in a certificate store to a certificate context in a different store.", "CertAddCRLContextToStore": "Adds a certificate revocation list context to the specified certificate store.", "CertAddCRLLinkToStore": "Adds a link in a store to a certificate revocation list context in a different store.", "CertAddCTLContextToStore": "Adds a certificate trust list context to a certificate store.", "CertAddCTLLinkToStore": "The CertAddCTLLinkToStore function adds a link in a store to a certificate trust list context in a different store.", "CertAddEncodedCertificateToStore": "Creates a certificate context from an encoded certificate and adds it to the certificate store.", "CertAddEncodedCertificateToSystemStoreA": "Opens the specified system store and adds the encoded certificate to it.", "CertAddEncodedCertificateToSystemStoreW": "Opens the specified system store and adds the encoded certificate to it.", "CertAddEncodedCRLToStore": "Creates a certificate revocation list context from an encoded CRL and adds it to the certificate store.", "CertAddEncodedCTLToStore": "Creates a certificate trust list context from an encoded CTL and adds it to the certificate store.", "CertAddEnhancedKeyUsageIdentifier": "The CertAddEnhancedKeyUsageIdentifier function adds a usage identifier object identifier extended property of the certificate.", "CertAddRefServerOcspResponse": "Increments the reference count for an HCERT_SERVER_OCSP_RESPONSE handle.", "CertAddRefServerOcspResponseContext": "Increments the reference count for a CERT_SERVER_OCSP_RESPONSE_CONTEXT structure.", "CertAddSerializedElementToStore": "Adds a serialized certificate, certificate revocation list element to the store.", "CertAddStoreToCollection": "The CertAddStoreToCollection function adds a sibling certificate store to a collection certificate store.", "CertAlgIdToOID": "Converts a CryptoAPI algorithm identifier string.", "CertCloseServerOcspResponse": "Closes an online certificate status protocol server response handle.", "CertCloseStore": "Closes a certificate store handle and reduces the reference count on the store.", "CertCompareCertificate": "Determines whether two certificates are identical by comparing the issuer name and serial number of the certificates.", "CertCompareCertificateName": "The CertCompareCertificateName function compares two certificate CERT_NAME_BLOB structures to determine whether they are identical.", "CertCompareIntegerBlob": "The CertCompareIntegerBlob function compares two integer BLOBs to determine whether they represent equal numeric values.", "CertComparePublicKeyInfo": "The CertComparePublicKeyInfo function compares two encoded public keys to determine whether they are identical.", "CertControlStore": "Allows an application to be notified when there is a difference between the contents of a cached store in use and the contents of that store as it is persisted to storage.", "CertCreateCertificateChainEngine": "The CertCreateCertificateChainEngine function creates a new, nondefault chain engine for an application.", "CertCreateCertificateContext": "Creates a certificate context from an encoded certificate.", "CertCreateContext": "Creates the specified context from the encoded bytes.", "CertCreateCRLContext": "The CertCreateCRLContext function creates a certificate revocation list context from an encoded CRL.", "CertCreateCTLContext": "The CertCreateCTLContext function creates a certificate trust list context from an encoded CTL.", "CertCreateCTLEntryFromCertificateContextProperties": "The CertCreateCTLEntryFromCertificateContextProperties function creates a certificate trust list entry whose attributes are the properties of the certificate context.", "CertCreateSelfSignCertificate": "Builds a self-signed certificate and returns a pointer to a CERT_CONTEXT structure that represents the certificate.", "CertDeleteCertificateFromStore": "The CertDeleteCertificateFromStore function deletes the specified certificate context from the certificate store.", "CertDeleteCRLFromStore": "The CertDeleteCRLFromStore function deletes the specified certificate revocation list context from the certificate store.", "CertDeleteCTLFromStore": "The CertDeleteCTLFromStore function deletes the specified certificate trust list context from a certificate store.", "CertDuplicateCertificateChain": "The CertDuplicateCertificateChain function duplicates a pointer to a certificate chain by incrementing the chain's reference count.", "CertDuplicateCertificateContext": "Duplicates a certificate context by incrementing its reference count.", "CertDuplicateCRLContext": "The CertDuplicateCRLContext function duplicates a certificate revocation list context by incrementing its reference count.", "CertDuplicateCTLContext": "The CertDuplicateCTLContext function duplicates a certificate trust list context by incrementing its reference count.", "CertDuplicateStore": "Duplicates a store handle by incrementing the store's reference count.", "CertEnumCertificateContextProperties": "The CertEnumCertificateContextProperties function retrieves the first or next extended property associated with a certificate context.", "CertEnumCertificatesInStore": "Retrieves the first or next certificate in a certificate store.", "CertEnumCRLContextProperties": "The CertEnumCRLContextProperties function retrieves the first or next extended property associated with a certificate revocation list context.", "CertEnumCRLsInStore": "The CertEnumCRLsInStore function retrieves the first or next certificate revocation list context in a certificate store.", "CertEnumCTLContextProperties": "The CertEnumCTLContextProperties function retrieves the first or next extended property associated with a certificate trust list context.", "CertEnumCTLsInStore": "The CertEnumCTLsInStore function retrieves the first or next certificate trust list context in a certificate store.", "CertEnumPhysicalStore": "The CertEnumPhysicalStore function retrieves the physical stores on a computer.", "CertEnumSubjectInSortedCTL": "Retrieves the first or next TrustedSubject in a sorted certificate trust list.", "CertEnumSystemStore": "The CertEnumSystemStore function retrieves the system stores available.", "CertEnumSystemStoreLocation": "The CertEnumSystemStoreLocation function retrieves all of the system store locations.", "CertFindAttribute": "The CertFindAttribute function finds the first attribute in the CRYPT_ATTRIBUTE array, as identified by its object identifier.", "CertFindCertificateInCRL": "The CertFindCertificateInCRL function searches the certificate revocation list for the specified certificate.", "CertFindCertificateInStore": "Finds the first or next certificate context in a certificate store that matches a search criteria established by the dwFindType and its associated pvFindPara.", "CertFindChainInStore": "Finds the first or next certificate in a store that meets the specified criteria.", "CertFindCRLInStore": "Finds the first or next certificate revocation list context in a certificate store that matches a search criterion established by the dwFindType parameter and the associated pvFindPara parameter.", "CertFindCTLInStore": "Finds the first or next certificate trust list context that matches search criteria established by the dwFindType and its associated pvFindPara.", "CertFindExtension": "The CertFindExtension function finds the first extension in the CERT_EXTENSION array, as identified by its object identifier.", "CertFindRDNAttr": "The CertFindRDNAttr function finds the first RDN attribute identified by its object identifier.", "CertFindSubjectInCTL": "The CertFindSubjectInCTL function attempts to find the specified subject in a certificate trust list.", "CertFindSubjectInSortedCTL": "The CertFindSubjectInSortedCTL function attempts to find the specified subject in a sorted certificate trust list.", "CertFreeCertificateChain": "The CertFreeCertificateChain function frees a certificate chain by reducing its reference count.", "CertFreeCertificateChainEngine": "The CertFreeCertificateChainEngine function frees a certificate trust engine.", "CertFreeCertificateChainList": "Frees the array of pointers to chain contexts.", "CertFreeCertificateContext": "Frees a certificate context by decrementing its reference count.", "CertFreeCRLContext": "Frees a certificate revocation list context by decrementing its reference count.", "CertFreeCTLContext": "Frees a certificate trust list context by decrementing its reference count.", "CertFreeServerOcspResponseContext": "Decrements the reference count for a CERT_SERVER_OCSP_RESPONSE_CONTEXT structure.", "CertGetCertificateChain": "Builds a certificate chain context starting from an end certificate and going back, if possible, to a trusted root certificate.", "CertGetCertificateContextProperty": "Retrieves the information contained in an extended property of a certificate context.", "CertGetCRLContextProperty": "Gets an extended property for the specified certificate revocation list context.", "CertGetCRLFromStore": "Gets the first or next certificate revocation list context from the certificate store for the specified issuer.", "CertGetCTLContextProperty": "Retrieves an extended property of a certificate trust list context.", "CertGetEnhancedKeyUsage": "Returns information from the enhanced key usage extension or the EKU extended property of a certificate.", "CertGetIntendedKeyUsage": "Acquires the intended key usage bytes from a certificate.", "CertGetIssuerCertificateFromStore": "Retrieves the certificate context from the certificate store for the first or next issuer of the specified subject certificate.", "CertGetNameStringA": "Obtains the subject or issuer name from a certificate CERT_CONTEXT structure and converts it to a null-terminated character string.", "CertGetNameStringW": "Obtains the subject or issuer name from a certificate CERT_CONTEXT structure and converts it to a null-terminated character string.", "CertGetPublicKeyLength": "The CertGetPublicKeyLength function acquires the bit length of public/private keys from a public key BLOB.", "CertGetServerOcspResponseContext": "Retrieves a non-blocking, time valid online certificate status protocol response context for the specified handle.", "CertGetStoreProperty": "Retrieves a store property.", "CertGetSubjectCertificateFromStore": "Returns from a certificate store a subject certificate context uniquely identified by its issuer and serial number.", "CertGetValidUsages": "Returns an array of usages that consist of the intersection of the valid usages for all certificates in an array of certificates.", "CertIsRDNAttrsInCertificateName": "The CertIsRDNAttrsInCertificateName function compares the attributes in the certificate name with the specified CERT_RDN to determine whether all attributes are included there.", "CertIsStrongHashToSign": "Determines whether the specified hash algorithm and the public key in the signing certificate can be used to perform strong signing.", "CertIsValidCRLForCertificate": "The CertIsValidCRLForCertificate function checks a CRL to find out if it is a CRL that would include a specific certificate if that certificate were revoked.", "CertModifyCertificatesToTrust": "Modifies the set of certificates in a certificate trust list for a given purpose.", "CertNameToStrA": "Converts an encoded name in a CERT_NAME_BLOB structure to a null-terminated character string.", "CertNameToStrW": "Converts an encoded name in a CERT_NAME_BLOB structure to a null-terminated character string.", "CertOIDToAlgId": "Use the CryptFindOIDInfo function instead of this function because ALG_ID identifiers are no longer supported in CNG.", "CertOpenServerOcspResponse": "Opens a handle to an online certificate status protocol response associated with a server certificate chain.", "CertOpenStore": "Opens a certificate store by using a specified store provider type.", "CertOpenSystemStoreA": "Opens the most common system certificate store.", "CertOpenSystemStoreW": "Opens the most common system certificate store.", "CertRDNValueToStrA": "The CertRDNValueToStr function converts a name in a CERT_RDN_VALUE_BLOB to a null-terminated character string.", "CertRDNValueToStrW": "The CertRDNValueToStr function converts a name in a CERT_RDN_VALUE_BLOB to a null-terminated character string.", "CertRegisterPhysicalStore": "Adds a physical store to a registry system store collection.", "CertRegisterSystemStore": "Registers a system store.", "CertRemoveEnhancedKeyUsageIdentifier": "The CertRemoveEnhancedKeyUsageIdentifier function removes a usage identifier object identifier extended property of the certificate.", "CertRemoveStoreFromCollection": "Removes a sibling certificate store from a collection store.", "CertResyncCertificateChainEngine": "Resyncs the certificate chain engine, which resynchronizes the stores the store's engine and updates the engine caches.", "CertRetrieveLogoOrBiometricInfo": "Performs a URL retrieval of logo or biometric information specified in either the szOID_LOGOTYPE_EXT or szOID_BIOMETRIC_EXT certificate extension.", "CertSaveStore": "Saves the certificate store to a file or to a memory BLOB.", "CertSelectCertificateA": "Presents a dialog box that allows the user to select certificates from a set of certificates that match the given criteria.", "CertSelectCertificateChains": "Retrieves certificate chains based on specified selection criteria.", "CertSelectCertificateW": "Presents a dialog box that allows the user to select certificates from a set of certificates that match the given criteria.", "CertSelectionGetSerializedBlob": "A helper function used to retrieve a serialized certificate BLOB from a CERT_SELECTUI_INPUT structure.", "CertSerializeCertificateStoreElement": "The CertSerializeCertificateStoreElement function serializes a certificate context's encoded certificate and its encoded properties.", "CertSerializeCRLStoreElement": "The CertSerializeCRLStoreElement function serializes an encoded certificate revocation list context and the encoded representation of its properties.", "CertSerializeCTLStoreElement": "The CertSerializeCTLStoreElement function serializes an encoded certificate trust list context and the encoded representation of its properties.", "CertSetCertificateContextPropertiesFromCTLEntry": "Sets the properties on the certificate context by using the attributes in the specified certificate trust list entry.", "CertSetCertificateContextProperty": "Sets an extended property for a specified certificate context.", "CertSetCRLContextProperty": "Sets an extended property for the specified certificate revocation list context.", "CertSetCTLContextProperty": "Sets an extended property for the specified certificate trust list context.", "CertSetEnhancedKeyUsage": "The CertSetEnhancedKeyUsage function sets the enhanced key usage property for the certificate.", "CertSetStoreProperty": "The CertSetStoreProperty function sets a store property.", "CertSrvBackupClose": "Closes the file opened by the CertSrvBackupOpenFile function.", "CertSrvBackupEnd": "Ends a Certificate Services backup session.", "CertSrvBackupFree": "Used to free memory allocated from certain Certificate Services Backup APIs.", "CertSrvBackupGetBackupLogsW": "Retrieves the list of Certificate Services log file names that need to be backed up for the given backup context.", "CertSrvBackupGetDatabaseNamesW": "Retrieves the list of Certificate Services database file names that need to be backed up for the given backup context.", "CertSrvBackupGetDynamicFileListW": "Retrieves the list of Certificate Services dynamic file names that need to be backed up for the given backup context.", "CertSrvBackupOpenFileW": "Opens a file for backup.", "CertSrvBackupPrepareW": "Used to prepare a Certificate Services server for backup operations.", "CertSrvBackupRead": "Reads bytes from a Certificate Services file.", "CertSrvBackupTruncateLogs": "Eliminates redundant records and reduces the disk storage space used by log files.", "CertSrvIsServerOnlineW": "Determines if a Certificate Services server is online; if the Certificate Services server is not online, backup operations will not be successful.", "CertSrvRestoreEnd": "Ends a Certificate Services restore session.", "CertSrvRestoreGetDatabaseLocationsW": "Used both in backup and restore scenarios and retrieves the list of Certificate Services database location names for all the files being backed up or restored.", "CertSrvRestorePrepareW": "Prepares a Certificate Services instance for restore operations.", "CertSrvRestoreRegisterComplete": "Completes a registered Certificate Services restore operation.", "CertSrvRestoreRegisterThroughFile": "Registers a Certificate Services restore.", "CertSrvRestoreRegisterW": "Registers a Certificate Services restore.", "CertSrvServerControlW": "Issues a service control command to programmatically stop Certificate Services.", "CertStrToNameA": "Converts a null-terminated X.500 string to an encoded certificate name.", "CertStrToNameW": "Converts a null-terminated X.500 string to an encoded certificate name.", "CertUnregisterPhysicalStore": "The CertUnregisterPhysicalStore function removes a physical store from a specified system store collection.", "CertUnregisterSystemStore": "The CertUnregisterSystemStore function unregisters a specified system store.", "CertVerifyCertificateChainPolicy": "Checks a certificate chain to verify its validity, including its compliance with any specified validity policy criteria.", "CertVerifyCRLRevocation": "Check a certificate revocation list to determine whether a subject's certificate has or has not been revoked.", "CertVerifyCRLTimeValidity": "The CertVerifyCRLTimeValidity function verifies the time validity of a CRL.", "CertVerifyCTLUsage": "Verifies that a subject is trusted for a specified usage by finding a signed and time-valid certificate trust list with the usage identifiers that contain the subject.", "CertVerifyRevocation": "Checks the revocation status of the certificates contained in the rgpvContext array.", "CertVerifySubjectCertificateContext": "The CertVerifySubjectCertificateContext function performs the enabled verification checks on a certificate by checking the validity of the certificate's issuer.", "CertVerifyTimeValidity": "The CertVerifyTimeValidity function verifies the time validity of a certificate.", "CertVerifyValidityNesting": "The CertVerifyValidityNesting function verifies that a subject certificate's time validity nests correctly within its issuer's time validity.", "CertViewPropertiesA": "The CertViewProperties function displays the properties for a certificate in a user interface dialog box.", "CertViewPropertiesW": "The CertViewProperties function displays the properties for a certificate in a user interface dialog box.", "ChangeAccountPasswordA": "Changes the password for a Windows domain account by using the specified Security Support Provider.", "ChangeAccountPasswordW": "Changes the password for a Windows domain account by using the specified Security Support Provider.", "ChangeCredential": "Changes the credentials associated with the specified identity.", "ChangeServiceConfig2A": "Changes the optional configuration parameters of a service.", "ChangeServiceConfig2W": "Changes the optional configuration parameters of a service.", "CheckCertificateSignature": "Verifies the certificate signature.", "CheckPublicKeySignature": "Verifies the certificate signature by using the public key of the signing certificate.", "CheckSignature": "Verifies that the certificate request has been signed and that the signature is valid.", "CheckTokenCapability": "Checks the capabilities of a given token.", "CheckTokenMembership": "Determines whether a specified security identifier is enabled in an access token.", "CheckTokenMembershipEx": "Determines whether the specified SID is enabled in the specified token.", "Clear": "Removes all objects from the collection.", "Close": "Closes the window.", "CloseApplication": "Unloads a specified IAzApplication object from the cache.", "CloseHandle": "Closes an open object handle.", "CloseServiceHandle": "Closes a handle to a service control manager or service object.", "CompleteAuthToken": "Completes an authentication token.", "ComputeEffectivePermissionWithSecondarySecurity": "Computes the effective permissions by using the secondary security for an object.", "ComputeKeyIdentifier": "Creates an identifier from a 160-bit SHA-1 hash of the public key.", "ComputeSiteCosts": "Is not currently used.", "Configure": "Displays the module user interface.", "ConnectIdentity": "Connects an identity to a domain user.", "ControlService": "Sends a control code to a service.", "ControlServiceExA": "Sends a control code to a service.", "ControlServiceExW": "Sends a control code to a service.", "ConvertSecurityDescriptorToStringSecurityDescriptorA": "Converts a security descriptor to a string format.", "ConvertSecurityDescriptorToStringSecurityDescriptorW": "Converts a security descriptor to a string format.", "ConvertSidToStringSidA": "Converts a security identifier to a string format suitable for display, storage, or transmission.", "ConvertSidToStringSidW": "Converts a security identifier to a string format suitable for display, storage, or transmission.", "ConvertStringSecurityDescriptorToSecurityDescriptorA": "Converts a string-format security descriptor into a valid, functional security descriptor.", "ConvertStringSecurityDescriptorToSecurityDescriptorW": "Converts a string-format security descriptor into a valid, functional security descriptor.", "ConvertStringSidToSidA": "Converts a string-format security identifier into a valid, functional SID.", "ConvertStringSidToSidW": "Converts a string-format security identifier into a valid, functional SID.", "ConvertToAutoInheritPrivateObjectSecurity": "Converts a security descriptor and its access control lists.", "ConvertToSid": "Retrieves the security identifier associated with the specified identity and identity provider.", "CopySid": "Copies a security identifier to a buffer.", "CreateApplication": "Creates an IAzApplication object with the specified name.", "CreateApplication2": "Creates an IAzApplication2 object by using the specified name.", "CreateApplicationGroup": "Creates an IAzApplicationGroup object with the specified name.", "CreateCAConfiguration": "Creates a new certification authority configuration and adds it to the configuration set.", "createFilePFX": "Saves the accepted certificate chain and private key in a file in Personal Information Exchange format.", "createFilePFXWStr": "Saves the accepted certificate chain and private key in a file in Personal Information Exchange format.", "createFilePKCS10": "Creates a base64-encoded PKCS", "createFilePKCS10WStr": "Creates a base64-encoded PKCS", "createFileRequest": "Creates a PKCS", "createFileRequestWStr": "Creates a PKCS", "CreateObject": "Creates a local object of a specified class and returns a pointer to a specified interface on the object.", "CreateOperation": "Creates an IAzOperation object with the specified name.", "createPFX": "Saves the accepted certificate chain and private key in a Personal Information Exchange format string. The PFX format is also known as PKCS", "CreatePFX": "Creates a Personal Information Exchange message.", "createPFXWStr": "Saves the accepted certificate chain and private key in a Personal Information Exchange format string. The PFX format is also known as PKCS", "createPKCS10": "Creates a base64-encoded PKCS", "createPKCS10WStr": "Creates a base64-encoded PKCS", "CreatePKCS7RequestFromRequest": "The CreatePKCS7RequestFromRequest method creates a PKCS", "CreatePrivateObjectSecurity": "Allocates and initializes a self-relative security descriptor for a new private object.", "CreatePrivateObjectSecurityEx": "Allocates and initializes a self-relative security descriptor for a new private object created by the resource manager calling this function.", "CreatePrivateObjectSecurityWithMultipleInheritance": "Allocates and initializes a self-relative security descriptor for a new private object created by the resource manager calling this function.", "CreateProperty": "Creates a new property and adds it to a property set.", "createRequest": "Creates a PKCS", "CreateRequest": "Retrieves an encoded certificate request.", "CreateRequestMessage": "Create a PKCS10 request message with a challenge password.", "createRequestWStr": "Creates a PKCS", "CreateRestrictedToken": "Creates a new access token that is a restricted version of an existing access token.", "CreateRetrieveCertificateMessage": "Retrieve a previously issued certificate.", "CreateRetrievePendingMessage": "Create a message for certificate polling.", "CreateRole": "Creates an IAzRole object with the specified name.", "CreateRoleAssignment": "Creates a new IAzRoleAssignment object with the specified name in this scope.", "CreateRoleDefinition": "Creates a new IAzRoleDefinition object with the specified name in this scope.", "CreateScope": "Creates an IAzScope object with the specified name.", "CreateScope2": "Creates a new IAzScope2 object with the specified name.", "CreateSecurityPage": "Creates a basic security property page that enables the user to view and edit the access rights allowed or denied by the access control entries.", "CreateTask": "Creates an IAzTask object with the specified name.", "CreateVirtualSmartCard": "Creates a TPM virtual smart card with the given parameters.", "CreateWellKnownSid": "Creates a SID for predefined aliases.", "CredDeleteA": "Deletes a credential from the user's credential set.", "CredDeleteW": "Deletes a credential from the user's credential set.", "CredEnumerateA": "Enumerates the credentials from the user's credential set.", "CredEnumerateW": "Enumerates the credentials from the user's credential set.", "CredFindBestCredentialA": "Searches the Credentials Management database for the set of generic credentials that are associated with the current logon session and that best match the specified target resource.", "CredFindBestCredentialW": "Searches the Credentials Management database for the set of generic credentials that are associated with the current logon session and that best match the specified target resource.", "CredFree": "The CredFree function frees a buffer returned by any of the credentials management functions.", "CredFreeCredentialsFn": "Frees memory used to store credentials used by a security package.", "CredGetSessionTypes": "The CredGetSessionTypes function returns the maximum persistence supported by the current logon session.", "CredGetTargetInfoA": "The CredGetTargetInfo function retrieves all known target name information for the named target computer.", "CredGetTargetInfoW": "The CredGetTargetInfo function retrieves all known target name information for the named target computer.", "CredIsMarshaledCredentialA": "Determines whether a specified user name string is a marshaled credential previously marshaled by CredMarshalCredential.", "CredIsMarshaledCredentialW": "Determines whether a specified user name string is a marshaled credential previously marshaled by CredMarshalCredential.", "CredIsProtectedA": "Specifies whether the specified credentials are encrypted by a previous call to the CredProtect function.", "CredIsProtectedW": "Specifies whether the specified credentials are encrypted by a previous call to the CredProtect function.", "CrediUnmarshalandDecodeStringFn": "Transforms a marshaled string back into its original form, and decrypts the unmarshaled string.", "CredMarshalCredentialA": "The CredMarshalCredential function transforms a credential into a text string.", "CredMarshalCredentialW": "The CredMarshalCredential function transforms a credential into a text string.", "CredMarshalTargetInfo": "Serializes the specified target into an array of byte values.", "CredPackAuthenticationBufferA": "Converts a string user name and password into an authentication buffer.", "CredPackAuthenticationBufferW": "Converts a string user name and password into an authentication buffer.", "CredProtectA": "Encrypts the specified credentials so that only the current security context can decrypt them.", "CredProtectW": "Encrypts the specified credentials so that only the current security context can decrypt them.", "CredReadA": "Reads a credential from the user's credential set.", "CredReadDomainCredentialsA": "Reads the domain credentials from the user's credential set.", "CredReadDomainCredentialsFn": "Reads a domain credential from the Credential Manager.", "CredReadDomainCredentialsW": "Reads the domain credentials from the user's credential set.", "CredReadFn": "Reads a credential from the Credential Manager.", "CredReadW": "Reads a credential from the user's credential set.", "CredRenameA": "CredRename is no longer supported.", "CredRenameW": "CredRename is no longer supported.", "CredUICmdLinePromptForCredentialsA": "Prompts for and accepts credential information from a user working in a command-line application.", "CredUICmdLinePromptForCredentialsW": "Prompts for and accepts credential information from a user working in a command-line application.", "CredUIConfirmCredentialsA": "Is called after CredUIPromptForCredentials or CredUICmdLinePromptForCredentials, to confirm the validity of the credential harvested.", "CredUIConfirmCredentialsW": "Is called after CredUIPromptForCredentials or CredUICmdLinePromptForCredentials, to confirm the validity of the credential harvested.", "CredUIParseUserNameA": "The CredUIParseUserName function extracts the domain and user account name from a fully qualified user name.", "CredUIParseUserNameW": "The CredUIParseUserName function extracts the domain and user account name from a fully qualified user name.", "CredUIPromptForCredentialsA": "Creates and displays a configurable dialog box that accepts credentials information from a user.", "CredUIPromptForWindowsCredentialsA": "Creates and displays a configurable dialog box that allows users to supply credential information by using any credential provider installed on the local computer.", "CredUIPromptForWindowsCredentialsW": "Creates and displays a configurable dialog box that allows users to supply credential information by using any credential provider installed on the local computer.", "CredUIReadSSOCredW": "The CredUIReadSSOCredW function retrieves the user name for a single logon credential.", "CredUIStoreSSOCredW": "The CredUIStoreSSOCredW function stores a single logon credential.", "CredUnmarshalCredentialA": "The CredUnmarshalCredential function transforms a marshaled credential back into its original form.", "CredUnmarshalCredentialW": "The CredUnmarshalCredential function transforms a marshaled credential back into its original form.", "CredUnPackAuthenticationBufferA": "Converts an authentication buffer returned by a call to the CredUIPromptForWindowsCredentials function into a string user name and password.", "CredUnPackAuthenticationBufferW": "Converts an authentication buffer returned by a call to the CredUIPromptForWindowsCredentials function into a string user name and password.", "CredUnprotectA": "Decrypts credentials that were previously encrypted by using the CredProtect function.", "CredUnprotectW": "Decrypts credentials that were previously encrypted by using the CredProtect function.", "CredWriteA": "Creates a new credential or modifies an existing credential in the user's credential set.", "CredWriteDomainCredentialsA": "Writes domain credentials to the user's credential set.", "CredWriteDomainCredentialsW": "Writes domain credentials to the user's credential set.", "CredWriteFn": "Writes the specified credential to the Credential Manager.", "CredWriteW": "Creates a new credential or modifies an existing credential in the user's credential set.", "CryptAcquireCertificatePrivateKey": "Obtains the private key for a certificate.", "CryptAcquireContextA": "Used to acquire a handle to a particular key container within a particular cryptographic service provider.", "CryptAcquireContextW": "Used to acquire a handle to a particular key container within a particular cryptographic service provider.", "CryptBinaryToStringA": "Converts an array of bytes into a formatted string.", "CryptBinaryToStringW": "Converts an array of bytes into a formatted string.", "CryptCATAdminAcquireContext": "Acquires a handle to a catalog administrator context.", "CryptCATAdminAcquireContext2": "Acquires a handle to a catalog administrator context for a given hash algorithm and hash policy.", "CryptCATAdminAddCatalog": "Adds a catalog to the catalog database.", "CryptCATAdminCalcHashFromFileHandle": "Calculates the hash for a file.", "CryptCATAdminCalcHashFromFileHandle2": "Calculates the hash for a file by using the specified algorithm.", "CryptCATAdminEnumCatalogFromHash": "Enumerates the catalogs that contain a specified hash.", "CryptCATAdminReleaseCatalogContext": "Releases a handle to a catalog context previously returned by the CryptCATAdminAddCatalog function.", "CryptCATAdminReleaseContext": "Releases the handle previously assigned by the CryptCATAdminAcquireContext function.", "CryptCATAdminRemoveCatalog": "Deletes a catalog file and removes that catalog's entry from the Windows catalog database.", "CryptCATAdminResolveCatalogPath": "Retrieves the fully qualified path of the specified catalog.", "CryptCATCatalogInfoFromContext": "Retrieves catalog information from a specified catalog context.", "CryptCATCDFClose": "Closes a catalog definition file and frees the memory for the corresponding CRYPTCATCDF structure.", "CryptCATCDFEnumCatAttributes": "Enumerates catalog-level attributes within the CatalogHeader section of a catalog definition file.", "CryptCATCDFOpen": "Opens an existing catalog definition file for reading and initializes a CRYPTCATCDF structure.", "CryptCATClose": "Closes a catalog handle opened previously by the CryptCATOpen function.", "CryptCATEnumerateAttr": "Enumerates the attributes associated with a member of a catalog.", "CryptCATEnumerateCatAttr": "Enumerates the attributes associated with a catalog.", "CryptCATEnumerateMember": "Enumerates the members of a catalog.", "CryptCATGetAttrInfo": "Retrieves information about an attribute of a member of a catalog.", "CryptCATGetMemberInfo": "Retrieves member information from the catalog's PKCS", "CryptCATHandleFromStore": "Retrieves a catalog handle from memory.", "CryptCATOpen": "Opens a catalog and returns a context handle to the open catalog.", "CryptCATPersistStore": "Saves the information in the specified catalog store to an unsigned catalog file.", "CryptCATPutAttrInfo": "Allocates memory for an attribute and adds it to a catalog member.", "CryptCATPutCatAttrInfo": "Allocates memory for a catalog file attribute and adds it to the catalog.", "CryptCATPutMemberInfo": "Allocates memory for a catalog member and adds it to the catalog.", "CryptCATStoreFromHandle": "Retrieves a CRYPTCATSTORE structure from a catalog handle.", "CryptContextAddRef": "Adds one to the reference count of an HCRYPTPROV cryptographic service provider handle.", "CryptCreateHash": "Initiates the hashing of a stream of data.", "CryptCreateKeyIdentifierFromCSP": "Important\u00c2\u00a0\u00c2\u00a0This API is deprecated.", "CryptDecodeMessage": "Decodes, decrypts, and verifies a cryptographic message.", "CryptDecodeObject": "The CryptDecodeObject function decodes a structure of the type indicated by the lpszStructType parameter.", "CryptDecodeObjectEx": "Decodes a structure of the type indicated by the lpszStructType parameter.", "CryptDecrypt": "Decrypts data previously encrypted by using the CryptEncrypt function.", "CryptDecryptAndVerifyMessageSignature": "The CryptDecryptAndVerifyMessageSignature function decrypts a message and verifies its signature.", "CryptDecryptMessage": "The CryptDecryptMessage function decodes and decrypts a message.", "CryptDeriveKey": "Generates cryptographic session keys derived from a base data value.", "CryptDestroyHash": "Destroys the hash object referenced by the hHash parameter.", "CryptDestroyKey": "Releases the handle referenced by the hKey parameter.", "CryptDuplicateHash": "Makes an exact copy of a hash to the point when the duplication is done.", "CryptDuplicateKey": "Makes an exact copy of a key and the state of the key.", "CryptEncodeObject": "The CryptEncodeObject function encodes a structure of the type indicated by the value of the lpszStructType parameter.", "CryptEncodeObjectEx": "Encodes a structure of the type indicated by the value of the lpszStructType parameter.", "CryptEncrypt": "Encrypts data.", "CryptEncryptMessage": "The CryptEncryptMessage function encrypts and encodes a message.", "CryptEnumKeyIdentifierProperties": "The CryptEnumKeyIdentifierProperties function enumerates key identifiers and their properties.", "CryptEnumOIDFunction": "The CryptEnumOIDFunction function enumerates the registered object identifier functions.", "CryptEnumOIDInfo": "Enumerates predefined and registered object identifier CRYPT_OID_INFO structures.", "CryptEnumProvidersA": "Important\u00c2\u00a0\u00c2\u00a0This API is deprecated.", "CryptEnumProvidersW": "Important\u00c2\u00a0\u00c2\u00a0This API is deprecated.", "CryptEnumProviderTypesA": "Retrieves the first or next types of cryptographic service provider supported on the computer.", "CryptEnumProviderTypesW": "Retrieves the first or next types of cryptographic service provider supported on the computer.", "CryptExportKey": "Exports a cryptographic key or a key pair from a cryptographic service provider in a secure manner.", "CryptExportPKCS8": "Exports the private key in PKCS", "CryptExportPKCS8Ex": "Exports the private key in PKCS", "CryptExportPublicKeyInfo": "The CryptExportPublicKeyInfo function exports the public key information associated with the corresponding private key of the provider.", "CryptExportPublicKeyInfoEx": "Exports the public key information associated with the provider's corresponding private key.", "CryptExportPublicKeyInfoFromBCryptKeyHandle": "Exports the public key information associated with a provider's corresponding private key.", "CryptFindCertificateKeyProvInfo": "Enumerates the cryptographic providers and their containers to find the private key that corresponds to the certificate's public key.", "CryptFindLocalizedName": "Finds the localized name for the specified name, such as the localize name of the Root system store.", "CryptFindOIDInfo": "Retrieves the first predefined or registered CRYPT_OID_INFO structure that matches a specified key type and key.", "CryptFormatObject": "The CryptFormatObject function formats the encoded data and returns a Unicode string in the allocated buffer according to the certificate encoding type.", "CryptFreeOIDFunctionAddress": "The CryptFreeOIDFunctionAddress function releases a handle returned by CryptGetOIDFunctionAddress or CryptGetDefaultOIDFunctionAddress by decrementing the reference count on the function handle.", "CryptGenKey": "Generates a random cryptographic session key or a public/private key pair.", "CryptGenRandom": "Fills a buffer with cryptographically random bytes.", "CryptGetDefaultOIDDllList": "The CryptGetDefaultOIDDllList function acquires the list of the names of DLL files that contain registered default object identifier functions for a specified function set and encoding type.", "CryptGetDefaultOIDFunctionAddress": "The CryptGetDefaultOIDFunctionAddress function loads the DLL that contains a default function address.", "CryptGetDefaultProviderA": "Finds the default cryptographic service provider of a specified provider type for the local computer or current user.", "CryptGetDefaultProviderW": "Finds the default cryptographic service provider of a specified provider type for the local computer or current user.", "CryptGetHashParam": "Retrieves data that governs the operations of a hash object.", "CryptGetKeyIdentifierProperty": "The CryptGetKeyIdentifierProperty acquires a specific property from a specified key identifier.", "CryptGetKeyParam": "Retrieves data that governs the operations of a key.", "CryptGetMessageCertificates": "The CryptGetMessageCertificates function returns the handle of an open certificate store containing the message's certificates and CRLs.", "CryptGetMessageSignerCount": "The CryptGetMessageSignerCount function returns the number of signers of a signed message.", "CryptGetObjectUrl": "Acquires the URL of the remote object from a certificate, certificate trust list.", "CryptGetOIDFunctionAddress": "Searches the list of registered and installed functions for an encoding type and object identifier match.", "CryptGetOIDFunctionValue": "The CryptGetOIDFunctionValue function queries a value associated with an OID.", "CryptGetProvParam": "Retrieves parameters that govern the operations of a cryptographic service provider.", "CryptGetTimeValidObject": "Retrieves a CRL, an OCSP response, or CTL object that is valid within a given context and time.", "CryptGetUserKey": "Retrieves a handle of one of a user's two public/private key pairs.", "CryptHashCertificate": "The CryptHashCertificate function hashes the entire encoded content of a certificate including its signature.", "CryptHashCertificate2": "Hashes a block of data by using a CNG hash provider.", "CryptHashData": "Adds data to a specified hash object.", "CryptHashMessage": "Creates a hash of the message.", "CryptHashPublicKeyInfo": "Encodes the public key information in a CERT_PUBLIC_KEY_INFO structure and computes the hash of the encoded bytes.", "CryptHashSessionKey": "Computes the cryptographic hash of a session key object.", "CryptHashToBeSigned": "Important\u00c2\u00a0\u00c2\u00a0This API is deprecated.", "CryptImportKey": "Transfers a cryptographic key from a key BLOB into a cryptographic service provider.", "CryptImportPKCS8": "Imports the private key in PKCS", "CryptImportPublicKeyInfo": "Converts and imports the public key information into the provider and returns a handle of the public key.", "CryptImportPublicKeyInfoEx": "Important\u00c2\u00a0\u00c2\u00a0This API is deprecated.", "CryptImportPublicKeyInfoEx2": "Imports a public key into the CNG asymmetric provider that corresponds to the public key object identifier and returns a CNG handle to the key.", "CryptInitOIDFunctionSet": "The CryptInitOIDFunctionSet initializes and returns the handle of the OID function set identified by a supplied function set name.", "CryptInstallDefaultContext": "Installs a specific provider to be the default context provider for the specified algorithm.", "CryptInstallOIDFunctionAddress": "The CryptInstallOIDFunctionAddress function installs a set of callable object identifier function addresses.", "CryptMemAlloc": "The CryptMemAlloc function allocates memory for a buffer.", "CryptMemFree": "The CryptMemFree function frees memory allocated by CryptMemAlloc or CryptMemRealloc.", "CryptMemRealloc": "The CryptMemRealloc function frees the memory currently allocated for a buffer and allocates memory for a new buffer.", "CryptMsgCalculateEncodedLength": "Calculates the maximum number of bytes needed for an encoded cryptographic message given the message type, encoding parameters, and total length of the data to be encoded.", "CryptMsgClose": "The CryptMsgClose function closes a cryptographic message handle.", "CryptMsgControl": "Performs a control operation after a message has been decoded by a final call to the CryptMsgUpdate function.", "CryptMsgCountersign": "Countersigns an existing signature in a message.", "CryptMsgCountersignEncoded": "Countersigns an existing PKCS", "CryptMsgDuplicate": "The CryptMsgDuplicate function duplicates a cryptographic message handle by incrementing its reference count.", "CryptMsgEncodeAndSignCTL": "The CryptMsgEncodeAndSignCTL function encodes a CTL and creates a signed message containing the encoded CTL.This function first encodes the CTL pointed to by pCtlInfo and then calls CryptMsgSignCTL to sign the encoded message.", "CryptMsgGetAndVerifySigner": "The CryptMsgGetAndVerifySigner function verifies a cryptographic message's signature.", "CryptMsgGetParam": "Acquires a message parameter after a cryptographic message has been encoded or decoded.", "CryptMsgOpenToDecode": "Opens a cryptographic message for decoding and returns a handle of the opened message.", "CryptMsgOpenToEncode": "Opens a cryptographic message for encoding and returns a handle of the opened message.", "CryptMsgSignCTL": "The CryptMsgSignCTL function creates a signed message containing an encoded CTL.", "CryptMsgUpdate": "Adds contents to a cryptographic message.", "CryptMsgVerifyCountersignatureEncoded": "Verifies a countersignature in terms of the SignerInfo structure ( as defined by PKCS", "CryptMsgVerifyCountersignatureEncodedEx": "Verifies that the pbSignerInfoCounterSignature parameter contains the encrypted hash of the encryptedDigest field of the pbSignerInfo parameter structure.", "CryptProtectData": "Performs encryption on the data in a DATA_BLOB structure.", "CryptProtectMemory": "encrypts memory to prevent others from viewing sensitive information in your process.", "CryptQueryObject": "Retrieves information about the contents of a cryptography API object, such as a certificate, a certificate revocation list, or a certificate trust list.", "CryptRegisterDefaultOIDFunction": "The CryptRegisterDefaultOIDFunction registers a DLL containing the default function to be called for the specified encoding type and function name.", "CryptRegisterOIDFunction": "Registers a DLL that contains the function to be called for the specified encoding type, function name, and object identifier.", "CryptRegisterOIDInfo": "The CryptRegisterOIDInfo function registers the OID information specified in the CRYPT_OID_INFO structure, persisting it to the registry.", "CryptReleaseContext": "Releases the handle of a cryptographic service provider and a key container.", "CryptRetrieveObjectByUrlA": "Retrieves the public key infrastructure object from a location specified by a URL.", "CryptRetrieveObjectByUrlW": "Retrieves the public key infrastructure object from a location specified by a URL.", "CryptRetrieveTimeStamp": "Encodes a time stamp request and retrieves the time stamp token from a location specified by a URL to a Time Stamping Authority.", "CryptSetHashParam": "Customizes the operations of a hash object, including setting up initial hash contents and selecting a specific hashing algorithm.", "CryptSetKeyIdentifierProperty": "The CryptSetKeyIdentifierProperty function sets the property of a specified key identifier.", "CryptSetKeyParam": "Customizes various aspects of a session key's operations.", "CryptSetOIDFunctionValue": "The CryptSetOIDFunctionValue function sets a value for the specified encoding type, function name, OID, and value name.", "CryptSetProviderA": "Specifies the current user's default cryptographic service provider.", "CryptSetProviderExA": "Specifies the default cryptographic service provider of a specified provider type for the local computer or current user.", "CryptSetProviderExW": "Specifies the default cryptographic service provider of a specified provider type for the local computer or current user.", "CryptSetProviderW": "Specifies the current user's default cryptographic service provider.", "CryptSetProvParam": "Customizes the operations of a cryptographic service provider.", "CryptSignAndEncodeCertificate": "Encodes and signs a certificate, certificate revocation list, or certificate request.", "CryptSignAndEncryptMessage": "The CryptSignAndEncryptMessage function creates a hash of the specified content, signs the hash, encrypts the content, hashes the encrypted contents and the signed hash, and then encodes both the encrypted content and the signed hash.", "CryptSignCertificate": "The CryptSignCertificate function signs the to be signed information in the encoded signed content.", "CryptSignHashA": "Signs data.", "CryptSignHashW": "Signs data.", "CryptSignMessage": "The CryptSignMessage function creates a hash of the specified content, signs the hash, and then encodes both the original message content and the signed hash.", "CryptSignMessageWithKey": "Signs a message by using a CSP's private key specified in the parameters.", "CryptSIPAddProvider": "The CryptSIPAddProvider function registers functions that are exported by a given DLL file that implements a Subject Interface Package.", "CryptSIPCreateIndirectData": "Returns a SIP_INDIRECT_DATA structure that contains a hash of the supplied SIP_SUBJECTINFO structure, the digest algorithm, and an encoding attribute.", "CryptSIPGetCaps": "Retrieves the capabilities of a subject interface package.", "CryptSIPGetSignedDataMsg": "Retrieves an Authenticode signature from the file.", "CryptSIPLoad": "Loads the dynamic-link library and assigns appropriate library export functions to a SIP_DISPATCH_INFO structure.", "CryptSIPPutSignedDataMsg": "Stores an Authenticode signature in the target file.", "CryptSIPRemoveProvider": "Removes registry details of a Subject Interface Package DLL file added by a previous call to the CryptSIPAddProvider function.", "CryptSIPRemoveSignedDataMsg": "Removes a specified Authenticode signature.", "CryptSIPRetrieveSubjectGuid": "Retrieves a GUID based on the header information in a specified file.", "CryptSIPRetrieveSubjectGuidForCatalogFile": "Retrieves the subject GUID associated with the specified file.", "CryptSIPVerifyIndirectData": "Validates the indirect hashed data against the supplied subject.", "CryptStringToBinaryA": "Converts a formatted string into an array of bytes.", "CryptStringToBinaryW": "Converts a formatted string into an array of bytes.", "CryptUIDlgCertMgr": "Displays a dialog box that allows the user to manage certificates.", "CryptUIDlgSelectCertificateFromStore": "Displays a dialog box that allows the selection of a certificate from a specified store.", "CryptUIDlgViewCertificateA": "Presents a dialog box that displays a specified certificate.", "CryptUIDlgViewCertificateW": "Presents a dialog box that displays a specified certificate.", "CryptUIDlgViewContext": "Displays a certificate, CTL, or CRL context.", "CryptUIWizDigitalSign": "Digitally signs a document or BLOB.", "CryptUIWizExport": "Exports a certificate, a certificate trust list, or a certificate store to a file.", "CryptUIWizFreeDigitalSignContext": "Frees the CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT structure allocated by the CryptUIWizDigitalSign function.", "CryptUIWizImport": "Imports a certificate, a certificate trust list, or a certificate store to a certificate store.", "CryptUninstallDefaultContext": "Important\u00c2\u00a0\u00c2\u00a0This API is deprecated.", "CryptUnprotectData": "Decrypts and does an integrity check of the data in a DATA_BLOB structure.", "CryptUnprotectMemory": "Decrypts memory that was encrypted using the CryptProtectMemory function.", "CryptUnregisterDefaultOIDFunction": "The CryptUnregisterDefaultOIDFunction removes the registration of a DLL containing the default function to be called for the specified encoding type and function name.", "CryptUnregisterOIDFunction": "Removes the registration of a DLL that contains the function to be called for the specified encoding type, function name, and OID.", "CryptUnregisterOIDInfo": "The CryptUnregisterOIDInfo function removes the registration of a specified CRYPT_OID_INFO OID information structure.", "CryptUpdateProtectedState": "Migrates the current user's master keys after the user's security identifier has changed.", "CryptVerifyCertificateSignature": "Verifies the signature of a certificate, certificate revocation list, or certificate request by using the public key in a CERT_PUBLIC_KEY_INFO structure.", "CryptVerifyCertificateSignatureEx": "Verifies the signature of a subject certificate, certificate revocation list, certificate request, or keygen request by using the issuer's public key.", "CryptVerifyDetachedMessageHash": "The CryptVerifyDetachedMessageHash function verifies a detached hash.", "CryptVerifyDetachedMessageSignature": "The CryptVerifyDetachedMessageSignature function verifies a signed message containing a detached signature or signatures.", "CryptVerifyMessageHash": "The CryptVerifyMessageHash function verifies the hash of specified content.", "CryptVerifyMessageSignature": "Verifies a signed message's signature.", "CryptVerifyMessageSignatureWithKey": "Verifies a signed message's signature by using specified public key information.", "CryptVerifySignatureA": "Verifies the signature of a hash object.", "CryptVerifySignatureW": "Verifies the signature of a hash object.", "CryptVerifyTimeStampSignature": "Validates the time stamp signature on a specified array of bytes.", "CryptXmlAddObject": "Adds the Object element to the Signature in the Document Context opened for encoding.", "CryptXmlClose": "Closes a cryptographic XML object handle.", "CryptXmlCreateReference": "Creates a reference to an XML signature.", "CryptXmlDigestReference": "Is used by an application to digest the resolved reference.", "CryptXmlDllCloseDigest": "Frees the CRYPT_XML_DIGEST allocated by the CryptXmlDllCreateDigest function.", "CryptXmlDllCreateDigest": "Creates a digest object for the specified method.", "CryptXmlDllCreateKey": "Parses the KeyValue element and creates a Cryptography API:_Next Generation BCrypt key handle to verify a signature.", "CryptXmlDllDigestData": "Puts data into the digest.", "CryptXmlDllEncodeAlgorithm": "Encodes SignatureMethod or DigestMethod elements for agile algorithms with default parameters.", "CryptXmlDllEncodeKeyValue": "Encodes a KeyValue element.", "CryptXmlDllFinalizeDigest": "Retrieves the digest value.", "CryptXmlDllGetAlgorithmInfo": "Decodes the XML algorithm and returns information about the algorithm.", "CryptXmlDllGetInterface": "Retrieves a pointer to the cryptographic extension functions for the specified algorithm.", "CryptXmlDllSignData": "Signs data.", "CryptXmlDllVerifySignature": "Verifies a signature.", "CryptXmlEncode": "Encodes signature data by using the supplied XML writer callback function.", "CryptXmlGetAlgorithmInfo": "Decodes the CRYPT_XML_ALGORITHM structure and returns information about the algorithm.", "CryptXmlGetDocContext": "Returns the document context specified by the supplied handle.", "CryptXmlGetReference": "Returns the Reference element specified by the supplied handle.", "CryptXmlGetSignature": "Returns an XML Signature element.", "CryptXmlGetStatus": "Returns a CRYPT_XML_STATUS structure that contains status information about the object specified by the supplied handle.", "CryptXmlGetTransforms": "Returns information about the default transform chain engine.", "CryptXmlImportPublicKey": "Imports the public key specified by the supplied handle.", "CryptXmlOpenToDecode": "Opens an XML digital signature to decode and returns the handle of the document context that encapsulates a CRYPT_XML_SIGNATURE structure.", "CryptXmlOpenToEncode": "Opens an XML digital signature to encode and returns a handle of the opened Signature element.", "CryptXmlSetHMACSecret": "Sets the HMAC secret on the handle before calling the CryptXmlSign or CryptXmlVerify function.", "CryptXmlSign": "Creates a cryptographic signature of a SignedInfo element.", "CryptXmlVerifySignature": "Performs a cryptographic signature validation of a SignedInfo element.", "ComboBox_GetCueBannerText": "Use this macro or send the CB_GETCUEBANNER message explicitly.", "ComboBox_GetMinVisible": "Gets the minimum number of visible items in the drop-down list of a combo box.", "ComboBox_SetCueBannerText": "Sets the cue banner text that is displayed for the edit control of a combo box.", "ComboBox_SetMinVisible": "Sets the minimum number of visible items in the drop-down list of a combo box.", "CreateMappedBitmap": "Creates a bitmap for use in a toolbar.", "CreateStatusWindowA": "Creates a status window, which is typically used to display the status of an application.", "CreateStatusWindowW": "Creates a status window, which is typically used to display the status of an application.", "CreateToolbarEx": "Creates a toolbar window and adds the specified buttons to the toolbar.", "CreateUpDownControl": "It is a 16 bit function and can not handle 32 bit values for range and position.", "CommDlgExtendedError": "Returns a common dialog box error code.", "CanChange": "Determines whether changes can be made to this row.", "CanEdit": "Determines whether the specified range can be edited.", "CanPaste": "Determines if a data object can be pasted, using a specified format, into the current range.", "Cat2": "Concatenates two strings.", "CatTop2": "Inserts text between the top two strings in a collection.", "ChangeCase": "Changes the case of letters in this range according to the Type parameter.", "CheckDlgButton": "Changes the check state of a button control.", "CheckRadioButton": "Adds a check mark to all other radio buttons in the group.", "CheckTextLimit": "Checks whether the number of characters to be added would exceed the maximum text limit.", "ClearAllTabs": "Clears all tabs, reverting to equally spaced tabs with the default tab spacing.", "CloseThemeData": "Closes the theme data handle.", "Collapse": "Hides all child nodes, controls, or content of the element.", "ComboBox_AddItemData": "Adds item data to the list in a combo box at the specified location.", "ComboBox_AddString": "Adds a string to a list in a combo box.", "ComboBox_DeleteString": "Deletes the item at the specified location in a list in a combo box.", "ComboBox_Dir": "Adds names to the list displayed by a combo box.", "ComboBox_Enable": "Enables or disables a combo box control.", "ComboBox_FindItemData": "Finds the first item in a combo box list that has the specified item data.", "ComboBox_FindString": "Finds the first string in a combo box list that begins with the specified string.", "ComboBox_FindStringExact": "Finds the first string in a combo box list that exactly matches the specified string, except that the search is not case sensitive.", "ComboBox_GetCount": "Gets the number of items in the list box of a combo box.", "ComboBox_GetCurSel": "Gets the index of the currently selected item in a combo box.", "ComboBox_GetDroppedControlRect": "Retrieves the screen coordinates of a combo box in its dropped-down state.", "ComboBox_GetDroppedState": "Ascertains whether the drop list in a combo box control is visible.", "ComboBox_GetExtendedUI": "Ascertains whether a combo box is using the default user interface or the extended UI.", "ComboBox_GetItemData": "Gets the application-defined value associated with the specified list item in a combo box.", "ComboBox_GetItemHeight": "Retrieves the height of list items in a combo box.", "ComboBox_GetLBText": "Gets a string from a list in a combo box.", "ComboBox_GetLBTextLen": "Gets the length of a string in the list in a combo box.", "ComboBox_GetText": "Retrieves the text from a combo box control.", "ComboBox_GetTextLength": "Gets the number of characters in the text of a combo box.", "ComboBox_InsertItemData": "Inserts item data in a list in a combo box at the specified location.", "ComboBox_InsertString": "Adds a string to a list in a combo box at the specified location.", "ComboBox_LimitText": "You can use this macro or send the CB_LIMITTEXT message explicitly.", "ComboBox_ResetContent": "Removes all items from the list box and edit control of a combo box.", "ComboBox_SelectItemData": "If a matching item is found, the item is selected.", "ComboBox_SelectString": "If a matching item is found, the item is selected.", "ComboBox_SetCurSel": "Sets the currently selected item in a combo box.", "ComboBox_SetExtendedUI": "You can use this macro or send the CB_SETEXTENDEDUI message explicitly.", "ComboBox_SetItemData": "Sets the application-defined value associated with the specified list item in a combo box.", "ComboBox_SetItemHeight": "Sets the height of list items or the selection field in a combo box.", "ComboBox_SetText": "Sets the text of a combo box.", "ComboBox_ShowDropdown": "Shows or hides the list in a combo box.", "ContextSensitiveHelp": "Indicates if the application should transition into or out of context-sensitive help mode.", "ConvertObject": "Converts an object to a new type.", "Copy": "Copies the text to a data object.", "CreatePropertySheetPageA": "Creates a new page for a property sheet.", "CreatePropertySheetPageW": "Creates a new page for a property sheet.", "CreateProvider": "Creates a proxy object that provides Microsoft UI Automation support for a UI element.", "CreateSyntheticPointerDevice": "Configures the pointer injection device for the calling application, and initializes the maximum number of simultaneous pointers that the app can inject.", "CreateTextServices": "The text services object supports a variety of interfaces, including ITextServices and the Text Object Model.", "Cut": "Cuts the plain or rich text to a data object or to the Clipboard, depending on the pVar parameter.", "Check": "Checks the spelling of the supplied text and returns a collection of spelling errors.", "CompareString": "Compares two character strings, for a locale specified by identifier.", "CompareStringA": "Compares two character strings, for a locale specified by identifier.", "CompareStringEx": "Caution Using CompareStringEx incorrectly can compromise the security of your application.", "CompareStringOrdinal": "Compares two Unicode strings to test binary equivalence.", "CompareStringW": "Caution Using CompareString incorrectly can compromise the security of your application.", "ComprehensiveCheck": "Checks the spelling of the supplied text in a more thorough manner than ISpellChecker::Check, and returns a collection of spelling errors.", "ConvertDefaultLocale": "Converts a default locale value to an actual locale identifier.", "CreateIFECommonInstance": "Returns a pointer to an IFECommon interface.", "CreateIFEDictionaryInstance": "Returns a pointer to an IFEDictionary interface.", "CreateIFELanguageInstance": "Returns a pointer to an IFELanguage interface.", "CreateSpellChecker": "Creates a spell checker that supports the specified language.", "CreateSpellCheckProvider": "Creates a spell checker that supports the specified language.", "CreateUI": "Called from IImePad to get the applet's window handle, style, and size.", "CharLowerA": "Converts a character string or a single character to lowercase.", "CharLowerBuffA": "Converts uppercase characters in a buffer to lowercase characters.", "CharLowerBuffW": "Converts uppercase characters in a buffer to lowercase characters.", "CharLowerW": "Converts a character string or a single character to lowercase.", "CharNextA": "Retrieves a pointer to the next character in a string.", "CharNextExA": "Retrieves the pointer to the next character in a string.", "CharNextW": "Retrieves a pointer to the next character in a string.", "CharPrevA": "Retrieves a pointer to the preceding character in a string.", "CharPrevExA": "Retrieves the pointer to the preceding character in a string.", "CharPrevW": "Retrieves a pointer to the preceding character in a string.", "CharToOemA": "Translates a string into the OEM-defined character set.", "CharToOemBuffA": "Translates a specified number of characters in a string into the OEM-defined character set.", "CharToOemBuffW": "Translates a specified number of characters in a string into the OEM-defined character set.", "CharToOemW": "Translates a string into the OEM-defined character set.", "CharUpperA": "Converts a character string or a single character to uppercase.", "CharUpperBuffA": "Converts lowercase characters in a buffer to uppercase characters.", "CharUpperBuffW": "Converts lowercase characters in a buffer to uppercase characters.", "CharUpperW": "Converts a character string or a single character to uppercase.", "CheckMenuItem": "Sets the state of the specified menu item's check-mark attribute to either selected or clear.", "CheckMenuRadioItem": "Checks a specified menu item and makes it a radio item.", "ClipCursor": "Confines the cursor to a rectangular area on the screen.", "CopyAcceleratorTableA": "Copies the specified accelerator table.", "CopyAcceleratorTableW": "Copies the specified accelerator table.", "CopyCursor": "Copies the specified cursor.", "CopyIcon": "Copies the specified icon from another module to the current module.", "CopyImage": "Creates a new image and copies the attributes of the specified image to the new one.", "CreateAcceleratorTableA": "Creates an accelerator table.", "CreateAcceleratorTableW": "Creates an accelerator table.", "CreateCaret": "Creates a new shape for the system caret and assigns ownership of the caret to the specified window.", "CreateCursor": "Creates a cursor having the specified size, bit patterns, and hot spot.", "CreateIcon": "Creates an icon that has the specified size, colors, and bit patterns.", "CreateIconFromResource": "Creates an icon or cursor from resource bits describing the icon.", "CreateIconFromResourceEx": "Creates an icon or cursor from resource bits describing the icon.", "CreateIconIndirect": "Creates an icon or cursor from an ICONINFO structure.", "CreateMenu": "Creates a menu.", "CreatePopupMenu": "Creates a drop-down menu, submenu, or shortcut menu.", "CreateResourceIndexer": "Creates a new resource indexer for the specified paths of the root of the project files and the extension DLL.", "CreateStdAccessibleObject": "Creates an accessible object with the methods and properties of the specified type of system-provided user interface element.", "CreateStdAccessibleProxyA": "Creates an accessible object that has the properties and methods of the specified class of system-provided user interface element.", "CreateStdAccessibleProxyW": "Creates an accessible object that has the properties and methods of the specified class of system-provided user interface element.", "CacheOLEServer": "Caches a reference to an external object to avoid reloading the server on reuse.", "CallBack": "Enables the callback function for a context menu.", "CallbackSM": "Receives messages from a menu band object.", "CanCategorizeOnSCID": "Determines whether a column can be used as a category.", "CanContinue": "Determines whether the synchronization has been canceled.", "CanNavigateNow": "Deprecated.", "CanRenderComposited": "Indicates the deskband's ability to be displayed as translucent.", "CaptureThumbnail": "Retrieves a thumbnail representation of an IHTMLDocument2 document.", "CDefFolderMenu_Create2": "Creates a context menu for a selected group of file folder objects.", "CheckPolicy": "Provides a Boolean test that can be used to make decisions based on the attachment's execution policy.", "ChrCmpIA": "Performs a comparison between two characters.", "ChrCmpIW": "Performs a comparison between two characters.", "CIDLData_CreateFromIDArray": "CIDLData_CreateFromIDArray may be altered or unavailable.", "ClearClientData": "Instructs the dialog to clear all persisted state information.", "ClearClientState": "Removes any stored state that is based on the client's GUID.", "ClearUserAssociations": "Removes all per-user associations for the current user.", "CloneFrame": "Retrieves a clone of the current image or frame.", "CloseDW": "Notifies the docking window object that it is about to be removed from the frame.", "CloseFile": "Closes the file currently in use.", "CollapseAll": "Collapses all of the items in the given tree.", "ColorAdjustLuma": "Changes the luminance of a RGB value.", "ColorHLSToRGB": "Converts colors from hue-luminance-saturation to RGB format.", "ColorRGBToHLS": "Converts colors from RGB to hue-luminance-saturation format.", "ColumnClick": "Rearranges a column.", "CommandLineToArgvW": "Parses a Unicode command line string and returns an array of pointers to the command line arguments, along with a count of such arguments, in a way that is similar to the standard C run-time argv and argc values.", "CommandLinkClicked": "Enables the Logon UI and Credential UI to indicate that a link was clicked.", "CommitItem": "Confirms a specified item as a member of the handler's sync set and confirms that it should be shown in the UI.", "CommitList": "Declares that the Jump List initiated by a call to ICustomDestinationList::BeginList is complete and ready for display.", "Compare": "Retrieves a value that specifies whether this text range has the same endpoints as another text range.", "CompareCategory": "Determines the relative order of two items in their item identifier lists, and hence in the UI.", "CompareIDs": "Determines the relative order of two file objects or folders, given their item identifier lists.", "ComputeApplicationSize": "Gets the size of the Windows Store app, based on the current set of spoofed settings.", "ComputerInfoChanged": "Not supported.", "ConfirmEncryptionLoss": "Displays a message to the user confirming that loss of encryption is acceptable for this operation.", "ConfirmOverwrite": "Displays a message to the user confirming that overwriting existing items is acceptable.", "ConnectToConnectionPoint": "Establishes or terminates a connection between a client's sink and a connection point container.", "CopyCallback": "Determines whether the Shell will be allowed to move, copy, delete, or rename a folder or printer object.", "CopyDataBlock": "Retrieves a copy of a link's data block.", "CopyItem": "Declares a single item that is to be copied to a specified destination.", "CopyItems": "Declares a set of items that are to be copied to a specified destination.", "CountEntries": "Deprecated.", "CountTasks": "Counts tasks with the same owner ID in the scheduler's queue.", "CreateAppContainerProfile": "Creates a per-user, per-app profile for Windows Store apps.", "CreateBand": "Creates a specified band.", "CreateBrowserPropSheetExt": "Allows the derived class to add Folder Options property sheets to the base class.", "CreateCategory": "Creates a category object.", "CreateEnumIDListFromContents": "Creates an enumerator of ID lists from the contents of the view.", "CreateEnvironmentBlock": "Retrieves the environment variables for the specified user.", "CreateImageFromFile": "Creates an instance of the IShellImageData interface based on a given file.", "CreateImageFromStream": "Creates an instance of the IShellImageData interface based on a given file stream.", "CreateInvoker": "Retrieves an object that enables the invocation of the associated handler on the current selection.", "CreateIShellImageData": "Creates an instance of the IShellImageData interface.", "CreateItem": "Creates the specified file.", "CreateItemID": "Creates an ItemID from the supplied data.", "CreateProfile": "Creates a new user profile.", "CreateResource": "Creates a specified resource.", "CreateSession": "Notifies Sync Center that synchronization of the specified items has begun.", "CreateShare": "Shares the Users or Public folder.", "CreateViewObject": "Requests an object that can be used to obtain information from or interact with a folder object.", "CreateViewWindow": "Deprecated.", "CreateViewWindow2": "It can be either the right pane of Windows Explorer or the client window of a folder window.", "CreateViewWindow3": "The view can be either the right pane of Windows Explorer or the client window of a folder window.", "CredentialsChanged": "Signals the Logon UI or Credential UI that the enumerated list of credentials has changed.", "CallMethod": "Client wrapper implements methods by calling this CallMethod function, specifying the parameters as an array of pointers.", "CheckNotSupported": "Checks a provided VARIANT to see if it contains the Not Supported identifier.", "ClearHmenuProps": "This method wraps ClearProps, and provides a convenient entry point for callers who are annotating HMENU-based accessible elements.", "ClearHwndProps": "This method wraps SetPropValue, SetPropServer, and ClearProps, and provides a convenient entry point for callers who are annotating HWND-based accessible elements.", "ClearProps": "Servers use ClearProps to restore default values to properties of accessible elements that they had previously annotated.", "ClearTable": "Removes all entries from the proxy factory table.", "CoCreateLocally": "Clients call ICoCreateLocally::CoCreateLocally to create a helper object in the same context as the server object.", "CompareElements": "Compares two UI Automation elements to determine whether they represent the same underlying UI element.", "CompareEndpoints": "Retrieves a value that specifies whether the start or end endpoint of this text range is the same as the start or end endpoint of another text range.", "CompareRuntimeIds": "Compares two integer arrays containing run-time identifiers to determine whether their content is the same and they belong to the same UI element.", "ComposeHmenuIdentityString": "Callers use ComposeHmenuIdentityString to retrieve an identity string for an HMENU-based accessible element.", "ComposeHwndIdentityString": "Callers use ComposeHwndIdentityString to retrieve an identity string.", "ConvertReturnedElement": "Retrieves the IAccessibleEx interface of an element returned as a property value.", "ConvertValueToString": "Clients call the IAccDictionary::ConvertValueToString method to convert a value to a localized string.", "CreateAndCondition": "Creates a condition that selects elements that match both of two conditions.", "CreateAndConditionFromArray": "Creates a condition that selects elements based on multiple conditions, all of which must be true.", "CreateAndConditionFromNativeArray": "Creates a condition that selects elements from a native array, based on multiple conditions that must all be true.", "CreateCacheRequest": "Creates a cache request.", "CreateClientWrapper": "Creates an object that enables a client application to interact with a custom control pattern.", "CreateEventHandlerGroup": "Registers one or more event listeners in a single method call.", "CreateFalseCondition": "Creates a condition that is always false.", "CreateNotCondition": "Creates a condition that is the negative of a specified condition.", "CreateOrCondition": "Creates a combination of two conditions where a match exists if either of the conditions is true.", "CreateOrConditionFromArray": "Creates a combination of two or more conditions where a match exists if any of the conditions is true.", "CreateOrConditionFromNativeArray": "Creates a combination of two or more conditions where a match exists if any one of the conditions is true.", "CreatePropertyCondition": "Creates a condition that selects elements that have a property with the specified value.", "CreatePropertyConditionEx": "Creates a condition that selects elements that have a property with the specified value, using optional flags.", "CreateProxyFactoryEntry": "Creates a new instance of a proxy factory object.", "CreateTreeWalker": "Retrieves a tree walker object that can be used to traverse the Microsoft UI Automation tree.", "CreateTrueCondition": "Retrieves a predefined condition that selects all elements.", "CallNamedPipeA": "Connects to a message-type pipe, writes to and reads from the pipe, and then closes the pipe.", "ClearCommBreak": "Restores character transmission for a specified communications device and places the transmission line in a nonbreak state.", "ClearCommError": "Retrieves information about a communications error and reports the current status of a communications device.", "ClearEventLogA": "Clears the specified event log, and optionally saves the current copy of the log to a backup file.", "ClearEventLogW": "Clears the specified event log, and optionally saves the current copy of the log to a backup file.", "CloseEventLog": "Closes the specified event log.", "CommConfigDialogA": "Displays a driver-supplied configuration dialog box.", "CommConfigDialogW": "Displays a driver-supplied configuration dialog box.", "CopyContext": "Copies a source context structure onto an initialized destination context structure.", "CreateFileMappingA": "Creates or opens a named or unnamed file mapping object for a specified file.", "CreateFileMappingNumaA": "Creates or opens a named or unnamed file mapping object for a specified file and specifies the NUMA node for the physical memory.", "CreateMailslotA": "Creates a mailslot with the specified name and returns a handle that a mailslot server can use to perform operations on the mailslot.", "CreateMailslotW": "Creates a mailslot with the specified name and returns a handle that a mailslot server can use to perform operations on the mailslot.", "CreateNamedPipeA": "Creates an instance of a named pipe and returns a handle for subsequent pipe operations.", "CreatePrivateNamespaceA": "Creates a private namespace.", "CalculatePopupWindowPosition": "Calculates an appropriate pop-up window position using the specified anchor point, pop-up window size, flags, and the optional exclude rectangle.", "CallMsgFilterA": "Passes the specified message and hook code to the hook procedures associated with the WH_SYSMSGFILTER and WH_MSGFILTER hooks.", "CallMsgFilterW": "Passes the specified message and hook code to the hook procedures associated with the WH_SYSMSGFILTER and WH_MSGFILTER hooks.", "CallNextHookEx": "Passes the hook information to the next hook procedure in the current hook chain.", "CallWindowProcA": "Passes message information to the specified window procedure.", "CallWindowProcW": "Passes message information to the specified window procedure.", "CascadeWindows": "Cascades the specified child windows of the specified parent window.", "ChangeWindowMessageFilter": "Adds or removes a message from the User Interface Privilege Isolation message filter.", "ChangeWindowMessageFilterEx": "Modifies the User Interface Privilege Isolation message filter for a specified window.", "ChildWindowFromPoint": "Determines which, if any, of the child windows belonging to a parent window contains the specified point.", "ChildWindowFromPointEx": "Determines which, if any, of the child windows belonging to the specified parent window contains the specified point.", "CloseWindow": "Minimizes the specified window.", "CreateMDIWindowA": "Creates a multiple-document interface child window.", "CreateMDIWindowW": "Creates a multiple-document interface child window.", "CreateWindowA": "Creates an overlapped, pop-up, or child window.", "CreateWindowExA": "Creates an overlapped, pop-up, or child window with an extended window style; otherwise, this function is identical to the CreateWindow function.", "CreateWindowExW": "Creates an overlapped, pop-up, or child window with an extended window style; otherwise, this function is identical to the CreateWindow function.", "CreateWindowW": "Creates an overlapped, pop-up, or child window.", "C_ASSERT": "Checks assertions at compile time.", "ChangeDisplaySettingsA": "The ChangeDisplaySettings function changes the settings of the default display device to the specified graphics mode.", "ChangeDisplaySettingsExA": "The ChangeDisplaySettingsEx function changes the settings of the specified display device to the specified graphics mode.", "ChangeDisplaySettingsExW": "The ChangeDisplaySettingsEx function changes the settings of the specified display device to the specified graphics mode.", "ChangeDisplaySettingsW": "The ChangeDisplaySettings function changes the settings of the default display device to the specified graphics mode.", "ClientToScreen": "The ClientToScreen function converts the client-area coordinates of a specified point to screen coordinates.", "CloseDesktop": "Closes an open handle to a desktop object.", "CloseGestureInfoHandle": "Closes resources associated with a gesture information handle.", "CloseTouchInputHandle": "Closes a touch input handle, frees process memory associated with it, and invalidates the handle.", "CloseWindowStation": "Closes an open window station handle.", "CopyRect": "The CopyRect function copies the coordinates of one rectangle to another.", "CreateDesktopA": "Creates a new desktop, associates it with the current window station of the calling process, and assigns it to the calling thread.", "CreateDesktopExA": "Creates a new desktop with the specified heap, associates it with the current window station of the calling process, and assigns it to the calling thread.", "CreateDesktopExW": "Creates a new desktop with the specified heap, associates it with the current window station of the calling process, and assigns it to the calling thread.", "CreateDesktopW": "Creates a new desktop, associates it with the current window station of the calling process, and assigns it to the calling thread.", "CreateDialogA": "Creates a modeless dialog box from a dialog box template resource.", "CreateDialogIndirectA": "Creates a modeless dialog box from a dialog box template in memory.", "CreateDialogIndirectParamA": "Creates a modeless dialog box from a dialog box template in memory.", "CreateDialogIndirectParamW": "Creates a modeless dialog box from a dialog box template in memory.", "CreateDialogIndirectW": "Creates a modeless dialog box from a dialog box template in memory.", "CreateDialogParamA": "Creates a modeless dialog box from a dialog box template resource.", "CreateDialogParamW": "Creates a modeless dialog box from a dialog box template resource.", "CreateDialogW": "Creates a modeless dialog box from a dialog box template resource.", "CreateWindowStationA": "Creates a window station object, associates it with the calling process, and assigns it to the current session.", "CreateWindowStationW": "Creates a window station object, associates it with the calling process, and assigns it to the current session.", "CompareObjectHandles": "Compares two object handles to determine if they refer to the same underlying kernel object.", "CreateFileMapping2": "Creates or opens a named or unnamed file mapping object for a specified file.", "CreateFileMappingFromApp": "Creates or opens a named or unnamed file mapping object for a specified file from a Windows Store app.", "CreateFileMappingNumaW": "Creates or opens a named or unnamed file mapping object for a specified file and specifies the NUMA node for the physical memory.", "CreateFileMappingW": "Creates or opens a named or unnamed file mapping object for a specified file.", "CreateMemoryResourceNotification": "Creates a memory resource notification object.", "DeactivateActCtx": "The DeactivateActCtx function deactivates the activation context corresponding to the specified cookie.", "DeleteFiber": "Deletes an existing fiber.", "DeleteUmsCompletionList": "Deletes the specified user-mode scheduling completion list.", "DeleteUmsThreadContext": "Deletes the specified user-mode scheduling thread context.", "DequeueUmsCompletionListItems": "Retrieves user-mode scheduling worker threads from the specified UMS completion list.", "DestroyThreadpoolEnvironment": "Deletes the specified callback environment.", "DeleteRecord": "Deletes a record and file from the cache.", "DeleteUrl": "Deletes all cache records and the file from the cache for the given URL.", "DisableBITSUploads": "Use the DisableBITSUploads method to disable BITS upload on the virtual directory to which the ADSI object points.", "DiscoverPeers": "Generates a list of peers that can serve content.", "DeregisterManageableLogClient": "Deregisters a client with the log manager.", "DdeAbandonTransaction": "Abandons the specified asynchronous transaction and releases all resources associated with the transaction.", "DdeAccessData": "Provides access to the data in the specified Dynamic Data Exchange object.", "DdeAddData": "Adds data to the specified Dynamic Data Exchange object.", "DdeClientTransaction": "Begins a data transaction between a client and a server.", "DdeCmpStringHandles": "Compares the values of two string handles.", "DdeConnect": "Establishes a conversation with a server application that supports the specified service name and topic name pair.", "DdeConnectList": "Establishes a conversation with all server applications that support the specified service name and topic name pair.", "DdeCreateDataHandle": "Creates a Dynamic Data Exchange object and fills the object with data from the specified buffer.", "DdeCreateStringHandleA": "Creates a handle that identifies the specified string.", "DdeCreateStringHandleW": "Creates a handle that identifies the specified string.", "DdeDisconnect": "Terminates a conversation started by either the DdeConnect or DdeConnectList function and invalidates the specified conversation handle.", "DdeDisconnectList": "Destroys the specified conversation list and terminates all conversations associated with the list.", "DdeEnableCallback": "Enables or disables transactions for a specific conversation or for all conversations currently established by the calling application.", "DdeFreeDataHandle": "Frees a Dynamic Data Exchange object and deletes the data handle associated with the object.", "DdeFreeStringHandle": "Frees a string handle in the calling application.", "DdeGetData": "Copies data from the specified Dynamic Data Exchange object to the specified local buffer.", "DdeGetLastError": "Retrieves the most recent error code set by the failure of a Dynamic Data Exchange Management Library function and resets the error code to DMLERR_NO_ERROR.", "DdeImpersonateClient": "Impersonates a Dynamic Data Exchange client application in a DDE client conversation.", "DdeInitializeA": "Registers an application with the Dynamic Data Exchange Management Library function.", "DdeInitializeW": "Registers an application with the Dynamic Data Exchange Management Library function.", "DdeKeepStringHandle": "Increments the usage count associated with the specified handle.", "DdeNameService": "Registers or unregisters the service names a Dynamic Data Exchange server supports.", "DdePostAdvise": "Causes the system to send an XTYP_ADVREQ transaction to the calling callback function for each client with an active advise loop on the specified topic and item.", "DdeQueryConvInfo": "Retrieves information about a Dynamic Data Exchange transaction and about the conversation in which the transaction takes place.", "DdeQueryNextServer": "Retrieves the next conversation handle in the specified conversation list.", "DdeQueryStringA": "Copies text associated with a string handle into a buffer.", "DdeQueryStringW": "Copies text associated with a string handle into a buffer.", "DdeReconnect": "Enables a client Dynamic Data Exchange Management Library application to attempt to reestablish a conversation with a service that has terminated a conversation with the client.", "DdeSetQualityOfService": "Specifies the quality of service application desires for future DDE conversations it initiates.", "DdeSetUserHandle": "Associates an application-defined value with a conversation handle or a transaction identifier.", "DdeUnaccessData": "Unaccesses a Dynamic Data Exchange object.", "DdeUninitialize": "Frees all Dynamic Data Exchange Management Library resources associated with the calling application.", "DeleteAtom": "Decrements the reference count of a local string atom.", "DiInstallDevice": "The DiInstallDevice function installs a specified driver that is preinstalled in the driver store on a specified device that is present in the system.", "DiInstallDriverA": "The DiInstallDriver function preinstalls a driver in the driver store and then installs the driver on devices present in the system that the driver supports.", "DiInstallDriverW": "The DiInstallDriver function preinstalls a driver in the driver store and then installs the driver on devices present in the system that the driver supports.", "DiRollbackDriver": "The DiRollbackDriver function rolls back the driver that is installed on a specified device.", "DiShowUpdateDevice": "The DiShowUpdateDevice function displays the Hardware Update wizard for a specified device.", "DiUninstallDevice": "The DiUninstallDevice function uninstalls a device and removes its device node from the system.", "DiUninstallDriverA": "The DiUninstallDriver function removes a driver package from any devices it is installed on by installing those devices with another matching driver package, if available, or the null driver if no other matching driver package is available.", "DiUninstallDriverW": "The DiUninstallDriver function removes a driver package from any devices it is installed on by installing those devices with another matching driver package, if available, or the null driver if no other matching driver package is available.", "DefineDosDeviceW": "Defines, redefines, or deletes MS-DOS device names.", "DeleteFileA": "Deletes an existing file.", "DeleteFileW": "Deletes an existing file.", "DeleteVolumeMountPointW": "Deletes a drive letter or mounted folder.", "DeleteFileFromAppW": "Deletes an existing file.", "DeallocateNtmsMedia": "The DeallocateNtmsMedia function deallocates the side associated with the specified logical media.", "DecommissionNtmsMedia": "The DecommissionNtmsMedia function moves a side from the Available state to the Decommissioned state.", "DecryptFileA": "Decrypts an encrypted file or directory.", "DecryptFileW": "Decrypts an encrypted file or directory.", "DefineDosDeviceA": "Defines, redefines, or deletes MS-DOS device names.", "DeleteFile": "Deletes an existing file.", "DeleteFileTransactedA": "Deletes an existing file as a transacted operation.", "DeleteFileTransactedW": "Deletes an existing file as a transacted operation.", "DeleteLogByHandle": "Marks the specified log for deletion.", "DeleteLogFile": "Marks a log for deletion.", "DeleteLogMarshallingArea": "Deletes a marshaling area that is created by a successful call to CreateLogMarshallingArea.", "DeleteNtmsDrive": "The DeleteNtmsDrive function deletes a drive from the RSM database.", "DeleteNtmsLibrary": "The DeleteNtmsLibrary function deletes a library, and all the devices contained in the library, from the RSM database.", "DeleteNtmsMedia": "The DeleteNtmsMedia function deletes a physical piece of offline media from RSM by removing all references to the specified media from the database.", "DeleteNtmsMediaPool": "The DeleteNtmsMediaPool function deletes the specified application media pool.", "DeleteNtmsMediaType": "The DeleteNtmsMediaType function deletes the specified media type relation from the specified library, provided that the library does not contain any physical media objects of the specified media type.", "DeleteNtmsRequests": "The DeleteNtmsRequests function deletes a request or a list of requests from the RSM database.", "DeleteUser": "Removes a user entry from the volume quota information file.", "DeleteVolumeMountPointA": "Deletes a drive letter or mounted folder.", "DisableNtmsObject": "The DisableNtmsObject function disables the specified RSM object.", "DismountNtmsDrive": "The DismountNtmsDrive function queues a command to move the media in the specified drive to its storage slot.", "DismountNtmsMedia": "The DismountNtmsMedia function queues a command to move the specified media in a drive to its storage.", "DumpLogRecords": "Scans a specified log; filters log records based on record type; and places the records in an output file stream that the caller opens.", "DuplicateEncryptionInfoFile": "Copies the EFS metadata from one file or directory to another.", "Delete": "Deletes a sync item.", "DeleteMultiple": "The DeleteMultiple method deletes as many of the indicated properties as exist in this property set.", "DeletePropertyNames": "The DeletePropertyNames method deletes specified string names from the current property set.", "DestroyElement": "Removes the specified storage or stream from this storage object.", "DeleteSnapshotVhdSet": "Deletes a snapshot from a VHD Set file.", "DeleteVirtualDiskMetadata": "Deletes metadata from a virtual disk.", "DetachVirtualDisk": "Detaches a virtual hard disk by locating an appropriate virtual disk provider to accomplish the operation.", "DeleteConfig": "The IDirectInputJoyConfig8::DeleteConfig method deletes configuration information about a joystick.", "DeleteType": "The IDirectInputJoyConfig8::DeleteType method removes information about a joystick type.", "DestroyEffect": "The IDirectInputEffectDriver::DestroyEffect method removes an effect from the device.", "DeviceID": "The IDirectInputEffectDriver::DeviceID method sends the driver the identity of the device.", "DownloadEffect": "The IDirectInputEffectDriver::DownloadEffect method sends an effect to the device.", "DdqCancelDiagnosticRecordOperation": "Cancels all outstanding Diagnostic Data Query API internal query operations for this session.", "DdqCloseSession": "Closes a Diagnostic Data Query session handle.", "DdqCreateSession": "Creates a Diagnostic Data Query API session handle to be used to uniquely identify a Diagnostic Data Query session.", "DdqExtractDiagnosticReport": "Used for retrieving Windows Error Reporting reports, this API extracts cabs to destination path specified.", "DdqFreeDiagnosticRecordLocaleTags": "Frees memory allocated for tag information referenced by HDIAGNOSTIC_EVENT_TAG_DESCRIPTION handle.", "DdqFreeDiagnosticRecordPage": "Frees memory allocated for the diagnostic record page referenced by HDIAGNOSTIC_RECORD handle.", "DdqFreeDiagnosticRecordProducerCategories": "Frees memory allocated for set of categories and the text representation of the categories referenced by HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION handle.", "DdqFreeDiagnosticRecordProducers": "Frees memory allocated for the set of producers referenced by HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION handle.", "DdqFreeDiagnosticReport": "Frees memory allocated for error reports referenced by HDIAGNOSTIC_REPORT_DATA handle.", "DdqGetDiagnosticDataAccessLevelAllowed": "Returns the highest available data access level for the API caller.", "DdqGetDiagnosticRecordAtIndex": "Fetches diagnostic data record information at the specified index in the resource pointed to by the HDIAGNOSTIC_DATA_RECORD handle.", "DdqGetDiagnosticRecordBinaryDistribution": "Fetches binary name and associated estimated total upload of Diagnostic Data Events volume in bytes for top N noisiest binaries based on total estimated upload size, where N is the value passed in for topNBinaries.", "DdqGetDiagnosticRecordCategoryAtIndex": "Fetches a diagnostic record category at the specified index in the resource pointed to by the HDIAGNOSTIC_DATA_EVENT_CATEGORY_DESCRIPTION handle.", "DdqGetDiagnosticRecordCategoryCount": "Fetches the number of diagnostic record categories in the resource pointed by the HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION handle.", "DdqGetDiagnosticRecordCount": "Fetches number of elements in the resource pointed to by the HDIAGNOSTIC_DATA_RECORD handle.", "DdqGetDiagnosticRecordLocaleTagAtIndex": "Fetches tag description at the specified index in the resource pointed to by the HDIAGNOSTIC_DATA_EVENT_TAG_DESCRIPTION handle.", "DdqGetDiagnosticRecordLocaleTagCount": "Fetches the number of tags in the resource pointed to by the HDIAGNOSTIC_DATA_EVENT_TAG_DESCRIPTION handle.", "DdqGetDiagnosticRecordPage": "Fetches a page of filtered records.", "DdqGetDiagnosticRecordPayload": "Fetches the payload text for the event record specified by rowId.", "DdqGetDiagnosticRecordProducerAtIndex": "Fetches the description of a producer at the specified index in the resource pointed to by the HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION handle.", "DdqGetDiagnosticRecordProducerCategories": "Producers and categories have a hierarchical relationship --that is, categories belong to producers.", "DdqGetDiagnosticRecordProducerCount": "Fetches the number of producers in the resource pointed to by the HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION.", "DdqGetDiagnosticRecordProducers": "Fetches Diagnostic Data Producers available for a Diagnostic Data Query session.", "DdqGetDiagnosticRecordStats": "A change in the output parameters indicate a change in state of the event transcript record state.", "DdqGetDiagnosticRecordSummary": "Fetches general statistics about the diagnostic data records, filterable by producer.", "DdqGetDiagnosticRecordTagDistribution": "Fetches Diagnostic Data Events per privacy tag event distribution statistics based on the specified producer names.", "DdqGetDiagnosticReport": "Fetches error reports uploaded or enqueued for upload from this PC via HDIAGNOSTIC_REPORT_DATA handle.", "DdqGetDiagnosticReportAtIndex": "Fetches an error report and its information at the specified index in the resource pointed to by the HDIAGNOSTIC_REPORT_DATA handle.", "DdqGetDiagnosticReportCount": "Fetches the number of error reports in the resource pointed to by HDIAGNOSTIC_REPORT_DATA handle.", "DdqGetDiagnosticReportStoreReportCount": "Fetches the number of reports stored in the requested store.", "DdqGetSessionAccessLevel": "Returns the data access level of the current Diagnostic Data Query session.", "DdqGetTranscriptConfiguration": "Gets event transcript configuration, such as maximum storage size and hours of data history.", "DdqIsDiagnosticRecordSampledIn": "Fetches the sampled-in state of the device for an event.", "DdqSetTranscriptConfiguration": "Sets event transcript configuration, such as maximum storage size and hours of data history.", "Decode": "Decodes the image file, setting state.", "DecryptChallenge": "Decrypts the challenge from the Certificate Management over CMS response and creates a re-encrypted response to send to the CA.", "DecryptMessage": "Decrypts a message by using Digest.", "DeleteAce": "Deletes an access control entry.", "DeleteApplication": "Removes the IAzApplication object with the specified name from the AzAuthorizationStore object.", "DeleteApplicationGroup": "Removes the IAzApplicationGroup object with the specified name from the IAzScope object.", "DeleteAppMember": "Removes the specified IAzApplicationGroup object from the list of application groups that belong to the role.", "DeleteAppNonMember": "Removes the specified IAzApplicationGroup object from the list of application groups that are refused membership in this application group.", "DeleteCAConfiguration": "Removes a named certification authority configuration from the configuration set.", "DeleteDelegatedPolicyUser": "Removes the specified security identifier in text form from the list of principals that act as delegated policy users.", "DeleteDelegatedPolicyUserName": "Removes the specified account name from the list of principals that act as delegated policy users.", "DeleteMember": "Removes the specified security identifier in text form from the list of Windows accounts that belong to the role.", "DeleteMemberName": "Removes the specified account name from the list of accounts that belong to the role.", "DeleteNonMember": "Removes the specified security identifier in text form from the list of accounts that are refused membership in the application group.", "DeleteNonMemberName": "Removes the specified account name from the list of accounts that are refused membership in the application group.", "DeleteOperation": "Removes the IAzOperation object with the specified name from the task.", "DeletePolicyAdministrator": "The DeletePolicyAdministrator method of IAzScope removes the specified security identifier in text form from the list of principals that act as policy administrators.", "DeletePolicyAdministratorName": "The DeletePolicyAdministratorName method of IAzScope removes the specified account name from the list of principals that act as policy administrators.", "DeletePolicyReader": "The DeletePolicyReader method of IAzScope removes the specified security identifier in text form from the list of principals that act as policy readers.", "DeletePolicyReaderName": "The DeletePolicyReaderName method of IAzScope removes the specified account name from the list of principals that act as policy readers.", "DeleteProperty": "Removes a named property from a property set.", "DeletePropertyItem": "Removes the specified entity from the specified list.", "DeleteRequest": "Delete any certificates or keys created for the request.", "DeleteRole": "Removes the IAzRole object with the specified name from the IAzScope object.", "DeleteRoleAssignment": "Removes the specified IAzRoleAssignment object from this scope.", "DeleteRoleDefinition": "Removes the specified IAzRoleDefinition object from this scope.", "DeleteRow": "The DeleteRow method deletes a row or set of rows from a database table.", "DeleteScope": "Removes the IAzScope object with the specified name from the IAzApplication object.", "DeleteScope2": "Removes the specified IAzScope2 object from the IAzApplication3 object.", "DeleteSecurityContext": "Deletes the local data structures associated with the specified security context initiated by a previous call to the InitializeSecurityContext function.", "DeleteSecurityPackageA": "Deletes a security support provider from the list of providers supported by Microsoft Negotiate.", "DeleteSecurityPackageW": "Deletes a security support provider from the list of providers supported by Microsoft Negotiate.", "DeleteService": "Marks the specified service for deletion from the service control manager database.", "DeleteTask": "Removes the IAzTask object with the specified name from the task.", "DenyRequest": "Denies a specified certificate request that is pending.", "DeriveCapabilitySidsFromName": "This function constructs two arrays of SIDs out of a capability name.", "DestroyPrivateObjectSecurity": "Deletes a private object's security descriptor.", "DestroyVirtualSmartCard": "Destroys the TPM virtual smart card that has the given instance ID.", "DisassociateIdentity": "Disassociates the specified identity from a local user account.", "DisconnectIdentity": "Disconnects an online identity from the current domain user.", "DSCreateISecurityInfoObject": "Creates an instance of the ISecurityInformation interface associated with the specified directory service object.", "DSCreateISecurityInfoObjectEx": "Creates an instance of the ISecurityInformation interface associated with the specified directory service object on the specified server.", "DSCreateSecurityPage": "Creates a security property page for an Active Directory object.", "DSEditSecurity": "Displays a modal dialog box for editing security on a Directory Services object.", "DuplicateToken": "Creates a new access token that duplicates one already in existence.", "DuplicateTokenEx": "Creates a new access token that duplicates an existing token.", "DateTime_CloseMonthCal": "Closes the date and time picker control.", "DateTime_GetDateTimePickerInfo": "Gets information for a specified date and time picker control.", "DateTime_GetIdealSize": "Gets the size needed to display the control without clipping.", "DateTime_GetMonthCal": "You can use this macro or send the DTM_GETMONTHCAL message explicitly.", "DateTime_GetMonthCalColor": "You can use this macro or send the DTM_GETMCCOLOR message explicitly.", "DateTime_GetMonthCalFont": "Gets the font that the date and time picker control's child month calendar control is currently using.", "DateTime_GetMonthCalStyle": "Gets the style of a specified date and time picker control.", "DateTime_GetRange": "Gets the current minimum and maximum allowable system times for a date and time picker control.", "DateTime_GetSystemtime": "Gets the currently selected time from a date and time picker control and places it in a specified SYSTEMTIME structure.", "DateTime_SetFormat": "You can use this macro or send the DTM_SETFORMAT message explicitly.", "DateTime_SetMonthCalColor": "You can use this macro or send the DTM_SETMCCOLOR message explicitly.", "DateTime_SetMonthCalFont": "Sets the font to be used by the date and time picker control's child month calendar control.", "DateTime_SetMonthCalStyle": "Sets the style for a specified date and time picker control.", "DateTime_SetRange": "Sets the minimum and maximum allowable system times for a date and time picker control.", "DateTime_SetSystemtime": "Sets a date and time picker control to a given date and time.", "DefSubclassProc": "Calls the next handler in a window's subclass chain.", "DrawInsert": "Draws the insert icon in the parent window of the specified drag list box.", "DrawShadowText": "Draws text that has a shadow.", "DrawStatusTextA": "The DrawStatusText function draws the specified text in the style of a status window with borders.", "DrawStatusTextW": "The DrawStatusText function draws the specified text in the style of a status window with borders.", "DeleteObject": "The object is not necessarily being released when this member is called.", "DeleteRange": "Deletes the contents of a given range.", "DeleteSubrange": "Deletes a subrange from a range.", "DeleteTab": "Deletes an item from the taskbar.", "DestroyPropertySheetPage": "Destroys a property sheet page.", "DestroySyntheticPointerDevice": "Destroys the specified pointer injection device.", "DiscardImages": "Discards images from list, as specified.", "DlgDirListA": "Replaces the contents of a list box with the names of the subdirectories and files in a specified directory.", "DlgDirListComboBoxA": "Replaces the contents of a combo box with the names of the subdirectories and files in a specified directory.", "DlgDirListComboBoxW": "Replaces the contents of a combo box with the names of the subdirectories and files in a specified directory.", "DlgDirListW": "Replaces the contents of a list box with the names of the subdirectories and files in a specified directory.", "DlgDirSelectComboBoxExA": "Retrieves the current selection from a combo box filled by using the DlgDirListComboBox function.", "DlgDirSelectComboBoxExW": "Retrieves the current selection from a combo box filled by using the DlgDirListComboBox function.", "DlgDirSelectExA": "Retrieves the current selection from a single-selection list box.", "DlgDirSelectExW": "Retrieves the current selection from a single-selection list box.", "DPA_AppendPtr": "Inserts a new item at the end of a dynamic pointer array.", "DPA_Clone": "Duplicates a dynamic pointer array.", "DPA_Create": "Creates a dynamic pointer array.", "DPA_CreateEx": "Creates a dynamic pointer array using a given specified size and heap location.", "DPA_DeleteAllPtrs": "Removes all items from a dynamic pointer array and shrinks the DPA accordingly.", "DPA_DeletePtr": "Removes an item from a dynamic pointer array.", "DPA_Destroy": "Frees a Dynamic Pointer Array.", "DPA_DestroyCallback": "Calls pfnCB on each element of the dynamic pointer array, then frees the DPA.", "DPA_EnumCallback": "Iterates through the Dynamic Pointer Array and calls pfnCB on each item.", "DPA_FastDeleteLastPtr": "Deletes the last pointer from a dynamic pointer array.", "DPA_FastGetPtr": "Gets the value of the specified pointer in the dynamic pointer array.", "DPA_GetPtr": "Gets an item from a dynamic pointer array.", "DPA_GetPtrCount": "Gets the number of pointers in a dynamic pointer array.", "DPA_GetPtrIndex": "Gets the index of a matching item found in a dynamic pointer array.", "DPA_GetPtrPtr": "Gets the pointer to the internal pointer array of a dynamic pointer array.", "DPA_GetSize": "Gets the size of a dynamic pointer array.", "DPA_Grow": "Changes the number of pointers in a dynamic pointer array.", "DPA_InsertPtr": "If necessary, the DPA expands to accommodate the new item.", "DPA_LoadStream": "Loads the dynamic pointer array from a stream by calling the specified callback function to read each element.", "DPA_Merge": "Combines the contents of two dynamic pointer arrays.", "DPA_SaveStream": "Saves the dynamic pointer array to a stream by writing out a header, and then calling the specified callback function to write each element.", "DPA_Search": "Finds an item in a dynamic pointer array.", "DPA_SetPtr": "Assigns a value to an item in a dynamic pointer array.", "DPA_SetPtrCount": "Sets the number of pointers in a dynamic pointer array.", "DPA_Sort": "Sorts the items in a Dynamic Pointer Array.", "DPA_SortedInsertPtr": "Inserts a new item before or after a specified existing item.", "DragEnter": "Notifies the drag-image manager that the drop target's IDropTarget::DragEnter method has been called.", "DragLeave": "Notifies the drag-image manager that the drop target's IDropTarget::DragLeave method has been called.", "DragMove": "Moves the image that is being dragged during a drag-and-drop operation.", "DragShowNolock": "Shows or hides the image being dragged.", "Draw": "Draws a decoded image.", "DrawThemeBackground": "Draws the border and fill defined by the visual style for the specified control part.", "DrawThemeBackgroundEx": "Draws the background image defined by the visual style for the specified control part.", "DrawThemeEdge": "Draws one or more edges defined by the visual style of a rectangle.", "DrawThemeIcon": "Draws an image from an image list with the icon effect defined by the visual style.", "DrawThemeParentBackground": "Draws the part of a parent control that is covered by a partially-transparent or alpha-blended child control.", "DrawThemeParentBackgroundEx": "Sends a WM_ERASEBKGND message followed by a WM_PRINTCLIENT.", "DrawThemeText": "Draws text using the color and font defined by the visual style.", "DrawThemeTextEx": "Extends DrawThemeText by allowing additional text format options.", "DSA_AppendItem": "Appends a new item to the end of a dynamic structure array.", "DSA_Clone": "Duplicates a dynamic structure array.", "DSA_Create": "Creates a dynamic structure array.", "DSA_DeleteAllItems": "Deletes all items from a dynamic structure array.", "DSA_DeleteItem": "Deletes an item from a dynamic structure array.", "DSA_Destroy": "Frees a dynamic structure array.", "DSA_DestroyCallback": "Upon reaching the end of the array, the DSA is freed.", "DSA_EnumCallback": "Iterates through the dynamic structure array and calls pfnCB on each item.", "DSA_GetItem": "Gets an element from a dynamic structure array.", "DSA_GetItemCount": "Gets the number of items in a dynamic structure array.", "DSA_GetItemPtr": "Gets a pointer to an element from a dynamic structure array.", "DSA_GetSize": "Gets the size of the dynamic structure array.", "DSA_InsertItem": "If necessary, the DSA expands to accommodate the new item.", "DSA_SetItem": "Sets the contents of an element in a dynamic structure array.", "DSA_Sort": "Sorts the items in a dynamic structure array.", "DeleteDictionary": "Deletes a dictionary from the IME's plug-in dictionary list.", "DisplayProperty": "This method is obsolete starting with Windows\u00c2\u00a08, and is no longer supported.", "DisableThreadLibraryCalls": "Disables the DLL_THREAD_ATTACH and DLL_THREAD_DETACH notifications for the specified dynamic-link library.", "DeleteMenu": "Deletes an item from the specified menu.", "DestroyAcceleratorTable": "Destroys an accelerator table.", "DestroyCaret": "Destroys the caret's current shape, frees the caret from the window, and removes the caret from the screen.", "DestroyCursor": "Destroys a cursor and frees any memory the cursor occupied.", "DestroyIcon": "Destroys an icon and frees any memory the icon occupied.", "DestroyIndexedResults": "Frees the parameters that the IndexFilePath method returned.", "DestroyMenu": "Destroys the specified menu and frees any memory that the menu occupies.", "DestroyResourceIndexer": "Frees the computational resources associated with the specified resource indexer.", "DrawIcon": "Draws an icon or cursor into the specified device context.", "DrawIconEx": "Draws an icon or cursor into the specified device context, performing the specified raster operations, and stretching or compressing the icon or cursor as specified.", "DrawMenuBar": "Redraws the menu bar of the specified window.", "DllRegisterServer": "Instructs an in-process server to create its registry entries for all classes supported in this server module.", "DllUnregisterServer": "Instructs an in-process server to remove only those entries created through DllRegisterServer.", "DAD_AutoScroll": "Scrolls the window while an image is being dragged.", "DAD_DragEnterEx": "Locks updates to the specified window during a drag operation and displays the drag image at the specified position within the window.", "DAD_DragEnterEx2": "Locks updates to the specified window during a drag-and-drop operation and displays the drag image at the specified position within the window.", "DAD_DragLeave": "Unlocks the window locked by the DAD_DragEnterEx function.", "DAD_DragMove": "Moves the image that is being dragged during a drag-and-drop operation.", "DAD_SetDragImage": "Sets the drag image.", "DAD_ShowDragImage": "Shows or hides the image being dragged.", "DEFINE_PROPERTYKEY": "Used to pack a format identifier into a PROPERTYKEY structure that represents a property key.", "DefScreenSaverProc": "Provides default processing for any messages that a screen saver application does not process.", "DeleteAppContainerProfile": "Deletes the specified per-user, per-app profile.", "DeleteFieldComboBoxItem": "Communicates to the Logon UI or Credential UI that an item should be deleted from a combo box and that the UI should be updated.", "DeleteItem": "Declares a single item that is to be deleted.", "DeleteItems": "Declares a set of items that are to be deleted.", "DeleteList": "Deletes a custom Jump List for a specified application.", "DeleteLogError": "Called by the registered application's handler to delete a previously logged ErrorInformation, warning, or error message in the error tab on the synchronization manager status dialog box.", "DeleteProfileA": "Deletes the user profile and all user-related settings from the specified computer.", "DeleteProfileW": "Deletes the user profile and all user-related settings from the specified computer.", "DeleteShare": "Removes sharing from either the Users or Public folder.", "DeriveAppContainerSidFromAppContainerName": "Gets the SID of the specified profile.", "DeriveRestrictedAppContainerSidFromAppContainerSidAndRestrictedName": "DeriveRestrictedAppContainerSidFromAppContainerSidAndRestrictedName is reserved for future use.", "DeskBandRegistrationChanged": "Refreshes the deskband registration cache.", "Destroy": "Destroys the browser.", "DestroyBand": "Destroys a specified band.", "DestroyEnvironmentBlock": "Frees environment variables created by the CreateEnvironmentBlock function.", "DestroyViewWindow": "Destroys the view window.", "Detach": "Retrieves the bitmap contained in an ISharedBitmap object, and returns a copy if the contained bitmap resides in shared memory.", "DisableDebugging": "Disables debug mode for the processes of the specified package.", "DiscardEdit": "Discards edits made to an image.", "Disconnect": "Disconnects an IConnectableCredentialProviderCredential object.", "DisplayName": "Gets the name of the file if IShellImageData was initialized on a file path.", "DisplayParseError": "Deprecated.", "DLLGETVERSIONPROC": "Implemented by many of the Windows Shell DLLs to allow applications to obtain DLL-specific version information.", "DllInstall": "Handles installation and setup for a DLL.", "DoContextMenuPopup": "DoContextMenuPopup is no longer available for use as of Windows Server\u00c2\u00a02003.", "DoEnvironmentSubstA": "Parses an input string that contains references to one or more environment variables and replaces them with their fully expanded values.", "DoEnvironmentSubstW": "Parses an input string that contains references to one or more environment variables and replaces them with their fully expanded values.", "DoPreview": "Directs the preview handler to load data from the source specified in an earlier Initialize method call, and to begin rendering to the previewer window.", "DoRename": "Starts a rename operation on the current selection.", "DragAcceptFiles": "Registers whether a window accepts dropped files.", "DragFinish": "Releases memory that the system allocated for use in transferring file names to the application.", "DragOver": "Notifies the drag-image manager that the drop target's IDropTarget::DragOver method has been called.", "DragQueryFileA": "Retrieves the names of dropped files that result from a successful drag-and-drop operation.", "DragQueryFileW": "Retrieves the names of dropped files that result from a successful drag-and-drop operation.", "DragQueryPoint": "Retrieves the position of the mouse pointer at the time a file was dropped during a drag-and-drop operation.", "DriveType": "DriveType may be altered or unavailable.", "Drop": "Notifies the drag-image manager that the drop target's IDropTarget::Drop method has been called.", "DuplicateIcon": "Creates a duplicate of a specified icon.", "DWordPtrAdd": "Adds two values of type DWORD_PTR.", "DWordPtrMult": "Multiplies one value of type DWORD_PTR by another.", "DWordPtrSub": "Subtracts one value of type DWORD_PTR from another.", "DecomposeHmenuIdentityString": "Use this method to determine the HMENU, object ID, and child ID for the accessible element identified by the identity string.", "DecomposeHwndIdentityString": "Use this method to determine the HWND, object ID, and child ID for the accessible element identified by the identity string.", "Dispatch": "Dispatches a method or property getter to a custom control pattern provider.", "DockPattern_SetDockPosition": "Docks the UI Automation element at the requested dockPosition within a docking container.", "DoDefaultAction": "Performs the Microsoft Active Accessibility default action for the element.", "DebugBreakProcess": "Causes a breakpoint exception to occur in the specified process.", "DebugSetProcessKillOnExit": "Sets the action to be performed when the calling thread exits.", "DeregisterEventSource": "Closes the specified event log.", "DisableThreadProfiling": "Disables thread profiling.", "DnsHostnameToComputerNameA": "Converts a DNS-style host name to a NetBIOS-style computer name.", "DnsHostnameToComputerNameW": "Converts a DNS-style host name to a NetBIOS-style computer name.", "DosDateTimeToFileTime": "Converts MS-DOS date and time values to a file time.", "DeferWindowPos": "Updates the specified multiple-window \u00ef\u00bf\u00bd position structure for the specified window.", "DefFrameProcA": "Provides default processing for any window messages that the window procedure of a multiple-document interface frame window does not process.", "DefFrameProcW": "Provides default processing for any window messages that the window procedure of a multiple-document interface frame window does not process.", "DefMDIChildProcA": "Provides default processing for any window message that the window procedure of a multiple-document interface child window does not process.", "DefMDIChildProcW": "Provides default processing for any window message that the window procedure of a multiple-document interface child window does not process.", "DefWindowProcA": "Calls the default window procedure to provide default processing for any window messages that an application does not process.", "DefWindowProcW": "Calls the default window procedure to provide default processing for any window messages that an application does not process.", "DeregisterShellHookWindow": "Unregisters a specified Shell window that is registered to receive Shell hook messages.", "DestroyWindow": "Destroys the specified window.", "DispatchMessage": "Dispatches a message to a window procedure.", "DispatchMessageA": "Dispatches a message to a window procedure.", "DispatchMessageW": "Dispatches a message to a window procedure.", "DefDlgProcA": "Calls the default dialog box window procedure to provide default processing for any window messages that a dialog box with a private window class does not process.", "DefDlgProcW": "Calls the default dialog box window procedure to provide default processing for any window messages that a dialog box with a private window class does not process.", "DefRawInputProc": "Verifies that the size of the RAWINPUTHEADER structure is correct.", "DialogBoxA": "Creates a modal dialog box from a dialog box template resource.", "DialogBoxIndirectA": "Creates a modal dialog box from a dialog box template in memory.", "DialogBoxIndirectParamA": "Creates a modal dialog box from a dialog box template in memory.", "DialogBoxIndirectParamW": "Creates a modal dialog box from a dialog box template in memory.", "DialogBoxIndirectW": "Creates a modal dialog box from a dialog box template in memory.", "DialogBoxParamA": "Creates a modal dialog box from a dialog box template resource.", "DialogBoxParamW": "Creates a modal dialog box from a dialog box template resource.", "DialogBoxW": "Creates a modal dialog box from a dialog box template resource.", "DisableProcessWindowsGhosting": "Disables the window ghosting feature for the calling GUI process.", "DisplayConfigGetDeviceInfo": "The DisplayConfigGetDeviceInfo function retrieves display configuration information about the device.", "DisplayConfigSetDeviceInfo": "The DisplayConfigSetDeviceInfo function sets the properties of a target.", "DragDetect": "Captures the mouse and tracks its movement until the user releases the left button, presses the ESC key, or moves the mouse outside the drag rectangle around the specified point.", "DrawAnimatedRects": "Animates the caption of a window to indicate the opening of an icon or the minimizing or maximizing of a window.", "DrawCaption": "The DrawCaption function draws a window caption.", "DrawEdge": "The DrawEdge function draws one or more edges of rectangle.", "DrawFocusRect": "The DrawFocusRect function draws a rectangle in the style used to indicate that the rectangle has the focus.", "DrawFrameControl": "The DrawFrameControl function draws a frame control of the specified type and style.", "DrawStateA": "The DrawState function displays an image and applies a visual effect to indicate a state, such as a disabled or default state.", "DrawStateW": "The DrawState function displays an image and applies a visual effect to indicate a state, such as a disabled or default state.", "DrawText": "The DrawText function draws formatted text in the specified rectangle.", "DrawTextA": "The DrawText function draws formatted text in the specified rectangle.", "DrawTextExA": "The DrawTextEx function draws formatted text in the specified rectangle.", "DrawTextExW": "The DrawTextEx function draws formatted text in the specified rectangle.", "DrawTextW": "The DrawText function draws formatted text in the specified rectangle.", "DuplicateHandle": "Duplicates an object handle.", "DiscardVirtualMemory": "Discards the memory contents of a range of memory pages. without decommitting the memory.", "ExtractCAB": "The ExtractCAB method extracts the embedded.cab file from a module and saves it as the specified file.", "ExtractFiles": "The ExtractFiles method extracts the embedded.cab file from a module and then writes those files to the destination directory.", "ExtractFilesEx": "The ExtractFilesEx method extracts the embedded.cab file from a module and then writes those files to the destination directory.", "EnterUmsSchedulingMode": "Converts the calling thread into a user-mode scheduling scheduler thread.", "EraseTape": "Erases all or part of a tape.", "ExecuteUmsThread": "Runs the specified UMS worker thread.", "EnableBITSUploads": "Use the EnableBITSUploads method to enable BITS upload on the virtual directory to which the ADSI object points.", "EnumFiles": "Retrieves an IEnumBackgroundCopyFiles interface pointer that you use to enumerate the files in a job.", "EnumGroups": "Use the EnumGroups method to retrieve a list of groups that the current user owns.", "EnumJobs": "Use the EnumJobs method to retrieve a list of jobs in the group.", "EnumPeers": "Gets an IEnumBitsPeers interface pointer that you use to enumerate the peers that can serve content.", "EnumRecords": "Gets an IEnumBitsPeerCacheRecords interface pointer that you use to enumerate the records in the cache.", "EmptyClipboard": "Empties the clipboard and frees handles to data in the clipboard.", "EnumClipboardFormats": "Enumerates the data formats currently available on the clipboard.", "EjectDiskFromSADriveA": "The EjectDiskFromSADrive function ejects the media that is in a standalone removable drive.", "EjectDiskFromSADriveW": "The EjectDiskFromSADrive function ejects the media that is in a standalone removable drive.", "EjectNtmsCleaner": "The EjectNtmsCleaner function ejects the cleaning cartridge from the currently reserved cleaner slot.", "EjectNtmsMedia": "The EjectNtmsMedia function ejects the specified medium from the port of the current library.", "EnableNtmsObject": "The EnableNtmsObject function enables the specified object.", "EncryptFileA": "Encrypts a file or directory.", "EncryptFileW": "Encrypts a file or directory.", "EncryptionDisable": "Disables or enables encryption of the specified directory and the files in it.", "EndNtmsDeviceChangeDetection": "The EndNtmsDeviceChangeDetection function ends device change detection for any target devices specified using the SetNtmsDeviceChangeDetection function and closes the change detection handle.", "EnumerateNtmsObject": "The EnumerateNtmsObject function enumerates the RSM objects contained in the lpContainerId parameter.", "ExportNtmsDatabase": "The ExportNtmsDatabase function creates a consistent set of database files in the RSM database directory.", "EndMonitor": "The EndMonitor method ends monitoring of a compound file.", "Enum": "The Enum method creates an enumerator object designed to enumerate data of type STATPROPSTG, which contains information on the current property set.", "EnumElements": "The EnumElements method retrieves a pointer to an enumerator object that can be used to enumerate the storage and stream objects contained within this storage object.", "EnumerateVirtualDiskMetadata": "Enumerates the metadata associated with a virtual disk.", "ExpandVirtualDisk": "Increases the size of a fixed or dynamically expandable virtual hard disk.", "EnableTrace": "A trace session controller calls EnableTrace to configure how an ETW event provider logs events to a trace session.", "EnableTraceEx": "A trace session controller calls EnableTraceEx to configure how an ETW event provider logs events to a trace session.", "EnableTraceEx2": "A trace session controller calls EnableTraceEx2 to configure how an ETW event provider logs events to a trace session.", "EnumerateTraceGuids": "Retrieves information about event trace providers that are currently running on the computer.", "EnumerateTraceGuidsEx": "Retrieves information about event trace providers that are currently running on the computer.", "EnumTypes": "The IDirectInputJoyConfig8::EnumTypes method enumerates the joystick types currently supported by DirectInput.", "Escape": "The IDirectInputEffectDriver::Escape method escapes to the driver.", "EditSecurity": "Displays a property sheet that contains a basic security property page.", "EditSecurityAdvanced": "Extends the EditSecurity function to include the security page type when displaying the property sheet that contains a basic security property page.", "Encode": "Returns an ASN.1-encoded string of the string array stored in this object.", "EncryptMessage": "Encrypts a message to provide privacy by using Digest.", "Enroll": "Enrolls a certificate request and retrieves the issued certificate.", "EnumAlgs": "Retrieves the IDs of cryptographic algorithms in a given algorithm class that are supported by the current cryptographic service provider.", "EnumCertViewAttribute": "Obtains an instance of an attribute-enumeration sequence for the current row of the row-enumeration sequence.", "EnumCertViewColumn": "Obtains an instance of a column-enumeration sequence for the current row of the row-enumeration sequence.", "EnumCertViewExtension": "Obtains an instance of an extension-enumeration sequence for the current row of the row-enumeration sequence.", "enumContainers": "Retrieves the names of containers for the cryptographic service provider specified by the ProviderName property.", "enumContainersWStr": "Retrieves the names of containers for the cryptographic service provider specified by the ProviderNameWStr property.", "EnumDependentServicesA": "Retrieves the name and status of each service that depends on the specified service.", "EnumDependentServicesW": "Retrieves the name and status of each service that depends on the specified service.", "EnumerateAttributes": "Retrieves the name of the current attribute and moves the internal enumeration pointer to the next attribute.", "EnumerateAttributesClose": "Frees the resources connected with attribute enumeration.", "EnumerateAttributesSetup": "Initializes the internal enumeration pointer to the first request attribute associated with the current context.", "EnumerateExtensions": "Retrieves the object identifier of the current extension and moves the internal enumeration pointer to the next extension.", "EnumerateExtensionsClose": "Frees the resources connected with extension enumeration.", "EnumerateExtensionsSetup": "Initializes the internal enumeration pointer to the first certificate extension associated with the current context.", "EnumerateIdentities": "Gets a pointer to an IEnumUnknown interface pointer that can be used to enumerate identities across identity providers.", "EnumerateSecurityPackagesA": "Returns an array of SecPkgInfo structures that provide information about the security packages available to the client.", "EnumerateSecurityPackagesW": "Returns an array of SecPkgInfo structures that provide information about the security packages available to the client.", "enumPendingRequest": "Enumerates pending certificate requests and retrieves a specified property from each.", "enumPendingRequestWStr": "Enumerates pending certificate requests and retrieves a specified property from each.", "enumProviders": "Retrieves the names of the available cryptographic service providers specified by the ProviderType property.", "enumProvidersWStr": "The IEnroll4::enumProvidersWStr method retrieves the names of the available cryptographic service providers specified by the ProviderType property.", "EnumServicesStatusA": "Enumerates services in the specified service control manager database.", "EnumServicesStatusExA": "Enumerates services in the specified service control manager database.", "EnumServicesStatusExW": "Enumerates services in the specified service control manager database.", "EnumServicesStatusW": "Enumerates services in the specified service control manager database.", "EqualDomainSid": "Determines whether two SIDs are from the same domain.", "EqualPrefixSid": "Tests two security-identifier prefix values for equality.", "EqualSid": "Tests two security identifier values for equality.", "Export": "Copies the private key to a byte array.", "ExportPublicKey": "Exports the public key portion of the asymmetric key pair.", "ExportSecurityContext": "The ExportSecurityContext function creates a serialized representation of a security context that can later be imported into a different process by calling ImportSecurityContext.", "Edit_EnableSearchWeb": "Enables or disables the Search with Bing\u00e2\u0080 \u00a6 context menu item in edit controls.", "Edit_GetCaretIndex": "Gets the character index of the caret location for a given edit control.", "Edit_GetCueBannerText": "Gets the text that is displayed as a textual cue, or tip, in an edit control.", "Edit_GetEndOfLine": "Gets the end of line character used for the content of the edit control.", "Edit_GetExtendedStyle": "Gets the extended styles that are currently in use for a given edit control.", "Edit_GetFileLine": "Gets the text of the specified file.", "Edit_GetFileLineCount": "Gets the number of file.", "Edit_GetFileLineFromChar": "Gets the index of the file.", "Edit_GetFileLineIndex": "Gets the index of the file line of text based on the specified visible line.", "Edit_GetFileLineLength": "Gets the length of the file.", "Edit_GetHilite": "This macro is not implemented.", "Edit_GetZoom": "Gets the current zoom ratio of an edit control.", "Edit_HideBalloonTip": "Hides any balloon tip associated with an edit control.", "Edit_NoSetFocus": "Prevents a single-line edit control from receiving keyboard focus.", "Edit_SearchWeb": "Invokes the Search with Bing\u00e2\u0080 \u00a6 context menu item in edit controls.", "Edit_SetCaretIndex": "Sets the character index at which to locate the caret.", "Edit_SetCueBannerText": "Sets the text that is displayed as the textual cue, or tip, for an edit control.", "Edit_SetCueBannerTextFocused": "Sets the text that is displayed as the textual cue, or tip, for an edit control.", "Edit_SetEndOfLine": "Sets the end of line character used for the content of the edit control.", "Edit_SetExtendedStyle": "Sets extended styles for edit controls using the style mask.", "Edit_SetHilite": "This macro is not implemented.", "Edit_SetZoom": "Sets the current zoom ratio of an edit control.", "Edit_ShowBalloonTip": "Displays a balloon tip associated with an edit control.", "Edit_TakeFocus": "Forces a single-line edit control to receive keyboard focus.", "Edit_CanUndo": "Determines whether there are any actions in the undo queue of an edit or rich edit control.", "Edit_EmptyUndoBuffer": "Resets the undo flag of an edit or rich edit control.", "Edit_Enable": "Enables or disables an edit control.", "Edit_FmtLines": "Sets a flag that determines whether text retrieved from a multiline edit control includes soft line-break characters.", "Edit_GetFirstVisibleLine": "Gets the index of the uppermost visible line in a multiline edit or rich edit control.", "Edit_GetHandle": "Gets a handle to the memory currently allocated for the text of a multiline edit control.", "Edit_GetLine": "Retrieves a line of text from an edit or rich edit control.", "Edit_GetLineCount": "Gets the number of lines in the text of an edit control.", "Edit_GetModify": "Gets the state of an edit or rich edit control's modification flag.", "Edit_GetPasswordChar": "Gets the password character for an edit or rich edit control.", "Edit_GetRect": "Gets the formatting rectangle of an edit control.", "Edit_GetSel": "Gets the starting and ending character positions of the current selection in an edit or rich edit control.", "Edit_GetText": "Gets the text of an edit control.", "Edit_GetTextLength": "Gets the number of characters in the text of an edit control.", "Edit_GetWordBreakProc": "Retrieves the address of an edit or rich edit control's Wordwrap function.", "Edit_LimitText": "Limits the length of text that can be entered into an edit control.", "Edit_LineFromChar": "Gets the index of the line that contains the specified character index in a multiline edit or rich edit control.", "Edit_LineIndex": "Gets the character index of the first character of a specified line in a multiline edit or rich edit control.", "Edit_LineLength": "Retrieves the length, in characters, of a line in an edit or rich edit control.", "Edit_ReplaceSel": "Replaces the selected text in an edit control or a rich edit control with the specified text.", "Edit_Scroll": "Scrolls the text vertically in a multiline edit or rich edit control.", "Edit_ScrollCaret": "Scrolls the caret into view in an edit or rich edit control.", "Edit_SetHandle": "Sets the handle of the memory that will be used by a multiline edit control.", "Edit_SetModify": "Sets or clears the modification flag for an edit control.", "Edit_SetPasswordChar": "Sets or removes the password character for an edit or rich edit control.", "Edit_SetReadOnly": "Sets or removes the read-only style of an edit or rich edit control.", "Edit_SetRect": "Sets the formatting rectangle of an edit control.", "Edit_SetRectNoPaint": "This macro is equivalent to Edit_SetRect, except that it does not redraw the edit control window.", "Edit_SetSel": "Selects a range of characters in an edit or rich edit control.", "Edit_SetTabStops": "When text is copied to the control, any tab character in the text causes space to be generated up to the next tab stop.", "Edit_SetText": "Sets the text of an edit control.", "Edit_SetWordBreakProc": "Replaces an edit control's default Wordwrap function with an application-defined Wordwrap function.", "Edit_Undo": "Undoes the last operation in the undo queue of an edit or rich edit control.", "EDITSTREAMCALLBACK": "The EditStreamCallback function is an application defined callback function used with the EM_STREAMIN and EM_STREAMOUT messages.", "EDITWORDBREAKPROCA": "An application-defined callback function used with the EM_SETWORDBREAKPROC message.", "EDITWORDBREAKPROCEX": "The EditWordBreakProcEx function is an application defined callback function used with the EM_SETWORDBREAKPROCEX message.", "EDITWORDBREAKPROCW": "An application-defined callback function used with the EM_SETWORDBREAKPROC message.", "EnableScrollBar": "The EnableScrollBar function enables or disables one or both scroll bar arrows.", "EnableThemeDialogTexture": "Enables or disables the visual style of the background of a dialog window.", "EnableTheming": "Windows 8 and later:_This function does nothing.", "EncodeFunction": "Encodes an object, given a set of argument strings.", "EndBufferedAnimation": "Renders the first frame of a buffered animation operation and starts the animation timer.", "EndBufferedPaint": "Completes a buffered paint operation and frees the associated buffered paint handle.", "EndDrag": "Ends a drag operation.", "EndEditCollection": "Turns off edit collection.", "EndKey": "Mimics the functionality of the End key.", "EndOf": "Moves this range's ends to the end of the last overlapping Unit in the range.", "EndPanningFeedback": "Terminates any existing animation that was in process or set up by BeginPanningFeedback and UpdatePanningFeedback.", "EvaluateProximityToPolygon": "Returns the score of a polygon as the probable touch target and an adjusted touch point within the polygon.", "EvaluateProximityToRect": "Returns the score of a rectangle as the probable touch target, compared to all other rectangles that intersect the touch contact area, and an adjusted touch point within the rectangle.", "Expand": "Displays all child nodes, controls, or content of the element.", "EnumCalendarInfoA": "Enumerates calendar information for a specified locale.", "EnumCalendarInfoExA": "Enumerates calendar information for a locale specified by identifier.", "EnumCalendarInfoExEx": "Enumerates calendar information for a locale specified by name.", "EnumCalendarInfoExW": "Enumerates calendar information for a locale specified by identifier.", "EnumCalendarInfoW": "Enumerates calendar information for a specified locale.", "EnumDateFormatsA": "Enumerates the long date, short date, or year/month formats that are available for a specified locale.", "EnumDateFormatsExA": "Enumerates the long date, short date, or year/month formats that are available for a specified locale.", "EnumDateFormatsExEx": "Enumerates the long date, short date, or year/month formats that are available for a locale specified by name.", "EnumDateFormatsExW": "Enumerates the long date, short date, or year/month formats that are available for a specified locale.", "EnumDateFormatsW": "Enumerates the long date, short date, or year/month formats that are available for a specified locale.", "EnumLanguageGroupLocalesA": "Enumerates the locales in a specified language group.", "EnumLanguageGroupLocalesW": "Enumerates the locales in a specified language group.", "EnumSystemCodePagesA": "Enumerates the code pages that are either installed on or supported by an operating system.", "EnumSystemCodePagesW": "Enumerates the code pages that are either installed on or supported by an operating system.", "EnumSystemGeoID": "Enumerates the geographical location identifiers that are available on the operating system.", "EnumSystemGeoNames": "Enumerates the two-letter International Organization for Standardization codes for geographical locations that are available on the operating system.", "EnumSystemLanguageGroupsA": "Enumerates the language groups that are either installed on or supported by an operating system.", "EnumSystemLanguageGroupsW": "Enumerates the language groups that are either installed on or supported by an operating system.", "EnumSystemLocalesA": "Enumerates the locales that are either installed on or supported by an operating system.", "EnumSystemLocalesEx": "Enumerates the locales that are either installed on or supported by an operating system.", "EnumSystemLocalesW": "Enumerates the locales that are either installed on or supported by an operating system.", "EnumTimeFormatsA": "Enumerates the time formats that are available for a locale specified by identifier.", "EnumTimeFormatsEx": "Enumerates the time formats that are available for a locale specified by name.", "EnumTimeFormatsW": "Enumerates the time formats that are available for a locale specified by identifier.", "EnumUILanguagesA": "Enumerates the user interface languages that are available on the operating system and calls the callback function with every language in the list.", "EnumUILanguagesW": "Enumerates the user interface languages that are available on the operating system and calls the callback function with every language in the list.", "ExistWord": "Determines if the specified word exists in IFEDictionary.", "EnumResourceLanguagesExA": "Enumerates language-specific resources, of the specified type and name, associated with a specified binary module.", "EnumResourceLanguagesExW": "Enumerates language-specific resources, of the specified type and name, associated with a specified binary module.", "EnumResourceNamesA": "Enumerates resources of a specified type within a binary module.", "EnumResourceNamesExA": "The search can include both an LN file and its associated.mui files, or it can be limited in several ways.", "EnumResourceNamesExW": "The search can include both an LN file and its associated.mui files, or it can be limited in several ways.", "EnumResourceNamesW": "Enumerates resources of a specified type within a binary module.", "EnumResourceTypesExA": "Enumerates resource types associated with a specified binary module.", "EnumResourceTypesExW": "Enumerates resource types associated with a specified binary module.", "EnableMenuItem": "Enables, disables, or grays the specified menu item.", "EndMenu": "Ends the calling thread's active menu.", "EndUpdateResourceA": "Commits or discards changes made prior to a call to UpdateResource.", "EndUpdateResourceW": "Commits or discards changes made prior to a call to UpdateResource.", "ENUMRESNAMEPROCA": "An application-defined callback function used with the EnumResourceNames and EnumResourceNamesEx functions.", "ENUMRESNAMEPROCW": "An application-defined callback function used with the EnumResourceNames and EnumResourceNamesEx functions.", "EnumResourceLanguagesA": "Enumerates language-specific resources, of the specified type and name, associated with a binary module.", "EnumResourceLanguagesW": "Enumerates language-specific resources, of the specified type and name, associated with a binary module.", "EnumResourceTypesA": "Enumerates resource types within a binary module.", "EnumResourceTypesW": "Enumerates resource types within a binary module.", "ENUMRESTYPEPROCA": "An application-defined callback function used with the EnumResourceTypes and EnumResourceTypesEx functions.", "ENUMRESTYPEPROCW": "An application-defined callback function used with the EnumResourceTypes and EnumResourceTypesEx functions.", "Enable": "Enables or disables the sync item.", "EnableDebugging": "Enables debug mode for the processes of the specified package.", "EnableFocusTracking": "Enables a client process to opt-in to the focus tracking mechanism for Windows Store apps that controls the invoking and dismissing semantics of the touch keyboard.", "EnableHandler": "Enables or disables a handler.", "EnableItem": "Enables or disables a sync item managed by a specified handler.", "EnableModeless": "Called by the registered application before and after any dialog boxes are displayed from within the PrepareForSync and Synchronize methods.", "EnableModelessSB": "Tells Windows Explorer to enable or disable its modeless dialog boxes.", "EnableOpenDropDown": "Enables a drop-down list on the Open or Save button in the dialog.", "End": "Indicates that the action associated with this progress implementation has ended.", "EndFieldUpdates": "Finishes and commits the batch updates started by BeginFieldUpdates.", "EndOperation": "Notifies the data object that the asynchronous data extraction has ended.", "EndVisualGroup": "Stops the addition of elements to a visual group in the dialog.", "EnsureItemVisible": "Ensures that the given item is visible.", "EnterFolder": "Notifies that a folder is the destination of a file operation.", "EnumApps": "Creates an enumerator for enumerating all applications published by an application publisher for a given category.", "EnumBands": "Enumerates the bands in a band site.", "EnumCategories": "Gets the enumerator for the list of GUIDs that represent categories.", "EnumConflicts": "Enumerates conflicts scoped to the provided sync handler and sync item.", "EnumerateBackgroundTasks": "Gets the background tasks that are provided by the specified package.", "EnumItems": "Gets an enumerator of the items in the array.", "EnumObjects": "The methods supported by that interface can then be used to enumerate the folder's contents.", "EnumReady": "Notifies the implementer that the view's item enumeration has completed.", "EnumResources": "Gets a resource enumerator object.", "EnumSearches": "Requests a pointer to an interface that allows a client to enumerate the available search objects.", "EnumSubCommands": "Retrieves an enumerator for a command's subcommands.", "EnumSyncMgrItems": "Obtains the ISyncMgrEnumItems interface for the items that are handled by a registered application.", "EstablishConnection": "Called by the registered application's handler when a network connection is required.", "EvaluateNewWindow": "Accepts data about a new window that is attempting to display and determines whether that window should be allowed to open based on the user's preferences.", "Execute": "Call this method after you have called the other methods of this interface.", "ExpandEnvironmentStringsForUserA": "Expands the source string by using the environment block established for the specified user.", "ExpandEnvironmentStringsForUserW": "Expands the source string by using the environment block established for the specified user.", "Extract": "Requests an image from an object, such as an item in a Shell folder.", "ExtractAssociatedIconA": "Gets a handle to an icon stored as a resource in a file or an icon stored in a file's associated executable file.", "ExtractAssociatedIconExA": "ExtractAssociatedIconEx may be altered or unavailable.", "ExtractAssociatedIconExW": "ExtractAssociatedIconEx may be altered or unavailable.", "ExtractAssociatedIconW": "Gets a handle to an icon stored as a resource in a file or an icon stored in a file's associated executable file.", "ExtractIconA": "Gets a handle to an icon from the specified executable file, DLL, or icon file.", "ExtractIconExA": "The ExtractIconEx function creates an array of handles to large or small icons extracted from the specified executable file, DLL, or icon file.", "ExtractIconExW": "The ExtractIconEx function creates an array of handles to large or small icons extracted from the specified executable file, DLL, or icon file.", "ExtractIconW": "Gets a handle to an icon from the specified executable file, DLL, or icon file.", "ElementFromHandle": "Retrieves a UI Automation element for the specified window.", "ElementFromHandleBuildCache": "Retrieves a UI Automation element for the specified window, prefetches the requested properties and control patterns, and stores the prefetched items in the cache.", "ElementFromIAccessible": "Retrieves a UI Automation element for the specified accessible object from a Microsoft Active Accessibility server.", "ElementFromIAccessibleBuildCache": "Retrieves a UI Automation element for the specified accessible object from a Microsoft Active Accessibility server, prefetches the requested properties and control patterns, and stores the prefetched items in the cache.", "ElementFromPoint": "Retrieves the UI Automation element at the specified point on the desktop.", "ElementFromPointBuildCache": "Retrieves the UI Automation element at the specified point on the desktop, prefetches the requested properties and control patterns, and stores the prefetched items in the cache.", "ElementProviderFromPoint": "Retrieves the provider of the element that is at the specified point in this fragment.", "ExpandCollapsePattern_Collapse": "Hides all descendant nodes, controls, or content of the UI Automation element.", "ExpandCollapsePattern_Expand": "Expands a control on the screen so that it shows more information.", "ExpandToEnclosingUnit": "The range is expanded if it is smaller than the specified unit, or shortened if it is longer than the specified unit.", "EnableProcessOptionalXStateFeatures": "", "EnableThreadProfiling": "Enables thread profiling on the specified thread.", "EscapeCommFunction": "Directs the specified communications device to perform an extended function.", "EndDeferWindowPos": "Simultaneously updates the position and size of one or more windows in a single screen-refreshing cycle.", "EndTask": "Forcibly closes the specified window.", "EnumChildWindows": "Enumerates the child windows that belong to the specified parent window by passing the handle to each child window, in turn, to an application-defined callback function.", "EnumPropsA": "Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function.", "EnumPropsExA": "Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function.", "EnumPropsExW": "Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function.", "EnumPropsW": "Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function.", "EnumThreadWindows": "Enumerates all nonchild windows associated with a thread by passing the handle to each window, in turn, to an application-defined callback function.", "EnumWindows": "Enumerates all top-level windows on the screen by passing the handle to each window, in turn, to an application-defined callback function.", "EnableMouseInPointer": "Enables the mouse to act as a pointer input device and send WM_POINTER messages.", "EnableNonClientDpiScaling": "In high-DPI displays, enables automatic display scaling of the non-client area portions of the specified top-level window.", "EnableWindow": "Enables or disables mouse and keyboard input to the specified window or control.", "EndDialog": "Destroys a modal dialog box, causing the system to end any processing for the dialog box.", "EndPaint": "The EndPaint function marks the end of painting in the specified window.", "EnumDesktopsA": "Enumerates all desktops associated with the specified window station of the calling process.", "EnumDesktopsW": "Enumerates all desktops associated with the specified window station of the calling process.", "EnumDesktopWindows": "Enumerates all top-level windows associated with the specified desktop.", "EnumDisplayDevicesA": "The EnumDisplayDevices function lets you obtain information about the display devices in the current session.", "EnumDisplayDevicesW": "The EnumDisplayDevices function lets you obtain information about the display devices in the current session.", "EnumDisplayMonitors": "The EnumDisplayMonitors function enumerates display monitors counts only the display monitors.", "EnumDisplaySettingsA": "The EnumDisplaySettings function retrieves information about one of the graphics modes for a display device.", "EnumDisplaySettingsExA": "The EnumDisplaySettingsEx function retrieves information about one of the graphics modes for a display device.", "EnumDisplaySettingsExW": "The EnumDisplaySettingsEx function retrieves information about one of the graphics modes for a display device.", "EnumDisplaySettingsW": "The EnumDisplaySettings function retrieves information about one of the graphics modes for a display device.", "EnumWindowStationsA": "Enumerates all window stations in the current session.", "EnumWindowStationsW": "Enumerates all window stations in the current session.", "EqualRect": "The EqualRect function determines whether the two specified rectangles are equal by comparing the coordinates of their upper-left and lower-right corners.", "ExcludeUpdateRgn": "The ExcludeUpdateRgn function prevents drawing within invalid areas of a window by excluding an updated region in the window from a clipping region.", "ExitWindows": "Calls the ExitWindowsEx function to log off the interactive user.", "ExitWindowsEx": "Logs off the interactive user, shuts down the system, or shuts down and restarts the system.", "Finalize": "The Finalize method prevents a side-by-side assembly name from being changed.", "FindActCtxSectionGuid": "The FindActCtxSectionGuid function retrieves information on a specific GUID in the current activation context and returns a ACTCTX_SECTION_KEYED_DATA structure.", "FindActCtxSectionStringA": "The FindActCtxSectionString function retrieves information on a specific string in the current activation context and returns a ACTCTX_SECTION_KEYED_DATA structure.", "FindActCtxSectionStringW": "The FindActCtxSectionString function retrieves information on a specific string in the current activation context and returns a ACTCTX_SECTION_KEYED_DATA structure.", "FileRangesTransferred": "BITS calls your implementation of the FileRangesTransferred method when one or more file ranges have been downloaded.", "FileTransferred": "BITS calls your implementation of the FileTransferred method when BITS successfully finishes transferring a file.", "FindAtomA": "Searches the local atom table for the specified character string and retrieves the atom associated with that string.", "FindAtomW": "Searches the local atom table for the specified character string and retrieves the atom associated with that string.", "FreeDDElParam": "Frees the memory specified by the lParam parameter of a posted Dynamic Data Exchange message.", "FileTimeToLocalFileTime": "Converts a file time to a local file time.", "FindClose": "Closes a file search handle opened by the FindFirstFile, FindFirstFileEx, FindFirstFileNameW, FindFirstFileNameTransactedW, FindFirstFileTransacted, FindFirstStreamTransactedW, or FindFirstStreamW functions.", "FindCloseChangeNotification": "Stops change notification handle monitoring.", "FindFirstChangeNotificationA": "Creates a change notification handle and sets up initial change notification filter conditions.", "FindFirstChangeNotificationW": "Creates a change notification handle and sets up initial change notification filter conditions.", "FindFirstFileA": "Searches a directory for a file or subdirectory with a name that matches a specific name.", "FindFirstFileExA": "Searches a directory for a file or subdirectory with a name and attributes that match those specified.", "FindFirstFileExW": "Searches a directory for a file or subdirectory with a name and attributes that match those specified.", "FindFirstFileNameW": "Creates an enumeration of all the hard links to the specified file.", "FindFirstFileW": "Searches a directory for a file or subdirectory with a name that matches a specific name.", "FindFirstStreamW": "Enumerates the first stream with a ::$DATA stream type in the specified file or directory.", "FindFirstVolumeW": "Retrieves the name of a volume on a computer.", "FindNextChangeNotification": "Requests that the operating system signal a change notification handle the next time it detects an appropriate change.", "FindNextFileA": "Continues a file search from a previous call to the FindFirstFile, FindFirstFileEx, or FindFirstFileTransacted functions.", "FindNextFileNameW": "Continues enumerating the hard links to a file using the handle returned by a successful call to the FindFirstFileNameW function.", "FindNextFileW": "Continues a file search from a previous call to the FindFirstFile, FindFirstFileEx, or FindFirstFileTransacted functions.", "FindNextStreamW": "Continues a stream search started by a previous call to the FindFirstStreamW function.", "FindNextVolumeW": "Continues a volume search started by a call to the FindFirstVolume function.", "FindVolumeClose": "Closes the specified volume search handle.", "FlushFileBuffers": "Flushes the buffers of a specified file and causes all buffered data to be written to a file.", "FindFirstFileExFromAppW": "Searches a directory for a file or subdirectory with a name and attributes that match those specified.", "FileEncryptionStatusA": "Retrieves the encryption status of the specified file.", "FileEncryptionStatusW": "Retrieves the encryption status of the specified file.", "FindFirstFileNameTransactedW": "Creates an enumeration of all the hard links to the specified file as a transacted operation.", "FindFirstFileTransactedA": "Searches a directory for a file or subdirectory with a name that matches a specific name as a transacted operation.", "FindFirstFileTransactedW": "Searches a directory for a file or subdirectory with a name that matches a specific name as a transacted operation.", "FindFirstStreamTransactedW": "Enumerates the first stream in the specified file or directory as a transacted operation.", "FindFirstVolumeA": "Retrieves the name of a volume on a computer.", "FindFirstVolumeMountPointA": "Retrieves the name of a mounted folder on the specified volume.", "FindFirstVolumeMountPointW": "Retrieves the name of a mounted folder on the specified volume.", "FindNextVolumeA": "Continues a volume search started by a call to the FindFirstVolume function.", "FindNextVolumeMountPointA": "Continues a mounted folder search started by a call to the FindFirstVolumeMountPoint function.", "FindNextVolumeMountPointW": "Continues a mounted folder search started by a call to the FindFirstVolumeMountPoint function.", "FindUserName": "Locates a specific entry in the volume quota information.", "FindUserSid": "Locates a specific user entry in the volume quota information.", "FindVolumeMountPointClose": "Closes the specified mounted folder search handle.", "FlushLogBuffers": "Forces all records appended to this marshaling area to be flushed to disk.", "FlushLogToLsn": "Forces all records appended to this marshaling area up to the record with the specified log sequence number to be flushed to the disk.", "FlushToDisk": "Writes user object changes to disk in a single call to the underlying file system.", "FreeEncryptionCertificateHashList": "Frees a certificate hash list.", "FreeReservedLog": "Reduces the number of reserved log records in a marshaling area made by calling ReserveAndAppendLog, ReserveAndAppendLogAligned, or AllocReservedLog.", "FillAppend": "The FillAppend method writes a new block of bytes to the end of a byte array.", "FillAt": "The FillAt method writes a new block of data to a specified location in the byte array.", "Flush": "The Flush method ensures that any internal buffers maintained by the ILockBytes implementation are written out to the underlying physical storage.", "FmtIdToPropStgName": "Converts a property set format identifier to its storage or stream name.", "FreePropVariantArray": "The FreePropVariantArray function calls PropVariantClear on each of the PROPVARIANT structures in the rgvars array to make the value zero for each of the members of the array.", "FlushTraceA": "The FlushTrace function causes an event tracing session to immediately deliver buffered events for the specified session.", "FlushTraceW": "The FlushTrace function causes an event tracing session to immediately deliver buffered events for the specified session.", "FIELD_OFFSET": "The FIELD_OFFSET macro returns the byte offset of a named field in a known structure type.", "Find": "Searches for math inline functions in text as specified by a source range.", "FindByUniqueID": "Retrieves a pointer to the IPropertyStore interface instance associated with the specified identity.", "FindFirstFreeAce": "Retrieves a pointer to the first free byte in an access control list.", "FreeBuffer": "The FreeBuffer method frees memory allocated by the attachment snap-in extension.", "FreeContextBuffer": "Enables callers of security package functions to free memory buffers allocated by the security package.", "FreeCredentialsHandle": "Notifies the security system that the credentials are no longer needed.", "FreeInheritedFromArray": "Frees memory allocated by the GetInheritanceSource function.", "freeRequestInfo": "Releases session identifiers when they are no longer needed.", "freeRequestInfoBlob": "The freeRequestInfoBlob method deletes a certificate context.", "FreeSid": "Frees a security identifier previously allocated by using the AllocateAndInitializeSid function.", "FIRST_IPADDRESS": "Extracts the field 0 value from a packed IP address retrieved with the IPM_GETADDRESS message.", "FlatSB_EnableScrollBar": "If flat scroll bars are not initialized for the window, this function calls the standard EnableScrollBar function.", "FlatSB_GetScrollInfo": "Gets the information for a flat scroll bar.", "FlatSB_GetScrollPos": "If flat scroll bars are not initialized for the window, this function calls the standard GetScrollPos function.", "FlatSB_GetScrollProp": "Gets the properties for a flat scroll bar.", "FlatSB_GetScrollPropPtr": "Gets the properties for a flat scroll bar.", "FlatSB_GetScrollRange": "Gets the scroll range for a flat scroll bar.", "FlatSB_SetScrollInfo": "Sets the information for a flat scroll bar.", "FlatSB_SetScrollPos": "If flat scroll bars are not initialized for the window, this function calls the standard SetScrollPos function.", "FlatSB_SetScrollProp": "Sets the properties for a flat scroll bar.", "FlatSB_SetScrollRange": "Sets the scroll range of a flat scroll bar.", "FlatSB_ShowScrollBar": "Shows or hides a flat scroll bar.", "FORWARD_WM_NOTIFY": "Sends or posts the WM_NOTIFY message.", "FOURTH_IPADDRESS": "Extracts the field 3 value from a packed IP address retrieved with the IPM_GETADDRESS message.", "FindTextA": "Creates a system-defined modeless Find dialog box that lets the user specify a string to search for and options to use when searching for text in a document.", "FindTextW": "Creates a system-defined modeless Find dialog box that lets the user specify a string to search for and options to use when searching for text in a document.", "FindText": "Retrieves a text range subset that contains the specified text.", "FindTextEnd": "Searches up to Count characters for the string, bstr, starting from the range's End cp.", "FindTextStart": "Searches up to Count characters for the string, bstr, starting at the range's Start cp.", "ForceImagePresent": "Forces an image present, as specified.", "Freeze": "Increments the freeze count.", "FILEMUIINFO_GET_CULTURE": "Gets the locale name associated with the language name offset information in the dwLanguageNameOffset member of a FILEMUIINFO structure.", "FILEMUIINFO_GET_MAIN_TYPEID": "Gets the main module types array element associated with the type identifier size and offset in a FILEMUIINFO structure.", "FILEMUIINFO_GET_MAIN_TYPEIDS": "Gets the main module types array associated with the type identifier offset information in the dwTypeIDMainOffset member of a FILEMUIINFO structure.", "FILEMUIINFO_GET_MAIN_TYPENAMES": "Gets the main module names multistring array associated with the type name offset information in the dwTypeNameMainOffset member of a FILEMUIINFO structure.", "FILEMUIINFO_GET_MUI_TYPEID": "Gets the MUI module types array element associated with the type identifier size and offset information in a FILEMUIINFO structure.", "FILEMUIINFO_GET_MUI_TYPEIDS": "Gets the MUI module types array associated with the type identifier offset information in the dwTypeIDMUIOffset member of a FILEMUIINFO structure.", "FILEMUIINFO_GET_MUI_TYPENAMES": "Gets the MUI module names multistring array associated with the type name offset information in the dwTypeNameMUIOffset member of a FILEMUIINFO structure.", "FindNLSString": "Locates a Unicode string or its equivalent in another Unicode string for a locale specified by identifier.", "FindNLSStringEx": "Locates a Unicode string or its equivalent in another Unicode string for a locale specified by name.", "FindStringOrdinal": "Locates a Unicode string in another Unicode string for a non-linguistic comparison.", "FoldStringA": "Maps one Unicode string to another, performing the specified transformation.", "FoldStringW": "Maps one Unicode string to another, performing the specified transformation.", "FreeMUILibrary": "Releases the handle to a resource module loaded by LoadMUILibrary.", "FindResourceExW": "Determines the location of the resource with the specified type, name, and language in the specified module.", "FindResourceW": "Determines the location of a resource with the specified type and name in the specified module.", "FreeLibrary": "Frees the loaded dynamic-link library module and, if necessary, decrements its reference count.", "FreeLibraryAndExitThread": "Decrements the reference count of a loaded dynamic-link library by one, then calls ExitThread to terminate the calling thread.", "FreeResource": "Decrements the reference count of a loaded resource.", "FindResourceA": "Determines the location of a resource with the specified type and name in the specified module.", "FindResourceExA": "Determines the location of the resource with the specified type, name, and language in the specified module.", "FileFailure": "Called when there is a failure and user interaction is needed.", "FillFromObject": "Creates a results folder and fills it with items.", "Filter": "Evaluates whether a list of credential providers should be allowed to provide credential tiles.", "FilterView": "Sets the filter on the contents of the current view.", "FindCIE4ConnectionPoint": "Deprecated.", "FindConnectionPoint": "Deprecated.", "FindExecutableA": "Retrieves the name of and handle to the executable file associated with a specific document file.", "FindExecutableW": "Retrieves the name of and handle to the executable file associated with a specific document file.", "FindFolderFromIDList": "The object allows you to query certain folder properties, get the current path of the folder, redirect the folder to another location, and get the path of the folder as an ITEMIDLIST.", "FindFolderFromPath": "Gets an object that represents a known folder based on a file system path.", "FindToolbar": "Finds the specified IDockingWindow object in the toolbar frame and returns an interface pointer to it.", "FindTravelEntry": "Determines whether a specific travel entry is present in the travel log.", "FindWindowSW": "Finds a window in the Shell windows collection and returns the window's handle and IDispatch interface.", "FinishOperations": "Performs caller-implemented actions after the last operation performed by the call to IFileOperation is complete.", "FolderIdFromCsidl": "Gets the KNOWNFOLDERID that is the equivalent of a legacy CSIDL value.", "FolderIdToCsidl": "Gets the legacy CSIDL value that is the equivalent of a given KNOWNFOLDERID.", "ForwardViewMsg": "Calls the SendMessage function with a message received by the view, using the _hwndView member of the BASEBROWSERDATA structure as the SendMessage hWnd parameter.", "FoundItem": "Called when an object is found in the namespace during a namespace walk.", "FreeConfirmConflictItem": "Frees the resources that have been allocated for a CONFIRM_CONFLICT_ITEM structure.", "FreeIDListArray": "Frees the memory used by a pointer to an item identifier list list array.", "FreeIDListArrayChild": "This releases both the PITEMID_CHILDs within the array and the array itself.", "FreeIDListArrayFull": "This releases both the PIDLIST_ABSOLUTEs within the array and the array itself.", "FreeKnownFolderDefinitionFields": "Frees the allocated fields in the result from IKnownFolder::GetFolderDefinition.", "FindAll": "Returns all UI Automation elements that satisfy the specified condition.", "FindAllBuildCache": "Returns all UI Automation elements that satisfy the specified condition, prefetches the requested properties and control patterns, and stores the prefetched items in the cache.", "FindAllWithOptions": "Find all matching elements in the specified order.", "FindAllWithOptionsBuildCache": "Finds all matching elements in the specified order, but also caches their properties and patterns.", "FindAttribute": "Retrieves a text range subset that has the specified text attribute value.", "FindFirst": "Retrieves the first child or descendant element that matches the specified condition.", "FindFirstBuildCache": "Retrieves the first child or descendant element that matches the specified condition, prefetches the requested properties and control patterns, and stores the prefetched items in the cache.", "FindFirstWithOptions": "Finds the first matching element in the specified order.", "FindFirstWithOptionsBuildCache": "Finds the first matching element in the specified order, but also caches its properties and pattern.", "FindItemByProperty": "Retrieves an element within a containing element, based on a specified property value.", "FatalExit": "Transfers execution control to the debugger.", "FileTimeToDosDateTime": "Converts a file time to MS-DOS date and time values.", "FormatMessage": "Formats a message string.", "FormatMessageA": "Formats a message string.", "FormatMessageW": "Formats a message string.", "FindWindowA": "Retrieves a handle to the top-level window whose class name and window name match the specified strings.", "FindWindowExA": "Retrieves a handle to a window whose class name and window name match the specified strings.", "FindWindowExW": "Retrieves a handle to a window whose class name and window name match the specified strings.", "FindWindowW": "Retrieves a handle to the top-level window whose class name and window name match the specified strings.", "FillRect": "The FillRect function fills a rectangle by using the specified brush.", "FlashWindow": "Flashes the specified window one time.", "FlashWindowEx": "Flashes the specified window.", "FrameRect": "The FrameRect function draws a border around the specified rectangle by using the specified brush.", "FlushViewOfFile": "Writes to the disk a byte range within a mapped view of a file.", "FreeUserPhysicalPages": "Frees physical memory pages that are allocated previously by using AllocateUserPhysicalPages or AllocateUserPhysicalPagesNuma.", "get_Attributes": "The get_Attributes method retrieves the Attributes property of the ConfigurableItem object.", "get_ConfigurableItems": "The get_ConfigurableItems method retrieves the ConfigurableItems property of the Merge object.", "get_Context": "The get_Context method retrieves the Context property of the ConfigurableItem object.", "get_DatabaseKeys": "The get_DatabaseKeys method retrieves the DatabaseKeys property of the Error object.", "get_DatabaseTable": "The get_DatabaseTable method retrieves the DatabaseTable property of the Error object.", "get_DefaultValue": "The get_DefaultValue method retrieves the DefaultValue property of the ConfigurableItem object.", "get_Dependencies": "The get_Dependencies method retrieves the Dependencies property of the Merge object.", "get_Description": "Contains the description of this element.", "get_DisplayName": "Retrieves a string that contains the name of the provider, the algorithm name, and the operations that can be performed by the algorithm.", "get_Errors": "The get_Errors method retrieves the Errors property of the Merge object.", "get_Format": "The get_Format method retrieves the Format property of the ConfigurableItem object.", "get_HelpKeyword": "The get_HelpKeyword method retrieves the HelpKeyword property of the ConfigurableItem object.", "get_HelpLocation": "The get_HelpLocation method retrieves the HelpLocation property of the ConfigurableItem object.", "get_Language": "The get_Language method retrieves the Language property of the Error object.", "get_Module": "The get_Module method retrieves the Module property of the Dependency object.", "get_ModuleFiles": "The get_ModuleFiles method retrieves the ModuleFiles property of the GetFiles object.", "get_ModuleKeys": "The get_ModuleKeys method retrieves the ModuleKeys property of the Error object.", "get_ModuleTable": "The get_ModuleTable method retrieves the ModuleTable property of the Error object.", "get_Name": "Specifies the name of this element.", "get_Path": "The get_Path method retrieves the Path property of the Error object.", "get_Type": "Retrieves a value that specifies the type of the request object.", "get_Version": "Retrieves the version number of the provider.", "GetCurrentActCtx": "The GetCurrentActCtx function returns the handle to the active activation context of the calling thread.", "GetDisplayName": "Gets the display name of the IShellItem object.", "GetName": "Gets the UI display name of the sync item.", "GetProperty": "The client wrapper object implements the IUIAutomation::get_CurrentX and IUIAutomationElement::get_CachedX methods by calling this function, specifying the property by index.", "GetActiveProcessorCount": "Returns the number of active processors in a processor group or in the system.", "GetActiveProcessorGroupCount": "Returns the number of active processor groups in the system.", "GetCurrentFiber": "Retrieves the address of the current fiber.", "GetCurrentUmsThread": "Returns the user-mode scheduling thread context of the calling UMS thread.", "GetEnvironmentVariable": "Retrieves the contents of the specified variable from the environment block of the calling process.", "GetFiberData": "Retrieves the fiber data associated with the current fiber.", "GetMaximumProcessorCount": "Returns the maximum number of logical processors that a processor group or the system can have.", "GetMaximumProcessorGroupCount": "Returns the maximum number of processor groups that the system can have.", "GetNextUmsListItem": "Returns the next user-mode scheduling thread context in a list of thread contexts.", "GetNumaAvailableMemoryNode": "Retrieves the amount of memory available in the specified node.", "GetNumaAvailableMemoryNodeEx": "Retrieves the amount of memory that is available in a node specified as a USHORT value.", "GetNumaNodeNumberFromHandle": "Retrieves the NUMA node associated with the file or I/O device represented by the specified file handle.", "GetNumaNodeProcessorMask": "Retrieves the processor mask for the specified node.", "GetNumaProcessorNode": "Retrieves the node number for the specified processor.", "GetNumaProcessorNodeEx": "Retrieves the node number as a USHORT value for the specified logical processor.", "GetNumaProximityNode": "Retrieves the NUMA node number that corresponds to the specified proximity domain identifier.", "GetProcessAffinityMask": "Retrieves the process affinity mask for the specified process and the system affinity mask for the system.", "GetProcessIoCounters": "Retrieves accounting information for all I/O operations performed by the specified process.", "GetTapeParameters": "Retrieves information that describes the tape or the tape drive.", "GetTapePosition": "Retrieves the current address of the tape, in logical or absolute blocks.", "GetTapeStatus": "Determines whether the tape device is ready to process tape commands.", "GetUmsCompletionListEvent": "Retrieves a handle to the event associated with the specified user-mode scheduling completion list.", "GetUmsSystemThreadInformation": "Queries whether the specified thread is a UMS scheduler thread, a UMS worker thread, or a non-UMS thread.", "get_GroupID": "Use the get_GroupID method to retrieve the group's identifier.", "get_JobID": "Use the get_JobID method to retrieve the job's identifier.", "get_Size": "Use the get_Size method to retrieve the size of all files in the group to download.", "GetCleanupTask": "Use the GetCleanupTask method to retrieve an interface pointer to the cleanup task associated with the virtual directory.", "GetCleanupTaskName": "Use the GetCleanupTaskName method to retrieve the name of the cleanup task associated with the virtual directory.", "GetClientCertificate": "Retrieves the client certificate from the job.", "GetConfigurationFlags": "Gets the configuration flags that determine if the computer serves content to peers and can download content from peers.", "GetCount": "Provides a count of the objects in the collection.", "GetCustomHeaders": "Retrieves the custom headers set by an earlier call to IBackgroundCopyJobHttpOptions::SetCustomHeaders.", "GetDescription": "Gets the event description.", "GetError": "Retrieves the error interface after an error occurs.", "GetErrorContextDescription": "Retrieves the description of the context in which the error occurred.", "GetErrorCount": "Retrieves the number of times BITS tried to transfer the job and an error occurred.", "GetErrorDescription": "Retrieves a description for the specified error code.", "GetFile": "Use the GetFile method to retrieve the remote and local file names for the given file in the job.", "GetFileACLFlags": "Retrieves the flags that identify the owner and ACL information to maintain when transferring a file using SMB.", "GetFileCount": "Use the GetFileCount method to retrieve the number of files in the job.", "GetFileModificationTime": "Gets the date and time that the file was last modified on the server.", "GetFileRanges": "Retrieves the ranges that you want to download from the remote file.", "GetFileSize": "Retrieves the size of the specified file, in bytes.", "GetFilledFileRanges": "Returns the set of file ranges that have been downloaded.", "GetGroup": "Use the GetGroup method to retrieve a group from the download queue.", "GetHelperTokenFlags": "Returns the usage flags for a token that is associated with a BITS transfer job.", "GetHelperTokenSid": "Returns the SID of the helper token if one is set.", "GetHttpMethod": "Retrieves a wide string containing the HTTP method name for the BITS transfer.", "GetId": "Gets the ID of the selected folder.", "GetJob": "Use the GetJob method to retrieve a job from the group.", "GetLastAccessTime": "Gets the date and time that the file was last accessed.", "GetLocalName": "Retrieves the local name of the file.", "GetMaximumCacheSize": "Gets the maximum size of the cache.", "GetMaximumContentAge": "Gets the age by when files are removed from the cache.", "GetMaximumDownloadTime": "Retrieves the maximum time that BITS will spend transferring the files in the job.", "GetMinimumRetryDelay": "Retrieves the minimum length of time that the service waits after encountering a transient error condition before trying to transfer the file.", "GetNoProgressTimeout": "Retrieves the length of time that the service tries to transfer the file after a transient error condition occurs.", "GetNotifyCmdLine": "Retrieves the program to execute when the job enters the error or transferred state.", "GetNotifyFlags": "Retrieves the event notification flags for the job.", "GetNotifyInterface": "Retrieves the interface pointer to your implementation of the IBackgroundCopyCallback interface.", "GetObject": "Creates a specific type of object related to the item.", "GetOriginUrl": "Gets the origin URL of the cached file.", "GetOwner": "Retrieves the identity of the job's owner.", "GetOwnerElevationState": "Gets a value that determines if the token of the owner was elevated at the time they created or took ownership of the job.", "GetOwnerIntegrityLevel": "Gets the integrity level of the token of the owner that created or took ownership of the job.", "GetPeerCachingFlags": "Retrieves flags that determine if the files of the job can be cached and served to peers and if BITS can download content for the job from peers.", "GetPeerDownloadStats": "Specifies statistics about the amount of data downloaded from peers and origin servers.", "GetPeerName": "Gets the server principal name that uniquely identifies the peer.", "GetPriority": "Specifies the priority of an icon overlay.", "GetProgress": "Use the GetProgress method to retrieve the job's progress.", "GetProp": "Use the GetProp method to retrieve a property value from the group.", "GetProtocol": "Retrieves the protocol used to transfer the file.", "GetProxySettings": "Retrieves the proxy information that the job uses to transfer the files.", "GetRecord": "Gets a record from the cache.", "GetRemoteName": "Retrieves the remote name of the file.", "GetReplyData": "Retrieves an in-memory copy of the reply data from the server application.", "GetReplyFileName": "Retrieves the name of the file that contains the reply data from the server application.", "GetReplyProgress": "Retrieves progress information related to the transfer of the reply data from an upload-reply job.", "GetSecurityFlags": "Retrieves the flags for HTTP that determine whether the certificate revocation list is checked and certain certificate errors are ignored, and the policy to use when a server redirects the HTTP request.", "GetState": "Gets a filled SMDATA structure.", "GetStatus": "Gets the current status of the slideshow.", "GetTemporaryName": "Gets the full path of the temporary file that contains the content of the download.", "GetTimes": "Gets file times.", "GetType": "Gets the handler type for Sync Center.", "GetValidationState": "Gets the current validation state of this file.", "GetAtomNameA": "Retrieves a copy of the character string associated with the specified local atom.", "GetAtomNameW": "Retrieves a copy of the character string associated with the specified local atom.", "GetClipboardData": "Retrieves data from the clipboard in a specified format.", "GetClipboardFormatNameA": "Retrieves from the clipboard the name of the specified registered format.", "GetClipboardFormatNameW": "Retrieves from the clipboard the name of the specified registered format.", "GetClipboardOwner": "Retrieves the window handle of the current owner of the clipboard.", "GetClipboardSequenceNumber": "Retrieves the clipboard sequence number for the current window station.", "GetClipboardViewer": "Retrieves the handle to the first window in the clipboard viewer chain.", "GetOpenClipboardWindow": "Retrieves the handle to the window that currently has the clipboard open.", "GetPriorityClipboardFormat": "Retrieves the first available clipboard format in the specified list.", "GetUpdatedClipboardFormats": "Retrieves the currently supported clipboard formats.", "GlobalAddAtomA": "Adds a character string to the global atom table and returns a unique value identifying the string.", "GlobalAddAtomExA": "Adds a character string to the global atom table and returns a unique value identifying the string.", "GlobalAddAtomExW": "Adds a character string to the global atom table and returns a unique value identifying the string.", "GlobalAddAtomW": "Adds a character string to the global atom table and returns a unique value identifying the string.", "GlobalDeleteAtom": "Decrements the reference count of a global string atom.", "GlobalFindAtomA": "Searches the global atom table for the specified character string and retrieves the global atom associated with that string.", "GlobalFindAtomW": "Searches the global atom table for the specified character string and retrieves the global atom associated with that string.", "GlobalGetAtomNameA": "Retrieves a copy of the character string associated with the specified global atom.", "GlobalGetAtomNameW": "Retrieves a copy of the character string associated with the specified global atom.", "GetCompressedFileSizeA": "Retrieves the actual number of bytes of disk storage used to store a specified file.", "GetCompressedFileSizeW": "Retrieves the actual number of bytes of disk storage used to store a specified file.", "GetDiskFreeSpaceA": "Retrieves information about the specified disk, including the amount of free space on the disk.", "GetDiskFreeSpaceExA": "Retrieves information about the amount of space that is available on a disk volume, which is the total amount of space, the total amount of free space, and the total amount of free space available to the user that is associated with the calling thread.", "GetDiskFreeSpaceExW": "Retrieves information about the amount of space that is available on a disk volume, which is the total amount of space, the total amount of free space, and the total amount of free space available to the user that is associated with the calling thread.", "GetDiskFreeSpaceW": "Retrieves information about the specified disk, including the amount of free space on the disk.", "GetDriveTypeA": "Determines whether a disk drive is a removable, fixed, CD-ROM, RAM disk, or network drive.", "GetDriveTypeW": "Determines whether a disk drive is a removable, fixed, CD-ROM, RAM disk, or network drive.", "GetFileAttributesA": "Retrieves file system attributes for a specified file or directory.", "GetFileAttributesExA": "Retrieves attributes for a specified file or directory.", "GetFileAttributesExW": "Retrieves attributes for a specified file or directory.", "GetFileAttributesW": "Retrieves file system attributes for a specified file or directory.", "GetFileInformationByHandle": "Retrieves file information for the specified file.", "GetFileSizeEx": "Retrieves the size of the specified file.", "GetFileTime": "Gets the date and time value of a specified property key.", "GetFileType": "Retrieves the file type of the specified file.", "GetFinalPathNameByHandleA": "Retrieves the final path for the specified file.", "GetFinalPathNameByHandleW": "Retrieves the final path for the specified file.", "GetFullPathNameA": "Retrieves the full path and file name of the specified file.", "GetFullPathNameW": "Retrieves the full path and file name of the specified file.", "GetLogicalDrives": "Retrieves a bitmask representing the currently available disk drives.", "GetLogicalDriveStringsW": "Fills a buffer with strings that specify valid drives in the system.", "GetLongPathNameA": "Converts the specified path to its long form.", "GetLongPathNameW": "Converts the specified path to its long form.", "GetShortPathNameW": "Retrieves the short path form of the specified path.", "GetTempFileNameA": "Creates a name for a temporary file.", "GetTempFileNameW": "Creates a name for a temporary file.", "GetTempPath2A": "Retrieves the path of the directory designated for temporary files, based on the privileges of the calling process.", "GetTempPath2W": "Retrieves the path of the directory designated for temporary files, based on the privileges of the calling process.", "GetTempPathA": "Retrieves the path of the directory designated for temporary files.", "GetTempPathW": "Retrieves the path of the directory designated for temporary files.", "GetVolumeInformationA": "Retrieves information about the file system and volume associated with the specified root directory.", "GetVolumeInformationByHandleW": "Retrieves information about the file system and volume associated with the specified file.", "GetVolumeInformationW": "Retrieves information about the file system and volume associated with the specified root directory.", "GetVolumeNameForVolumeMountPointW": "Retrieves a volume GUID path for the volume that is associated with the specified volume mount point.", "GetVolumePathNamesForVolumeNameW": "Retrieves a list of drive letters and mounted folder paths for the specified volume.", "GetVolumePathNameW": "Retrieves the volume mount point where the specified path is mounted.", "GetFileAttributesExFromAppW": "Retrieves attributes for a specified file or directory.", "GetAccountStatus": "Retrieves the status of the user object's account.", "GetBinaryTypeA": "Determines whether a file is an executable file, and if so, which subsystem runs the executable file.", "GetBinaryTypeW": "Determines whether a file is an executable file, and if so, which subsystem runs the executable file.", "GetCompressedFileSizeTransactedA": "Retrieves the actual number of bytes of disk storage used to store a specified file as a transacted operation.", "GetCompressedFileSizeTransactedW": "Retrieves the actual number of bytes of disk storage used to store a specified file as a transacted operation.", "GetCurrentClockTransactionManager": "Obtains a virtual clock value from a transaction manager.", "GetCurrentDirectory": "Retrieves the current directory for the current process.", "GetDefaultQuotaLimit": "Retrieves the default quota limit for the volume.", "GetDefaultQuotaLimitText": "Retrieves the default quota limit for the volume.", "GetDefaultQuotaThreshold": "Retrieves the default quota warning threshold for the volume.", "GetDefaultQuotaThresholdText": "Retrieves the default warning threshold for the volume.", "GetEnlistmentId": "Obtains the identifier for the specified enlistment.", "GetEnlistmentRecoveryInformation": "Retrieves an opaque structure of recovery data from KTM.", "GetExpandedNameA": "Retrieves the original name of a compressed file, if the file was compressed by the Lempel-Ziv algorithm.", "GetExpandedNameW": "Retrieves the original name of a compressed file, if the file was compressed by the Lempel-Ziv algorithm.", "GetFileAttributesTransactedA": "Retrieves file system attributes for a specified file or directory as a transacted operation.", "GetFileAttributesTransactedW": "Retrieves file system attributes for a specified file or directory as a transacted operation.", "GetFileBandwidthReservation": "Retrieves the bandwidth reservation properties of the volume on which the specified file resides.", "GetFileInformationByHandleEx": "Retrieves file information for the specified file.", "GetFullPathNameTransactedA": "Retrieves the full path and file name of the specified file as a transacted operation.", "GetFullPathNameTransactedW": "Retrieves the full path and file name of the specified file as a transacted operation.", "GetID": "Retrieves a unique identifier number for the DiskQuotaUser object.", "GetIoRingInfo": "Gets information about the API version and queue sizes of an I/O ring.", "GetLogContainerName": "Retrieves the full path name of the specified container.", "GetLogFileInformation": "Returns a buffer that contains metadata about a specified log and its current state, which is defined by the CLFS_INFORMATION structure.", "GetLogicalDriveStringsA": "Fills a buffer with strings that specify valid drives in the system.", "GetLogIoStatistics": "Retrieves log I/O statistics for a dedicated or multiplexed log that is associated with the specified handle.", "GetLongPathNameTransactedA": "Converts the specified path to its long form as a transacted operation.", "GetLongPathNameTransactedW": "Converts the specified path to its long form as a transacted operation.", "GetNextLogArchiveExtent": "Retrieves the next set of archive extents in a log archive context.", "GetNotificationResourceManager": "Requests and receives a notification for a resource manager.", "GetNotificationResourceManagerAsync": "Requests and receives asynchronous notification for a resource manager.", "GetNtmsMediaPoolNameA": "The GetNtmsMediaPoolName function retrieves the specified media pool's full name hierarchy.", "GetNtmsMediaPoolNameW": "The GetNtmsMediaPoolName function retrieves the specified media pool's full name hierarchy.", "GetNtmsObjectAttributeA": "The GetNtmsObjectAttribute function retrieves the extended attribute from the specified RSM object.", "GetNtmsObjectAttributeW": "The GetNtmsObjectAttribute function retrieves the extended attribute from the specified RSM object.", "GetNtmsObjectInformation": "The GetNtmsObjectInformation function returns an object's information structure for the specified object.", "GetNtmsObjectInformationA": "The GetNtmsObjectInformation function returns an object's information structure for the specified object.", "GetNtmsObjectInformationW": "The GetNtmsObjectInformation function returns an object's information structure for the specified object.", "GetNtmsObjectSecurity": "The GetNtmsObjectSecurity function reads the security descriptor for the specified RSM object.", "GetNtmsRequestOrder": "The GetNtmsRequestOrder function gets the order that the specified request will be processed in the library queue.", "GetNtmsUIOptionsA": "The GetNtmsUIOptions function obtains the list of computer names to which the specified type of user interface is being directed for the given object.", "GetNtmsUIOptionsW": "The GetNtmsUIOptions function obtains the list of computer names to which the specified type of user interface is being directed for the given object.", "GetQueuedCompletionStatus": "Attempts to dequeue an I/O completion packet from the specified I/O completion port.", "GetQueuedCompletionStatusEx": "Retrieves multiple completion port entries simultaneously.", "GetQuotaInformation": "Retrieves the values for the user's warning threshold, hard quota limit, and quota used.", "GetQuotaLimit": "Retrieves the user's quota limit value on the volume.", "GetQuotaLimitText": "Retrieves the user's quota limit for the volume.", "GetQuotaLogFlags": "Retrieves the flags that control the logging of user-related quota events on the volume.", "GetQuotaState": "Retrieves a set of flags describing the state of the quota system.", "GetQuotaThreshold": "Retrieves the user's warning threshold value on the volume.", "GetQuotaThresholdText": "Retrieves the user's warning threshold for the volume.", "GetQuotaUsed": "Retrieves the user's quota used value on the volume.", "GetQuotaUsedText": "Retrieves the user's quota used value for the volume.", "GetShortPathNameA": "Retrieves the short path form of the specified path.", "GetSid": "Retrieves the user's security identifier.", "GetSidLength": "Retrieves the length of the user's security identifier, in bytes.", "GetTempFileName": "Creates a name for a temporary file.", "GetTransactionId": "Obtains the identifier for the specified transaction.", "GetTransactionInformation": "Returns the requested information about the specified transaction.", "GetTransactionManagerId": "Obtains an identifier for the specified transaction manager.", "GetVolumeNameForVolumeMountPointA": "Retrieves a volume GUID path for the volume that is associated with the specified volume mount point.", "GetVolumePathNameA": "Retrieves the volume mount point where the specified path is mounted.", "GetVolumePathNamesForVolumeNameA": "Retrieves a list of drive letters and mounted folder paths for the specified volume.", "GetVolumesFromDriveA": "The GetVolumesFromDrive function retrieves the volume and drive letter for a given removable storage media drive.", "GetVolumesFromDriveW": "The GetVolumesFromDrive function retrieves the volume and drive letter for a given removable storage media drive.", "GiveUserNameResolutionPriority": "Promotes the specified user object to the head of the queue so that it is next in line for resolution.", "GetConvertStg": "The GetConvertStg function returns the current value of the convert bit for the specified storage object.", "GetHGlobalFromILockBytes": "The GetHGlobalFromILockBytes function retrieves a global memory handle to a byte array object created using the CreateILockBytesOnHGlobal function.", "GetHGlobalFromStream": "The GetHGlobalFromStream function retrieves the global memory handle to a stream that was created through a call to the CreateStreamOnHGlobal function.", "GetStorageDependencyInformation": "Returns the relationships between virtual hard disks or the volumes contained within those disks and their parent disk or volume.", "GetVirtualDiskInformation": "Retrieves information about a VHD.", "GetVirtualDiskMetadata": "Retrieves the specified metadata from the virtual disk.", "GetVirtualDiskOperationProgress": "Checks the progress of an asynchronous virtual hard disk operation.", "GetVirtualDiskPhysicalPath": "Retrieves the path to the physical device object that contains a virtual hard disk.", "GetTraceEnableFlags": "A RegisterTraceGuids-based event provider uses the GetTraceEnableFlags function to retrieve the enable flags specified by the trace controller to indicate which category of events to trace.", "GetTraceEnableLevel": "A RegisterTraceGuids-based event provider uses the GetTraceEnableLevel function to retrieve the enable level specified by the trace controller to indicate which level of events to trace.", "GetTraceLoggerHandle": "A RegisterTraceGuids-based event provider uses the GetTraceLoggerHandle function to retrieve the handle of the event tracing session to which it should write events.", "GetConfig": "Retrieves the configuration string for a Certificate Services server.", "GetEffectStatus": "The IDirectInputEffectDriver::GetEffectStatus method obtains information about the status of an effect.", "GetForceFeedbackState": "The IDirectInputEffectDriver::GetForceFeedbackState method retrieves the force-feedback state for the device.", "GetTypeInfo": "The IDirectInputJoyConfig8::GetTypeInfo method obtains information about a joystick type.", "GetUserValues": "The IDirectInputJoyConfig8::GetUserValues method obtains information about user settings for the joystick.", "GetVersions": "The IDirectInputEffectDriver::GetVersions method obtains version information about the force-feedback hardware and driver.", "GenerateChallenge": "Performs the policy decision whether to issue a challenge password to the SCEP client.", "get__NewEnum": "Gets an enumerator for a property set.", "get_Algorithm": "Retrieves an object identifier for the public key algorithm.", "get_AlternateSignatureAlgorithm": "Specifies and retrieves a Boolean value that specifies whether the GetSignatureAlgorithm method should retrieve a discrete or combined algorithm object identifier for a PKCS", "get_AlternateSignatureAlgorithmSet": "Retrieves a Boolean value that specifies whether the AlternateSignatureAlgorithm property has been explicitly set by a caller.", "get_AlternativeNames": "Retrieves a collection of subject alternative names.", "get_ApplicationData": "The ApplicationData property of IAzTask sets or retrieves an opaque field that can be used by the application to store information.", "get_ApplicationGroups": "Retrieves an IAzApplicationGroups object that is used to enumerate IAzApplicationGroup objects from the policy data.", "get_Applications": "Retrieves an IAzApplications object that is used to enumerate IAzApplication objects from the policy store.", "get_ApplyStoreSacl": "Sets or retrieves a value that indicates whether policy audits should be generated when the authorization store is modified.", "get_AppMembers": "Retrieves the application groups that belong to the role.", "get_AppNonMembers": "Retrieves the application groups that are refused membership in this application group.", "get_Archived": "Retrieves a Boolean value that specifies whether the certificate has been archived.", "get_ArchivedKeyHash": "Retrieves a SHA-1 hash of the private key.", "get_ArchivePrivateKey": "Specifies or retrieves a Boolean value that indicates whether to archive a private key on the certification authority.", "get_AttestationEncryptionCertificate": "The certificate used to encrypt the EKPUB and EKCERT values from the client.", "get_AttestPrivateKey": "True if the created private key needs to be attested ; otherwise false.", "get_AuthFlags": "Specifies and retrieves a value that indicates the authentication type used by the client to authenticate itself to the certificate enrollment policy server.", "get_AuthorityKeyIdentifier": "Retrieves a byte array that contains the extension value.", "get_AuthzInterfaceClsid": "Sets or retrieves the class identifier uses to perform application-specific operations.", "get_BackedUpTime": "Retrieves the date and time at which the certificate was backed up.", "get_BackedUpValue": "Retrieves a Boolean value that identifies whether the certificate was backed up.", "get_BitCount": "Retrieves the length, in bits, of the encryption key.", "get_BizRule": "Sets or retrieves the text of the script that implements the business rule.", "get_BizRuleImportedPath": "Sets or retrieves the path to the file from which the business rule is imported.", "get_BizRuleInterfaces": "Gets the collection of IDispatch interfaces that can be called by the business rule script associated with this client context.", "get_BizRuleLanguage": "Sets or retrieves the scripting language in which the business rule is implemented.", "get_BizRuleParameters": "Gets the collection of parameters that can be passed by the business rule script associated with this client context.", "get_BizRulesEnabled": "Gets or sets a value that indicates whether business rules are enabled for this application.", "get_BizrulesWritable": "Retrieves a value that indicates whether a non-delegated scope is writable.", "get_BusinessRuleString": "Sets or retrieves an application-specific string for the Business Rule.", "get_CACertificate": "Gets an X.509 certificate that has been encoded by using Distinguished Encoding Rules.", "get_CAConfig": "Gets or sets a certification authority name with which a signing certificate must be signed.", "get_CAConfigString": "Retrieves the configuration string that identifies the certification authority to which the certificate request was submitted.", "get_CADnsName": "Retrieves the Domain Naming System.", "get_CAErrorId": "Gets the ID for additional error information related to a failed certification authority specification.", "get_CAErrorString": "Gets the string data for additional error information related to a failed certification authority specification.", "get_CAName": "Retrieves the common name.", "get_CanBeDelegated": "Retrieves a value that indicates whether the scope can be delegated.", "get_CAStoreFlags": "The CAStoreFlags property of IEnroll4 sets or retrieves a flag that controls the certification authority store when the store is opened.", "get_CAStoreName": "Sets or retrieves the name of the store where all non-ROOT and non-MY certificates are kept.", "get_CAStoreNameWStr": "The CAStoreNameWStr property of IEnroll4 sets or retrieves the name of the store where all non-ROOT and non-MY certificates are kept.", "get_CAStoreType": "Sets or retrieves the type of store to use for the store specified by the CAStoreName property.", "get_CAStoreTypeWStr": "Sets or retrieves the type of store to use for the store specified by the CAStoreNameWStr property.", "get_Certificate": "Gets the certificate for the request.", "get_CertificateDescription": "Specifies or retrieves a string that contains a description of the certificate.", "get_CertificateFriendlyName": "Gets or sets the friendly name for the certificate.", "get_ChallengePassword": "The password to use when creating a request with a challenge.", "get_ClientId": "The ClientId property sets or retrieves a client ID request attribute.", "get_ContainerName": "The ContainerName property of ICEnroll4 sets or retrieves the name of the key container to use.", "get_ContainerNamePrefix": "Specifies or retrieves a prefix added to the name of the key container.", "get_ContainerNameWStr": "Sets or retrieves the name of the key container to use.", "get_Cost": "Specifies and retrieves an arbitrary cost for contacting the certificate enrollment policy server.", "get_Count": "Retrieves the number of entries in the proxy factory table.", "get_Critical": "Specifies and retrieves a Boolean value that identifies whether the certificate extension is critical.", "get_CriticalExtensions": "Retrieves an IObjectIds collection that identifies the version 3 certificate extensions marked as critical.", "get_CryptAttributes": "Retrieves an ICryptAttributes collection of optional certificate attributes.", "get_CspAlgorithm": "Retrieves an ICspAlgorithm object that contains information about an algorithm supported by the provider.", "get_CspAlgorithms": "Retrieves a collection of ICspAlgorithm interfaces that contain information about the algorithms supported by the provider.", "get_CspInformation": "Retrieves an ICspInformation object that contains general information about the provider.", "get_CspInformations": "Specifies or retrieves a collection of ICspInformation objects that contain information about the available cryptographic providers that support the public key algorithm associated with the private key.", "get_CSPName": "Gets a cryptographic service provider name.", "get_CspStatus": "Specifies or retrieves an ICspStatus object that contains information about the cryptographic provider and algorithm pair associated with the private key.", "get_CspStatuses": "Retrieves a collection of ICspStatus objects that matches the intended use of the private key associated with the certificate request.", "get_Default": "Specifies and retrieves a Boolean value that indicates whether this is the default certificate enrollment policy server.", "get_DefaultContainer": "Retrieves a Boolean value that specifies whether the private key represents the default key container.", "get_DefaultLength": "Retrieves the default length of a key.", "get_DelegatedPolicyUsers": "Retrieves the security identifiers of principals that act as delegated policy users in text form.", "get_DelegatedPolicyUsersName": "Retrieves the account names of principals that act as delegated policy users.", "get_DeleteRequestCert": "The DeleteRequestCert property of IEnroll4 sets or retrieves a Boolean value that determines whether dummy certificates in the request store are deleted.", "get_Display": "Specifies or retrieves a value that indicates whether to display the status information in a user interface.", "get_DomainTimeout": "Sets or retrieves the time in milliseconds after which a domain is determined to be unreachable.", "get_EnableSMIMECapabilities": "Controls whether the PKCS", "get_EnableT61DNEncoding": "Sets or retrieves a Boolean value that determines whether the distinguished name in the request is encoded as a T61 string instead of as a Unicode string.", "get_EncodedKey": "Retrieves a byte array that contains the public key.", "get_EncodedName": "Retrieves a Unicode-encoded distinguished name.", "get_EncodedParameters": "Retrieves a byte array that contains the parameters associated with the public key algorithm.", "get_EncryptedKeyBlob": "Retrieves a byte array that contains the encrypted key.", "get_EncryptedKeyHash": "Retrieves a hash of the private key to be archived.", "get_EncryptedKeyHashBlob": "Retrieves a string that contains a hash of the encrypted private key.", "get_EncryptionAlgorithm": "The encryption algorithm used to encrypt the EKPUB and EKCERT values from the client.", "get_EncryptionStrength": "Identifies the bit length for the EncryptionAlgorithm to use for encryption.", "get_EnhancedKeyUsage": "Retrieves a collection of key usage object identifiers.", "get_EnrollmentContext": "Retrieves an enrollment context that identifies whether the certificate is intended for a computer or an end-user.", "get_EnrollmentStatus": "Retrieves an IX509EnrollmentStatus object that contains information about the certificate enrollment.", "get_Error": "Specifies and retrieves a value that identifies the error status of the certificate enrollment process.", "get_ErrorCode": "Gets a code that identifies an error condition in a CA configuration.", "get_ErrorString": "Retrieves a string that contains additional information about Certificate Enrollment Web Service setup failure.", "get_ErrorText": "Retrieves a string that contains the message associated with the error result code returned by the Error property.", "get_Existing": "Gets or sets a value that indicates whether the private key already exists.", "get_ExistingCACertificate": "Gets or sets the binary value that has been encoded by using Distinguished Encoding Rules certificate that corresponds to an existing key.", "get_ExportPolicy": "Specifies or retrieves export constraints for a private key.", "get_FailInfo": "Gets information when the ProcessResponseMessage method detects a failed environment.", "get_Flags": "Specifies or retrieves a value that indicates whether the certificate enrollment policy server policy information can be loaded from group policy, from the registry, or both.", "get_FriendlyName": "Specifies or retrieves a display name for the private key.", "get_GenerateAudits": "Sets or retrieves a value that indicates whether run-time audits should be generated.", "get_GenKeyFlags": "Sets or retrieves the values passed to CryptGenKey when the certificate request is generated.", "get_HashAlgID": "The HashAlgID property of IEnroll4 sets or retrieves the hash algorithm used when signing a PKCS", "get_HashAlgorithm": "Gets or sets an identifier for the hash algorithm used to sign a certificate.", "get_HashAlgorithmWStr": "Sets or retrieves only the signature hashing algorithm used to sign the PKCS", "get_HasHardwareRandomNumberGenerator": "Retrieves a Boolean value that specifies whether the provider supports a hardware random number generator that can be used to create random bytes for cryptographic operations.", "get_Identifier": "Gets a name for the certification authority configuration.", "get_IncludeSubjectKeyID": "The IncludeSubjectKeyID property of IEnroll4 determines whether the subject key ID extension is added to the certificate request that is generated.", "get_IncrementLength": "Retrieves a value, in bits, that can be used to determine valid incremental key lengths for algorithms that support multiple key sizes.", "get_IndexByObjectId": "Retrieves the index of an extension in the collection by object identifier.", "get_IsCA": "Retrieves a Boolean value that identifies whether the subject of the certificate is a certification authority.", "get_IsHardwareDevice": "Retrieves a Boolean value that determines whether the provider is implemented in a hardware device.", "get_IsRemovable": "Retrieves a Boolean value that specifies whether the token that contains the key can be removed.", "get_IsRoleDefinition": "Sets or retrieves a value that indicates whether the task is a role definition.", "get_IsSmartCard": "Retrieves a Boolean value that specifies whether the provider is a smart card provider.", "get_IsSoftwareDevice": "Retrieves a Boolean value that specifies whether the provider is implemented in software.", "get_Issuer": "Specifies or retrieves the name of the certificate issuer.", "get_Item": "Gets the property identified by index in a property set.", "get_ItemByName": "Gets the property identified by name in a property set.", "get_ItemByOid": "Retrieves an IX509CertificateTemplate object from the collection by object identifier.", "get_ItemByOperations": "Retrieves an ICspStatus object that has the same name as the provider specified on input and the same algorithm but identifies a different cryptographic operation.", "get_ItemByOrdinal": "Retrieves an ICspStatus object from the collection by ordinal number.", "get_ItemByProvider": "Retrieves an ICspStatus object that has the same name as the provider specified on input but identifies an algorithm that supports a different intended key use.", "get_KeyArchivalCertificate": "Specifies or retrieves a certification authority encryption certificate.", "get_KeyContainerNamePrefix": "Specifies or retrieves a prefix used to create the container name for a new private key.", "get_KeyProtection": "Specifies or retrieves a value that indicates how a private key is protected before use.", "get_KeySpec": "Gets a value that indicates whether the key bound to the configuration is used for encryption or for signing content.", "get_KeyUsage": "Specifies or retrieves a value that identifies the specific purpose for which a private key can be used.", "get_LdapQuery": "Sets or retrieves the Lightweight Directory Access Protocol query used to define membership for an LDAP query application group.", "get_LDAPQueryDN": "Retrieves or sets the domain name of the directory object to be used during evaluation of LDAP query groups.", "get_LegacyCsp": "Specifies or retrieves a Boolean value that indicates whether the provider is a CryptoAPI.", "get_Length": "Retrieves the number of text ranges in the collection.", "get_LimitExchangeKeyToEncipherment": "The LimitExchangeKeyToEncipherment property of IEnroll4 sets or retrieves a Boolean value that determines whether an AT_KEYEXCHANGE request contains digital signature and nonrepudiation key usages.", "get_LocalRevocationInformation": "Gets or sets the certificate revocation list of the local machine.", "get_LongName": "Retrieves the full name of the algorithm.", "get_MachineContext": "Specifies or retrieves a Boolean value that identifies the local certificate store context.", "get_MachineDnsName": "Retrieves the Domain Name System name of the computer that generated the request.", "get_MajorVersion": "Retrieves the minimum major version number of the certificate template.", "get_MaxKeyContainerNameLength": "Retrieves the maximum supported length for the name of the private key container associated with the provider.", "get_MaxLength": "Retrieves the maximum permitted length for a key.", "get_MaxScriptEngines": "Sets or retrieves the maximum number of Business Rule script engines that will be cached.", "get_Members": "Retrieves the security identifiers, in text form, of Windows accounts that belong to the role.", "get_MembersName": "Retrieves the account names of accounts that belong to the role.", "get_MinLength": "Retrieves the minimum permitted length for a key.", "get_MinorVersion": "Retrieves the minimum minor version number of the certificate template.", "get_Modified": "Gets a value that indicates whether an OCSPProperty object has been modified since it was instantiated.", "get_MSCEPErrorId": "Gets the ID for additional error information related to a failed Network Device Enrollment Service specification.", "get_MSCEPErrorString": "Contains the string data for additional error information related to a failed Network Device Enrollment Service specification.", "get_MyStoreFlags": "Sets or retrieves the registry location used for the MY store.", "get_MyStoreName": "Sets or retrieves the name of the store where certificates with linked private keys are kept.", "get_MyStoreNameWStr": "The MyStoreNameWStr property of IEnroll4 sets or retrieves the name of the store where certificates with linked private keys are kept.", "get_MyStoreType": "Sets or retrieves the type of store specified by the MyStoreName property.", "get_MyStoreTypeWStr": "Sets or retrieves the type of store specified by the MyStoreTypeWStr property.", "get_NameResolver": "Gets a pointer to the IAzNameResolver interface associated with this IAzPrincipalLocator object.", "get_NameValuePairs": "Retrieves a collection of name-value pairs associated with the enrollment object.", "get_NonMembers": "Retrieves the security identifiers, in text form, of accounts that are refused membership in the application group.", "get_NonMembersName": "Retrieves the account names of accounts that are refused membership in the application group.", "get_NotAfter": "Specifies or retrieves the date and time after which the certificate is no longer valid.", "get_NotBefore": "Specifies or retrieves the date and time before which the certificate is not valid.", "get_NullSigned": "Specifies and retrieves a Boolean value that indicates whether the certificate request is null-signed.", "get_ObjectId": "Retrieves the object identifier for the extension.", "get_ObjectPicker": "Gets a pointer to the IAzObjectPicker interface associated with this IAzPrincipalLocator object.", "get_OCSPCAConfigurationCollection": "Gets an instance of an OCSPCAConfigurationCollection object.", "get_OCSPServiceProperties": "Gets an instance of an OCSPPropertyCollection object.", "get_OldCertificate": "Gets or sets an old certificate that a request is intended to replace.", "get_Opened": "Retrieves a Boolean value that specifies whether the private key is open.", "get_OperationID": "Sets or retrieves an application-specific value that uniquely identifies the operation within the application.", "get_Operations": "Retrieves the operations that can be performed by the algorithm.", "get_Ordinal": "Specifies or retrieves the position of the ICspStatus object in the ICspStatuses collection.", "get_OSVersion": "Retrieves the client operating system version information.", "get_Parameters": "Retrieves a byte array that contains the parameters associated with the signature algorithm.", "get_ParentWindow": "Specifies or retrieves the ID of the window used to display key information.", "get_PathLenConstraint": "Retrieves the depth of the subordinate certification authority chain.", "get_Policies": "Retrieves a collection of application policies.", "get_PolicyAdministrators": "The PolicyAdministrators property of IAzScope retrieves the security identifiers, in text form, of principals that act as policy administrators.", "get_PolicyAdministratorsName": "Retrieves the account names of principals that act as policy administrators.", "get_PolicyQualifiers": "Retrieves a collection of optional policy qualifiers that can be applied to a certificate policy.", "get_PolicyReaders": "The PolicyReaders property of IAzScope retrieves the security identifiers, in text form, of principals that act as policy readers.", "get_PolicyReadersName": "Retrieves the account names of principals that act as policy readers.", "get_PolicyServer": "Retrieves the certificate enrollment policy server that contains the template used during initialization.", "get_PrivateKey": "Retrieves an IX509PrivateKey object that contains the private key used to sign the certificate request.", "get_PrivateKeyArchiveCertificate": "Sets or retrieves the certificate that is used to archive a private key with a PKCS", "get_ProcessName": "Retrieves the name of the application that generated the request.", "get_Property": "Specifies or retrieves a property value for the IX509CertificateTemplateWritable object.", "get_PropertyId": "Retrieves the identifier of the property on which this condition is based.", "get_ProviderCLSID": "Gets or sets the CLSID of the revocation information provider used by the CA configuration.", "get_ProviderFlags": "The ProviderFlags property of IEnroll4 sets or retrieves the provider type.", "get_ProviderName": "The ProviderName property of ICEnroll4 sets or retrieves the name of the cryptographic service provider to use.", "get_ProviderNameWStr": "Sets or retrieves the name of the cryptographic service provider to use.", "get_ProviderProperties": "Gets or sets information that provides certificate status responses.", "get_ProviderType": "Sets or retrieves the type of provider.", "get_PublicKey": "Retrieves the IX509PublicKey object that contains the public key included in the certificate request.", "get_PublicKeyAlgorithm": "Specifies and retrieves an object identifier for the public key algorithm used in the GetSignatureAlgorithm method.", "get_PVKFileName": "The PVKFileName property of ICEnroll4 sets or retrieves the name of the file that will contain exported keys.", "get_PVKFileNameWStr": "Sets or retrieves the name of the file that will contain exported keys.", "get_Qualifier": "Retrieves a string that contains the qualifier used to initialize the object.", "get_RawData": "Retrieves a byte array that contains the extension value.", "get_RawDataToBeSigned": "Retrieves the unsigned certificate request created by the Encode method.", "get_ReaderName": "Specifies or retrieves the name of a smart card reader.", "get_ReminderDuration": "Gets or sets the percentage of a signing certificate lifetime after which a warning event is logged.", "get_Renewal": "Retrieves the SHA-1 hash of the new certificate.", "get_RenewalCertificate": "Specifies the certificate context for the renewal certificate.", "get_Request": "Gets the inner PKCS10 request.", "get_RequesterName": "Specifies or retrieves a string that contains the Security Account Manager name of the end-entity requesting the certificate.", "get_RequestId": "Retrieves a unique identifier for the certificate request sent to the certification authority by the Enroll method.", "get_RequestID": "Gets the request ID from the Certificate Management over CMS response.", "get_RequestIdString": "Retrieves a string that contains a unique identifier for the certificate request sent to the certification enrollment server.", "get_RequestOriginator": "Retrieves a string that contains the DNS name of the originating computer.", "get_RequestStoreFlags": "The RequestStoreFlags property of IEnroll4 sets or retrieves the registry location used for the request store.", "get_RequestStoreName": "Sets or retrievesICEnroll the name of the store that contains the dummy certificate.", "get_RequestStoreNameWStr": "The RequestStoreNameWStr property of IEnroll4 sets or retrieves the name of the store that contains the dummy certificate.", "get_RequestStoreType": "Sets or retrieves the type of store to use for the store specified by the RequestStoreName property.", "get_RequestStoreTypeWStr": "Sets or retrieves the type of store to use for the store specified by the RequestStoreNameWStr property.", "get_Response": "Retrieves the certificate response returned from a certification authority.", "get_ReuseHardwareKeyIfUnableToGenNew": "The ReuseHardwareKeyIfUnableToGenNew property of IEnroll4 sets or retrieves a Boolean value that determines the action taken by the certificate enrollment control object if an error is encountered when generating a new key.", "get_ReuseKey": "Retrieves a Boolean value that indicates whether an existing private key was used to sign the request.", "get_RoleAssignments": "Retrieves an IAzRoleAssignments object that represents the collection of IAzRoleAssignment objects associated with this scope.", "get_RoleDefinitions": "Retrieves an IAzRoleDefinitions object that represents the collection of IAzRoleDefinition objects associated with this scope.", "get_RoleForAccessCheck": "Sets or retrieves the role that is used to perform the access check.", "get_Roles": "Retrieves an IAzRoles object that is used to enumerate IAzRole objects from the policy data.", "get_RootStoreFlags": "Sets or retrieves the registry location used for the root store.", "get_RootStoreName": "Sets or retrieves the name of the root store where all intrinsically trusted, self-signed root certificates are kept.", "get_RootStoreNameWStr": "The RootStoreNameWStr property of IEnroll4 sets or retrieves the name of the root store where all intrinsically trusted, self-signed root certificates are kept.", "get_RootStoreType": "Sets or retrieves the type of store to use for the store specified by the RootStoreName property.", "get_RootStoreTypeWStr": "Sets or retrieves the type of store to use for the store specified by the RootStoreNameWStr property.", "get_Scope": "Retrieves the IAzScope object that represents the scope in which this IAzRoleAssignment object is defined.", "get_Scopes": "Retrieves an IAzScopes object that is used to enumerate IAzScope objects from the policy data.", "get_ScriptEngineTimeout": "Sets or retrieves the time in milliseconds that the IAzClientContext::AccessCheck method will wait for a Business Rule to complete execution before canceling it.", "get_SecurityDescriptor": "Specifies or retrieves the security descriptor for the private key.", "get_Selected": "Specifies or retrieves a value that indicates whether an item can be used during the enrollment process.", "get_SenderNonce": "Specifies or retrieves a byte array that contains a nonce.", "get_SerialNumber": "Specifies and retrieves the certificate serial number.", "get_SHA1Hash": "Retrieves the SHA-1 hash of a certificate.", "get_Sids": "Gets an array of the security identifiers associated with this client context.", "get_Signature": "Retrieves the request signature created by the Encode method.", "get_SignatureInformation": "Retrieves the IX509SignatureInformation object that contains information about the certificate request signature.", "get_SignerCertificate": "Gets or sets the signer certificate for the request.", "get_SignerCertificates": "Retrieves a collection of certificates used to sign the request.", "get_SigningCertificate": "Gets or sets a signing certificate that has been encoded by using Distinguished Encoding Rules responder service uses this certificate to sign its responses to certificate status requests.", "get_SigningCertificateTemplate": "Gets or sets the template name for a signing certificate.", "get_SigningFlags": "Gets or sets a combination of flag values.", "get_Silent": "Specifies or retrieves a Boolean value that indicates whether the Certificate Enrollment Control is allowed to display a dialog box when the private key is accessed.", "get_SmimeCapabilities": "Retrieves a collection of ISmimeCapability objects.", "get_SPCFileName": "Sets or retrieves the name of the file to which to write the base64-encoded PKCS", "get_SPCFileNameWStr": "The SPCFileNameWStr property of IEnroll4 sets or retrieves the name of the file to which to write the base64-encoded PKCS", "get_Status": "Gets the status of the request.", "get_StrValue": "Retrieves a string that contains an email address, a Domain Name System.", "get_Subject": "Specifies or retrieves the X.500 distinguished name of the entity requesting the certificate.", "get_SubjectKeyIdentifier": "Retrieves a byte array that contains the key identifier.", "get_SuppressDefaults": "Specifies or retrieves a Boolean value that indicates whether the default extensions and attributes are included in the request.", "get_SuppressOids": "Retrieves a collection of the default extension and attribute object identifiers that were not added to the request when the request was encoded.", "get_TargetMachine": "Retrieves the name of the computer on which account resolution should occur.", "get_Tasks": "Retrieves the tasks associated with the task.", "get_Template": "Retrieves the certificate request template used during initialization.", "get_TemplateName": "Retrieves the name of the template.", "get_TemplateObjectId": "Retrieves the object identifier of the template used to create the certificate request.", "get_TemplateOid": "Retrieves the template object identifier.", "get_Text": "Specifies or retrieves a string that contains a message associated with the status of the enrollment process.", "get_ThumbPrint": "Sets or retrieves a hash of the certificate data.", "get_ThumbPrintWStr": "Sets or retrieves a hash of the certificate data.", "get_TransactionId": "Gets or sets the transaction id for the request.", "get_UIContextMessage": "Specifies or retrieves a string that contains user interface text associated with the private key.", "get_UniqueContainerName": "Retrieves a unique name for the key container.", "get_Url": "Specifies or retrieves the URL for the certificate enrollment policy server.", "get_UseExistingKeySet": "The UseExistingKeySet property of IEnroll4 sets or retrieves a Boolean value that determines whether the existing keys should be used.", "get_UserCanonical": "Retrieves the name of the current client in canonical format.", "get_UserDisplay": "Retrieves the name of the current client in user display name format.", "get_UserDn": "Retrieves the name of the current client in distinguished name format.", "get_UserDnsSamCompat": "Retrieves the name of the current client in a DNS format compatible with Windows\u00ef\u00bf\u00bdSecurity\u00ef\u00bf\u00bdAccount\u00ef\u00bf\u00bdManager.", "get_UserGuid": "Retrieves the name of the current client in GUID format.", "get_UserSamCompat": "Retrieves the name of the current client in a format compatible with Windows\u00ef\u00bf\u00bdSecurity\u00ef\u00bf\u00bdAccount\u00ef\u00bf\u00bdManager.", "get_UserSamName": "Retrieves the Security Accounts Manager name of the user.", "get_UserUpn": "Retrieves the name of the current client in user principal name format.", "get_Valid": "Retrieves a Boolean value that specifies whether the provider is installed on the client computer.", "get_Value": "The value of the control.", "get_Values": "Retrieves an IX509Attributes object that contains a collection of attributes.", "get_Writable": "Retrieves a value that indicates whether the task can be modified by the user context that initialized it.", "get_WriteCertToCSP": "Sets or retrieves a Boolean value that determines whether a certificate should be written to the cryptographic service provider.", "get_WriteCertToUserDS": "The WriteCertToUserDS property of IEnroll4 sets or retrieves a Boolean value that determines whether the certificate is written to the user's Active Directory store.", "get_X509Extensions": "Retrieves a collection of the extensions included in the certificate request.", "GetAccessRights": "The GetAccessRights method requests information about the access rights that can be controlled for a securable object.", "GetAce": "Obtains a pointer to an access control entry.", "GetAclInformation": "Retrieves information about an access control list.", "GetAlgName": "Retrieves the name of a cryptographic algorithm given its ID.", "GetAlgNameWStr": "Retrieves the name of a cryptographic algorithm given its ID.", "GetAlgorithmName": "Retrieves the display name associated with an algorithm object identifier.", "GetAlgorithmOid": "Retrieves the algorithm object identifier.", "GetAllowUnTrustedCA": "Retrieves a value that specifies whether to allow an untrusted certification authority certificate.", "GetAllProperties": "Gets all properties in a property set.", "GetAppContainerNamedObjectPath": "Retrieves the named object path for the app container.", "GetArchivedKey": "Retrieves an archived key recovery BLOB.", "GetAssignedScopesPage": "Retrieves a list of the scopes in which the client represented by the current IAzClientContext2 object is assigned to at least one role.", "GetAt": "Provides a pointer to a specified object's interface.", "GetAuditedPermissionsFromAclA": "Retrieves the audited access rights for a specified trustee.", "GetAuditedPermissionsFromAclW": "Retrieves the audited access rights for a specified trustee.", "GetAuthentication": "The GetAuthentication method retrieves a value that specifies the type of authentication used by the certificate enrollment policy server to authenticate a client.", "GetAuthFlags": "Retrieves a value that specifies the authentication type used by the client to authenticate itself to the certificate enrollment policy server.", "GetBitCount": "Returns the number of bits in a bit string that belongs to the CertEncodeBitString object and has been initialized by an earlier call to ICertEncodeBitString::Decode.", "GetBitString": "Returns the string of bits in the object's bit string.", "GetBusinessRuleString": "Returns the application-specific string for the business rule.", "GetCACertificate": "Returns the certification authority certificate for the Certificate Services server.", "GetCacheDir": "Retrieves the name of the directory on the certificate enrollment policy server that contains the policy cache file.", "GetCachePath": "Retrieves the path of the policy cache file on the certificate enrollment policy server.", "GetCAProperty": "Retrieves a property value for the certification authority.", "GetCAPropertyDisplayName": "The ICertAdmin2::GetCAPropertyDisplayName method retrieves the property display name for a certification authority property.", "GetCAPropertyFlags": "The ICertAdmin2::GetCAPropertyFlags method retrieves the property flags for a certification authority property.", "GetCAs": "Retrieves a collection of certification enrollment servers included in the policy.", "GetCASetupProperty": "Gets a property value for a certification authority configuration.", "GetCAsForTemplate": "Retrieves a collection of certificate enrollment servers that support a specified template.", "getCAStore": "The getCAStore method is not implemented.", "getCertContextFromFileResponseWStr": "Retrieves the certificate from a file containing a response from a certification authority.", "getCertContextFromPKCS7": "Retrieves a certificate context based on a PKCS", "getCertContextFromResponseBlob": "Retrieves the certificate from a certification authority's response.", "getCertFromFileResponse": "Retrieves the certificate from a file containing a response from a certification authority.", "getCertFromPKCS7": "Retrieves the certificate, contained in a PKCS", "getCertFromResponse": "Retrieves the certificate from a certification authority's response.", "GetCertificate": "Returns the certificate issued for the request as an X.509 certificate, or optionally packaged in a Public Key Cryptography Standards ", "GetCertificateCount": "Gets the count of the endorsement certificates in the key storage provider.", "GetCertificateExtension": "Retrieves a specific certificate extension.", "GetCertificateExtensionFlags": "Retrieves the flags associated with the extension acquired by the most recent call to GetCertificateExtension.", "GetCertificateProperty": "Returns a named property from a certificate.", "GetColumnCount": "Gets the column count for either the visible columns or the complete set of columns.", "GetConfigEntry": "Retrieves configuration information for a certification authority.", "GetConfiguration": "Connects to an Online Certificate Status Protocol responder server and initializes an OCSPAdmin object with the configuration information from the server.", "GetCRL": "Retrieves the current certificate revocation list.", "GetCspStatuses": "Retrieves an ICspStatuses collection that contains all provider/algorithm pairs consistent with the intended use of the private key as specified by the caller.", "GetCspStatusesFromOperations": "Retrieves an ICspStatuses collection by supported key operations and optional provider information.", "GetCspStatusFromOperations": "Creates an ICspStatus object for the first supported algorithm that is consistent with the specified signature, encryption, hashing, or cipher operation.", "GetCspStatusFromProviderName": "Retrieves an ICspStatus object for a legacy provider by provider name and supported key operations.", "GetCurrentProcessToken": "Retrieves a pseudo-handle that you can use as a shorthand way to refer to the access token associated with a process.", "GetCurrentThreadEffectiveToken": "Retrieves a pseudo-handle that you can use as a shorthand way to refer to the token that is currently in effect for the thread, which is the thread token if one exists and the process token otherwise.", "GetCurrentThreadToken": "Retrieves a pseudo-handle that you can use as a shorthand way to refer to the impersonation token that was assigned to the current thread.", "GetCustomOids": "Is not implemented.", "GetData": "Searches for and retrieves file or protocol association-related binary data from the registry.", "GetDefaultSecurityDescriptor": "Retrieves the default private key security descriptor.", "GetDispositionMessage": "Gets a human-readable message that gives the current disposition of the certificate request.", "GetDistPointCount": "Returns the number of certificate revocation list distribution points in a CRL distribution information array.", "GetEffectivePermission": "Returns the effective permission for an object type.", "GetEffectiveRightsFromAclA": "Retrieves the effective access rights that an ACL structure grants to a specified trustee.", "GetEffectiveRightsFromAclW": "Retrieves the effective access rights that an ACL structure grants to a specified trustee.", "GetEncryptionCspAlgorithms": "Retrieves the collection of encryption algorithms supported by a provider.", "GetEncSChannel": "This function is unavailable.", "GetEnrollmentServerAuthentication": "The GetEnrollmentServerAuthentication method retrieves a value that specifies the type of authentication used by the certificate enrollment server to authenticate a client.", "GetEnrollmentServerUrl": "Retrieves a string that contains the URL for the certificate enrollment server.", "GetErrorMessageText": "Retrieves the error message text for an HRESULT error code.", "GetExistingCACertificates": "Gets the collection of CertSrvSetupKeyInformation objects that represent valid certification authority certificates currently installed on the computer.", "GetExplicitEntriesFromAclA": "Retrieves an array of structures that describe the access control entries.", "GetExplicitEntriesFromAclW": "Retrieves an array of structures that describe the access control entries.", "GetField": "Gets a specific field from the current record of the configuration database.", "GetFileSecurityA": "Obtains specified information about the security of a file or directory.", "GetFileSecurityW": "Obtains specified information about the security of a file or directory.", "GetFlags": "Deprecated.", "GetFriendlyName": "Retrieves a display name for the certificate enrollment policy server.", "GetFriendlyNameOfCertA": "Retrieves the display name for a certificate.", "GetFriendlyNameOfCertW": "Retrieves the display name for a certificate.", "GetFullResourceName": "Retrieves the full path and file name of the object associated with the access control editor that is displayed by calling the OpenElevatedEditor method.", "GetFullResponseProperty": "Retrieves the cached response data returned by the server.", "GetGroups": "Returns an array of the application groups associated with this client context.", "GetHashAlgorithmList": "Gets the list of hash algorithms supported by the specified cryptographic service provider for an asymmetric signature key algorithm.", "GetHashAlgorithms": "Gets a list of hash-algorithm names.", "GetIdentityEnum": "Retrieves an IEnumUnknown interface pointer that can be used to enumerate identities.", "GetInheritanceSourceA": "Returns information about the source of inherited access control entries.", "GetInheritanceSourceW": "Returns information about the source of inherited access control entries.", "GetInheritSource": "The ISecurityObjectTypeInfo::GetInheritSource method provides a means of determining the source of inherited access control entries in discretionary access control lists and system access control lists.", "GetInheritTypes": "The GetInheritTypes method requests information about how ACEs can be inherited by child objects.", "GetInnerRequest": "Retrieves a nested request object.", "GetInterfaceValue": "Gets the ID and flags of the interface that corresponds to the specified interface name.", "GetIsDefaultCEP": "Retrieves a Boolean value that specifies whether this is the default certificate enrollment policy server.", "GetIssuedCertificate": "Retrieves a certificate's disposition by specifying either the request ID or the certificate serial number.", "GetIssuedCertificate2": "Retrieves a certificate's disposition by specifying either the request ID string or the certificate serial number.", "GetKernelObjectSecurity": "Retrieves a copy of the security descriptor that protects a kernel object.", "GetKeyLen": "The IEnroll4::GetKeyLen method retrieves the minimum and maximum key lengths for the signature and exchange keys.", "GetKeyLenEx": "Retrieves size information for the signature and exchange keys.", "GetKeyLengthList": "Gets the list of key lengths supported by the specified cryptographic service provider.", "GetLastStatus": "Gets the last return code for this request.", "GetLastUpdateTime": "Retrieves the date and time at which the policy was last downloaded.", "GetLengthSid": "Returns the length, in bytes, of a valid security identifier.", "GetMachineTypeAttributes": "Queries if the specified architecture is supported on the current system, either natively or by any form of compatibility or emulation layer.", "GetManageModule": "Retrieves the ICertManageModule interface associated with the ICertExit2 interface by calling GetManageModule and passing in the address of a pointer to an ICertManageModule.", "GetMaxLength": "Returns the maximum number of characters allowed for a particular name in the namespace under which it is called.", "GetMSCEPSetupProperty": "Gets a property value for a Network Device Enrollment Service configuration.", "GetMyRoles": "Gets the access mask of privilege roles for a user on a given Online Certificate Status Protocol responder server.", "getMyStore": "The getMyStore method is not implemented.", "GetNameChoice": "Returns the name choice at a specified index of a certificate revocation list distribution information point.", "GetNameCount": "Gets the number of property names in the property store.", "GetNamedSecurityInfoA": "Retrieves a copy of the security descriptor for an object specified by name.", "GetNamedSecurityInfoW": "Retrieves a copy of the security descriptor for an object specified by name.", "GetNextUpdateTime": "Retrieves the date and time at which the policy expires and should be refreshed.", "GetObjectInformation": "The GetObjectInformation method requests information that the access control editor uses to initialize its pages and to determine the editing options available to the user.", "GetOpenCardNameA": "The GetOpenCardName function displays the smart card select card dialog box.", "GetOpenCardNameW": "The GetOpenCardName function displays the smart card select card dialog box.", "GetOperations": "Returns a collection of the operations, within the specified scope, that the principal represented by the current client context has permission to perform.", "GetParameter": "Gets the specified value from the varParameterValues parameter of the IAzClientContext::AccessCheck method.", "GetParameterValue": "Gets the value type of the business rule parameter with the specified name.", "GetPasswordCredentials": "Returns credentials to authenticate a non-domain joined container with Active Directory.", "GetPolicyServerId": "Retrieves a string value that uniquely identifies the certificate enrollment policy server.", "GetPolicyServerUrl": "Retrieves a string value that contains the URL for the certificate enrollment policy server.", "GetPrincipals": "Displays a dialog box from which users can choose one or more principals, and then returns the chosen list of principals and their corresponding security identifiers.", "GetPrivateKeyArchiveCertificate": "The GetPrivateKeyArchiveCertificate method retrieves the certificate used to archive the private key.", "GetPrivateKeyContainerList": "Gets the list of key container names stored by the specified cryptographic service provider for asymmetric signature key algorithms.", "GetPrivateObjectSecurity": "Retrieves information from a private object's security descriptor.", "GetPropertyFlags": "Retrieves a value that specifies the default policy server URL.", "GetProviderNameList": "Gets the list of cryptographic service providers that provide asymmetric key signature and exchange algorithms on the computer.", "GetProviderPropertyStore": "Retrieves a pointer to the IPropertyStore interface associated with the identity provider.", "getProviderType": "Retrieves the type of the specified cryptographic service provider.", "getProviderTypeWStr": "Retrieves the type of the specified cryptographic service provider.", "GetRefreshPolicy": "Returns a value that indicates whether a client's cached certificate enrollment policy is out of date and needs to be refreshed.", "GetRequestAttribute": "Returns a named attribute from a request.", "GetRequestId": "Gets the current internal request number for the request and subsequent certificate.", "GetRequestIdString": "Gets the current internal request number, formatted as a string, for the request and subsequent certificate.", "GetRequestProperty": "Retrieves a specific property from a request.", "GetRevocationReason": "Returns the reason a certificate was revoked.", "GetRoles": "Returns the roles for the client context.", "getROOTHStore": "The getROOTHStore method is not implemented.", "GetSchemaVersion": "Gets the version number of this authorization store.", "GetSecondarySecurity": "Returns additional security contexts that may impact access to the resource.", "GetSecurity": "Gets security descriptor information for an Online Certificate Status Protocol responder server.", "GetSecurityDescriptorControl": "Retrieves a security descriptor control and revision information.", "GetSecurityDescriptorDacl": "Retrieves a pointer to the discretionary access control list in a specified security descriptor.", "GetSecurityDescriptorGroup": "Retrieves the primary group information from a security descriptor.", "GetSecurityDescriptorLength": "Returns the length, in bytes, of a structurally valid security descriptor.", "GetSecurityDescriptorOwner": "Retrieves the owner information from a security descriptor.", "GetSecurityDescriptorRMControl": "Retrieves the resource manager control bits.", "GetSecurityDescriptorSacl": "Retrieves a pointer to the system access control list in a specified security descriptor.", "GetSecurityInfo": "Retrieves a copy of the security descriptor for an object specified by a handle.", "GetServiceDirectory": "Returns a path for a per-service filesystem location for a service to read and/or write state to.", "GetServiceDisplayNameA": "Retrieves the display name of the specified service.", "GetServiceDisplayNameW": "Retrieves the display name of the specified service.", "GetServiceKeyNameA": "Retrieves the service name of the specified service.", "GetServiceKeyNameW": "Retrieves the service name of the specified service.", "GetServiceRegistryStateKey": "Returns a handle for a registry key for a service to read and/or write state to.", "GetSharedServiceDirectory": "Returns a path for a per-service filesystem location for a service and associated programs to read and/or write state to.", "GetSharedServiceRegistryStateKey": "Returns a handle for a registry key for a service and associated programs to read and/or write state to.", "GetSidIdentifierAuthority": "Returns a pointer to the SID_IDENTIFIER_AUTHORITY structure in a specified security identifier.", "GetSidLengthRequired": "Returns the length, in bytes, of the buffer required to store a SID with a specified number of subauthorities.", "GetSidSubAuthority": "Returns a pointer to a specified subauthority in a security identifier.", "GetSidSubAuthorityCount": "Returns a pointer to the member in a security identifier structure that contains the subauthority count.", "GetSignatureAlgorithm": "Retrieves the signing algorithm object identifier.", "GetSigningCertificates": "Gets the signing certificates that are available on a responder server for a given certification authority certificate.", "GetStringProperty": "Retrieves the certificate enrollment policy server ID or the display name of the CEP server.", "GetStringType": "Returns the type of string values that the string array contains.", "GetSupportedCATypes": "Gets the types of certification authorities that can be installed on a computer under the caller context.", "GetSupportedKeySpec": "Retrieves information regarding the current cryptographic service provider support for signature and/or exchange operations.", "GetTasks": "Returns a collection of the tasks, within the specified scope, that the principal represented by the current client context has permission to perform.", "GetTemplates": "Retrieves a collection of the templates supported by the certificate enrollment policy server.", "GetTokenInformation": "Retrieves a specified type of information about an access token.", "GetTrusteeFormA": "Retrieves the trustee name from the specified TRUSTEE structure.", "GetTrusteeFormW": "Retrieves the trustee name from the specified TRUSTEE structure.", "GetTrusteeNameA": "Retrieves the trustee name from the specified TRUSTEE structure.", "GetTrusteeNameW": "Retrieves the trustee name from the specified TRUSTEE structure.", "GetTrusteeTypeA": "Retrieves the trustee type from the specified TRUSTEE structure.", "GetTrusteeTypeW": "Retrieves the trustee type from the specified TRUSTEE structure.", "GetUrl": "Returns the URL string for the specified wizard or webpage.", "GetUrlFlags": "Retrieves a set of flags that contain miscellaneous policy information about the certificate enrollment policy server.", "GetUseClientId": "Retrieves a value that specifies whether the ClientId attribute is set in the policy server flags of the certificate enrollment policy server.", "GetUserObjectSecurity": "Retrieves security information for the specified user object.", "GetValue": "Retrieves a specified property value set for the user.", "GetWindowsAccountDomainSid": "Receives a security identifier and returns a SID representing the domain of that SID.", "GetEffectiveClientRect": "Calculates the dimensions of a rectangle in the client area that contains all the specified controls.", "GetMUILanguage": "Gets the language currently in use by the common controls for a particular process.", "GetWindowSubclass": "Retrieves the reference data for the specified window subclass callback.", "GetFileTitleA": "Retrieves the name of the specified file.", "GetFileTitleW": "Retrieves the name of the specified file.", "GetOpenFileNameA": "Creates an Open dialog box that lets the user specify the drive, directory, and the name of a file or set of files to be opened.", "GetOpenFileNameW": "Creates an Open dialog box that lets the user specify the drive, directory, and the name of a file or set of files to be opened.", "GetSaveFileNameA": "Creates a Save dialog box that lets the user specify the drive, directory, and name of a file to save.", "GetSaveFileNameW": "Creates a Save dialog box that lets the user specify the drive, directory, and name of a file to save.", "GetActive": "Sets the active state of a story.", "GetActiveStory": "Gets the active story; that is, the story that receives keyboard and mouse input.", "GetAlignment": "Gets the horizontal alignment of a row.", "GetAllCaps": "Gets whether the characters are all uppercase.", "GetAnimation": "Gets the animation type.", "GetAutoLigatures": "Gets whether support for automatic ligatures is active.", "GetAutospaceAlpha": "Gets the East Asian autospace alphabetics state.", "GetAutospaceNumeric": "Gets the East Asian autospace numeric state.", "GetAutospaceParens": "Gets the East Asian autospace parentheses state.", "GetBackColor": "Gets the text background color.", "GetBkColor": "Gets the current background color for an image list.", "GetBold": "Gets whether the characters are bold.", "GetBorders": "Gets the borders collection.", "GetBoundaryRectangle": "Retrieves the bounding rectangle of a windowless rich edit control.", "GetBufferedPaintBits": "Retrieves a pointer to the buffer bitmap if the buffer is a device-independent bitmap.", "GetBufferedPaintDC": "Gets the paint device context.", "GetBufferedPaintTargetDC": "Retrieves the target device context.", "GetBufferedPaintTargetRect": "Retrieves the target rectangle specified by BeginBufferedPaint.", "GetCallback": "Gets an image list callback object.", "GetCallManager": "Gets the call manager.", "GetCaretType": "Gets the caret type.", "GetCch": "Gets the count of characters for a selected string index.", "GetCellAlignment": "Gets the vertical alignment of the active cell.", "GetCellBorderColors": "Gets the border colors of the active cell.", "GetCellBorderWidths": "Gets the border widths of the active cell.", "GetCellColorBack": "Gets the background color of the active cell.", "GetCellColorFore": "Gets the foreground color of the active cell.", "GetCellCount": "Gets the count of cells in this row.", "GetCellCountCache": "Gets the count of cells cached for this row.", "GetCellIndex": "Gets the index of the active cell to get or set parameters for.", "GetCellMargin": "Gets the cell margin of this row.", "GetCellMergeFlags": "Gets the merge flags of the active cell.", "GetCells": "Gets a cells object with the parameters of cells in the currently selected table row or column.", "GetCellShading": "Gets the shading of the active cell.", "GetCellVerticalText": "Gets the vertical-text setting of the active cell.", "GetCellWidth": "Gets the width of the active cell.", "GetChar": "Gets the character at the start position of the range.", "GetChar2": "Gets the character at the specified offset from the end of this range.", "GetCharRep": "Gets the character repertoire.", "GetCIMSSM": "Retrieves the source of the input message.", "GetClientRect": "Retrieves the coordinates of a window's client area.", "GetClientSite": "A client site may be used with exactly one object.", "GetColumn": "Gets the column properties for the currently selected column.", "GetComboBoxInfo": "Retrieves information about the specified combo box.", "GetCompressionMode": "Gets the East Asian compression mode.", "GetContextMenu": "Queries the application for a context menu to use on a right-click event.", "GetCookie": "Gets the client cookie.", "GetCurrentInputMessageSource": "Retrieves the source of the input message.", "GetCurrentThemeName": "Retrieves the name of the current visual style, and optionally retrieves the color scheme name and size name.", "GetDefaultTabStop": "Gets the default tab width.", "GetDisplay": "Gets a new display for a story.", "GetDisplays": "Gets the displays collection for this Text Object Model engine instance.", "GetDocumentFont": "Gets an object that provides the default character format information for this instance of the Text Object Model engine.", "GetDocumentPara": "Gets an object that provides the default paragraph format information for this instance of the Text Object Model engine.", "GetDoubleStrike": "Gets whether characters are displayed with double horizontal lines through the center.", "GetDragDropEffect": "Allows the client to specify the effects of a drop operation.", "GetDragImage": "Gets the temporary image list that is used for the drag image.", "GetDropCap": "Gets the drop-cap parameters of the paragraph that contains this range.", "GetDuplicate": "Gets a duplicate of this range object.", "GetDuplicate2": "Gets a duplicate of a range object.", "GetEastAsianFlags": "Gets the East Asian flags.", "GetEffectColor": "Retrieves the color used for special text attributes.", "GetEffects": "Gets the paragraph format effects.", "GetEffects2": "Gets the additional character format effects.", "GetEmbeddedObject": "The range must either be an insertion point or it must select only the embedded object.", "GetEmboss": "Gets whether characters are embossed.", "GetEnd": "Gets the end character position of the range.", "GetEngrave": "Gets whether characters are displayed as imprinted characters.", "GetFirstLineIndent": "The left indent is the indent for all lines of the paragraph except the first line.", "GetFont": "Gets the current attributes set on the font.", "GetFont2": "Gets an ITextFont2 object with the character attributes of the current range.", "GetFontAlignment": "Gets the paragraph font alignment state.", "GetForeColor": "Gets the foreground, or text, color.", "GetFormattedText": "Gets an ITextRange object with the specified range's formatted text.", "GetFormattedText2": "Gets an ITextRange2 object with the current range's formatted text.", "GetGenerator": "Gets the name of the Text Object Model engine.", "GetGravity": "Gets the gravity of this range.", "GetHangingPunctuation": "Gets whether to hang punctuation symbols on the right margin when the paragraph is justified.", "GetHeight": "Gets the height of the row.", "GetHidden": "Gets whether characters are hidden.", "GetHyphenation": "Determines whether automatic hyphenation is enabled for the range.", "GetIcon": "Gets the default icon for the library.", "GetIconSize": "Gets the folder icon size.", "GetImageCount": "Gets the number of images in an image list.", "GetImageInfo": "Gets information about an image.", "GetImageRect": "Gets an image's bounding rectangle.", "GetImmContext": "Gets the Input Method Manager host.", "GetIndent": "Gets the indent of this row.", "GetIndex": "Gets the index of a story.", "GetInlineObject": "Gets the properties of the inline object at the range active end.", "GetInPlaceContext": "Provides the application and document-level interfaces and information required to support in-place activation.", "GetItalic": "Gets whether characters are in italics.", "GetItemFlags": "Gets the flags of an image.", "GetKeepTogether": "Gets whether this row is allowed to be broken across pages.", "GetKeepWithNext": "Gets whether this row should appear on the same page as the row that follows it.", "GetKerning": "Gets the minimum font size at which kerning occurs.", "GetLanguageID": "Gets the language ID or language code identifier.", "GetLeftIndent": "The distance is relative to the left margin.", "GetLineSpacing": "Retrieves the line-spacing value for the text range.", "GetLineSpacingRule": "Retrieves the line-spacing rule for the text range.", "GetLinkCount": "Returns the number of objects in a rich edit control that are links.", "GetLinkType": "Gets the link type.", "GetListAlignment": "Retrieves the kind of alignment to use for bulleted and numbered lists.", "GetListBoxInfo": "Retrieves the number of items per column in a specified list box.", "GetListLevelIndex": "Retrieves the list level index used with paragraphs.", "GetListStart": "Retrieves the starting value or code of a list numbering sequence.", "GetListTab": "Retrieves the list tab setting, which is the distance between the first-line indent and the text on the first line.", "GetListType": "Retrieves the kind of numbering to use with paragraphs.", "GetMainStory": "Gets the main story.", "GetMathFunctionType": "Retrieves the math function type associated with the specified math function name.", "GetMathProperties": "Gets the math properties for the document.", "GetMathZone": "Gets whether a math zone is active.", "GetModWidthPairs": "Gets whether decrease widths on pairs is active.", "GetModWidthSpace": "Gets whether increase width of whitespace is active.", "GetNestLevel": "Gets the nest level of a table.", "GetNewStorage": "Provides storage for a new object pasted from the clipboard or read in from an Rich Text Format stream.", "GetNewStory": "Gets a new story.", "GetNoLineNumber": "Determines whether paragraph numbering is enabled.", "GetNotificationMode": "Gets the notification mode.", "GetObjectCount": "Gets the number of items in the folder view.", "GetOldNumbers": "Gets whether old-style numbers are active.", "GetOriginalSize": "Gets the original size of a specified image.", "GetOutline": "Gets whether characters are displayed as outlined characters.", "GetOverlapping": "Gets whether overlapping text is active.", "GetOverlayImage": "Retrieves a specified image from the list of images used as overlay masks.", "GetPageBreakBefore": "Determines whether each paragraph in the range must begin on a new page.", "GetPara": "Gets an ITextPara object with the paragraph attributes of the specified range.", "GetPara2": "Gets an ITextPara2 object with the paragraph attributes of a range.", "GetPoint": "Retrieves screen coordinates for the start or end character position in the text range, along with the intra-line position.", "GetPointerDevice": "Gets information about the pointer device.", "GetPointerDeviceCursors": "Gets the cursor IDs that are mapped to the cursors associated with a pointer device.", "GetPointerDeviceProperties": "Gets device properties that aren't included in the POINTER_DEVICE_INFO structure.", "GetPointerDeviceRects": "Gets the x and y range for the pointer device for the display that the pointer device is mapped to.", "GetPointerDevices": "Gets information about the pointer devices attached to the system.", "GetPosition": "Retrieves the current display value for the desktop background image.", "GetPositionSubSuper": "Gets the subscript or superscript position relative to the baseline.", "GetPreferredFont": "Retrieves the preferred font for a particular character repertoire and character position.", "GetPropertyInfo": "Gets the property type and value of the specified extra property.", "GetPropertyOverrideValue": "Retrieves the host container's override value for the specified Microsoft UI Automation accessibility property of a windowless rich edit control.", "GetProtected": "Gets whether characters are protected against attempts to modify them.", "GetRange": "Gets a text range object for the story.", "GetRawPointerDeviceData": "Gets the raw input data from the pointer device.", "GetRect": "Retrieves a rectangle of the specified type for the current range.", "GetRightIndent": "Retrieves the size of the right margin indent of a paragraph.", "GetRow": "Gets the row properties in the currently selected row.", "GetRTL": "Gets whether this row has right-to-left orientation.", "GetSaved": "Gets a value that indicates whether changes have been made since the file was last saved.", "GetScaling": "Gets the font horizontal scaling percentage.", "GetScrollBarInfo": "The GetScrollBarInfo function retrieves information about the specified scroll bar.", "GetScrollInfo": "The GetScrollInfo function retrieves the parameters of a scroll bar, including the minimum and maximum scrolling positions, the page size, and the position of the scroll box.", "GetScrollPos": "The GetScrollPos function retrieves the current position of the scroll box in the specified scroll bar.", "GetScrollRange": "The GetScrollRange function retrieves the current minimum and maximum scroll box positions for the specified scroll bar.", "GetSelection": "Retrieves a collection of text ranges that represents the currently selected text in a text-based control.", "GetSelection2": "Gets the active selection.", "GetShadow": "Gets whether characters are displayed as shadowed characters.", "GetSize": "Gets the dimensions of the image file.", "GetSmallCaps": "Gets whether characters are in small capital letters.", "GetSnapToGrid": "Gets whether paragraph lines snap to a vertical grid that could be defined for the whole document.", "GetSpaceAfter": "Retrieves the amount of vertical space below a paragraph.", "GetSpaceBefore": "Retrieves the amount of vertical space above a paragraph.", "GetSpaceExtension": "Gets the East Asian space extension value.", "GetSpacing": "Gets a POINT structure containing the width dimensions, including the surrounding white space, of an item.", "GetStart": "Gets the start character position of the range.", "GetStartPara": "Gets the character position of the start of the paragraph that contains the range's start character position.", "GetStatistics": "Gets an image list statistics structure.", "GetStory": "Retrieves the story that corresponds to a particular index.", "GetStoryCount": "Gets the count of stories in this document.", "GetStoryLength": "Gets the count of characters in the range's story.", "GetStoryRanges": "Gets the story collection object used to enumerate the stories in a document.", "GetStoryRanges2": "Gets an object for enumerating the stories in a document.", "GetStoryType": "Get the type of the range's story.", "GetStrikeThrough": "Gets whether characters are displayed with a horizontal line through the center.", "GetStrings": "Gets a collection of rich-text strings.", "GetStyle": "Retrieves the style handle to the paragraphs in the specified range.", "GetSubrange": "Retrieves a subrange in a range.", "GetSubscript": "Gets whether characters are displayed as subscript.", "GetSuperscript": "Gets whether characters are displayed as superscript.", "GetTab": "Retrieves tab parameters for a specified tab.", "GetTabCount": "Retrieves the tab count.", "GetTable": "Retrieves all entries in the proxy factory table.", "GetText": "Returns the plain text of the text range.", "GetText2": "Gets the text in this range according to the specified conversion flags.", "GetThemeAnimationProperty": "Gets a theme animation property based on the storyboard id and the target id.", "GetThemeAnimationTransform": "Gets an animation transform operation based on storyboard id, target id and transform index.", "GetThemeAppProperties": "Retrieves the property flags that control how visual styles are applied in the current application.", "GetThemeBackgroundContentRect": "Retrieves the size of the content area for the background defined by the visual style.", "GetThemeBackgroundExtent": "Calculates the size and location of the background, defined by the visual style, given the content area.", "GetThemeBackgroundRegion": "Computes the region for a regular or partially transparent background that is bounded by a specified rectangle.", "GetThemeBitmap": "Retrieves the bitmap associated with a particular theme, part, state, and property.", "GetThemeBool": "Retrieves the value of a BOOL property from the SysMetrics section of theme data.", "GetThemeColor": "Retrieves the value of a color property.", "GetThemeDocumentationProperty": "Retrieves the value for a theme property from the documentation section of the specified theme file.", "GetThemeEnumValue": "Retrieves the value of an enumerated type property.", "GetThemeFilename": "Retrieves the value of a filename property.", "GetThemeFont": "Retrieves the value of a font property.", "GetThemeInt": "Retrieves the value of an int property.", "GetThemeIntList": "Retrieves a list of int data from a visual style.", "GetThemeMargins": "Retrieves the value of a MARGINS property.", "GetThemeMetric": "Retrieves the value of a metric property.", "GetThemePartSize": "Calculates the original size of the part defined by a visual style.", "GetThemePosition": "Retrieves the value of a position property.", "GetThemePropertyOrigin": "Retrieves the location of the theme property definition for a property.", "GetThemeRect": "Retrieves the value of a RECT property.", "GetThemeStream": "Retrieves a data stream corresponding to a specified theme, starting from a specified part, state, and property.", "GetThemeString": "Retrieves the value of a string property.", "GetThemeSysBool": "Retrieves the Boolean value of a system metric.", "GetThemeSysColor": "Retrieves the value of a system color.", "GetThemeSysColorBrush": "Retrieves a system color brush.", "GetThemeSysFont": "Retrieves the LOGFONT of a system font.", "GetThemeSysInt": "Retrieves the value of a system int.", "GetThemeSysSize": "Retrieves the value of a system size metric from theme data.", "GetThemeSysString": "Retrieves the value of a system string.", "GetThemeTextExtent": "Calculates the size and location of the specified text when rendered in the visual style font.", "GetThemeTextMetrics": "Retrieves information about the font specified by a visual style for a particular part.", "GetThemeTimingFunction": "Gets a predefined timing function based on a timing function identifier.", "GetThemeTransitionDuration": "Gets the duration for the specified transition.", "GetTrimPunctuationAtStart": "Gets whether to trim the leading space of a punctuation symbol at the start of a line.", "GetTypographyOptions": "Gets the typography options.", "GetUnderline": "Gets the type of underlining for the characters in a range.", "GetUnderlinePositionMode": "Gets the underline position mode.", "GetURL": "Returns the URL text associated with a range.", "GetVersion": "Gets the version number of the Text Object Model engine.", "GetWeight": "Gets the font weight for the characters in a range.", "GetWidowControl": "Retrieves the widow and orphan control state for the paragraphs in a range.", "GetWindow": "Retrieves a handle to a window that has the specified relationship to the specified window.", "GetWindowFeedbackSetting": "Retrieves the feedback configuration for a window.", "GetWindowTheme": "Retrieves a theme handle to a window that has visual styles applied.", "GEO_ENUMNAMEPROC": "An application-defined callback function that processes enumerated geographical location information provided by the EnumSystemGeoNames function.", "get_CorrectiveAction": "Indicates which corrective action should be taken for the spelling error.", "get_Heading": "Gets the heading for the spell checker option.", "get_Id": "Gets the identifier for this spell checker.", "get_Labels": "Gets the label enumerator for the spell checker option.", "get_LanguageTag": "Gets the BCP47 language tag this instance of the spell checker supports.", "get_LocalizedName": "Gets text, suitable to display to the user, that describes this spell checker.", "get_OptionIds": "Gets all of the declared option identifiers.", "get_Replacement": "Gets the text to use as replacement text when the corrective action is replace.", "get_StartIndex": "Gets the position in the checked text where the error begins.", "get_SupportedLanguages": "Gets the set of languages/dialects supported by any of the registered spell checkers.", "GetACP": "Retrieves the current Windows ANSI code page identifier for the operating system.", "GetAppletIIDList": "Called from the IImePad interface to enumerate the IImePadApplet interfaces that are implemented.", "GetCalendarInfoA": "Retrieves information about a calendar for a locale specified by identifier.", "GetCalendarInfoEx": "Retrieves information about a calendar for a locale specified by name.", "GetCalendarInfoW": "Retrieves information about a calendar for a locale specified by identifier.", "GetConversion": "Converts the input string to converted strings.", "GetConversionModeCaps": "Gets the conversion mode capability of the IFELanguage object.", "GetCPInfo": "Retrieves information about any valid installed or available code page.", "GetCPInfoExA": "Retrieves information about any valid installed or available code page.", "GetCPInfoExW": "Retrieves information about any valid installed or available code page.", "GetCurrencyFormatA": "Formats a number string as a currency string for a locale specified by identifier.", "GetCurrencyFormatEx": "Formats a number string as a currency string for a locale specified by name.", "GetCurrencyFormatW": "Formats a number string as a currency string for a locale specified by identifier.", "GetDateFormatA": "Formats a date as a date string for a locale specified by the locale identifier.", "GetDateFormatEx": "Formats a date as a date string for a locale specified by name.", "GetDateFormatW": "Formats a date as a date string for a locale specified by the locale identifier.", "GetDictionariesInUse": "Obtains the list of Dictionary IDs of the IME plug-in dictionaries which are in use by IME, with their creation dates and encryption flags.", "GetDurationFormat": "Formats a duration of time as a time string for a locale specified by identifier.", "GetDurationFormatEx": "Formats a duration of time as a time string for a locale specified by name.", "GetFileMUIInfo": "Retrieves resource-related information about a file.", "GetFileMUIPath": "Retrieves the path to all language-specific resource files associated with the supplied LN file.", "GetGeoInfoA": "Retrieves information about a specified geographical location.", "GetGeoInfoEx": "Retrieves information about a geographic location that you specify by using a two-letter International Organization for Standardization code.", "GetGeoInfoW": "Retrieves information about a specified geographical location.", "GetHeader": "Gets a dictionary header from a dictionary file without opening the dictionary.", "GetJMorphResult": "Gets morphological analysis results.", "GetLocaleInfoA": "Retrieves information about a locale specified by identifier.", "GetLocaleInfoEx": "Retrieves information about a locale specified by name.", "GetLocaleInfoW": "Retrieves information about a locale specified by identifier.", "GetNLSVersion": "Retrieves information about the current version of a specified NLS capability for a locale specified by identifier.", "GetNLSVersionEx": "Retrieves information about the current version of a specified NLS capability for a locale specified by name.", "GetNumberFormatA": "Formats a number string as a number string customized for a locale specified by identifier.", "GetNumberFormatEx": "Formats a number string as a number string customized for a locale specified by name.", "GetNumberFormatW": "Formats a number string as a number string customized for a locale specified by identifier.", "GetOEMCP": "Returns the current original equipment manufacturer code page identifier for the operating system.", "GetOptionDescription": "Retrieves the information of a specific option.", "GetOptionValue": "Retrieves the value associated with the given option.", "GetPosTable": "Obtains the public POS table.", "GetProcessPreferredUILanguages": "Retrieves the process preferred UI languages.", "GetStringScripts": "Provides a list of scripts used in the specified Unicode string.", "GetStringTypeA": "Deprecated.", "GetStringTypeExW": "Retrieves character type information for the characters in the specified source string.", "GetStringTypeW": "Retrieves character type information for the characters in the specified Unicode source string.", "GetSystemDefaultLangID": "Returns the language identifier for the system locale.", "GetSystemDefaultLCID": "Returns the locale identifier for the system locale.", "GetSystemDefaultLocaleName": "Retrieves the system default locale name.", "GetSystemDefaultUILanguage": "Retrieves the language identifier for the system default UI language of the operating system, also known as the install language on Windows Vista and later.", "GetSystemPreferredUILanguages": "Retrieves the system preferred UI languages.", "GetTextCharset": "Retrieves a character set identifier for the font that is currently selected into a specified device context.", "GetTextCharsetInfo": "Retrieves information about the character set of the font that is currently selected into a specified device context.", "GetThreadLocale": "Returns the locale identifier of the current locale for the calling thread.", "GetThreadPreferredUILanguages": "Retrieves the thread preferred UI languages for the current thread.", "GetThreadUILanguage": "Returns the language identifier of the first user interface language for the current thread.", "GetTimeFormatA": "Formats time as a time string for a locale specified by identifier.", "GetTimeFormatEx": "Formats time as a time string for a locale specified by name.", "GetTimeFormatW": "Formats time as a time string for a locale specified by identifier.", "GetUILanguageFallbackList": "Gets a fallback list of UI languages represented as language names.", "GetUILanguageInfo": "Retrieves a variety of information about an installed UI language", "GetUserDefaultGeoName": "Retrieves the two-letter International Organization for Standardization code for the default geographical location of the user.", "GetUserDefaultLangID": "Returns the language identifier of the Region Format setting for the current user.", "GetUserDefaultLCID": "Returns the locale identifier for the user default locale.", "GetUserDefaultLocaleName": "Retrieves the user default locale name.", "GetUserDefaultUILanguage": "Returns the language identifier for the user UI language for the current user.", "GetUserGeoID": "Retrieves information about the geographical location of the user.", "GetUserPreferredUILanguages": "Retrieves information about the user preferred UI languages.", "GetWords": "Gets word entries from a dictionary.", "GetModuleFileNameA": "Retrieves the fully qualified path for the file that contains the specified module.", "GetModuleFileNameW": "Retrieves the fully qualified path for the file that contains the specified module.", "GetModuleHandleA": "Retrieves a module handle for the specified module.", "GetModuleHandleExA": "Retrieves a module handle for the specified module and increments the module's reference count unless GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT is specified.", "GetModuleHandleExW": "Retrieves a module handle for the specified module and increments the module's reference count unless GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT is specified.", "GetModuleHandleW": "Retrieves a module handle for the specified module.", "GetProcAddress": "Retrieves the address of an exported function or variable from the specified dynamic-link library.", "GetCaretBlinkTime": "Retrieves the time required to invert the caret's pixels.", "GetCaretPos": "Copies the caret's position to the specified POINT structure.", "GetClipCursor": "Retrieves the screen coordinates of the rectangular area to which the cursor is confined.", "GetCursor": "Retrieves a handle to the current cursor.", "GetCursorInfo": "Retrieves information about the global cursor.", "GetCursorPos": "Retrieves the position of the mouse cursor, in screen coordinates.", "GetDistanceOfClosestLanguageInList": "Determines the distance between the specified language code and the closest match in a list of languages.", "GetFileVersionInfoA": "Retrieves version information for the specified file.", "GetFileVersionInfoExA": "Retrieves version information for the specified file.", "GetFileVersionInfoExW": "Retrieves version information for the specified file.", "GetFileVersionInfoSizeA": "Determines whether the operating system can retrieve version information for a specified file.", "GetFileVersionInfoSizeExA": "Determines whether the operating system can retrieve version information for a specified file.", "GetFileVersionInfoSizeExW": "Determines whether the operating system can retrieve version information for a specified file.", "GetFileVersionInfoSizeW": "Determines whether the operating system can retrieve version information for a specified file.", "GetFileVersionInfoW": "Retrieves version information for the specified file.", "GetIconInfo": "Retrieves information about the specified icon or cursor.", "GetIconInfoExA": "Retrieves information about the specified icon or cursor.", "GetIconInfoExW": "Retrieves information about the specified icon or cursor.", "GetMenu": "Retrieves a handle to the menu assigned to the specified window.", "GetMenuBarInfo": "Retrieves information about the specified menu bar.", "GetMenuCheckMarkDimensions": "Retrieves the dimensions of the default check-mark bitmap.", "GetMenuDefaultItem": "Determines the default menu item on the specified menu.", "GetMenuInfo": "Retrieves information about a specified menu.", "GetMenuItemCount": "Determines the number of items in the specified menu.", "GetMenuItemID": "Retrieves the menu item identifier of a menu item located at the specified position in a menu.", "GetMenuItemInfoA": "Retrieves information about a menu item.", "GetMenuItemInfoW": "Retrieves information about a menu item.", "GetMenuItemRect": "Retrieves the bounding rectangle for the specified menu item.", "GetMenuState": "Retrieves the menu flags associated with the specified menu item.", "GetMenuStringA": "Copies the text string of the specified menu item into the specified buffer.", "GetMenuStringW": "Copies the text string of the specified menu item into the specified buffer.", "GetPhysicalCursorPos": "Retrieves the position of the cursor in physical coordinates.", "GetSubMenu": "Retrieves a handle to the drop-down menu or submenu activated by the specified menu item.", "GetSystemMenu": "Enables the application to access the window menu for copying and modifying.", "GetOleaccVersionInfo": "Retrieves the version number and build number of the Microsoft Active Accessibility file Oleacc.dll.", "GetRoleTextA": "Retrieves the localized string that describes the object's role for the specified role value.", "GetRoleTextW": "Retrieves the localized string that describes the object's role for the specified role value.", "GetStateTextA": "Retrieves a localized string that describes an object's state for a single predefined state bit flag.", "GetStateTextW": "Retrieves a localized string that describes an object's state for a single predefined state bit flag.", "get_Application": "Gets the application object.", "get_CurrentViewMode": "Gets the current view mode of the current folder.", "get_FocusedItem": "Gets the FolderItem object that represents the item that has input focus.", "get_Folder": "Gets the Folder object that represents the view.", "get_FolderFlags": "Gets the settings for the current folder.", "get_GroupBy": "Gets the column used for grouping the folder view.", "get_IconSize": "Gets the icon size setting for the current folder.", "get_Parent": "Not implemented.", "get_Script": "Gets the scripting object for the view.", "get_SortColumns": "Gets the names of the columns used to sort the current folder.", "get_ViewOptions": "Gets a set of flags that indicate the current options of the view.", "GetAcceptLanguagesA": "Retrieves a string used with websites when specifying language preferences.", "GetAcceptLanguagesW": "Retrieves a string used with websites when specifying language preferences.", "GetAccountOptions": "Retrieves a value that indicates whether the Other user tile for local or Microsoft accounts is shown in the logon or credential UI.", "GetAllUsersProfileDirectoryA": "Retrieves the path to the root of the directory that contains program data shared by all users.", "GetAllUsersProfileDirectoryW": "Retrieves the path to the root of the directory that contains program data shared by all users.", "GetAnyOperationsAborted": "The operations could be stopped either by user action or silently by the system.", "GetAppContainerFolderPath": "Gets the path of the local app data folder for the specified app container.", "GetAppContainerRegistryLocation": "Gets the location of the registry storage associated with an app container.", "GetAppID": "Retrieves a file type handler's explicit Application User Model ID, if one has been declared.", "GetAppInfo": "Gets general information about an application.", "GetApplicationDisplayName": "Retrieves the display name of the application that implemented the handler.", "GetApplicationIconReference": "Retrieves the icon of the application that implemented the handler.", "GetApplicationPublisher": "Retrieves the name of the publisher of the application that implemented the handler.", "GetApplicationSizeBounds": "This methods retrieves the size bounds supported by the application.", "GetApplicationViewOrientation": "Gets the orientation of the application design mode window.", "GetAppName": "Retrieves the name of the application that is using the file.", "GetAppUserModelId": "Retrieves an AppUserModelId from the source application.", "GetAppVisibilityOnMonitor": "Queries the current mode of the specified monitor.", "GetArguments": "Gets the command-line arguments associated with a Shell link object.", "GetArrangeParam": "Gets the arrangement parameter of the view, which is how the view has been sorted.", "GetAsyncMode": "Called by a drop target to determine whether the data object supports asynchronous data extraction.", "GetAttributes": "Gets resource attributes.", "GetAttributesOf": "Gets the attributes of one or more file or folder objects contained in the object represented by IShellFolder.", "GetAutoArrange": "Gets the current state of the folder's Auto Arrange mode.", "GetAvailableSize": "Retrieves the dimensions available on a specific screen for displaying an accessibility window.", "GetBackgroundColor": "Retrieves the color that is visible on the desktop when no image is displayed or when the desktop background has been disabled.", "GetBandInfo": "Gets state information for a band object.", "GetBandInfoSFB": "Gets information concerning an IShellFolderBand object and places it in a BANDINFOSFB structure.", "GetBandObject": "Gets a specified band object from a band site.", "GetBandSiteInfo": "Gets information about a band in the band site.", "GetBaseBrowserData": "Gets a read-only structure containing the protected elements owned by the base class, for the purpose of determining state.", "GetBitmapValue": "Enables retrieval of bitmap data from a credential with a bitmap field.", "GetBool": "Gets the boolean value of a specified property key.", "GetBorderDW": "Gets the border space allocated for the specified IDockingWindow object.", "GetBrowserByIndex": "Deprecated.", "GetBrowserIndex": "Deprecated.", "GetCachedSlowAppInfo": "Unlike IShellApp::GetSlowAppInfo, this method can return information that has been cached.", "GetCancelEvent": "Retrieves an event that will be sent when an operation is canceled.", "GetCancelInformation": "Returns information that is posted when a user selects Cancel from the progress UI.", "GetCancelledPage": "Called when the user cancels navigation through the wizard extension.", "GetCanonicalName": "Gets the GUID of a Windows Explorer command.", "GetCapabilities": "Gets a set of flags describing the item's defined capabilities.", "GetCategories": "Retrieves a structure listing the categories provided by an application publisher.", "GetCategory": "Retrieves the category\u00ef\u00bf\u00bdvirtual, fixed, common, or per-user\u00ef\u00bf\u00bdof the selected folder.", "GetCategoryForSCID": "Gets a GUID that represents the categorizer to use for the specified Shell column.", "GetCategoryInfo": "Gets information about a category, such as the default display and the text to display in the UI.", "GetCategoryName": "Gets the name of the specified category.", "GetCheckboxValue": "Retrieves the checkbox value.", "GetCheckButtonState": "Gets the current state of a check button in the dialog.", "GetCheckState": "Gets the state of a check box item in a tree-view control.", "GetClient": "Gets the client object.", "GetCLSID": "Gets the class identifier value of specified property key.", "GetCodePage": "Retrieves the numeric value of the ANSI code page.", "GetColor": "Gets the color, as specified.", "GetColumnInfo": "Gets information about each column:_width, visibility, display name, and state.", "GetColumnPropertyList": "Gets an ordered list of columns that corresponds to the column enumerated.", "GetColumns": "Includes either all columns or only those currently visible.", "GetComboBoxValueAt": "Gets the string label for a combo box entry at the given index.", "GetComboBoxValueCount": "Gets a count of the items in the specified combo box and designates which item should have initial selection.", "GetCommand": "Gets a specified Explorer command instance.", "GetCommands": "Gets a specified Explorer command enumerator instance.", "GetCommandString": "Gets information about a shortcut menu command, including the help string and the language-independent, or canonical, name for the command.", "GetComment": "Gets a string that contains commentary regarding the item.", "GetCompositionState": "Gets the composition state.", "GetCondition": "Retrieves the contents of the search box as an ICondition object.", "GetConflictIdInfo": "Gets information that identifies a conflict within a conflict store.", "GetConflictIDList": "Maps a conflict to its IShellItem.", "GetContext": "Gets a context object that can be used by a handler to display properties or execute a context menu action.", "GetControlItemState": "Gets the current state of an item in a container control found in the dialog.", "GetControlState": "Gets the current visibility and enabled states of a given control.", "GetControlStyle": "Gets the display styles set for the namespace object's treeview controls.", "GetControlStyle2": "Gets the extended display styles set for the namespace object's treeview controls.", "GetControlWindow": "Gets the window handle to a browser control.", "GetCreateFlags": "Gets the additional flags that will be passed to CreateProcess.", "GetCredentialAt": "Gets a specific credential.", "GetCredentialCount": "Gets the number of available credentials under this credential provider.", "GetCurFolder": "Gets the ITEMIDLIST for the folder object.", "GetCurrentFilter": "Gets the current filter as a Unicode string.", "GetCurrentFolderFlags": "Gets the currently applied folder flags.", "GetCurrentInfo": "Gets the current folder settings.", "GetCurrentPage": "Gets the current page of a multipage image.", "GetCurrentProcessExplicitAppUserModelID": "Retrieves the application-defined, explicit Application User Model ID for the current process.", "GetCurrentSelection": "Retrieves the selected elements in the container.", "GetCurrentView": "Gets the most recent Control Panel view:_Classic view or Category view.", "GetCurrentViewMode": "Gets an address containing a value representing the folder's current view mode.", "GetDataFormatFromPath": "Determines a file's format based on its extension.", "GetDataFromIDList": "Gets a read only pointer to the client provided structure in the first ItemID in the IDList.", "GetDataObject": "Gets an IDataObject representation of the current DataPackage object.", "GetDateStamp": "Requests the date the image was last modified.", "GetDefaultBandWidth": "Gets the band width that the bandsite initially uses to set the default width when the band is added.", "GetDefaultCategory": "Enables the folder to override the default grouping.", "GetDefaultColumn": "Gets the default sorting and display columns.", "GetDefaultColumnState": "Gets the default state for a specified column.", "GetDefaultDestinationName": "Gets the default name for a Shell item.", "GetDefaultMenuText": "Called by the Shell view to get the default shortcut menu text.", "GetDefaultSaveFolder": "Retrieves the default target folder that the library uses for save operations.", "GetDefaultSearchGUID": "Returns the globally unique identifier of the default search object for the folder.", "GetDefaultSpacing": "Gets a pointer to a POINT structure containing the default width measurements of an item, including the surrounding white space.", "GetDefaultUserProfileDirectoryA": "Retrieves the path to the root of the default user's profile.", "GetDefaultUserProfileDirectoryW": "Retrieves the path to the root of the default user's profile.", "GetDelay": "Gets the delay value for the current frame of an animation.", "GetDelayedPropertyStore": "Gets an IPropertyStore interface object, as specified.", "GetDestinationStream": "Gets an empty stream that receives the new version of the file being copied.", "GetDetailsEx": "Gets detailed information, identified by a property set identifier, on an item in a Shell folder.", "GetDetailsOf": "Gets detailed information, identified by a column index, on an item in a Shell folder.", "GetDirectory": "Gets the current working directory.", "GetDisplayNameOf": "Retrieves the display name for the specified file object or subfolder.", "GetDpiForShellUIComponent": "Retrieves the dots per inch occupied by a SHELL_UI_COMPONENT based on the current scale factor and PROCESS_DPI_AWARENESS.", "GetDragPoint": "Gets the point at which the current drag-and-drop operation was initiated.", "GetDropDownStatus": "Gets the current display status of the autocomplete drop-down list.", "GetDropPoint": "Gets the point at which the current drag-and-drop operation was terminated.", "GetDynamicInfo": "Called by the system to determine whether a particular handler will be shown before the AutoPlay dialog is displayed.", "GetEditBoxText": "Gets the current text in an edit box control.", "GetEncoderParams": "Gets the current set of encoder parameters.", "GetEntry": "Retrieves an entry from the proxy factory table.", "GetEnum": "This method is not implemented.", "GetEnumFlags": "When used with SHBrowseForFolder, specifies the class or classes of items that should be shown in the dialog box tree view and which class or classes should not.", "GetEnumFlagsForItem": "Allows a client to specify which classes of objects in a Shell item should be enumerated for inclusion in the view.", "GetEvent": "Gets a specified event object.", "GetEventCount": "Gets the event count.", "GetEventEnumerator": "Gets an enumerator for a handler's events.", "GetEventID": "Gets the event ID.", "GetExtension": "Gets the file name extension for the shortcut object.", "GetFieldDescriptorAt": "Gets metadata that describes a specified field.", "GetFieldDescriptorCount": "Retrieves the count of fields in the needed to display this provider's credentials.", "GetFieldOptions": "Called by the credential provider framework.", "GetFieldState": "The Logon UI and Credential UI use this to gain information about a field of a credential to display this information in the user tile.", "GetFileID": "Gets the unique file identifier for the current file.", "GetFileName": "Retrieves the text currently entered in the dialog's File name edit box.", "GetFileNameFromBrowse": "Creates an Open dialog box so that the user can specify the drive, directory, and name of a file to open.", "GetFileOverlayInfo": "Gets the index of the icon overlay or the icon image for the specified file with the specified attributes.", "GetFileTypeIndex": "Gets the currently selected file type.", "GetFindData": "Gets the file system information stored in the WIN32_FIND_DATA structure.", "GetFirstPage": "Gets a handle to the first page of the wizard extension.", "GetFocusedItem": "Gets the index of the item that currently has focus in the folder's view.", "GetFolder": "Gets an object that represents a known folder identified by its KNOWNFOLDERID.", "GetFolderByName": "Gets an object that represents a known folder identified by its canonical name.", "GetFolderCapabilities": "Gets a folder's capability to be filtered through the System.", "GetFolderDefinition": "Retrieves a structure that contains the defining elements of a known folder, which includes the folder's category, name, path, description, tooltip, icon, and other properties.", "GetFolderFlags": "Gets folder view options flags.", "GetFolderIds": "Gets an array of all registered known folder IDs.", "GetFolders": "Gets the set of child folders that are contained in the library.", "GetFolderSetData": "Gets a structure containing folder information.", "GetFolderTargetInfo": "Provides the location and attributes of a folder shortcut's target folder.", "GetFolderType": "Gets the library's folder type.", "GetFolderViewOptions": "Retrieves the current set of options for the view.", "GetFormat": "Retrieves the alpha type of the bitmap image.", "GetForWindow": "Gets the DataTransferManager instance for the specified window.", "GetFrameOptions": "Retrieves the available browser frame view options.", "GetGroupBy": "Retrieves the property and sort order used for grouping items in the folder display.", "GetGroupByProperty": "Gets a grouping property.", "GetGroupSubsetCount": "Gets group count for visible rows.", "GetHandlerEnumerator": "Gets an enumerator that provides access to the IDs of sync handlers exposed to and managed by the user.", "GetHandlerID": "Gets the ID of the handler for which the event was logged.", "GetHandlerInfo": "Obtains handler information.", "GetHandlerRegistrationInfo": "Called by the registered application's handler to get current registration information.", "GetHistoryObject": "Deprecated.", "GetHotkey": "Gets the keyboard shortcut for a Shell link object.", "GetIconLocation": "Gets the location of the icon for a Shell link object.", "GetIconOf": "Gets an icon for an object inside a specific folder.", "GetIDArrayResult": "Gets a list of objects found during a namespace walk initiated by INamespaceWalk::Walk.", "GetIDList": "Gets the list of item identifiers for the target of a Shell link object.", "GetImage": "Gets an HBITMAP that represents an IShellItem.", "GetInfoFlags": "Gets the information flags for an item.", "GetInfoTip": "Gets the info tip text for an item.", "GetInt32": "Gets the Int32 value of specified property key.", "GetItem": "Retrieves a UI Automation element representing an item in the grid.", "GetItemAt": "Gets the item at the given index in the IShellItemArray.", "GetItemChoice": "Gets the index of an item that the user wants to keep.", "GetItemChoiceCount": "Gets the number of items that the user wants to keep.", "GetItemCustomState": "Gets the state of the checkbox associated with a given Shell item.", "GetItemData": "Requests column data for a specified file.", "GetItemHeight": "Gets the item height.", "GetItemID": "Gets the unique ID of a sync item.", "GetItemIDList": "Gets the pointer to an item identifier list for the item that is related.", "GetItemInfo": "Gets the properties of a sync item.", "GetItemObject": "Obtains an interface on a specified item that a registered application handles.", "GetItemPosition": "Gets the position of an item in the folder's view.", "GetItemRect": "Gets the RECT structure that describes the size and position of a given item.", "GetItemsArray": "Retrieves a conflict items array.", "GetItemSpacing": "Gets the spacing for small and large view modes only.", "GetItemState": "Gets state information about a Shell item.", "GetIterationInfo": "Gets information about which conflict in a set of conflicts is being resolved.", "GetJunctionCLSID": "Gets the class identifier of the object that implements IShellFolder for the item, if the item is a junction point.", "GetKey": "Searches for and retrieves a file or protocol association-related key from the registry.", "GetLastPage": "Gets a handle to the final page of the wizard extension pages.", "GetLastSyncTime": "Gets the date and time when the item was last synchronized.", "GetLevel": "Gets the log level of the event.", "GetLinkReference": "Gets the reference for the hot link for the event.", "GetLinkText": "Gets the text for the hot link for the event.", "GetList": "Retrieves an object that represents the collection of destinations listed in the Recent or Frequent category in a Jump List.", "GetLocation": "Gets a path to the image that is to be extracted.", "GetMenuContextHelpId": "Retrieves the Help context identifier associated with the specified menu.", "GetMenuPosFromID": "GetMenuPosFromID may be altered or unavailable.", "GetMenuRestrictions": ".", "GetMilliseconds": "Gets elapsed and remaining time for progress dialog.", "GetMode": "Retrieves the enumeration mode of the parsed item.", "GetMonitor": "Retrieves the target monitor for the application being launched.", "GetMonitorDevicePathAt": "Retrieves the unique ID of one of the system's monitors.", "GetMonitorDevicePathCount": "Retrieves the number of monitors that are associated with the system.", "GetMonitorRECT": "Retrieves the display rectangle of the specified monitor.", "GetNameAt": "Gets the name of a property at a specified index in the property store.", "GetNamedValue": "Gets the value of a named property from the named property store.", "GetNavigateState": "Deprecated.", "GetNextItem": "Retrieves the next item in the tree according to which method is requested.", "GetNextPage": "Gets the handle of the PROPSHEETPAGE that represents the wizard page immediately following the wizard extension page.", "GetNumberOfApps": "Clients of Add/Remove Programs Control Panel Application can return E_NOTIMPL.", "GetNumberOfCategories": "Clients of the Add/Remove Programs Control Panel Application may return E_NOTIMPL.", "GetOleObject": "Deprecated.", "GetOperationStatus": "Gets operation status for progress dialog.", "GetOptions": "Gets the library's options.", "GetOverlayIconIndex": "Gets the index of the icon overlay in the system image list.", "GetOverlayIndex": "Gets the overlay index in the system image list.", "GetOverlayInfo": "Provides the location of the icon overlay's bitmap.", "GetPackageExecutionState": "Returns the current execution state of the specified package.", "GetPageCount": "Gets the number of pages in a multipage image.", "GetPalette": "Deprecated.", "GetPaneState": "Gets the visibility state of the given Windows Explorer pane.", "GetParent": "Retrieves a handle to the specified window's parent or owner.", "GetParentAndItem": "Gets the parent of an item and the parent's child ID.", "GetParentSite": "Deprecated.", "GetPath": "Gets the path and file name of the target of a Shell link object.", "GetPidl": "Deprecated.", "GetPinnedWindow": "Gets the handle to the current pinned window, if one exists.", "GetPixelFormat": "Gets the pixel format of the image.", "GetPolicies": "Gets a set of flags describing the policies set by the item.", "GetPossibleActions": "Gets a bitmask of management actions allowed for an application.", "GetPresenterChoice": "Gets what kind of choice was made and whether to apply the choice to all subsequent conflicts in the set.", "GetPresenterNextStep": "Gets what the presenter wants to do as the next step in the sync manager conflict resolution.", "GetPreviousPage": "Gets the handle of the PROPSHEETPAGE that represents the wizard page that is before the wizard extension page.", "GetProcessReference": "Retrieves the process-specific object supplied by SetProcessReference, incrementing the reference count to keep the process alive.", "GetProfilesDirectoryA": "Retrieves the path to the root directory where user profiles are stored.", "GetProfilesDirectoryW": "Retrieves the path to the root directory where user profiles are stored.", "GetProfileType": "Retrieves the type of profile loaded for the current user.", "GetProgID": "Retrieves the ProgID associated with an object.", "GetProperties": "Gets an IPropertySetStorage through which the properties of the image can be accessed.", "GetPropertyDescriptionList": "Gets a property description list for the items in the shell item array.", "GetPropertyFromIDList": "Gets a property from the IPropertyStore within the IDList as a variant, using the key.", "GetPropertyHandlerFromFileId": "Gets an instance of IStorageProviderPropertyHandler associated with the provided file identifier.", "GetPropertyHandlerFromPath": "Gets an instance of IStorageProviderPropertyHandler associated with the provided path.", "GetPropertyHandlerFromUri": "Gets an instance of IStorageProviderPropertyHandler associated with the provided URI.", "GetPropertyKey": "Gets the property key.", "GetPropertyStorage": "Gets a read only pointer to the serialized property storage that is used for storing metadata.", "GetPropertyStorageBuffer": "Gets the serialized property storage buffer from the property store instance.", "GetPropertyStorageFromIDList": "Create an instance of the IPropertyStore based on the serialized property storage associated with the first ItemID.", "GetPropertyStorageSize": "Gets the size of serialized property storage data from the property store instance.", "GetPropertyStore": "Gets a property store.", "GetPropertyStoreForKeys": "Gets property store object for specified property keys.", "GetPropertyStoreWithCreateObject": "Uses the specified ICreateObject instead of CoCreateInstance to create an instance of the property handler associated with the Shell item on which this method is called.", "GetProviderID": "Retrieves the ID of the account provider for this user.", "GetPublishedAppInfo": "Gets publishing-related information about an application published by an application publisher.", "GetRawDataFormat": "Retrieves a GUID that identifies the format of the image.", "GetRecorderDriveLetter": "Gets the drive letter of a CD drive that has been marked as write-enabled.", "GetRedirectionCapabilities": "Gets a value that states whether the known folder can have its path set to a new value or what specific restrictions or prohibitions are placed on that redirection.", "GetReferent": "Gets the referent of the shortcut object.", "GetRemovedDestinations": "Retrieves the current list of destinations that have been removed by the user from the existing Jump List that this custom Jump List is meant to replace.", "GetReservedOverlayInfo": "Gets the index of the icon overlay or the icon image for the specified file with the specified attributes from one of the reserved overlays.", "GetResolution": "Gets the resolution, in dots per inch, of the image.", "GetResolutionHandler": "Gets the resolution handler for the conflict.", "GetResourceDescription": "Gets a resource description.", "GetResult": "Gets the choice that the user made in the dialog.", "GetResults": "Returns search results, from an OpenSearch data source, formatted in RSS or Atom format.", "GetRootItems": "Gets an array of the root items.", "GetScaleFactorForDevice": "Gets the preferred scale factor for a display device.", "GetScaleFactorForMonitor": "Gets the scale factor of a specific monitor.", "GetSearchStyle": "Overrides the registry settings that determine how an autosearch is performed.", "GetSearchText": "Retrieves the text that is in the browser's Address bar.", "GetSearchUrl": "Retrieves the URL that is being searched for.", "GetSectorSize": "Retrieves the number of bytes per sector on the disk currently being used.", "GetSelectedControlItem": "Gets a particular item from specified container controls in the dialog.", "GetSelectedCount": "Gets the number of items in the view that are selected.", "GetSelectedItem": "Locates the currently selected item at or after a given index.", "GetSelectedItems": "Gets an array of selected Shell items.", "GetSelectedObjects": "Gets an array of the objects in the view that are selected and the number of those objects.", "GetSelectionMarkedItem": "Gets the index of an item in the folder's view which has been marked by using the SVSI_SELECTIONMARK in IFolderView::SelectItem.", "GetSelectionState": "Gets the selection state including check state.", "GetSerialization": "Called in response to an attempt to submit this credential to the underlying authentication engine.", "GetSetCodePage": "Sets a new character code page and retrieves a pointer to the previous code page.", "GetSharedBitmap": "Retrieves the bitmap contained in an ISharedBitmap object.", "GetSharePermissions": "Gets the access permissions currently associated with the User or Public folder for the Everyone access control entry.", "GetShellFolder": "Gets the folder that the menu band is set to browse.", "GetShellItem": "Gets the search folder as a IShellItem.", "GetShowCmd": "Gets the show command for a Shell link object.", "GetSlideshowOptions": "Gets the current desktop wallpaper slideshow settings for shuffle and timing.", "GetSlowAppInfo": "Returns information to the application that originates from a slow source.", "GetSortColumnCount": "Gets the count of sort columns currently applied to the view.", "GetSortColumns": "Gets sort column information.", "GetSourceViewSizePreference": "Retrieves the view size preference of the application after the application has launched.", "GetSourceViewToPosition": "Retrieves the position of the source application window.", "GetString": "Searches for and retrieves a file or protocol association-related string from the registry.", "GetStringValue": "Retrieves string properties from the ICredentialProviderUser object based on the input value.", "GetSubmitButtonValue": "Retrieves the identifier of a field that the submit button should be placed next to in the Logon UI.", "GetSupportedActionTypes": "Determines the supported data type for a CD writing extension.", "GetSwitchToHWND": "Retrieves the handle of the top-level window of the application that is using the file.", "GetSyncItem": "Gets a specified sync item.", "GetSyncItemCount": "Gets a count of the sync items in the container.", "GetSyncItemEnumerator": "Gets an interface that enumerates the handler's sync items.", "GetTargetViewSizePreference": "Retrieves the preferred view size of the application being launched.", "GetThumbnail": "Gets a thumbnail image and alpha type.", "GetThumbnailByID": "Gets a thumbnail from the thumbnail cache, given its ID.", "GetThumbnailHandler": "Gets the requested thumbnail handler for the thumbnail of a given item.", "GetThumbnailStream": "This method is for internal use only and can only be called by the photos application.", "GetTime": "Gets the creation time.", "GetTitle": "Deprecated.", "GetToolTip": "Gets the tooltip string associated with a specified Windows Explorer command item.", "GetToolTipText": "Deprecated.", "GetTransferManifest": "Gets a transfer manifest for a file transfer operation performed by a publishing wizard, such as the Online Print Wizard or the Add Network Place Wizard.", "GetTravelEntry": "Gets a travel entry in the travel log relative to the position of the current entry.", "GetTravelLog": "Deprecated.", "GetTypeLabel": "Gets a label for the item type.", "GetUIMode": "Enables an IExplorerCommand-based Shell verb handler to query the UI mode of the host component from which the application was invoked..", "GetUIName": "Retrieves the display name of an application.", "GetUInt32": "Gets the UInt32 value of a specified property key.", "GetUInt64": "Gets the UInt64 value of a specified property key.", "GetUIObjectOf": "Gets an object that can be used to carry out actions on the specified file objects or folders.", "GetUsage": "Gets a value that indicates how the file in use is being used.", "GetUserProfileDirectoryA": "Retrieves the path to the root directory of the specified user's profile.", "GetUserProfileDirectoryW": "Retrieves the path to the root directory of the specified user's profile.", "GetUserSid": "Retrieves the security identifier of the user that is associated with this credential.", "GetValidCharacters": "Loads a string that contains each of the characters that are valid or invalid in the namespace under which it is called.", "GetView": "Requests the current or default Shell view, together with all other valid view identifiers supported by this implementation of IShellView2.", "GetViewFlags": "Called when the view must determine if special customization needs to be made for the common dialog browser.", "GetViewMode": "Gets a folder's logical view mode.", "GetViewModeAndIconSize": "Gets the current view mode and icon size applied to the view.", "GetViewProperty": "Gets a property value for a given property key from the view's cache.", "GetViewRect": "Deprecated.", "GetViewStateStream": "Gets an IStream interface that can be used for storage of view-specific state information.", "GetViewWindow": "Deprecated.", "GetVisibleItem": "Gets the next visible item in relation to a given index in the view.", "GetWallpaper": "Gets the current desktop wallpaper.", "GetWindowContext": "Gets a list of the keyboard shortcuts for the preview host.", "GetWindowContextHelpId": "Retrieves the Help context identifier, if any, associated with the specified window.", "GetWindowDesktopId": "Gets the identifier for the virtual desktop hosting the provided top-level window.", "GetWorkingDirectory": "Gets the name of the working directory for a Shell link object.", "GroupChildWithParent": "ISuspensionDependencyManager::GroupChildWithParent method", "get_accChild": "The IAccessible::get_accChild method retrieves an IDispatch for the specified child, if one exists.", "get_accChildCount": "The IAccessible::get_accChildCount method retrieves the number of children that belong to this object.", "get_accDefaultAction": "The IAccessible::get_accDefaultAction method retrieves a string that indicates the object's default action.", "get_accDescription": "The IAccessible::get_accDescription method retrieves a string that describes the visual appearance of the specified object.", "get_accFocus": "The IAccessible::get_accFocus method retrieves the object that has the keyboard focus.", "get_accHelp": "The IAccessible::get_accHelp method retrieves the Help property string of an object.", "get_accHelpTopic": "The IAccessible::get_accHelpTopic method retrieves the full path of the WinHelp file that is associated with the specified object; it also retrieves the identifier of the appropriate topic within that file.", "get_accKeyboardShortcut": "The IAccessible::get_accKeyboardShortcut method retrieves the specified object's shortcut key or access key, also known as the mnemonic.", "get_accName": "The IAccessible::get_accName method retrieves the name of the specified object.", "get_accParent": "The IAccessible::get_accParent method retrieves the IDispatch of the object's parent.", "get_accRole": "The IAccessible::get_accRole method retrieves information that describes the role of the specified object.", "get_accSelection": "All objects that support selection must support this property.", "get_accState": "The IAccessible::get_accState method retrieves the current state of the specified object.", "get_accValue": "The IAccessible::get_accValue method retrieves the value of the specified object.", "get_AllowSubstringMatch": "Sets or retrieves a value that specifies whether the proxy allows substring matching.", "get_AnnotationTypeId": "The annotation type identifier of this annotation.", "get_AnnotationTypeName": "The name of this annotation type.", "get_Author": "The name of the annotation author.", "get_AutomationElementMode": "Indicates whether returned elements contain full references to the underlying UI, or only cached information.", "get_AutoSetFocus": "Specifies whether calls to UI Automation control pattern methods automatically set focus to the target element.", "get_BooleanValue": "Retrieves the value of the condition:_either TRUE or FALSE.", "get_BoundingRectangle": "Specifies the bounding rectangle of this element.", "get_CachedAcceleratorKey": "Retrieves the cached accelerator key for the element.", "get_CachedAccessKey": "Retrieves the cached access key character for the element.", "get_CachedAnnotationObjects": "Returns the cached list of annotation objects associated with this element, such as comment, header, footer, and so on.", "get_CachedAnnotationTypeId": "Retrieves a cached value that identifies this annotation's type.", "get_CachedAnnotationTypeName": "Retrieves the cached localized name of this annotation's type.", "get_CachedAnnotationTypes": "Returns the cached list of annotation types associated with this element, such as comment, header, footer, and so on.", "get_CachedAriaProperties": "Retrieves the cached Accessible Rich Internet Applications properties of the element.", "get_CachedAriaRole": "Retrieves the cached Accessible Rich Internet Applications role of the element.", "get_CachedAuthor": "Retrieves the cached name of the annotation author.", "get_CachedAutomationId": "Retrieves the cached Microsoft UI Automation identifier of the element.", "get_CachedBoundingRectangle": "Retrieves the cached coordinates of the rectangle that completely encloses the element.", "get_CachedCanMaximize": "Retrieves a cached value that indicates whether the window can be maximized.", "get_CachedCanMinimize": "Retrieves a cached value that indicates whether the window can be minimized.", "get_CachedCanMove": "Retrieves a cached value that indicates whether the element can be moved.", "get_CachedCanResize": "Retrieves a cached value that indicates whether the element can be resized.", "get_CachedCanRotate": "Retrieves a cached value that indicates whether the element can be rotated.", "get_CachedCanSelectMultiple": "Retrieves a cached value that indicates whether more than one item in the container can be selected at one time.", "get_CachedCanZoom": "Retrieves a cached value that indicates whether the control supports zooming of its viewport.", "get_CachedChildId": "Retrieves the cached Microsoft Active Accessibility child identifier for the element.", "get_CachedClassName": "Retrieves the cached class name of the element.", "get_CachedColumn": "Retrieves the cached zero-based index of the column that contains the grid item.", "get_CachedColumnCount": "Retrieves the cached number of columns in the grid.", "get_CachedColumnSpan": "Retrieves the cached number of columns spanned by the grid item.", "get_CachedContainingGrid": "Retrieves the cached element that contains the grid item.", "get_CachedControllerFor": "Retrieves a cached array of UI Automation elements for which this element serves as the controller.", "get_CachedControlType": "Retrieves a cached value that indicates the control type of the element.", "get_CachedCulture": "Retrieves a cached value that indicates the culture associated with the element.", "get_CachedCurrentSelectedItem": "Gets a cached IUIAutomationElement object representing the currently selected item.", "get_CachedCurrentView": "Retrieves the cached control-specific identifier of the current view of the control.", "get_CachedDateTime": "Retrieves the cached date and time that this annotation was created.", "get_CachedDefaultAction": "Retrieves the Microsoft Active Accessibility cached default action for the element.", "get_CachedDescribedBy": "Retrieves a cached array of elements that describe this element.", "get_CachedDescription": "Retrieves the cached Microsoft Active Accessibility description of the element.", "get_CachedDockPosition": "Retrieves the cached dock position of this element within its docking container.", "get_CachedDropEffect": "Retrieves a cached localized string that indicates what happens when the user drops this element as part of a drag-and-drop operation.", "get_CachedDropEffects": "Retrieves a cached array of localized strings that enumerate the full set of effects that can happen when the user drops this element as part of a drag-and-drop operation.", "get_CachedDropTargetEffect": "Retrieves a cached localized string that describes what happens when the user drops the grabbed element on this drop target.", "get_CachedDropTargetEffects": "Retrieves a cached array of localized strings that enumerate the full set of effects that can happen when the user drops a grabbed element on this drop target as part of a drag-and-drop operation.", "get_CachedExpandCollapseState": "Retrieves a cached value that indicates the state, expanded or collapsed, of the element.", "get_CachedExtendedProperties": "Retrieves a cached localized string that contains the list of extended properties for an element in a document.", "get_CachedFillColor": "Retrieves the cached fill color of an element in a document.", "get_CachedFillPatternColor": "Retrieves the cached color of the pattern used to fill an element in a document.", "get_CachedFirstSelectedItem": "Gets a cached IUIAutomationElement object representing the first item in a group of selected items.", "get_CachedFlowsFrom": "Retrieves a cached array of elements that indicate the reading order before the current element.", "get_CachedFlowsTo": "Retrieves a cached array of elements that indicate the reading order after the current element.", "get_CachedFormula": "Retrieves the cached formula for this cell.", "get_CachedFrameworkId": "Retrieves the cached name of the underlying UI framework associated with the element.", "get_CachedFullDescription": "Gets the cached full description of the automation element.", "get_CachedHasKeyboardFocus": "A cached value that indicates whether the element has keyboard focus.", "get_CachedHeadingLevel": "Gets the cached heading level of the automation element.", "get_CachedHelp": "Retrieves the cached Microsoft Active Accessibility help string for the element.", "get_CachedHelpText": "Retrieves the cached help text for the element.", "get_CachedHorizontallyScrollable": "Retrieves a cached value that indicates whether the element can scroll horizontally.", "get_CachedHorizontalScrollPercent": "Retrieves the cached horizontal scroll position.", "get_CachedHorizontalViewSize": "Retrieves the cached horizontal size of the viewable region of a scrollable element.", "get_CachedIsContentElement": "A cached value that indicates whether the element is a content element.", "get_CachedIsControlElement": "Retrieves a cached value that indicates whether the element is a control element.", "get_CachedIsDataValidForForm": "Retrieves a cached value that indicates whether the element contains valid data for the form.", "get_CachedIsDialog": "Retrieves the cached is dialog window indicator for the element.", "get_CachedIsEnabled": "Retrieves a cached value that indicates whether the element is enabled.", "get_CachedIsGrabbed": "Retrieves a cached value that indicates whether this element has been grabbed as part of a drag-and-drop operation.", "get_CachedIsKeyboardFocusable": "Retrieves a cached value that indicates whether the element can accept keyboard focus.", "get_CachedIsModal": "Retrieves a cached value that indicates whether the window is modal.", "get_CachedIsOffscreen": "Retrieves a cached value that indicates whether the element is off-screen.", "get_CachedIsPassword": "Retrieves a cached value that indicates whether the element contains a disguised password.", "get_CachedIsPeripheral": "Retrieves the cached peripheral UI indicator for the element.", "get_CachedIsReadOnly": "Retrieves a cached value that indicates whether the value of the element is read-only.", "get_CachedIsRequiredForForm": "Retrieves a cached value that indicates whether the element is required to be filled out on a form.", "get_CachedIsSelected": "A cached value that indicates whether this item is selected.", "get_CachedIsSelectionRequired": "Retrieves a cached value that indicates whether at least one item must be selected at all times.", "get_CachedIsTopmost": "Retrieves a cached value that indicates whether the window is the topmost element in the z-order.", "get_CachedItemCount": "Gets a cached integer value indicating the number of selected items.", "get_CachedItemStatus": "Retrieves a cached description of the status of an item within an element.", "get_CachedItemType": "Retrieves a cached string that describes the type of item represented by the element.", "get_CachedKeyboardShortcut": "Retrieves the cached Microsoft Active Accessibility keyboard shortcut property for the element.", "get_CachedLabeledBy": "Retrieves the cached element that contains the text label for this element.", "get_CachedLandmarkType": "Gets the cached landmark type ID for the automation element.", "get_CachedLargeChange": "Retrieves, from the cache, the value that is added to or subtracted from the value of the control when a large change is made, such as when the PAGE DOWN key is pressed.", "get_CachedLastSelectedItem": "Gets a cached IUIAutomationElement object representing the last item in a group of selected items.", "get_CachedLevel": "Returns the cached 1-based integer for the level for the element.", "get_CachedLiveSetting": "Retrieves a cached value that indicates the type of notifications, if any, that the element sends when the content of the element changes.", "get_CachedLocalizedControlType": "Retrieves the cached localized description of the control type of the element.", "get_CachedLocalizedLandmarkType": "Gets a string containing the cached localized landmark type for the automation element.", "get_CachedMaximum": "Retrieves the cached maximum value of the control.", "get_CachedMinimum": "Retrieves the cached minimum value of the control.", "get_CachedName": "Retrieves the cached Microsoft Active Accessibility name property of the element.", "get_CachedNativeWindowHandle": "Retrieves the cached window handle of the element.", "get_CachedOptimizeForVisualContent": "Retrieves a cached value that indicates whether the provider exposes only elements that are visible.", "get_CachedOrientation": "Retrieves a cached value that indicates the orientation of the element.", "get_CachedPositionInSet": "Returns the cached 1-based integer for the ordinal position in the set for the element.", "get_CachedProcessId": "Retrieves the cached ID of the process that hosts the element.", "get_CachedProviderDescription": "Retrieves a cached description of the provider for this element.", "get_CachedRole": "Retrieves the cached Microsoft Active Accessibility role of the element.", "get_CachedRow": "Retrieves the cached zero-based index of the row that contains the item.", "get_CachedRowCount": "Retrieves the cached number of rows in the grid.", "get_CachedRowOrColumnMajor": "Retrieves the cached primary direction of traversal for the table.", "get_CachedRowSpan": "Retrieves the cached number of rows spanned by a grid item.", "get_CachedSelectionContainer": "Retrieves the cached element that supports IUIAutomationSelectionPattern and acts as the container for this item.", "get_CachedShape": "Retrieves the cached shape of an element in a document.", "get_CachedSizeOfSet": "Returns the cached 1-based integer for the size of the set where the element is located.", "get_CachedSmallChange": "Retrieves, from the cache, the value that is added to or subtracted from the value of the control when a small change is made, such as when an arrow key is pressed.", "get_CachedState": "Retrieves the cached Microsoft Active Accessibility state identifier for the element.", "get_CachedStyleId": "Retrieves the cached identifier of the visual style associated with an element in a document.", "get_CachedStyleName": "Retrieves the cached name of the visual style associated with an element in a document.", "get_CachedTarget": "Retrieves the cached element that is being annotated.", "get_CachedToggleState": "Retrieves the cached state of the control.", "get_CachedValue": "Retrieves the cached value of the element.", "get_CachedVerticallyScrollable": "Retrieves a cached value that indicates whether the element can scroll vertically.", "get_CachedVerticalScrollPercent": "Retrieves the cached vertical scroll position.", "get_CachedVerticalViewSize": "Retrieves the cached vertical size of the viewable region of a scrollable element.", "get_CachedWindowInteractionState": "Retrieves a cached value that indicates the current state of the window for the purposes of user interaction.", "get_CachedWindowVisualState": "Retrieves a cached value that indicates the visual state of the window; that is, whether it is in the normal, maximized, or minimized state.", "get_CachedZoomLevel": "Retrieves the cached zoom level of the control's viewport.", "get_CachedZoomMaximum": "Retrieves the cached maximum zoom level of the control's viewport.", "get_CachedZoomMinimum": "Retrieves the cached minimum zoom level of the control's viewport.", "get_CanCheckBaseClass": "Sets or retrieves a value that specifies whether the base class can be checked when searching for a proxy factory.", "get_CanMaximize": "Indicates whether the window can be maximized.", "get_CanMinimize": "Indicates whether the window can be minimized.", "get_CanMove": "Indicates whether the control can be moved.", "get_CanResize": "Indicates whether the control can be resized.", "get_CanRotate": "Indicates whether the control can be rotated.", "get_CanSelectMultiple": "Indicates whether the Microsoft UI Automation provider allows more than one child element to be selected concurrently.", "get_CanZoom": "Indicates whether the control supports zooming of its viewport.", "get_ChildCount": "Retrieves the number of conditions that make up this or condition.", "get_ChildId": "Specifies the child identifier of this element.", "get_ClassName": "Sets or retrieves the name of the window class served by the proxy factory.", "get_CoalesceEvents": "Gets or sets whether an accessible technology client receives all events, or a subset where duplicate events are detected and filtered.", "get_Column": "Specifies the ordinal number of the column that contains this cell or item.", "get_ColumnCount": "Specifies the total number of columns in the grid.", "get_ColumnSpan": "Specifies the number of columns spanned by this cell or item.", "get_Condition": "Retrieves the condition that defines the view of the UI Automation tree.", "get_ConnectionRecoveryBehavior": "Indicates whether an accessible technology client adjusts provider request timeouts when the provider is non-responsive.", "get_ConnectionTimeout": "Specifies the length of time that UI Automation will wait for a provider to respond to a client request for an automation element.", "get_ContainingGrid": "Specifies the UI Automation provider that implements IGridProvider and represents the container of this cell or item.", "get_ContentViewCondition": "Retrieves a predefined IUIAutomationCondition interface that selects content elements.", "get_ContentViewWalker": "Retrieves an IUIAutomationTreeWalker interface used to discover content elements.", "get_ControlViewCondition": "Retrieves a predefined IUIAutomationCondition interface that selects control elements.", "get_ControlViewWalker": "Retrieves an IUIAutomationTreeWalker interface used to discover control elements.", "get_CurrentAcceleratorKey": "Retrieves the accelerator key for the element.", "get_CurrentAccessKey": "Retrieves the access key character for the element.", "get_CurrentAnnotationObjects": "Returns the current list of annotation objects associated with this element, such as comment, header, footer, and so on.", "get_CurrentAnnotationTypeId": "Retrieves a value that identifies the annotation's type.", "get_CurrentAnnotationTypeName": "Retrieves the localized name of this annotation's type.", "get_CurrentAnnotationTypes": "Returns the current list of annotation types associated with this element, such as comment, header, footer, and so on.", "get_CurrentAriaProperties": "Retrieves the Accessible Rich Internet Applications properties of the element.", "get_CurrentAriaRole": "Retrieves the Accessible Rich Internet Applications role of the element.", "get_CurrentAuthor": "Retrieves the name of the annotation author.", "get_CurrentAutomationId": "Retrieves the Microsoft UI Automation identifier of the element.", "get_CurrentBoundingRectangle": "Retrieves the coordinates of the rectangle that completely encloses the element.", "get_CurrentCanMaximize": "Indicates whether the window can be maximized.", "get_CurrentCanMinimize": "Indicates whether the window can be minimized.", "get_CurrentCanMove": "Indicates whether the element can be moved.", "get_CurrentCanResize": "Indicates whether the element can be resized.", "get_CurrentCanRotate": "Indicates whether the element can be rotated.", "get_CurrentCanSelectMultiple": "Indicates whether more than one item in the container can be selected at one time.", "get_CurrentCanZoom": "Indicates whether the control supports zooming of its viewport.", "get_CurrentChildId": "Retrieves the Microsoft Active Accessibility child identifier for the element.", "get_CurrentClassName": "Retrieves the class name of the element.", "get_CurrentColumn": "Retrieves the zero-based index of the column that contains the item.", "get_CurrentColumnCount": "The number of columns in the grid.", "get_CurrentColumnSpan": "Retrieves the number of columns spanned by the grid item.", "get_CurrentContainingGrid": "Retrieves the element that contains the grid item.", "get_CurrentControllerFor": "Retrieves an array of elements for which this element serves as the controller.", "get_CurrentControlType": "Retrieves the control type of the element.", "get_CurrentCulture": "Retrieves the culture identifier for the element.", "get_CurrentCurrentSelectedItem": "Gets an IUIAutomationElement object representing the currently selected item.", "get_CurrentCurrentView": "Retrieves the control-specific identifier of the current view of the control.", "get_CurrentDateTime": "Retrieves the date and time that this annotation was created.", "get_CurrentDefaultAction": "Retrieves the Microsoft Active Accessibility current default action for the element.", "get_CurrentDescribedBy": "Retrieves an array of elements that describe this element.", "get_CurrentDescription": "Retrieves the Microsoft Active Accessibility description of the element.", "get_CurrentDockPosition": "Retrieves the dock position of this element within its docking container.", "get_CurrentDropEffect": "Retrieves a localized string that indicates what happens when the user drops this element as part of a drag-drop operation.", "get_CurrentDropEffects": "Retrieves an array of localized strings that enumerate the full set of effects that can happen when this element as part of a drag-and-drop operation.", "get_CurrentDropTargetEffect": "Retrieves a localized string that describes what happens when the user drops the grabbed element on this drop target.", "get_CurrentDropTargetEffects": "Retrieves an array of localized strings that enumerate the full set of effects that can happen when the user drops a grabbed element on this drop target as part of a drag-and-drop operation.", "get_CurrentExpandCollapseState": "Retrieves a value that indicates the state, expanded or collapsed, of the element.", "get_CurrentExtendedProperties": "Retrieves a localized string that contains the list of extended properties for an element in a document.", "get_CurrentFillColor": "Retrieves the fill color of an element in a document.", "get_CurrentFillPatternColor": "Retrieves the color of the pattern used to fill an element in a document.", "get_CurrentFirstSelectedItem": "Gets an IUIAutomationElement object representing the first item in a group of selected items.", "get_CurrentFlowsFrom": "Retrieves an array of elements that indicates the reading order before the current element.", "get_CurrentFlowsTo": "Retrieves an array of elements that indicates the reading order after the current element.", "get_CurrentFormula": "Retrieves the formula for this cell.", "get_CurrentFrameworkId": "Retrieves the name of the underlying UI framework.", "get_CurrentFullDescription": "Gets the current full description of the automation element.", "get_CurrentHasKeyboardFocus": "Indicates whether the element has keyboard focus.", "get_CurrentHeadingLevel": "Gets the current heading level of the automation element.", "get_CurrentHelp": "Retrieves the Microsoft Active Accessibility help string for the element.", "get_CurrentHelpText": "Retrieves the help text for the element.", "get_CurrentHorizontallyScrollable": "Indicates whether the element can scroll horizontally.", "get_CurrentHorizontalScrollPercent": "Retrieves the horizontal scroll position.", "get_CurrentHorizontalViewSize": "Retrieves the horizontal size of the viewable region of a scrollable element.", "get_CurrentIsContentElement": "Indicates whether the element is a content element.", "get_CurrentIsControlElement": "Indicates whether the element is a control element.", "get_CurrentIsDataValidForForm": "Indicates whether the element contains valid data for a form.", "get_CurrentIsDialog": "Retrieves the current is dialog window indicator for the element.", "get_CurrentIsEnabled": "Indicates whether the element is enabled.", "get_CurrentIsGrabbed": "Indicates whether the user has grabbed this element as part of a drag-and-drop operation.", "get_CurrentIsKeyboardFocusable": "Indicates whether the element can accept keyboard focus.", "get_CurrentIsModal": "Indicates whether the window is modal.", "get_CurrentIsOffscreen": "Indicates whether the element is off-screen.", "get_CurrentIsPassword": "Indicates whether the element contains a disguised password.", "get_CurrentIsPeripheral": "Retrieves the current peripheral UI indicator for the element.", "get_CurrentIsReadOnly": "Indicates whether the value of the element is read-only.", "get_CurrentIsRequiredForForm": "Indicates whether the element is required to be filled out on a form.", "get_CurrentIsSelected": "Indicates whether this item is selected.", "get_CurrentIsSelectionRequired": "Indicates whether at least one item must be selected at all times.", "get_CurrentIsTopmost": "Indicates whether the window is the topmost element in the z-order.", "get_CurrentItemCount": "Gets an integer value indicating the number of selected items.", "get_CurrentItemStatus": "Retrieves the description of the status of an item in an element.", "get_CurrentItemType": "Retrieves a description of the type of UI item represented by the element.", "get_CurrentKeyboardShortcut": "Retrieves the Microsoft Active Accessibility keyboard shortcut property for the element.", "get_CurrentLabeledBy": "Retrieves the element that contains the text label for this element.", "get_CurrentLandmarkType": "Gets the current landmark type ID for the automation element.", "get_CurrentLargeChange": "Retrieves the value that is added to or subtracted from the value of the control when a large change is made, such as when the PAGE DOWN key is pressed.", "get_CurrentLastSelectedItem": "Gets an IUIAutomationElement object representing the last item in a group of selected items.", "get_CurrentLevel": "Returns the current 1-based integer for the level for the element.", "get_CurrentLiveSetting": "Indicates the type of notifications, if any, that the element sends when the content of the element changes.", "get_CurrentLocalizedControlType": "Retrieves a localized description of the control type of the element.", "get_CurrentLocalizedLandmarkType": "Gets a string containing the current localized landmark type for the automation element.", "get_CurrentMaximum": "Retrieves the maximum value of the control.", "get_CurrentMinimum": "Retrieves the minimum value of the control.", "get_CurrentName": "Retrieves the Microsoft Active Accessibility name property of the element.", "get_CurrentNativeWindowHandle": "Retrieves the window handle of the element.", "get_CurrentOptimizeForVisualContent": "Indicates whether the provider exposes only elements that are visible.", "get_CurrentOrientation": "Retrieves a value that indicates the orientation of the element.", "get_CurrentPositionInSet": "Returns the current 1-based integer for the ordinal position in the set for the element.", "get_CurrentProcessId": "Retrieves the identifier of the process that hosts the element.", "get_CurrentProviderDescription": "Retrieves a description of the provider for this element.", "get_CurrentRole": "Retrieves the Microsoft Active Accessibility role identifier of the element.", "get_CurrentRow": "Retrieves the zero-based index of the row that contains the grid item.", "get_CurrentRowCount": "Retrieves the number of rows in the grid.", "get_CurrentRowOrColumnMajor": "Retrieves the primary direction of traversal for the table.", "get_CurrentRowSpan": "Retrieves the number of rows spanned by the grid item.", "get_CurrentSelectedItem": "Gets the currently selected item.", "get_CurrentSelectionContainer": "Retrieves the element that supports IUIAutomationSelectionPattern and acts as the container for this item.", "get_CurrentShape": "Retrieves the shape of an element in a document.", "get_CurrentSizeOfSet": "Returns the current 1-based integer for the size of the set where the element is located.", "get_CurrentSmallChange": "Retrieves the value that is added to or subtracted from the value of the control when a small change is made, such as when an arrow key is pressed.", "get_CurrentState": "Retrieves the Microsoft Active Accessibility state identifier for the element.", "get_CurrentStyleId": "Retrieves the identifier of the visual style associated with an element in a document.", "get_CurrentStyleName": "Retrieves the name of the visual style associated with an element in a document.", "get_CurrentTarget": "Retrieves the element that is being annotated.", "get_CurrentToggleState": "Retrieves the state of the control.", "get_CurrentValue": "Retrieves the value of the element.", "get_CurrentVerticallyScrollable": "Indicates whether the element can scroll vertically.", "get_CurrentVerticalScrollPercent": "Retrieves the vertical scroll position.", "get_CurrentVerticalViewSize": "Retrieves the vertical size of the viewable region of a scrollable element.", "get_CurrentView": "Identifies the current view that the control is using to display information or child controls.", "get_CurrentWindowInteractionState": "Retrieves the current state of the window for the purposes of user interaction.", "get_CurrentWindowVisualState": "Retrieves the visual state of the window; that is, whether it is in the normal, maximized, or minimized state.", "get_CurrentZoomLevel": "Retrieves the zoom level of the control's viewport.", "get_CurrentZoomMaximum": "Retrieves the maximum zoom level of the control's viewport.", "get_CurrentZoomMinimum": "Retrieves the minimum zoom level of the control's viewport.", "get_DateTime": "The date and time when this annotation was created.", "get_DefaultAction": "Contains a description of the default action for this element.", "get_DockPosition": "Indicates the current docking position of this element.", "get_DocumentRange": "Retrieves a text range that encloses the main text of a document.", "get_DropEffect": "Retrieves a localized string that indicates what happens when this element is dropped as part of a drag-drop operation.", "get_DropEffects": "Retrieves an array of localized strings that enumerate the full set of effects that can happen when this element is dropped as part of a drag-and-drop operation.", "get_DropTargetEffect": "Retrieves a localized string that describes the effect that happens when the user drops the grabbed element on this drop target.", "get_DropTargetEffects": "Retrieves an array of localized strings that enumerate the full set of effects that can happen when the user drops a grabbed element on this drop target as part of a drag-and-drop operation.", "get_ExpandCollapseState": "Indicates the state, expanded or collapsed, of the control.", "get_ExtendedProperties": "Contains additional properties that are not included in this control pattern, but that provide information about the document content that might be useful to the user.", "get_FillColor": "Specifies the fill color of an element in a document.", "get_FillPatternColor": "Specifies the color of the pattern used to fill an element in a document.", "get_FillPatternStyle": "Specifies the fill pattern style of an element in a document.", "get_FirstSelectedItem": "Gets the first item in a group of selected items.", "get_Formula": "Specifies the formula for this spreadsheet cell.", "get_FragmentRoot": "Specifies the root node of the fragment.", "get_Help": "Specifies a string that contains help information for this element.", "get_HorizontallyScrollable": "Indicates whether the control can scroll horizontally.", "get_HorizontalScrollPercent": "Specifies the horizontal scroll position.", "get_HorizontalViewSize": "Specifies the horizontal size of the viewable region.", "get_HostRawElementProvider": "Specifies the host provider for this element.", "get_ImageName": "Sets or retrieves the name of the image of the proxy factory.", "get_IsGrabbed": "Indicates whether the element has been grabbed as part of a drag-and-drop operation.", "get_IsModal": "Indicates whether the window is modal.", "get_IsReadOnly": "Indicates whether the value of a control is read-only.", "get_IsSelected": "Indicates whether an item is selected.", "get_IsSelectionRequired": "Indicates whether the Microsoft UI Automation provider requires at least one child element to be selected.", "get_IsTopmost": "Indicates whether the window is the topmost element in the z-order.", "get_ItemCount": "Gets the number of selected items.", "get_KeyboardShortcut": "Specifies the keyboard shortcut for this element.", "get_LargeChange": "Specifies the value that is added to or subtracted from the IRangeValueProvider::Value property when a large change is made, such as when the PAGE DOWN key is pressed.", "get_LastSelectedItem": "Gets the last item in a group of selected items.", "get_Maximum": "Specifies the maximum range value supported by the control.", "get_Minimum": "Specifies the minimum range value supported by the control.", "get_NeedsAdviseEvents": "Sets or retrieves a value that specifies whether the proxy must be notified when an application has registered for events.", "get_PropertyConditionFlags": "Retrieves a set of flags that specify how the condition is applied.", "get_PropertyValue": "Retrieves the property value that must be matched for the condition to be true.", "get_ProviderOptions": "Specifies the type of Microsoft UI Automation provider; for example, whether it is a client-side or server-side provider.", "get_ProxyFactory": "Retrieves the proxy factory associated with this entry.", "get_ProxyFactoryId": "Retrieves the identifier of the proxy factory.", "get_ProxyFactoryMapping": "Retrieves an object that represents the mapping of Window classnames and associated data to individual proxy factories.", "get_RawViewCondition": "Retrieves a predefined IUIAutomationCondition interface that selects all UI elements in an unfiltered view.", "get_RawViewWalker": "Retrieves a tree walker object used to traverse an unfiltered view of the Microsoft UI Automation tree.", "get_ReservedMixedAttributeValue": "Retrieves a static token object representing a text attribute that is a mixed attribute.", "get_ReservedNotSupportedValue": "Retrieves a static token object representing a property or text attribute that is not supported.", "get_Role": "Specifies the role identifier of this element.", "get_Row": "Specifies the ordinal number of the row that contains this cell or item.", "get_RowCount": "Specifies the total number of rows in the grid.", "get_RowOrColumnMajor": "Specifies the primary direction of traversal for the table.", "get_RowSpan": "Specifies the number of rows spanned by this cell or item.", "get_SelectionContainer": "Specifies the provider that implements ISelectionProvider and acts as the container for the calling object.", "get_Shape": "Specifies the shape of an element in a document.", "get_SmallChange": "Specifies the value that is added to or subtracted from the IRangeValueProvider::Value property when a small change is made, such as when an arrow key is pressed.", "get_State": "Specifies the state of this element.", "get_StyleId": "Identifies the visual style of an element in a document.", "get_StyleName": "Specifies the name of the visual style of an element in a document.", "get_SupportedTextSelection": "Retrieves a value that specifies the type of text selection that is supported by the control.", "get_Target": "The UI Automation element that is being annotated.", "get_TextContainer": "Retrieves this element's nearest ancestor element that supports the Text control pattern.", "get_TextRange": "Retrieves a text range that encloses this child element.", "get_ToggleState": "Specifies the toggle state of the control.", "get_TransactionTimeout": "Specifies the length of time that UI Automation will wait for a provider to respond to a client request for information about an automation element.", "get_TreeFilter": "Specifies the view of the UI Automation element tree that is used when caching.", "get_TreeScope": "Specifies the scope of caching.", "get_VerticallyScrollable": "Indicates whether the control can scroll vertically.", "get_VerticalScrollPercent": "Specifies the vertical scroll position.", "get_VerticalViewSize": "Specifies the vertical size of the viewable region.", "get_WindowInteractionState": "Specifies the current state of the window for the purposes of user interaction.", "get_WindowVisualState": "Specifies the visual state of the window; that is, whether the window is normal, minimized, or maximized.", "get_ZoomLevel": "Retrieves the current zoom level of the element.", "get_ZoomMaximum": "Retrieves the maximum zoom level of the element.", "get_ZoomMinimum": "Retrieves the minimum zoom level of the element.", "GetActiveComposition": "Returns the active composition.", "GetAdjacentFragment": "Retrieves a fragment pointer for a fragment that is adjacent to the windowless Microsoft ActiveX control owned by this control site.", "GetAnnotationObjects": "Retrieves an array of objects that represent the annotations associated with this spreadsheet cell.", "GetAnnotationTypes": "Retrieves an array of annotation type identifiers indicating the types of annotations that are associated with this spreadsheet cell.", "GetAttributeValue": "Retrieves the value of the specified text attribute across the entire text range.", "GetAttributeValues": "Returns all of the requested text attribute values for a text range in a single cross-process call.", "GetBoundingRectangles": "Retrieves a collection of bounding rectangles for each fully or partially visible line of text in a text range.", "GetBuildVersion": "Clients call IVersionInfo::GetBuildVersion to retrieve build information for a specified component.", "GetCachedAnnotationObjects": "Retrieves a cached array of elements representing the annotations associated with this spreadsheet cell.", "GetCachedAnnotationTypes": "Retrieves a cached array of annotation type identifiers indicating the types of annotations that are associated with this spreadsheet cell.", "GetCachedChildren": "Retrieves the cached child elements of this UI Automation element.", "GetCachedColumnHeaderItems": "Retrieves the cached column headers associated with a table item or cell.", "GetCachedColumnHeaders": "Retrieves a cached collection of UI Automation elements representing all the column headers in a table.", "GetCachedGrabbedItems": "Retrieves a cached collection of elements that represent the full set of items that the user is dragging as part of a drag operation.", "GetCachedParent": "Retrieves from the cache the parent of this UI Automation element.", "GetCachedPattern": "Retrieves from the cache the IUnknown interface of the specified control pattern of this UI Automation element.", "GetCachedPatternAs": "Retrieves the control pattern interface of the specified pattern from the cache of this UI Automation element.", "GetCachedPropertyValue": "Retrieves a property value from the cache for this UI Automation element.", "GetCachedPropertyValueEx": "Retrieves a property value from the cache for this UI Automation element, optionally ignoring any default value.", "GetCachedRowHeaderItems": "Retrieves the cached row headers associated with a table item or cell.", "GetCachedRowHeaders": "Retrieves a cached collection of UI Automation elements representing all the row headers in a table.", "GetCachedSelection": "Retrieves the cached selected elements in the container.", "GetCachedSupportedViews": "Retrieves a collection of control-specific view identifiers from the cache.", "GetCaretRange": "Retrieves a zero-length text range at the location of the caret that belongs to the text-based control.", "GetChild": "Retrieves the condition of which this condition is the negative.", "GetChildren": "Retrieves a collection of all embedded objects that fall within the text range.", "GetChildrenAsNativeArray": "Retrieves the conditions that make up this or condition, as an ordinary array.", "GetChildrenBuildCache": "Returns the children and supplied properties and patterns for elements in a text range in a single cross-process call.", "GetClickablePoint": "Retrieves a point on the element that can be clicked.", "GetColumnHeaderItems": "Retrieves a collection of Microsoft UI Automation provider representing all the column headers associated with a table item or cell.", "GetColumnHeaders": "Gets a collection of Microsoft UI Automation providers that represents all the column headers in a table.", "GetComponentDescription": "Clients call this method to retrieve a description of the component.", "GetConversionTarget": "Returns the current conversion target range.", "GetCurrentAnnotationObjects": "Retrieves an array of elements representing the annotations associated with this spreadsheet cell.", "GetCurrentAnnotationTypes": "Retrieves an array of annotation type identifiers indicating the types of annotations that are associated with this spreadsheet cell.", "GetCurrentColumnHeaderItems": "Retrieves the column headers associated with a table item or cell.", "GetCurrentColumnHeaders": "Retrieves a collection of UI Automation elements representing all the column headers in a table.", "GetCurrentGrabbedItems": "Retrieves a collection of elements that represent the full set of items that the user is dragging as part of a drag operation.", "GetCurrentMetadataValue": "Gets metadata from the UI Automation element that indicates how the information should be interpreted.", "GetCurrentPattern": "Retrieves the IUnknown interface of the specified control pattern on this UI Automation element.", "GetCurrentPatternAs": "Retrieves the control pattern interface of the specified pattern on this UI Automation element.", "GetCurrentPropertyValue": "Retrieves the current value of a property for this UI Automation element.", "GetCurrentPropertyValueEx": "Retrieves a property value for this UI Automation element, optionally ignoring any default value.", "GetCurrentRowHeaderItems": "Retrieves the row headers associated with a table item or cell.", "GetCurrentRowHeaders": "Retrieves a collection of UI Automation elements representing all the row headers in a table.", "GetCurrentSupportedViews": "Retrieves a collection of control-specific view identifiers.", "GetDocuments": "Clients call IAccClientDocMgr::GetDocuments to get a list of all documents that have been registered with the Microsoft Active Accessibility run time.", "GetElement": "Retrieves a text range from the collection.", "GetEmbeddedAccessibles": "Retrieves the IAccessible interface pointers of the windowless Microsoft ActiveX controls that are hosted by this provider.", "GetEmbeddedFragmentRoots": "Retrieves an array of root fragments that are embedded in the Microsoft UI Automation tree rooted at the current element.", "GetEnclosingElement": "Returns the innermost UI Automation element that encloses the text range.", "GetEnclosingElementBuildCache": "Gets the enclosing element and supplied properties and patterns for an element in a text range in a single cross-process call.", "GetFirstChildElement": "Retrieves the first child element of the specified UI Automation element.", "GetFirstChildElementBuildCache": "Retrieves the first child element of the specified UI Automation element, and caches properties and control patterns.", "GetFocus": "Retrieves the handle to the window that has the keyboard focus, if the window is attached to the calling thread's message queue.", "GetFocused": "Clients call the IAccClientDocMgr::GetFocused method to access a pointer for the document that has focus.", "GetFocusedElement": "Retrieves the UI Automation element that has the input focus.", "GetFocusedElementBuildCache": "Retrieves the UI Automation element that has the input focus, prefetches the requested properties and control patterns, and stores the prefetched items in the cache.", "GetGrabbedItems": "Retrieves the collection of elements that are being dragged as part of a drag operation.", "GetIAccessible": "Retrieves an IAccessible object that corresponds to the Microsoft UI Automation element.", "GetIAccessiblePair": "Retrieves the IAccessible interface and child ID for this item.", "GetIdentityString": "Retrieves a string of bytes that uniquely identifies an accessible element.", "GetImplementationID": "Clients call IVersionInfo::GetImplementationID to retrieve a unique identifier for the component.", "GetInstanceDescription": "Note Active Accessibility Text Services is deprecated.", "GetItemByName": "Retrieves a UI Automation element that represents the spreadsheet cell that has the specified name.", "GetLastChildElement": "Retrieves the last child element of the specified UI Automation element.", "GetLastChildElementBuildCache": "Retrieves the last child element of the specified UI Automation element, and caches properties and control patterns.", "GetLocalizedString": "Clients call the IAccDictionary::GetLocalizedString method to get localized strings for all system properties and their values.", "GetMetadataValue": "Gets metadata from the UI Automation element that indicates how the information should be interpreted.", "GetMnemonicString": "Note Active Accessibility Text Services is deprecated.", "GetNextSiblingElement": "Retrieves the next sibling element of the specified UI Automation element.", "GetNextSiblingElementBuildCache": "Retrieves the next sibling element of the specified UI Automation element, and caches properties and control patterns.", "GetObjectForChild": "Retrieves an IAccessibleEx interface representing the specified child of this element.", "GetObjectIdForProvider": "Retrieves the object ID associated with a contained windowless Microsoft ActiveX control that implements Microsoft UI Automation.", "GetOverrideProviderForHwnd": "Gets a UI Automation provider for the specified element.", "GetParentAccessible": "Retrieves an IAccessible pointer for the parent of a windowless Microsoft ActiveX control in the accessibility tree.", "GetParentElement": "Retrieves the parent element of the specified UI Automation element.", "GetParentElementBuildCache": "Retrieves the parent element of the specified UI Automation element, and caches properties and control patterns.", "GetParentTerm": "Clients call the IAccDictionary::GetParentTerm method to navigate through the object hierarchy tree.", "GetPatternProgrammaticName": "Retrieves the registered programmatic name of a control pattern.", "GetPatternProvider": "Retrieves a pointer to an object that provides support for a control pattern on a Microsoft UI Automation element.", "GetPreviousSiblingElement": "Retrieves the previous sibling element of the specified UI Automation element.", "GetPreviousSiblingElementBuildCache": "Retrieves the previous sibling element of the specified UI Automation element, and caches properties and control patterns.", "GetPropertyProgrammaticName": "Retrieves the registered programmatic name of a property.", "GetPropertyValue": "Retrieves the value of a property supported by the Microsoft UI Automation provider.", "GetPropValue": "Retrieves a property value for an accessible element.", "GetRootElement": "Retrieves the UI Automation element that represents the desktop.", "GetRootElementBuildCache": "Retrieves the UI Automation element that represents the desktop, prefetches the requested properties and control patterns, and stores the prefetched items in the cache.", "GetRowHeaderItems": "Retrieves a collection of Microsoft UI Automation provider representing all the row headers associated with a table item or cell.", "GetRowHeaders": "Gets a collection of Microsoft UI Automation providers that represents all the row headers in a table.", "GetRuntimeId": "Retrieves the unique identifier assigned to the UI element.", "GetRuntimeIdPrefix": "Retrieves a Microsoft UI Automation runtime ID that is unique to the windowless Microsoft ActiveX control site.", "GetSubcomponentCount": "Clients call IVersionInfo::GetSubcomponentCount to determine the number of subcomponents for which version information is returned.", "GetSupportedViews": "Retrieves a collection of control-specific view identifiers.", "GetUnderlyingObjectModel": "Retrieves an interface used to access the underlying object model of the provider.", "GetViewName": "Retrieves the name of a control-specific view.", "GetVisibleRanges": "Retrieves an array of disjoint text ranges from a text-based control where each text range represents a contiguous span of visible text.", "GetWinEventsForAutomationEvent": "If an element represented by this proxy raises one the listed WinEvents, the proxy handles it.", "GridPattern_GetItem": "Gets the node for an item in a grid.", "GetApplicationRecoveryCallback": "Retrieves a pointer to the callback routine registered for the specified process.", "GetApplicationRestartSettings": "Retrieves the restart information registered for the specified process.", "GetCommConfig": "Retrieves the current configuration of a communications device.", "GetCommMask": "Retrieves the value of the event mask for a specified communications device.", "GetCommModemStatus": "Retrieves the modem control-register values.", "GetCommPorts": "Gets an array that contains the well-formed COM ports.", "GetCommProperties": "Retrieves information about the communications properties for a specified communications device.", "GetCommState": "Retrieves the current control settings for a specified communications device.", "GetCommTimeouts": "Retrieves the time-out parameters for all read and write operations on a specified communications device.", "GetComputerNameA": "Retrieves the NetBIOS name of the local computer.", "GetComputerNameW": "Retrieves the NetBIOS name of the local computer.", "GetCurrentHwProfileA": "Retrieves information about the current hardware profile for the local computer.", "GetCurrentHwProfileW": "Retrieves information about the current hardware profile for the local computer.", "GetDefaultCommConfigA": "Retrieves the default configuration for the specified communications device.", "GetDefaultCommConfigW": "Retrieves the default configuration for the specified communications device.", "GetDevicePowerState": "Retrieves the current power state of the specified device.", "GetDllDirectoryA": "Retrieves the application-specific portion of the search path used to locate DLLs for the application.", "GetDllDirectoryW": "Retrieves the application-specific portion of the search path used to locate DLLs for the application.", "GetEnabledXStateFeatures": "Gets a mask of enabled XState features on x86 or x64 processors.", "GetEventLogInformation": "Retrieves information about the specified event log.", "GetFirmwareEnvironmentVariableA": "Retrieves the value of the specified firmware environment variable.", "GetFirmwareEnvironmentVariableExA": "Retrieves the value of the specified firmware environment variable and its attributes.", "GetFirmwareEnvironmentVariableExW": "Retrieves the value of the specified firmware environment variable and its attributes.", "GetFirmwareEnvironmentVariableW": "Retrieves the value of the specified firmware environment variable.", "GetFirmwareType": "Retrieves the firmware type of the local computer.", "GetMailslotInfo": "Retrieves information about the specified mailslot.", "GetNamedPipeClientComputerNameA": "Retrieves the client computer name for the specified named pipe.", "GetNamedPipeClientProcessId": "Retrieves the client process identifier for the specified named pipe.", "GetNamedPipeClientSessionId": "Retrieves the client session identifier for the specified named pipe.", "GetNamedPipeHandleStateA": "Retrieves information about a specified named pipe.", "GetNamedPipeServerProcessId": "Retrieves the server process identifier for the specified named pipe.", "GetNamedPipeServerSessionId": "Retrieves the server session identifier for the specified named pipe.", "GetNumberOfEventLogRecords": "Retrieves the number of records in the specified event log.", "GetOldestEventLogRecord": "Retrieves the absolute record number of the oldest record in the specified event log.", "GetPrivateProfileInt": "Retrieves an integer associated with a key in the specified section of an initialization file.", "GetPrivateProfileIntA": "Retrieves an integer associated with a key in the specified section of an initialization file.", "GetPrivateProfileIntW": "Retrieves an integer associated with a key in the specified section of an initialization file.", "GetPrivateProfileSection": "Retrieves all the keys and values for the specified section of an initialization file.", "GetPrivateProfileSectionA": "Retrieves all the keys and values for the specified section of an initialization file.", "GetPrivateProfileSectionNames": "Retrieves the names of all sections in an initialization file.", "GetPrivateProfileSectionNamesA": "Retrieves the names of all sections in an initialization file.", "GetPrivateProfileSectionNamesW": "Retrieves the names of all sections in an initialization file.", "GetPrivateProfileSectionW": "Retrieves all the keys and values for the specified section of an initialization file.", "GetPrivateProfileString": "Retrieves a string from the specified section in an initialization file.", "GetPrivateProfileStringA": "Retrieves a string from the specified section in an initialization file.", "GetPrivateProfileStringW": "Retrieves a string from the specified section in an initialization file.", "GetPrivateProfileStruct": "Retrieves the data associated with a key in the specified section of an initialization file.", "GetPrivateProfileStructA": "Retrieves the data associated with a key in the specified section of an initialization file.", "GetPrivateProfileStructW": "Retrieves the data associated with a key in the specified section of an initialization file.", "GetProcessDEPPolicy": "Gets the data execution prevention and DEP-ATL thunk emulation settings for the specified 32-bit process.", "GetProfileIntA": "Retrieves an integer from a key in the specified section of the Win .ini file.", "GetProfileIntW": "Retrieves an integer from a key in the specified section of the Win .ini file.", "GetProfileSectionA": "Retrieves all the keys and values for the specified section of the Win .ini file.", "GetProfileSectionW": "Retrieves all the keys and values for the specified section of the Win .ini file.", "GetProfileStringA": "Retrieves the string associated with a key in the specified section of the Win .ini file.", "GetProfileStringW": "Retrieves the string associated with a key in the specified section of the Win .ini file.", "GetSystemDEPPolicy": "Gets the data execution prevention policy setting for the system.", "GetSystemPowerStatus": "Retrieves the power status of the system.", "GetSystemRegistryQuota": "Retrieves the current size of the registry and the maximum size that the registry is allowed to attain on the system.", "GetThreadEnabledXStateFeatures": "", "GetThreadSelectorEntry": "Retrieves a descriptor table entry for the specified selector and thread.", "GetUserNameA": "Retrieves the name of the user associated with the current thread.", "GetUserNameW": "Retrieves the name of the user associated with the current thread.", "GetXStateFeaturesMask": "Returns the mask of XState features set within a CONTEXT structure.", "GlobalAlloc": "Allocates the specified number of bytes from the heap.", "GlobalDiscard": "Discards the specified global memory block.", "GlobalFlags": "Retrieves information about the specified global memory object.", "GlobalFree": "Frees the specified global memory object and invalidates its handle.", "GlobalHandle": "Retrieves the handle associated with the specified pointer to a global memory block.", "GlobalLock": "Locks a global memory object and returns a pointer to the first byte of the object's memory block.", "GlobalMemoryStatus": "Retrieves information about the system's current usage of both physical and virtual memory.", "GlobalReAlloc": "Changes the size or attributes of a specified global memory object.", "GlobalSize": "Retrieves the current size of the specified global memory object, in bytes.", "GlobalUnlock": "Decrements the lock count associated with a memory object that was allocated with GMEM_MOVEABLE.", "GET_X_LPARAM": "Retrieves the signed x-coordinate from the specified LPARAM value.", "GET_Y_LPARAM": "Retrieves the signed y-coordinate from the given LPARAM value.", "GetAltTabInfoA": "Retrieves status information for the specified window if it is the application-switching window.", "GetAltTabInfoW": "Retrieves status information for the specified window if it is the application-switching window.", "GetAncestor": "Retrieves the handle to the ancestor of the specified window.", "GetClassInfoA": "Retrieves information about a window class.", "GetClassInfoExA": "Retrieves information about a window class, including a handle to the small icon associated with the window class.", "GetClassInfoExW": "Retrieves information about a window class, including a handle to the small icon associated with the window class.", "GetClassInfoW": "Retrieves information about a window class.", "GetClassLongA": "Retrieves the specified 32-bit value from the WNDCLASSEX structure associated with the specified window.", "GetClassLongPtrA": "Retrieves the specified value from the WNDCLASSEX structure associated with the specified window.", "GetClassLongPtrW": "Retrieves the specified value from the WNDCLASSEX structure associated with the specified window.", "GetClassLongW": "Retrieves the specified 32-bit value from the WNDCLASSEX structure associated with the specified window.", "GetClassName": "Retrieves the name of the class to which the specified window belongs.", "GetClassNameA": "Retrieves the name of the class to which the specified window belongs.", "GetClassNameW": "Retrieves the name of the class to which the specified window belongs.", "GetClassWord": "Retrieves the 16-bit value at the specified offset into the extra class memory for the window class to which the specified window belongs.", "GetDesktopWindow": "Retrieves a handle to the desktop window.", "GetForegroundWindow": "Retrieves a handle to the foreground window.", "GetGUIThreadInfo": "Retrieves information about the active window or a specified GUI thread.", "GetInputState": "Determines whether there are mouse-button or keyboard messages in the calling thread's message queue.", "GetLastActivePopup": "Determines which pop-up window owned by the specified window was most recently active.", "GetLayeredWindowAttributes": "Retrieves the opacity and transparency color key of a layered window.", "GetMessage": "Retrieves a message from the calling thread's message queue.", "GetMessageA": "Retrieves a message from the calling thread's message queue.", "GetMessageExtraInfo": "Retrieves the extra message information for the current thread.", "GetMessagePos": "Retrieves the cursor position for the last message retrieved by the GetMessage function.", "GetMessageTime": "Retrieves the message time for the last message retrieved by the GetMessage function.", "GetMessageW": "Retrieves a message from the calling thread's message queue.", "GetNextWindow": "Retrieves a handle to the next or previous window in the Z-Order.", "GetProcessDefaultLayout": "Retrieves the default layout that is used when windows are created with no parent or owner.", "GetPropA": "Retrieves a data handle from the property list of the specified window.", "GetPropW": "Retrieves a data handle from the property list of the specified window.", "GetQueueStatus": "Retrieves the type of messages found in the calling thread's message queue.", "GetShellWindow": "Retrieves a handle to the Shell's desktop window.", "GetSysColor": "Retrieves the current color of the specified display element.", "GetSystemMetrics": "Retrieves the specified system metric or system configuration setting.", "GetTitleBarInfo": "Retrieves information about the specified title bar.", "GetTopWindow": "Examines the Z order of the child windows associated with the specified parent window and retrieves a handle to the child window at the top of the Z order.", "GetWindowDisplayAffinity": "Retrieves the current display affinity setting, from any process, for a given window.", "GetWindowInfo": "Retrieves information about the specified window.", "GetWindowLongA": "Retrieves information about the specified window.", "GetWindowLongPtrA": "Retrieves information about the specified window.", "GetWindowLongPtrW": "Retrieves information about the specified window.", "GetWindowLongW": "Retrieves information about the specified window.", "GetWindowModuleFileNameA": "Retrieves the full path and file name of the module associated with the specified window handle.", "GetWindowModuleFileNameW": "Retrieves the full path and file name of the module associated with the specified window handle.", "GetWindowPlacement": "Retrieves the show state and the restored, minimized, and maximized positions of the specified window.", "GetWindowRect": "Retrieves the dimensions of the bounding rectangle of the specified window.", "GetWindowTextA": "Copies the text of the specified window's title bar into a buffer.", "GetWindowTextLengthA": "Retrieves the length, in characters, of the specified window's title bar text.", "GetWindowTextLengthW": "Retrieves the length, in characters, of the specified window's title bar text.", "GetWindowTextW": "Copies the text of the specified window's title bar into a buffer.", "GetWindowThreadProcessId": "Retrieves the identifier of the thread that created the specified window and, optionally, the identifier of the process that created the window.", "GET_APPCOMMAND_LPARAM": "Retrieves the application command from the specified LPARAM value.", "GET_DEVICE_LPARAM": "Retrieves the input device type from the specified LPARAM value.", "GET_FLAGS_LPARAM": "Retrieves the state of certain virtual keys from the specified LPARAM value.", "GET_KEYSTATE_LPARAM": "Retrieves the state of certain virtual keys from the specified LPARAM value.", "GET_KEYSTATE_WPARAM": "Retrieves the state of certain virtual keys from the specified WPARAM value.", "GET_NCHITTEST_WPARAM": "Retrieves the hit-test value from the specified WPARAM value.", "GET_POINTERID_WPARAM": "Retrieves the pointer ID using the specified value.", "GET_RAWINPUT_CODE_WPARAM": "Retrieves the input code from wParam in WM_INPUT.", "GET_WHEEL_DELTA_WPARAM": "Retrieves the wheel-delta value from the specified WPARAM value.", "GET_XBUTTON_WPARAM": "Retrieves the state of certain buttons from the specified WPARAM value.", "GetActiveWindow": "Retrieves the window handle to the active window attached to the calling thread's message queue.", "GetAsyncKeyState": "Determines whether a key is up or down at the time the function is called, and whether the key was pressed after a previous call to GetAsyncKeyState.", "GetAutoRotationState": "Retrieves an AR_STATE value containing the state of screen auto-rotation for the system, for example whether auto-rotation is supported, and whether it is enabled by the user.", "GetAwarenessFromDpiAwarenessContext": "Retrieves the DPI_AWARENESS value from a DPI_AWARENESS_CONTEXT.", "GetCapture": "Retrieves a handle to the window that has captured the mouse.", "GetDC": "The GetDC function retrieves a handle to a device context for the client area of a specified window or for the entire screen.", "GetDCEx": "The GetDCEx function retrieves a handle to a device context for the client area of a specified window or for the entire screen.", "GetDialogBaseUnits": "Retrieves the system's dialog base units, which are the average width and height of characters in the system font.", "GetDialogControlDpiChangeBehavior": "Retrieves and per-monitor DPI scaling behavior overrides of a child window in a dialog.", "GetDialogDpiChangeBehavior": "Returns the flags that might have been set on a given dialog by an earlier call to SetDialogDpiChangeBehavior.", "GetDisplayAutoRotationPreferences": "Retrieves the screen auto-rotation preferences for the current process.", "GetDisplayAutoRotationPreferencesByProcessId": "Retrieves the screen auto-rotation preferences for the process indicated by the dwProcessId parameter.", "GetDisplayConfigBufferSizes": "The GetDisplayConfigBufferSizes function retrieves the size of the buffers that are required to call the QueryDisplayConfig function.", "GetDlgCtrlID": "Retrieves the identifier of the specified control.", "GetDlgItem": "Retrieves a handle to a control in the specified dialog box.", "GetDlgItemInt": "Translates the text of a specified control in a dialog box into an integer value.", "GetDlgItemTextA": "Retrieves the title or text associated with a control in a dialog box.", "GetDlgItemTextW": "Retrieves the title or text associated with a control in a dialog box.", "GetDoubleClickTime": "Retrieves the current double-click time for the mouse.", "GetDpiForSystem": "Returns the system DPI.", "GetDpiForWindow": "Returns the dots per inch value for the associated window.", "GetDpiFromDpiAwarenessContext": "Retrieves the DPI from a given DPI_AWARENESS_CONTEXT handle.", "GetGestureConfig": "Retrieves the configuration for which Windows Touch gesture messages are sent from a window.", "GetGestureExtraArgs": "Retrieves additional information about a gesture from its GESTUREINFO handle.", "GetGestureInfo": "Retrieves a GESTUREINFO structure given a handle to the gesture information.", "GetGuiResources": "Retrieves the count of handles to graphical user interface objects in use by the specified process.", "GetKBCodePage": "Retrieves the current code page.", "GetKeyboardLayout": "Retrieves the active input locale identifier.", "GetKeyboardLayoutList": "Retrieves the input locale identifiers corresponding to the current set of input locales in the system.", "GetKeyboardLayoutNameA": "Retrieves the name of the active input locale identifier for the system.", "GetKeyboardLayoutNameW": "Retrieves the name of the active input locale identifier for the system.", "GetKeyboardState": "Copies the status of the 256 virtual keys to the specified buffer.", "GetKeyboardType": "Retrieves information about the current keyboard.", "GetKeyNameTextA": "Retrieves a string that represents the name of a key.", "GetKeyNameTextW": "Retrieves a string that represents the name of a key.", "GetKeyState": "Retrieves the status of the specified virtual key.", "GetLastInputInfo": "Retrieves the time of the last input event.", "GetMonitorInfoA": "The GetMonitorInfo function retrieves information about a display monitor.", "GetMonitorInfoW": "The GetMonitorInfo function retrieves information about a display monitor.", "GetMouseMovePointsEx": "Retrieves a history of up to 64 previous coordinates of the mouse or pen.", "GetNextDlgGroupItem": "Retrieves a handle to the first control in a group of controls that precedes the specified control in a dialog box.", "GetNextDlgTabItem": "Retrieves a handle to the first control that has the WS_TABSTOP style that precedes the specified control.", "GetPointerCursorId": "Retrieves the cursor identifier associated with the specified pointer.", "GetPointerFrameInfo": "Gets the entire frame of information for the specified pointers associated with the current message.", "GetPointerFrameInfoHistory": "Gets the entire frame of information for the specified pointers associated with the current message.", "GetPointerFramePenInfo": "Gets the entire frame of pen-based information for the specified pointers associated with the current message.", "GetPointerFramePenInfoHistory": "Gets the entire frame of pen-based information associated with the current message.", "GetPointerFrameTouchInfo": "Gets the entire frame of touch-based information for the specified pointers associated with the current message.", "GetPointerFrameTouchInfoHistory": "Gets the entire frame of touch-based information associated with the current message.", "GetPointerInfo": "Gets the information for the specified pointer associated with the current message.", "GetPointerInfoHistory": "Gets the information associated with the individual inputs, if any, that were coalesced into the current message for the specified pointer.", "GetPointerInputTransform": "Gets one or more transforms for the pointer information coordinates associated with the current message.", "GetPointerPenInfo": "Gets the pen-based information for the specified pointer associated with the current message.", "GetPointerPenInfoHistory": "Gets the pen-based information associated with the individual inputs, if any, that were coalesced into the current message for the specified pointer.", "GetPointerTouchInfo": "Gets the touch-based information for the specified pointer associated with the current message.", "GetPointerTouchInfoHistory": "Gets the touch-based information associated with the individual inputs, if any, that were coalesced into the current message for the specified pointer.", "GetPointerType": "Retrieves the pointer type for a specified pointer.", "GetProcessWindowStation": "Retrieves a handle to the current window station for the calling process.", "GetRawInputBuffer": "Performs a buffered read of the raw input data.", "GetRawInputData": "Retrieves the raw input from the specified device.", "GetRawInputDeviceInfoA": "Retrieves information about the raw input device.", "GetRawInputDeviceInfoW": "Retrieves information about the raw input device.", "GetRawInputDeviceList": "Enumerates the raw input devices attached to the system.", "GetRegisteredRawInputDevices": "Retrieves the information about the raw input devices for the current application.", "GetSysColorBrush": "The GetSysColorBrush function retrieves a handle identifying a logical brush that corresponds to the specified color index.", "GetSystemDpiForProcess": "Retrieves the system DPI associated with a given process.", "GetSystemMetricsForDpi": "Retrieves the specified system metric or system configuration setting taking into account a provided DPI.", "GetTabbedTextExtentA": "The GetTabbedTextExtent function computes the width and height of a character string.", "GetTabbedTextExtentW": "The GetTabbedTextExtent function computes the width and height of a character string.", "GetThreadDesktop": "Retrieves a handle to the desktop assigned to the specified thread.", "GetThreadDpiAwarenessContext": "Gets the DPI_AWARENESS_CONTEXT for the current thread.", "GetThreadDpiHostingBehavior": "Retrieves the DPI_HOSTING_BEHAVIOR from the current thread.", "GetTouchInputInfo": "Retrieves detailed information about touch inputs associated with a particular touch input handle.", "GetUnpredictedMessagePos": "Gets pointer data before it has gone through touch prediction processing.", "GetUpdateRect": "The GetUpdateRect function retrieves the coordinates of the smallest rectangle that completely encloses the update region of the specified window.", "GetUpdateRgn": "The GetUpdateRgn function retrieves the update region of a window by copying it into the specified region.", "GetUserObjectInformationA": "Retrieves information about the specified window station or desktop object.", "GetUserObjectInformationW": "Retrieves information about the specified window station or desktop object.", "GetWindowDC": "The GetWindowDC function retrieves the device context for the entire window, including title bar, menus, and scroll bars.", "GetWindowDpiAwarenessContext": "Returns the DPI_AWARENESS_CONTEXT associated with a window.", "GetWindowDpiHostingBehavior": "Returns the DPI_HOSTING_BEHAVIOR of the specified window.", "GetWindowRgn": "The GetWindowRgn function obtains a copy of the window region of a window.", "GetWindowRgnBox": "The GetWindowRgnBox function retrieves the dimensions of the tightest bounding rectangle for the window region of a window.", "GID_ROTATE_ANGLE_FROM_ARGUMENT": "The GID_ROTATE_ANGLE_FROM_ARGUMENT macro is used to interpret the GID_ROTATE ullArgument value when receiving the value in the WM_GESTURE structure.", "GID_ROTATE_ANGLE_TO_ARGUMENT": "Converts a radian value to an argument for rotation gesture messages.", "GrayStringA": "The GrayString function draws gray text at the specified location.", "GrayStringW": "The GrayString function draws gray text at the specified location.", "GetHandleInformation": "Retrieves certain properties of an object handle.", "GetProcessHeap": "Retrieves a handle to the default heap of the calling process.", "GetProcessHeaps": "Returns the number of active heaps and retrieves handles to all of the active heaps for the calling process.", "GetLargePageMinimum": "Retrieves the minimum size of a large page.", "GetMemoryErrorHandlingCapabilities": "Gets the memory error handling capabilities of the system.", "GetProcessWorkingSetSize": "Retrieves the minimum and maximum working set sizes of the specified process.", "GetProcessWorkingSetSizeEx": "Retrieves the minimum and maximum working set sizes of the specified process.", "GetSystemFileCacheSize": "Retrieves the current size limits for the working set of the system cache.", "GetWriteWatch": "Retrieves the addresses of the pages that are written to in a region of virtual memory.", "HasOverlappedIoCompleted": "Provides a high performance test operation that can be used to poll for the completion of an outstanding I/O operation.", "HandleLogFull": "Called by a managed log client when an attempt to reserve or append to a log fails with a log full error message.", "HaveWriteAccess": "The HaveWriteAccess method indicates whether the write lock has been taken.", "HANDLE_WM_NOTIFY": "Calls a function that processes the WM_NOTIFY message.", "Header_ClearAllFilters": "Clears all of the filters for a given header control.", "Header_ClearFilter": "Clears the filter for a given header control.", "Header_CreateDragImage": "Creates a transparent version of an item image within an existing header control.", "Header_DeleteItem": "Deletes an item from a header control.", "Header_EditFilter": "Moves the input focus to the edit box when a filter button has the focus.", "Header_GetBitmapMargin": "Gets the width of the margin of a bitmap in an existing header control.", "Header_GetFocusedItem": "Gets the item in a header control that has the focus.", "Header_GetImageList": "Gets the handle to the image list that has been set for an existing header control.", "Header_GetItem": "Gets information about an item in a header control.", "Header_GetItemCount": "Gets a count of the items in a header control.", "Header_GetItemDropDownRect": "The header control must be of type HDF_SPLITBUTTON.", "Header_GetItemRect": "Gets the bounding rectangle for a given item in a header control.", "Header_GetOrderArray": "Gets the current left-to-right order of items in a header control.", "Header_GetOverflowRect": "The header control must be of type HDF_SPLITBUTTON.", "Header_GetStateImageList": "Gets the handle to the image list that has been set for an existing header control state.", "Header_GetUnicodeFormat": "Gets the Unicode character format flag for the control.", "Header_InsertItem": "Inserts a new item into a header control.", "Header_Layout": "Retrieves the correct size and position of a header control within the parent window.", "Header_OrderToIndex": "Retrieves an index value for an item based on its order in the header control.", "Header_SetBitmapMargin": "Sets the width of the margin for a bitmap in an existing header control.", "Header_SetFilterChangeTimeout": "Sets the timeout interval between the time a change takes place in the filter attributes and the posting of an HDN_FILTERCHANGE notification.", "Header_SetFocusedItem": "Sets the focus to a specified item in a header control.", "Header_SetHotDivider": "Changes the color of a divider between header items to indicate the destination of an external drag-and-drop operation.", "Header_SetImageList": "Assigns an image list to an existing header control.", "Header_SetItem": "Sets the attributes of the specified item in a header control.", "Header_SetOrderArray": "Sets the left-to-right order of header items.", "Header_SetStateImageList": "Assigns an image list to an existing header control state.", "Header_SetUnicodeFormat": "Sets the UNICODE character format flag for the control.", "HIMAGELIST_QueryInterface": "Retrieves a pointer to an IImageList or IImageList2 object that corresponds to the image list's HIMAGELIST handle.", "HandsOffStorage": "This call does not call the object's IRichEditOle::HandsOffStorage method ; the caller must do that.", "HexToUnicode": "Converts and replaces the hexadecimal number at the end of this range to a Unicode character.", "HitTestThemeBackground": "Retrieves a hit test code for a point in the background specified by a visual style.", "HomeKey": "Generalizes the functionality of the Home key.", "HyphenateProc": "The HyphenateProc function is an application\u00ef\u00bf\u00bddefined callback function used with the EM_SETHYPHENATEINFO message.", "HideCaret": "Removes the caret from the screen.", "HiliteMenuItem": "Adds or removes highlighting from an item in a menu bar.", "HandleEvent": "Handles AutoPlay device events for which there is no content of the type the application is registered to handle.", "HandleEventWithContent": "Not implemented.", "HandleEventWithHWND": "Handles AutoPlay device events that contain content types that the application is not registered to handle.", "HandleMenuMsg": "Enables client objects of the IContextMenu interface to handle messages associated with owner-drawn menu items.", "HandleMenuMsg2": "Allows client objects of the IContextMenu3 interface to handle messages associated with owner-drawn menu items.", "HandleRename": "Used to change an item's identifier.", "HasFocusIO": "Determines if one of the object's windows has the keyboard focus.", "HashData": "Hashes an array of data.", "HasRecordableDrive": "Scans the system for a CD drive with write-capability, returning TRUE if one is found.", "HasUserCancelled": "Checks whether the user has canceled the operation.", "HideDeskBand": "Hides a specified deskband.", "Hiding": "Called when the input pane is about to leave the display.", "HitTest": "Retrieves the item that a given point is in, if any.", "HrInit": "This method must be called before any other ITaskbarList methods can be called.", "HandleActiveTextPositionChangedEvent": "Handles a Microsoft UI Automation active text position change event.", "HandleAutomationEvent": "Handles a Microsoft UI Automation event.", "HandleChangesEvent": "Handles one or more Microsoft UI Automation change events.", "HandleFocusChangedEvent": "Handles the event raised when the keyboard focus moves to a different UI Automation element.", "HandleNotificationEvent": "Handles a Microsoft UI Automation notification event.", "HandlePropertyChangedEvent": "Handles a Microsoft UI Automation property-changed event.", "HandleStructureChangedEvent": "Handles an event that is raised when the Microsoft UI Automation tree structure has changed.", "HandleTextEditTextChangedEvent": "Handles an event that is raised when a Microsoft UI Automation provider for a text-edit control reports a programmatic text change.", "HOOKPROC": "An application-defined or library-defined callback function used with the SetWindowsHookEx function.", "HAS_POINTER_CONFIDENCE_WPARAM": "Checks whether the specified pointer message is considered intentional rather than accidental.", "HeapAlloc": "Allocates a block of memory from a heap.", "HeapCompact": "Returns the size of the largest committed free block in the specified heap.", "HeapCreate": "Creates a private heap object that can be used by the calling process.", "HeapDestroy": "Destroys the specified heap object.", "HeapFree": "Frees a memory block allocated from a heap by the HeapAlloc or HeapReAlloc function.", "HeapLock": "Attempts to acquire the critical section object, or lock, that is associated with a specified heap.", "HeapQueryInformation": "Retrieves information about the specified heap.", "HeapReAlloc": "Reallocates a block of memory from a heap.", "HeapSetInformation": "Enables features for a specified heap.", "HeapSize": "Retrieves the size of a memory block allocated from a heap by the HeapAlloc or HeapReAlloc function.", "HeapSummary": "", "HeapUnlock": "Releases ownership of the critical section object, or lock, that is associated with a specified heap.", "HeapValidate": "Validates the specified heap.", "HeapWalk": "Enumerates the memory blocks in the specified heap.", "InstallAssembly": "The InstallAssembly method adds an application reference to an assembly to the side-by-side store and copies the files of the assembly to the side-by-side store.", "InstallHinfSectionA": "InstallHinfSection is an entry-point function exported by Setupapi.dll that you can use to execute a section of an.inf file.", "InstallHinfSectionW": "InstallHinfSection is an entry-point function exported by Setupapi.dll that you can use to execute a section of an.inf file.", "INSTALLUI_HANDLER_RECORD": "The INSTALLUI_HANDLER_RECORD function prototype defines a callback function that the installer calls for progress notification and error messages.", "INSTALLUI_HANDLERA": "The INSTALLUI_HANDLER function prototype defines a callback function that the installer calls for progress notification and error messages.", "INSTALLUI_HANDLERW": "The INSTALLUI_HANDLER function prototype defines a callback function that the installer calls for progress notification and error messages.", "IsEqual": "Compares two table rows to determine if they have the same properties.", "InitializeThreadpoolEnvironment": "Initializes a callback environment.", "InterlockedAdd": "Performs an atomic addition operation on the specified LONG values.", "InterlockedAnd": "Performs an atomic AND operation on the specified LONG values.", "InterlockedAnd16": "Performs an atomic AND operation on the specified SHORT values.", "InterlockedAnd64": "Performs an atomic AND operation on the specified LONGLONG values.", "InterlockedAnd8": "Performs an atomic AND operation on the specified char values.", "InterlockedCompareExchange": "Performs an atomic compare-and-exchange operation on the specified values.", "InterlockedCompareExchange128": "Performs an atomic compare-and-exchange operation on the specified values.", "InterlockedCompareExchange16": "Performs an atomic compare-and-exchange operation on the specified values.", "InterlockedCompareExchange64": "Performs an atomic compare-and-exchange operation on the specified values.", "InterlockedCompareExchangePointer": "Performs an atomic compare-and-exchange operation on the specified values.", "InterlockedDecrement": "Decrements the value of the specified 32-bit variable as an atomic operation.", "InterlockedDecrement16": "Decrements the value of the specified 16-bit variable as an atomic operation.", "InterlockedDecrement64": "Decrements the value of the specified 64-bit variable as an atomic operation.", "InterlockedExchange": "Sets a 32-bit variable to the specified value as an atomic operation.", "InterlockedExchange16": "Sets a 16-bit variable to the specified value as an atomic operation.", "InterlockedExchange64": "Sets a 64-bit variable to the specified value as an atomic operation.", "InterlockedExchange8": "Sets an 8-bit variable to the specified value as an atomic operation.", "InterlockedExchangeAdd": "Performs an atomic addition of two 32-bit values.", "InterlockedExchangeAdd64": "Performs an atomic addition of two 64-bit values.", "InterlockedExchangePointer": "Atomically exchanges a pair of addresses.", "InterlockedExchangeSubtract": "Performs an atomic subtraction of two values.", "InterlockedIncrement": "Increments the value of the specified 32-bit variable as an atomic operation.", "InterlockedIncrement16": "Increments the value of the specified 16-bit variable as an atomic operation.", "InterlockedIncrement64": "Increments the value of the specified 64-bit variable as an atomic operation.", "InterlockedOr": "Performs an atomic OR operation on the specified LONG values.", "InterlockedOr16": "Performs an atomic OR operation on the specified SHORT values.", "InterlockedOr64": "Performs an atomic OR operation on the specified LONGLONG values.", "InterlockedOr8": "Performs an atomic OR operation on the specified char values.", "InterlockedXor": "Performs an atomic XOR operation on the specified LONG values.", "InterlockedXor16": "Performs an atomic XOR operation on the specified SHORT values.", "InterlockedXor64": "Performs an atomic XOR operation on the specified LONGLONG values.", "InterlockedXor8": "Performs an atomic XOR operation on the specified char values.", "IsAuthenticated": "Determines whether the peer is authenticated.", "IsAvailable": "Determines whether the peer is available to serve content.", "IsDownloadedFromPeer": "Gets a value that determines if any part of the file was downloaded from a peer.", "IsFileValidated": "Determines whether the file has been validated.", "InstallLogPolicy": "Installs a policy for a log.", "ImpersonateDdeClientWindow": "Enables a Dynamic Data Exchange server application to impersonate a DDE client application's security context.", "InitAtomTable": "Initializes the local atom table and sets the number of hash buckets to the specified size.", "IsClipboardFormatAvailable": "Determines whether the clipboard contains data in the specified format.", "IdentifyNtmsSlot": "The IdentifyNtmsSlot function identifies the media in the specified slot in a library.", "ImportNtmsDatabase": "The ImportNtmsDatabase function causes RSM to import the database files from the database Export directory at the next restart of the RSM.", "Initialize": "Called by the synchronization manager in a registered application handler to determine whether the handler processes the synchronization event.", "InjectNtmsCleaner": "The InjectNtmsCleaner function allows a cleaner cartridge to be inserted into the specified library unit.", "InjectNtmsMedia": "The InjectNtmsMedia function allows media to be inserted into the port of the specified library.", "Invalidate": "Invalidates the quota information stored in the quota user object.", "InvalidateSidNameCache": "Invalidates the contents of the system's SID-to-name cache so subsequent requests for new user objects must obtain user names from the domain controller.", "InventoryNtmsLibrary": "The InventoryNtmsLibrary function queues an inventory of the specified library.", "IoRingBufferRefFromIndexAndOffset": "Creates an instance of the IORING_BUFFER_REF structure with the provided buffer index and offset.", "IoRingBufferRefFromPointer": "Creates an instance of the IORING_BUFFER_REF structure from the provided pointer.", "IoRingHandleRefFromHandle": "Creates an instance of the IORING_HANDLE_REF structure from the provided file handle.", "IoRingHandleRefFromIndex": "Creates an instance of the IORING_HANDLE_REF structure from the provided index.", "IsIoRingOpSupported": "Queries the support of the specified operation for the specified I/O ring.", "IsReparseTagMicrosoft": "Determines whether a reparse point tag indicates a Microsoft reparse point.", "IsReparseTagNameSurrogate": "Determines whether a tag's associated reparse point is a surrogate for another named entity.", "InitializeObjectAttributes": "The InitializeObjectAttributes macro initializes the opaque OBJECT_ATTRIBUTES structure, which specifies the properties of an object handle to routines that open handles.", "IdentityUpdated": "Is called by an identity provider to notify a calling application that an identity event occurred.", "ImpersonateAnonymousToken": "Enables the specified thread to impersonate the system's anonymous logon token.", "ImpersonateLoggedOnUser": "Lets the calling thread impersonate the security context of a logged-on user.", "ImpersonateNamedPipeClient": "Impersonates a named-pipe client application.", "ImpersonateSecurityContext": "Allows a server to impersonate a client by using a token previously obtained by a call to AcceptSecurityContext or QuerySecurityContextToken.", "ImpersonateSelf": "Obtains an access token that impersonates the security context of the calling process.", "Import": "Imports an existing private key into a key container within a cryptographic provider.", "ImportCertificate": "Takes a previously issued certificate and imports it to the certification authority's database.", "ImportKey": "Adds an encrypted key set to an item in the Certificate Services database.", "ImportPFXToProvider": "Imports a PFX certificate.", "ImportPFXToProviderFreeData": "Frees PFX certificate context.", "ImportSecurityContextA": "Imports a security context.", "ImportSecurityContextW": "Imports a security context.", "InitializeAcl": "Initializes a new ACL structure.", "InitializeClientContext2": "Retrieves an IAzClientContext2 object pointer.", "InitializeClientContextFromName": "Gets an IAzClientContext object pointer from the client identity as a pair.", "InitializeClientContextFromStringSid": "Gets an IAzClientContext object pointer from the specified security identifier in text form.", "InitializeClientContextFromToken": "Gets an IAzClientContext object pointer from the specified client token.", "InitializeClientContextFromToken2": "Retrieves an IAzClientContext2 object pointer from the specified client token.", "InitializeDecode": "Initializes the extension from a Distinguished Encoding Rules encoded byte array that contains the extension value.", "InitializeDefaults": "Initializes a CMSCEPSetup object with default values to enable installation of a Network Device Enrollment Service role.", "InitializeEncode": "Initializes the extension from a string that contains the template name.", "InitializeEncodeFromEncryptedKeyBlob": "Initializes the attribute from an encrypted private key.", "InitializeForPending": "Initialize the instance to prepare to generate a message to either retrieve an issued certificate, or install a response for a previous request by the issuer.", "InitializeFromAlgorithmName": "Initializes the object from an algorithm name or an object identifier.", "InitializeFromCertificate": "Initializes the certificate request by using an existing certificate.", "InitializeFromCertificateHash": "Initializes the object from the new certificate.", "InitializeFromCurrentTime": "Initializes the property from a Boolean value and the current system date and time.", "InitializeFromEncodedPublicKeyInfo": "Initializes the object from a byte array that contains a public key.", "InitializeFromInnerRequest": "Initializes the certificate request from the inner PKCS", "InitializeFromInnerRequestTemplate": "Initializes the certificate request from an inner request object and a template.", "InitializeFromInnerRequestTemplateName": "The InitializeFromInnerRequestTemplateName method initializes the certificate request from an inner request object and a template.", "InitializeFromLocalRequestOriginator": "Initializes the object from the DNS name of the local computer.", "InitializeFromName": "Initializes the object from a CERTENROLL_OBJECTID enumeration value.", "InitializeFromObjectId": "Initializes a cryptographic attribute by using an object identifier.", "InitializeFromOtherName": "Initializes the object from an object identifier.", "InitializeFromPrivateKey": "Initializes the certificate request by using an IX509PrivateKey object and, optionally, a template.", "InitializeFromPrivateKeyTemplate": "Initializes the certificate request by using an IX509PrivateKey object and a certificate template.", "InitializeFromProperties": "Creates a property set from the properties contained in an existing server configuration.", "InitializeFromPublicKey": "Initializes a null-signed certificate request by using an IX509PublicKey object and, optionally, a template.", "InitializeFromPublicKeyTemplate": "Initializes a null-signed certificate request by using an IX509PublicKey object and a template.", "InitializeFromRawData": "Initializes the object from a Digital Signature Algorithm encoded byte array.", "InitializeFromRequest": "Initializes the enrollment object from an existing IX509CertificateRequest object.", "InitializeFromString": "Initializes the object from a string that contains an email address, a Domain Name System.", "InitializeFromTemplate": "Initializes the enrollment object by using a template.", "InitializeFromTemplateName": "Initializes the enrollment object from a template common name.", "InitializeFromType": "Initializes the object from the default cryptographic provider.", "InitializeFromValue": "Initializes the object from a string that contains a dotted decimal object identifier.", "InitializeFromValues": "Initializes a cryptographic attribute by using an IX509Attributes object.", "InitializeImport": "Initializes the certificate enrollment policy server from a collection of templates and object identifiers.", "InitializeInstallDefaults": "Initializes the ICertificateEnrollmentServerSetup object with a default configuration.", "InitializeSecurityContextA": "Initiates the client side, outbound security context from a credential handle.", "InitializeSecurityContextW": "Initiates the client side, outbound security context from a credential handle.", "InitializeSecurityDescriptor": "Initializes a new security descriptor.", "InitializeSid": "Initializes a security identifier.", "InitSecurityInterfaceA": "The InitSecurityInterface function returns a pointer to an SSPI dispatch table.", "InitSecurityInterfaceW": "The InitSecurityInterface function returns a pointer to an SSPI dispatch table.", "Install": "This method is invoked when the user selects Add or Add Later in Add/Remove Programs in Control Panel.", "InstallPKCS7": "Processes a certificate or chain of certificates, placing them into the appropriate certificate stores.", "InstallPKCS7Blob": "Processes a certificate or chain of certificates, placing them into the appropriate certificate stores.", "InstallPKCS7BlobEx": "The same as InstallPKCS7Blob except that it returns the number of certificates actually installed in local stores.", "InstallPKCS7Ex": "Processes a certificate or chain of certificates, placing them into the appropriate certificate stores.", "InstallResponse": "Installs a certificate chain on the end-entity computer.", "InstallResponse2": "Installs a certificate chain on the end-entity computer.", "IsCatalogFile": "Retrieves a Boolean value that indicates whether the specified file is a catalog file.", "IsDaclCanonical": "The IsDaclCanonical method determines whether the ACEs contained in the specified DACL structure are ordered according to the definition of DACL ordering implemented by the client.", "IsDirty": "The IsDirty method returns a value indicating whether data in the attachment snap-in has been modified since it was last saved.", "IsFunctionalLevelUpgradeSupported": "Gets a Boolean value that indicates whether the version of this authorization store can be upgraded.", "IsIndexed": "Reports whether the data in the column is indexed.", "IsInRoleAssignment": "Checks whether the principal represented by the current client context is a member of the specified role in the specified scope.", "IsMSCEPStoreEmpty": "Always returns VARIANT_TRUE.", "IsPropertyEditable": "Indicates to the caller whether a specified property can be edited.", "IsSmartCard": "Retrieves a Boolean value that indicates whether any of the cryptographic providers associated with the request object is a smart card provider.", "IsTokenRestricted": "Indicates whether a token contains a list of restricted security identifiers.", "IsUpdateNeeded": "Checks whether the persisted version of this authorization store is newer than the cached version.", "IsValidAcl": "Validates an access control list.", "IsValidCertificate": "Verifies the certificate against the certification authority key and checks that the certificate has not been revoked.", "IsValidSecurityDescriptor": "Determines whether the components of a security descriptor are valid.", "IsValidSid": "Validates a security identifier by verifying that the revision number is within a known range, and that the number of subauthorities is less than the maximum.", "IsWellKnownSid": "Compares a SID to a well-known SID and returns TRUE if they match.", "ImageList_Add": "Adds an image or images to an image list.", "ImageList_AddIcon": "Adds an icon or cursor to an image list.", "ImageList_AddMasked": "Adds an image or images to an image list, generating a mask from the specified bitmap.", "ImageList_BeginDrag": "Begins dragging an image.", "ImageList_Copy": "Copies images within a given image list.", "ImageList_Create": "Creates a new image list.", "ImageList_Destroy": "Destroys an image list.", "ImageList_DragEnter": "Displays the drag image at the specified position within the window.", "ImageList_DragLeave": "Unlocks the specified window and hides the drag image, allowing the window to be updated.", "ImageList_DragMove": "Moves the image that is being dragged during a drag-and-drop operation.", "ImageList_DragShowNolock": "Shows or hides the image being dragged.", "ImageList_Draw": "Draws an image list item in the specified device context.", "ImageList_DrawEx": "Draws an image list item in the specified device context.", "ImageList_DrawIndirect": "Draws an image list image based on an IMAGELISTDRAWPARAMS structure.", "ImageList_Duplicate": "Creates a duplicate of an existing image list.", "ImageList_EndDrag": "Ends a drag operation.", "ImageList_ExtractIcon": "Calls the ImageList_GetIcon function to create an icon or cursor based on an image and mask in an image list.", "ImageList_GetBkColor": "Retrieves the current background color for an image list.", "ImageList_GetDragImage": "Retrieves the temporary image list that is used for the drag image.", "ImageList_GetIcon": "Creates an icon from an image and mask in an image list.", "ImageList_GetIconSize": "All images in an image list have the same dimensions.", "ImageList_GetImageCount": "Retrieves the number of images in an image list.", "ImageList_GetImageInfo": "Retrieves information about an image.", "ImageList_LoadBitmap": "Calls the ImageList_LoadImage function to create an image list from the specified bitmap resource.", "ImageList_LoadImageA": "Creates an image list from the specified bitmap.", "ImageList_LoadImageW": "Creates an image list from the specified bitmap.", "ImageList_Merge": "The function also creates a new image list in which to store the image.", "ImageList_Read": "Reads an image list from a stream.", "ImageList_ReadEx": "Reads an image list from a stream, and returns an IImageList interface to the image list.", "ImageList_Remove": "Removes an image from an image list.", "ImageList_RemoveAll": "Calls the ImageList_Remove function to remove all of the images from an image list.", "ImageList_Replace": "Replaces an image in an image list with a new image.", "ImageList_ReplaceIcon": "Replaces an image with an icon or cursor.", "ImageList_SetBkColor": "Sets the background color for an image list.", "ImageList_SetDragCursorImage": "Creates a new drag image by combining the specified image with the current drag image.", "ImageList_SetIconSize": "Sets the dimensions of images in an image list and removes all images from the list.", "ImageList_SetImageCount": "Resizes an existing image list.", "ImageList_SetOverlayImage": "An image list can have up to four overlay masks in version 4.70 and earlier and up to 15 in version 4.71.", "ImageList_Write": "Writes an image list to a stream.", "ImageList_WriteEx": "Writes an image list to a stream.", "INDEXTOOVERLAYMASK": "Prepares the index of an overlay mask so that the ImageList_Draw function can use it.", "INDEXTOSTATEIMAGEMASK": "Prepares the index of a state image so that a tree-view control or list-view control can use the index to retrieve the state image for an item.", "InitCommonControls": "This function is obsolete.", "InitCommonControlsEx": "Ensures that the common control DLL is loaded, and registers specific common control classes from the DLL.", "InitializeFlatSB": "Initializes flat scroll bars for a particular window.", "InitMUILanguage": "Enables an application to specify a language to be used with the common controls that is different from the system language.", "ImageList_CoCreateInstance": "Creates a single instance of an imagelist and returns an interface pointer to it.", "ImportDataObject": "Imports a clipboard object into a rich edit control, replacing the current selection.", "InitializeTouchInjection": "Configures the touch injection context for the calling application and initializes the maximum number of simultaneous contacts that the app can inject.", "InjectSyntheticPointerInput": "Simulates pointer input.", "InjectTouchInput": "Simulates touch input.", "InPlaceDeactivate": "Indicates when a rich edit control is to deactivate the currently active in-place object, if any.", "InRange": "Determines whether this range is within or at the same text as a specified range.", "Insert": "Inserts a row, or rows, at the location identified by the associated ITextRange2 object.", "InsertImage": "Inserts an image into this range.", "InsertNullStr": "Inserts a NULL string in the collection at a selected string index.", "InsertObject": "Inserts an object into a rich edit control.", "InsertTable": "Inserts a table in a range.", "InStory": "Determines whether this range's story is the same as a specified range's story.", "IsAppThemed": "Reports whether the current application's user interface displays using visual styles.", "IsCompositionActive": "Determines whether Desktop Window Manager composition effects are available to the theme.", "IsDlgButtonChecked": "The IsDlgButtonChecked function determines whether a button control is checked or whether a three-state button control is checked, unchecked, or indeterminate.", "IsEqual2": "Determines whether this text paragraph object has the same properties as the specified text paragraph object.", "IsThemeActive": "Tests if a visual style for the current application is active.", "IsThemeBackgroundPartiallyTransparent": "Retrieves whether the background specified by the visual style has transparent pieces or alpha-blended pieces.", "IsThemeDialogTextureEnabled": "Reports whether a specified dialog window supports background texturing.", "IsThemePartDefined": "Retrieves whether a visual style has defined parameters for the specified part and state.", "IsVisible": "Indicates whether a windowless rich edit control is currently visible.", "Item": "Gets the identifier of a specific item in the folder view, by index.", "Item2": "Gets an ITextRange2 object for a story, by index, in a stories collection.", "IdnToAscii": "Converts an internationalized domain name representation of the ASCII string that represents the name in the Punycode transfer encoding syntax.", "IdnToNameprepUnicode": "Converts an internationalized domain name or another internationalized label to the NamePrep form specified by Network Working Group RFC 3491, but does not perform the additional conversion to Punycode.", "IdnToUnicode": "Converts the Punycode form of an internationalized domain name or another internationalized label to the normal Unicode UTF-16 encoding syntax.", "Ignore": "Ignores the provided word for the rest of this session.", "IMCENUMPROC": "An application-defined callback function that processes input contexts provided by the ImmEnumInputContext function.", "ImmAssociateContext": "By default, the operating system associates the default input context with each window as it is created.", "ImmAssociateContextEx": "Changes the association between the input method context and the specified window or its children.", "ImmConfigureIMEA": "Displays the configuration dialog box for the IME of the specified input locale identifier.", "ImmConfigureIMEW": "Displays the configuration dialog box for the IME of the specified input locale identifier.", "ImmCreateContext": "Creates a new input context, allocating memory for the context and initializing it.", "ImmDestroyContext": "Releases the input context and frees associated memory.", "ImmDisableIME": "Disables the IME for a thread or for all threads in a process.", "ImmDisableLegacyIME": "Indicates that this thread is a Windows Store app UI thread.", "ImmDisableTextFrameService": "ImmDisableTextFrameService is no longer available for use as of Windows\u00c2\u00a0Vista.", "ImmEnumInputContext": "Retrieves the input context for the specified thread.", "ImmEnumRegisterWordA": "Enumerates the register strings having the specified reading string, style, and register string.", "ImmEnumRegisterWordW": "Enumerates the register strings having the specified reading string, style, and register string.", "ImmEscapeA": "Accesses capabilities of particular IMEs that are not available through other IME API functions.", "ImmEscapeW": "Accesses capabilities of particular IMEs that are not available through other IME API functions.", "ImmGetCandidateListA": "Retrieves a candidate list.", "ImmGetCandidateListCountA": "Retrieves the size of the candidate lists.", "ImmGetCandidateListCountW": "Retrieves the size of the candidate lists.", "ImmGetCandidateListW": "Retrieves a candidate list.", "ImmGetCandidateWindow": "Retrieves information about the candidates window.", "ImmGetCompositionFontA": "Retrieves information about the logical font currently used to display characters in the composition window.", "ImmGetCompositionFontW": "Retrieves information about the logical font currently used to display characters in the composition window.", "ImmGetCompositionStringA": "Retrieves information about the composition string.", "ImmGetCompositionStringW": "Retrieves information about the composition string.", "ImmGetCompositionWindow": "Retrieves information about the composition window.", "ImmGetContext": "Returns the input context associated with the specified window.", "ImmGetConversionListA": "Retrieves the conversion result list of characters or words without generating any IME-related messages.", "ImmGetConversionListW": "Retrieves the conversion result list of characters or words without generating any IME-related messages.", "ImmGetConversionStatus": "Retrieves the current conversion status.", "ImmGetDefaultIMEWnd": "Retrieves the default window handle to the IME class.", "ImmGetDescriptionA": "Copies the description of the IME to the specified buffer.", "ImmGetDescriptionW": "Copies the description of the IME to the specified buffer.", "ImmGetGuideLineA": "Applications use the information for user notifications.", "ImmGetGuideLineW": "Applications use the information for user notifications.", "ImmGetIMEFileNameA": "Retrieves the file name of the IME associated with the specified input locale.", "ImmGetIMEFileNameW": "Retrieves the file name of the IME associated with the specified input locale.", "ImmGetImeMenuItemsA": "Retrieves the menu items that are registered in the IME menu of a specified input context.", "ImmGetImeMenuItemsW": "Retrieves the menu items that are registered in the IME menu of a specified input context.", "ImmGetOpenStatus": "Determines whether the IME is open or closed.", "ImmGetProperty": "Retrieves the property and capabilities of the IME associated with the specified input locale.", "ImmGetRegisterWordStyleA": "Retrieves a list of the styles supported by the IME associated with the specified input locale.", "ImmGetRegisterWordStyleW": "Retrieves a list of the styles supported by the IME associated with the specified input locale.", "ImmGetStatusWindowPos": "Retrieves the position of the status window.", "ImmGetVirtualKey": "Retrieves the original virtual key value associated with a key input message that the IME has already processed.", "ImmInstallIMEA": "Installs an IME.", "ImmInstallIMEW": "Installs an IME.", "ImmIsIME": "Determines if the specified input locale has an IME.", "ImmIsUIMessageA": "Checks for messages intended for the IME window and sends those messages to the window.", "ImmIsUIMessageW": "Checks for messages intended for the IME window and sends those messages to the window.", "ImmNotifyIME": "Notifies the IME about changes to the status of the input context.", "ImmRegisterWordA": "Registers a string with the dictionary of the IME associated with the specified input locale.", "ImmRegisterWordW": "Registers a string with the dictionary of the IME associated with the specified input locale.", "ImmReleaseContext": "Releases the input context and unlocks the memory associated in the input context.", "ImmRequestMessageA": "Generates a WM_IME_REQUEST message.", "ImmRequestMessageW": "Generates a WM_IME_REQUEST message.", "ImmSetCandidateWindow": "Sets information about the candidates window.", "ImmSetCompositionFontA": "Sets the logical font to use to display characters in the composition window.", "ImmSetCompositionFontW": "Sets the logical font to use to display characters in the composition window.", "ImmSetCompositionStringA": "Sets the characters, attributes, and clauses of the composition and reading strings.", "ImmSetCompositionStringW": "Sets the characters, attributes, and clauses of the composition and reading strings.", "ImmSetCompositionWindow": "Sets the position of the composition window.", "ImmSetConversionStatus": "Sets the current conversion status.", "ImmSetOpenStatus": "Opens or closes the IME.", "ImmSetStatusWindowPos": "Sets the position of the status window.", "ImmSimulateHotKey": "Simulates the specified IME hot key, causing the same response as if the user presses the hot key in the specified window.", "ImmUnregisterWordA": "Removes a register string from the dictionary of the IME associated with the specified input locale.", "ImmUnregisterWordW": "Removes a register string from the dictionary of the IME associated with the specified input locale.", "InitializeWordlist": "Initialize the specified word list to contain only the specified words.", "Invoke": "Invokes the action of a control, such as a button click.", "InvokeDictToolDialog": "Invokes the Microsoft IME's Dictionary Tool from the app.", "InvokeWordRegDialog": "Invokes the Microsoft IME Word Register Dialog Window from the app.", "IS_HIGH_SURROGATE": "Determines if a character is a UTF-16 high surrogate code point, ranging from 0xd800 to 0xdbff, inclusive.", "IS_LOW_SURROGATE": "Determines if a character is a UTF-16 low surrogate code point, ranging from 0xdc00 to 0xdfff, inclusive.", "IS_SURROGATE_PAIR": "Determines if the specified code units form a UTF-16 surrogate pair.", "IsDBCSLeadByte": "Determines if a specified character is a lead byte for the system default Windows ANSI code page for the code page.", "IsDBCSLeadByteEx": "Determines if a specified character is potentially a lead byte.", "IsDefaultIME": "Determines if the IME specified by the class ID is the default IME on a local computer.", "IsNLSDefinedString": "Determines if each character in a string has a defined result for a specified NLS capability.", "IsNormalizedString": "Verifies that a string is normalized according to Unicode 4.0 TR#15.", "IsSupported": "Determines if the specified language is supported by a registered spell checker.", "IsTextUnicode": "Determines if a buffer is likely to contain a form of Unicode text.", "IsValidCodePage": "Determines if a specified code page is valid.", "IsValidLanguageGroup": "Determines if a language group is installed or supported on the operating system.", "IsValidLocale": "Determines if the specified locale is installed or supported on the operating system.", "IsValidLocaleName": "Determines if the specified locale name is valid for a locale that is installed or supported on the operating system.", "IsValidNLSVersion": "Determines if the NLS version is valid for a given NLS function.", "IndexFilePath": "Indexes a file path for file and folder naming conventions.", "InsertMenuA": "Inserts a new menu item into a menu, moving other items down the menu.", "InsertMenuItemA": "Inserts a new menu item at the specified position in a menu.", "InsertMenuItemW": "Inserts a new menu item at the specified position in a menu.", "InsertMenuW": "Inserts a new menu item into a menu, moving other items down the menu.", "IS_INTRESOURCE": "Determines whether a value is an integer identifier for a resource.", "IsCharAlphaA": "Determines whether a character is an alphabetical character.", "IsCharAlphaNumericA": "Determines whether a character is either an alphabetical or a numeric character.", "IsCharAlphaNumericW": "Determines whether a character is either an alphabetical or a numeric character.", "IsCharAlphaW": "Determines whether a character is an alphabetical character.", "IsCharLowerA": "Determines whether a character is lowercase.", "IsCharUpperA": "Determines whether a character is uppercase.", "IsCharUpperW": "Determines whether a character is uppercase.", "IsMenu": "Determines whether a handle is a menu handle.", "IsWellFormedTag": "Determines whether a BCP-47 language tag is well-formed.", "IDListContainerIsConsistent": "Verifies that the container structure of an IDList is valid.", "IEGetDisplayName": "Deprecated.", "IEParseDisplayName": "Deprecated.", "IEParseDisplayNameEx": "Deprecated.", "IID_PPV_ARGS": "Used to retrieve an interface pointer, supplying the IID value of the requested interface automatically based on the type of the interface pointer used.", "ILAppendID": "Appends or prepends an SHITEMID structure to an ITEMIDLIST structure.", "ILClone": "Clones an ITEMIDLIST structure.", "ILCloneChild": "Clones a child ITEMIDLIST structure.", "ILCloneFirst": "Clones the first SHITEMID structure in an ITEMIDLIST structure.", "ILCloneFull": "Clones a full, or absolute, ITEMIDLIST structure.", "ILCombine": "Combines two ITEMIDLIST structures.", "ILCreateFromPath": "Returns the ITEMIDLIST structure associated with a specified file path.", "ILCreateFromPathA": "Returns the ITEMIDLIST structure associated with a specified file path.", "ILCreateFromPathW": "Returns the ITEMIDLIST structure associated with a specified file path.", "ILFindChild": "Determines whether a specified ITEMIDLIST structure is the child of another ITEMIDLIST structure.", "ILFindLastID": "Returns a pointer to the last SHITEMID structure in an ITEMIDLIST structure.", "ILFree": "Frees an ITEMIDLIST structure allocated by the Shell.", "ILGetNext": "Retrieves the next SHITEMID structure in an ITEMIDLIST structure.", "ILGetSize": "Returns the size, in bytes, of an ITEMIDLIST structure.", "ILIsAligned": "Verifies whether a constant ITEMIDLIST is aligned on a pointer boundary, which is a DWORD on 32-bit architectures and a QWORD on 64-bit architectures.", "ILIsChild": "Verifies whether a pointer to an item identifier list is a child PIDL, which is a PIDL with exactly one SHITEMID.", "ILIsEmpty": "Verifies whether an ITEMIDLIST structure is empty.", "ILIsEqual": "Tests whether two ITEMIDLIST structures are equal in a binary comparison.", "ILIsParent": "Tests whether an ITEMIDLIST structure is the parent of another ITEMIDLIST structure.", "ILLoadFromStream": "Deprecated.", "ILLoadFromStreamEx": "This function may be altered or unavailable.", "ILNext": "Retrieves the next SHITEMID structure in an ITEMIDLIST structure.", "ILRemoveLastID": "Removes the last SHITEMID structure from an ITEMIDLIST structure.", "ILSaveToStream": "Saves an ITEMIDLIST structure to a stream.", "ILSkip": "Skips a given number of bytes in a constant, unaligned, relative ITEMIDLIST structure.", "IncludeItem": "Sets a given Shell item status to inclusion in the view.", "IncludeItems": "Allows the view to filter the items shown in the menu.", "IncludeObject": "Allows the common dialog box to filter objects that the view displays.", "InetIsOffline": "Determines whether the system is connected to the Internet.", "Init": "Initializes the IQueryAssociations interface and sets the root key to the appropriate ProgID.", "InitializeBitmap": "Initializes a new ISharedBitmap object with a given bitmap.", "InitializeDownloadManager": "Deprecated.", "InitializeEx": "If the folder is a shortcut, this method also specifies the location of the target folder.", "InitializeFromBitmap": "Initializes the drag-image manager for a windowless control.", "InitializeFromWindow": "Initializes the drag-image manager for a control with a window.", "InitializeProgressDialog": "Initializes the window title and cancel button text of the progress dialog box displayed during the namespace walk.", "InitializeSFB": "Initializes an IShellFolderBand object.", "InitializeTransitionSite": "Deprecated.", "InitializeTravelLog": "Deprecated.", "InitNetworkAddressControl": "Initializes the network address control window class.", "InitWizard": "Initializes the sync schedule wizard.", "InOperation": "Called by the drop source to determine whether the target is extracting data asynchronously.", "InsertItem": "Adds an ITEMIDLIST structure to a list of such structures.", "InsertMenuEntries": "Deprecated.", "InsertMenusSB": "Allows the container to insert its menu groups into the composite menu that is displayed when an extended namespace is being viewed or used.", "InsertRoot": "Inserts a Shell item on a root item in a tree.", "Install2": "Installs an application published by an application publisher, while preventing multiple windows from being active on the same thread.", "Int8Add": "Adds two values of type INT8.", "Int8Mult": "Multiplies two values of type INT8.", "Int8Sub": "Subtracts one value of type INT8 from another.", "Int8ToUChar": "Converts a value of type INT8 to a value of type UCHAR.", "Int8ToUInt": "Converts a value of type INT8 to a value of type UINT.", "Int8ToUInt8": "Converts a value of type INT8 to a value of type UINT8.", "Int8ToUIntPtr": "Converts a value of type INT8 to a value of type UINT_PTR.", "Int8ToULong": "Converts a value of type INT8 to a value of type ULONG.", "Int8ToULongLong": "Converts a value of type INT8 to a value of type ULONGLONG.", "Int8ToULongPtr": "Converts a value of type INT8 to a value of type ULONG_PTR.", "Int8ToUShort": "Converts a value of type INT8 to a value of type USHORT.", "IntAdd": "Adds two values of type INT.", "IntlStrEqNA": "Performs a case-sensitive comparison of a specified number of characters from the beginning of two localized strings.", "IntlStrEqNIA": "Performs a case-insensitive comparison of a specified number of characters from the beginning of two localized strings.", "IntlStrEqNIW": "Performs a case-insensitive comparison of a specified number of characters from the beginning of two localized strings.", "IntlStrEqNW": "Performs a case-sensitive comparison of a specified number of characters from the beginning of two localized strings.", "IntlStrEqWorkerA": "Compares a specified number of characters from the beginning of two localized strings.", "IntlStrEqWorkerW": "Compares a specified number of characters from the beginning of two localized strings.", "IntMult": "Multiplies two values of type INT.", "IntPtrAdd": "Adds two values of type INT_PTR.", "IntPtrMult": "Multiplies two values of type INT_PTR.", "IntPtrSub": "Subtracts one value of type INT_PTR from another.", "IntPtrToChar": "Converts a value of type INT_PTR to a value of type CHAR.", "IntPtrToInt": "Converts a value of type INT_PTR to a value of type INT.", "IntPtrToInt8": "Converts a value of type INT_PTR to a value of type INT8.", "IntPtrToLong": "Converts a value of type INT_PTR to a value of type LONG.", "IntPtrToLongPtr": "Converts a value of type INT_PTR to a value of type LONG_PTR.", "IntPtrToShort": "Converts a value of type INT_PTR to a value of type SHORT.", "IntPtrToUChar": "Converts a value of type INT_PTR to a value of type UCHAR.", "IntPtrToUInt": "Converts a value of type INT_PTR to a value of type UINT.", "IntPtrToUInt8": "Converts a value of type INT_PTR to a value of type UINT8.", "IntPtrToUIntPtr": "Converts a value of type INT_PTR to a value of type UINT_PTR.", "IntPtrToULong": "Converts a value of type INT_PTR to a value of type ULONG.", "IntPtrToULongLong": "Converts a value of type INT_PTR to a value of type ULONGLONG.", "IntPtrToULongPtr": "Converts a value of type INT_PTR to a value of type ULONG_PTR.", "IntPtrToUShort": "Converts a value of type INT_PTR to a value of type USHORT.", "IntSub": "Subtracts one value of type INT from another.", "IntToChar": "Converts a value of type INT to a value of type CHAR.", "IntToInt8": "Converts a value of type INT to a value of type INT8.", "IntToShort": "Converts a value of type INT to a value of type SHORT.", "IntToUChar": "Converts a value of type INT to a value of type UCHAR.", "IntToUInt": "Converts a value of type INT to a value of type UINT.", "IntToUInt8": "Converts a value of type INT to a value of type UINT8.", "IntToULong": "Converts a value of type INT to a value of type ULONG.", "IntToULongLong": "Converts a value of type INT to a value of type UINT_PTR.", "IntToUShort": "Converts a value of type INT to a value of type USHORT.", "InvalidateItem": "Redraws an item in a menu band.", "InvokeCommand": "Carries out the command associated with a shortcut menu item.", "InvokeVerbOnSelection": "Invokes the given verb on the current selection.", "IsActive": "Gets a value that indicates whether the handler can be synchronized.", "IsAnimated": "Determines whether the image is animated.", "IsApplicationViewStateSupported": "Determines whether a particular application view state is supported for specific spoofed display size and scale factor settings.", "IsBkDropTarget": "IsBkDropTarget may be altered or unavailable.", "IsCharSpaceA": "Determines whether a character represents a space.", "IsCharSpaceW": "Determines whether a character represents a space.", "IsConnected": "Generates a value that indicates whether the item\u00ef\u00bf\u00bdtypically some type of external device\u00ef\u00bf\u00bdis connected.", "IsControlWindowShown": "Deprecated.", "IsDecoded": "Determines whether the image has been decoded by calling IShellImageData::Decode.", "IsDelegateFolder": "Gets a Boolean value specifying whether the factory is a delegate folder.", "IsDeskBandShown": "Indicates whether a deskband is shown.", "IsDropOnSource": "Checks whether the destination of the current drag-and-drop or cut-and-paste operation is the same as the source.", "IsEditable": "Determines whether the image can be edited.", "IsEnabled": "Generates a value that indicates whether the item is enabled.", "IsEntryInStore": "Checks to see if the image is in the store.", "IsEqualPropertyKey": "Compares the members of two PROPERTYKEY structures and returns whether they are equal.", "IsInstalled": "Gets a value indicating whether a specified application is currently installed.", "IsInternetESCEnabled": "Determines whether Windows Internet Explorer is in the Enhanced Security Configuration.", "IsLauncherVisible": "Gets a value that indicates whether the Start screen is displayed.", "IsMember": "Determines whether the local computer is a member of a HomeGroup.", "IsMemberOf": "Specifies whether an icon overlay should be added to a Shell object's icon.", "IsMenuMessage": "A message pump calls this method to see if any messages should be redirected to the Component Object Model object.", "IsMoveInSameFolder": "Checks to see if this view sourced the current drag-and-drop or cut-and-paste operation.", "IsMultipage": "Determines whether the image is a multipage Tagged Image File Format image.", "IsNetDrive": "Tests whether a drive is a network drive.", "IsOS": "Checks for specified operating systems and operating system features.", "IsPrintable": "Determines whether the image can be printed.", "IsRecommended": "Indicates whether the application is registered as a recommended handler for the queried file type.", "IsRunning": "Requests information on the state of a task, such as thumbnail extraction.", "IsTransparent": "Determines whether the image is transparent.", "IStream_Copy": "Copies a stream to another stream.", "IStream_Read": "Reads bytes from a specified stream and returns a value that indicates whether all bytes were successfully read.", "IStream_ReadPidl": "Reads a pointer to an item identifier list from an IStream object into a PIDLIST_RELATIVE object.", "IStream_ReadStr": "Reads from a stream and writes into a string.", "IStream_Reset": "Moves the seek position in a specified stream to the beginning of the stream.", "IStream_Size": "Retrieves the size, in bytes, of a specified stream.", "IStream_Write": "Writes data of unknown format from a buffer to a specified stream.", "IStream_WritePidl": "Writes a pointer to an item identifier list from a PCUIDLIST_RELATIVE object into an IStream object.", "IStream_WriteStr": "Reads from a string and writes into a stream.", "IsUserAnAdmin": "IsUserAnAdmin may be altered or unavailable.", "IsVector": "Determines whether the image is a vector image.", "IsWindowOnCurrentVirtualDesktop": "Indicates whether the provided window is on the currently active virtual desktop.", "ItemCount": "Gets the number of items in the folder.", "ItemPostPaint": "Called after an item in the namespace tree control is drawn.", "ItemPrePaint": "Called before an item in the namespace tree control is drawn.", "Items": "Gets the address of an enumeration object based on the collection of items in the folder view.", "IUnknown_AtomicRelease": "Releases a Component Object Model pointer and sets it to NULL.", "IUnknown_GetSite": "Calls the specified object's IObjectWithSite::GetSite method.", "IUnknown_GetWindow": "Attempts to retrieve a window handle from a Component Object Model object by querying for various interfaces that have a GetWindow method.", "IUnknown_QueryService": "Retrieves an interface for a service from a specified object.", "IUnknown_Set": "Changes the value of a Component Object Model interface pointer and releases the previous interface.", "IUnknown_SetSite": "Sets the specified object's site by calling its IObjectWithSite::SetSite method.", "InsertEntries": "Inserts entries into the table of proxy factories.", "InsertEntry": "Insert an entry into the table of proxy factories.", "IntNativeArrayToSafeArray": "Converts an array of integers to a SAFEARRAY.", "IntSafeArrayToNativeArray": "Converts a SAFEARRAY of integers to an array.", "InvokePattern_Invoke": "Sends a request to activate a control and initiate its single, unambiguous action.", "IsWinEventHookInstalled": "Determines whether there is an installed WinEvent hook that might be notified of a specified event.", "ItemContainerPattern_FindItemByProperty": "Retrieves a node within a containing node, based on a specified property value.", "InitializeContext": "Initializes a CONTEXT structure inside a buffer with the necessary size and alignment.", "InitializeContext2": "Initializes a CONTEXT structure inside a buffer with the necessary size and alignment, with the option to specify an XSTATE compaction mask.", "IsBadCodePtr": "Determines whether the calling process has read access to the memory at the specified address.", "IsBadReadPtr": "Verifies that the calling process has read access to the specified range of memory.", "IsBadStringPtrA": "Verifies that the calling process has read access to the specified range of memory.", "IsBadStringPtrW": "Verifies that the calling process has read access to the specified range of memory.", "IsBadWritePtr": "Verifies that the calling process has write access to the specified range of memory.", "IsNativeVhdBoot": "Indicates if the OS was booted from a VHD container.", "IsSystemResumeAutomatic": "Determines the current state of the computer.", "InSendMessage": "Determines whether the current window procedure is processing a message that was sent from another thread by a call to the SendMessage function.", "InSendMessageEx": "Determines whether the current window procedure is processing a message that was sent from another thread.", "InternalGetWindowText": "Copies the text of the specified window's title bar into a buffer.", "IsChild": "Determines whether a window is a child window or descendant window of a specified parent window.", "IsGUIThread": "Determines whether the calling thread is already a GUI thread.", "IsHungAppWindow": "Determines whether the system considers that a specified application is not responding.", "IsIconic": "Determines whether the specified window is minimized.", "IsProcessDPIAware": "IsProcessDPIAware may be altered or unavailable.", "IsWindow": "Determines whether the specified window handle identifies an existing window.", "IsWindowUnicode": "Determines whether the specified window is a native Unicode window.", "IsWindowVisible": "Determines the visibility state of the specified window.", "IsZoomed": "Determines whether a window is maximized.", "Int32x32To64": "Multiplies two signed 32-bit integers, returning a signed 64-bit integer result.", "Int64ShllMod32": "Performs a left logical shift operation on an unsigned 64-bit integer value.", "Int64ShraMod32": "Performs a right arithmetic shift operation on a signed 64-bit integer value.", "Int64ShrlMod32": "Performs a right logical shift operation on an unsigned 64-bit integer value.", "InflateRect": "The InflateRect function increases or decreases the width and height of the specified rectangle.", "IntersectRect": "The IntersectRect function calculates the intersection of two source rectangles and places the coordinates of the intersection rectangle into the destination rectangle.", "InvalidateRect": "The InvalidateRect function adds a rectangle to the specified window's update region.", "InvalidateRgn": "The InvalidateRgn function invalidates the client area within the specified region by adding it to the current update region of a window.", "InvertRect": "The InvertRect function inverts a rectangle in a window by performing a logical NOT operation on the color values for each pixel in the rectangle's interior.", "IS_POINTER_CANCELED_WPARAM": "Checks whether the specified pointer input ended abruptly, or was invalid, indicating the interaction was not completed.", "IS_POINTER_FIFTHBUTTON_WPARAM": "Checks whether the specified pointer took fifth action.", "IS_POINTER_FIRSTBUTTON_WPARAM": "Checks whether the specified pointer took first action.", "IS_POINTER_FLAG_SET_WPARAM": "Checks whether a pointer macro sets the specified flag.", "IS_POINTER_FOURTHBUTTON_WPARAM": "Checks whether the specified pointer took fourth action.", "IS_POINTER_INCONTACT_WPARAM": "Checks whether the specified pointer is in contact.", "IS_POINTER_INRANGE_WPARAM": "Checks whether the specified pointer is in range.", "IS_POINTER_NEW_WPARAM": "Checks whether the specified pointer is a new pointer.", "IS_POINTER_SECONDBUTTON_WPARAM": "Checks whether the specified pointer took second action.", "IS_POINTER_THIRDBUTTON_WPARAM": "Checks whether the specified pointer took third action.", "IsCharLowerW": "", "IsDialogMessageA": "Determines whether a message is intended for the specified dialog box and, if it is, processes the message.", "IsDialogMessageW": "Determines whether a message is intended for the specified dialog box and, if it is, processes the message.", "IsImmersiveProcess": "Determines whether the process belongs to a Windows Store app.", "IsMouseInPointerEnabled": "Indicates whether EnableMouseInPointer is set for the mouse to act as a pointer input device and send WM_POINTER messages.", "IsRectEmpty": "The IsRectEmpty function determines whether the specified rectangle is empty.", "IsTouchWindow": "Checks whether a specified window is touch-capable and, optionally, retrieves the modifier flags set for the window's touch capability.", "IsValidDpiAwarenessContext": "Determines if a specified DPI_AWARENESS_CONTEXT is valid and supported by the current system.", "IsWindowEnabled": "Determines whether the specified window is enabled for mouse and keyboard input.", "IsWow64Message": "Determines whether the last message read from the current thread's queue originated from a WOW64 process.", "InitiateShutdownA": "Initiates a shutdown and restart of the specified computer, and restarts any applications that have been registered for restart.", "InitiateShutdownW": "Initiates a shutdown and restart of the specified computer, and restarts any applications that have been registered for restart.", "InitiateSystemShutdownA": "Initiates a shutdown and optional restart of the specified computer.", "InitiateSystemShutdownExA": "Initiates a shutdown and optional restart of the specified computer, and optionally records the reason for the shutdown.", "InitiateSystemShutdownExW": "Initiates a shutdown and optional restart of the specified computer, and optionally records the reason for the shutdown.", "InitiateSystemShutdownW": "Initiates a shutdown and optional restart of the specified computer.", "JobError": "BITS calls your implementation of the JobError method when the state of the job changes to BG_JOB_STATE_ERROR.", "JobModification": "BITS calls your implementation of the JobModification method when the job has been modified.", "JobTransferred": "BITS calls your implementation of the JobTransferred method when all of the files in the job have been successfully transferred.", "KeyCredentialManagerFreeInformation": "API to free the KeyCredentialManagerInfo pointer variable from the KeyCredentialManagerGetInformation call.", "KeyCredentialManagerGetInformation": "API to get a unique identifier of the users enrollment.", "KeyCredentialManagerGetOperationErrorStates": "Prerequisite API to call to determine if the operation will be successful prior.", "KeyCredentialManagerShowUIOperation": "API to perform the requested WHFB operation.", "KspDeleteContextFn": "Deletes a security context.", "KspMakeSignatureFn": "Generates a signature based on the specified message and security context.", "KspVerifySignatureFn": "Verifies that the message received is correct according to the signature.", "KeepItems": "Keeps the Shell items that are passed in.", "KeepOther": "Replaces the versions in conflict with a different Shell item that is usually a merged version of the originals.", "KeepRecent": "Keeps the more recent copy.", "Kill": "Requests that a task be stopped.", "KillTimer": "Destroys the specified timer.", "keybd_event": "Synthesizes a keystroke.", "Log": "The Log method writes a text string to the currently open log file.", "LPDISPLAYVAL": "The LPDISPLAYVAL function specification defines a callback function prototype.", "LPEVALCOMCALLBACK": "The LPEVALCOMCALLBACK specification defines a callback function prototype.", "LogTailAdvanceFailure": "The LogTailAdvanceFailure function is called by a log client to indicate that it cannot comply with a request from log management to advance its tail.", "LocalFileTimeToFileTime": "Converts a local file time to a file time based on the Coordinated Universal Time.", "LockFile": "Locks the specified file for exclusive access by the calling process.", "LockFileEx": "Locks the specified file for exclusive access by the calling process.", "LPOVERLAPPED_COMPLETION_ROUTINE": "An application-defined callback function used with the ReadFileEx and WriteFileEx functions.", "LPPROGRESS_ROUTINE": "An application-defined callback function used with the CopyFileEx, MoveFileTransacted, and MoveFileWithProgress functions.", "LsnBlockOffset": "Returns the sector-aligned block offset that is contained in the specified LSN.", "LsnContainer": "Retrieves the logical container ID that is contained in a specified LSN.", "LsnCreate": "Creates a log sequence number, given a container ID, a block offset, and a record sequence number.", "LsnRecordSequence": "Retrieves the record sequence number that is contained in a specified LSN.", "LZClose": "Closes a file that was opened by using the LZOpenFile function.", "LZCopy": "Copies a source file to a destination file.", "LZInit": "Allocates memory for the internal data structures required to decompress files, and then creates and initializes them.", "LZOpenFileA": "Creates, opens, reopens, or deletes the specified file.", "LZOpenFileW": "Creates, opens, reopens, or deletes the specified file.", "LZRead": "Reads the specified number of bytes from a file and copies them into a buffer.", "LZSeek": "Moves a file pointer the specified number of bytes from a starting position.", "LayoutScript": "The LayoutScript method provides explicit directions for reordering the storages, streams, and controls in a compound file to match the order in which they are accessed during the download.", "LockRegion": "The LockRegion method restricts access to a specified range of bytes in the stream.", "LoadPolicy": "Retrieves policy information from the certificate enrollment policy server.", "LockServiceDatabase": "Requests ownership of the service control manager database lock.", "LogonUserA": "The Win32 LogonUser function attempts to log a user on to the local computer.", "LogonUserExA": "The LogonUserEx function attempts to log a user on to the local computer.", "LogonUserExW": "The LogonUserEx function attempts to log a user on to the local computer.", "LogonUserW": "The Win32 LogonUser function attempts to log a user on to the local computer.", "LookupAccountNameA": "Accepts the name of a system and an account as input.", "LookupAccountNameW": "Accepts the name of a system and an account as input.", "LookupAccountSidA": "Accepts a security identifier as input.", "LookupAccountSidLocalA": "Retrieves the name of the account for the specified SID on the local machine.", "LookupAccountSidLocalW": "Retrieves the name of the account for the specified SID on the local machine.", "LookupAccountSidW": "Accepts a security identifier as input.", "LookupPrivilegeDisplayNameA": "Retrieves the display name that represents a specified privilege.", "LookupPrivilegeDisplayNameW": "Retrieves the display name that represents a specified privilege.", "LookupPrivilegeNameA": "Retrieves the name that corresponds to the privilege represented on a specific system by a specified locally unique identifier.", "LookupPrivilegeNameW": "Retrieves the name that corresponds to the privilege represented on a specific system by a specified locally unique identifier.", "LookupPrivilegeValueA": "Retrieves the locally unique identifier used on a specified system to locally represent the specified privilege name.", "LookupPrivilegeValueW": "Retrieves the locally unique identifier used on a specified system to locally represent the specified privilege name.", "LookupSecurityDescriptorPartsA": "Retrieves security information from a self-relative security descriptor.", "LookupSecurityDescriptorPartsW": "Retrieves security information from a self-relative security descriptor.", "LookupSids": "The LookupSids method returns the common names corresponding to each of the elements in the specified list of SIDs.", "LPHANDLER_FUNCTION": "An application-defined callback function used with the RegisterServiceCtrlHandler function.", "LPHANDLER_FUNCTION_EX": "An application-defined callback function used with the RegisterServiceCtrlHandlerEx function.", "LPSERVICE_MAIN_FUNCTIONA": "The entry point for a service.", "LPSERVICE_MAIN_FUNCTIONW": "The entry point for a service.", "LSA_ADD_CREDENTIAL": "Adds credentials to a logon session.", "LSA_ALLOCATE_CLIENT_BUFFER": "Allocates a buffer in the client's address space.", "LSA_ALLOCATE_LSA_HEAP": "Allocates memory on the heap.", "LSA_ALLOCATE_PRIVATE_HEAP": "Allocates memory on the private heap.", "LSA_ALLOCATE_SHARED_MEMORY": "The AllocateSharedMemory function allocates a block of shared memory from a section of memory previously reserved by a call to the CreateSharedMemory function.", "LSA_AP_CALL_PACKAGE": "Called by the Local Security Authority when a logon application with a trusted connection to the LSA calls the LsaCallAuthenticationPackage function and specifies the authentication package's identifier.", "LSA_AP_CALL_PACKAGE_PASSTHROUGH": "The dispatch function for pass-through logon requests sent to the LsaCallAuthenticationPackage function.", "LSA_AP_INITIALIZE_PACKAGE": "Called once by the Local Security Authority during system initialization to provide the authentication package a chance to initialize itself.", "LSA_AP_LOGON_TERMINATED": "Used to notify an authentication package when a logon session terminates.", "LSA_AP_LOGON_USER": "Authenticates a user's logon credentials.", "LSA_AP_LOGON_USER_EX": "Authenticates a user's logon credentials.", "LSA_AP_LOGON_USER_EX2": "Used to authenticate a user logon attempt on the user's initial logon.", "LSA_AUDIT_ACCOUNT_LOGON": "The AuditAccountLogon function produces an audit record that represents the mapping of a foreign principal name onto a Windows account.", "LSA_AUDIT_LOGON": "The AuditLogon function is used to audit a logon attempt.", "LSA_CALL_PACKAGE": "The CallPackage function is used to call another security package to access its services.", "LSA_CALL_PACKAGE_PASSTHROUGH": "The CallPackagePassthrough function is used to call another security package to access its services.", "LSA_CALL_PACKAGEEX": "The CallPackageEx function is used to call another security package to access its services.", "LSA_CANCEL_NOTIFICATION": "The CancelNotification function cancels a previously registered notification.", "LSA_CLIENT_CALLBACK": "Allows a Local Security Authority -mode security package to call back to its user-mode package and invoke a function in its DLL there.", "LSA_CLOSE_SAM_USER": "Closes a handle to a Security Accounts Manager user account.", "LSA_CONVERT_AUTH_DATA_TO_TOKEN": "The ConvertAuthDataToToken function creates an access token from the authorization data returned from the GetAuthDataForUser or GetUserAuthData functions.", "LSA_COPY_FROM_CLIENT_BUFFER": "Copies information from the address space of a client process into a buffer in the current process.", "LSA_COPY_TO_CLIENT_BUFFER": "Copies information from a buffer in the current process into a client process's address space.", "LSA_CRACK_SINGLE_NAME": "The CrackSingleName function converts a name from one format to another.", "LSA_CREATE_LOGON_SESSION": "Creates logon sessions.", "LSA_CREATE_SHARED_MEMORY": "The CreateSharedMemory function creates a section of memory that is shared by client processes and the security package.", "LSA_CREATE_THREAD": "A wrapper for the Windows CreateThread function that should be used by the Local Security Authority.", "LSA_CREATE_TOKEN": "The CreateToken function is used by SSP/APs to create tokens while processing calls to SpAcceptLsaModeContext.", "LSA_CREATE_TOKEN_EX": "Creates tokens while processing calls to SpAcceptLsaModeContext.", "LSA_DELETE_CREDENTIAL": "Deletes an existing credential.", "LSA_DELETE_LOGON_SESSION": "Cleans up any logon sessions created while determining whether a user's authentication information is legitimate.", "LSA_DELETE_SHARED_MEMORY": "The DeleteSharedMemory function releases a section of memory that is shared by clients and a security package.", "LSA_DUPLICATE_HANDLE": "The DuplicateHandle function creates a duplicate handle.", "LSA_EXPAND_AUTH_DATA_FOR_DOMAIN": "Expands the domain groups in the specified user authentication data.", "LSA_FREE_CLIENT_BUFFER": "Frees a client buffer previously allocated with the AllocateClientBuffer function.", "LSA_FREE_LSA_HEAP": "Deallocates heap memory previously allocated by AllocateLsaHeap.", "LSA_FREE_PRIVATE_HEAP": "Frees memory that was allocated by using the AllocatePrivateHeap function.", "LSA_FREE_SHARED_MEMORY": "The FreeSharedMemory function frees a block of shared memory previously allocated by the AllocateSharedMemory function.", "LSA_GET_AUTH_DATA_FOR_USER": "The GetAuthDataForUser function retrieves authentication information for a user from the Security Accounts Manager database and puts it into a format suitable for the ConvertAuthDataToToken function.", "LSA_GET_CALL_INFO": "The GetCallInfo function retrieves information about the most recent function call.", "LSA_GET_CLIENT_INFO": "The GetClientInfo function gets information about the client process, such as thread and process ID, and flags indicating the client's state and privileges.", "LSA_GET_CREDENTIALS": "Retrieves credentials associated with a logon session.", "LSA_GET_USER_AUTH_DATA": "The GetUserAuthData function returns the authorization data for the user in a single buffer.", "LSA_MAP_BUFFER": "Maps a SecBuffer structure into the address space of the security support provider/authentication package.", "LSA_OPEN_SAM_USER": "Retrieves a handle to a user account in the Security Accounts Manager database.", "LSA_OPEN_TOKEN_BY_LOGON_ID": "Opens the user access token associated with the specified user logon.", "LSA_PROTECT_MEMORY": "Encrypts the specified memory buffer.", "LSA_REGISTER_NOTIFICATION": "Provides a mechanism whereby the security package is notified.", "LSA_UPDATE_PRIMARY_CREDENTIALS": "Provides a mechanism for one security package to notify other packages that the credentials for a logon session have changed.", "LsaAddAccountRights": "Assigns one or more privileges to an account.", "LsaCallAuthenticationPackage": "Used by a logon application to communicate with an authentication package.", "LsaClose": "The LsaClose function closes a handle to a Policy or TrustedDomain object.", "LsaConnectUntrusted": "Establishes an untrusted connection to the LSA server.", "LsaCreateTrustedDomainEx": "The LsaCreateTrustedDomainEx function establishes a new trusted domain by creating a new TrustedDomain object.", "LsaDeleteTrustedDomain": "The LsaDeleteTrustedDomain function removes a trusted domain from the list of trusted domains for a system and deletes the associated TrustedDomain object.", "LsaDeregisterLogonProcess": "Deletes the caller's logon application context and closes the connection to the LSA server.", "LsaEnumerateAccountRights": "The LsaEnumerateAccountRights function enumerates the privileges assigned to an account.", "LsaEnumerateAccountsWithUserRight": "Returns the accounts in the database of a Local Security Authority Policy object that hold a specified privilege.", "LsaEnumerateLogonSessions": "Retrieves the set of existing logon session identifiers and the number of sessions.", "LsaEnumerateTrustedDomains": "The LsaEnumerateTrustedDomains function retrieves the names and SIDs of domains trusted to authenticate logon credentials.", "LsaEnumerateTrustedDomainsEx": "Returns information about the domains trusted by the local system.", "LsaFreeMemory": "The LsaFreeMemory function frees memory allocated for an output buffer by an LSA function call.", "LsaFreeReturnBuffer": "Frees the memory used by a buffer previously allocated by the LSA.", "LsaGetAppliedCAPIDs": "Returns an array of central access policies of all the CAPs applied on a specific computer.", "LsaGetLogonSessionData": "Retrieves information about a specified logon session.", "LsaLogonUser": "Authenticates a security principal's logon data by using stored credentials information.", "LsaLookupAuthenticationPackage": "Obtains the unique identifier of an authentication package.", "LsaLookupNames": "Retrieves the security identifiers that correspond to an array of user, group, or local group names.", "LsaLookupPrivilegeValue": "Retrieves the locally unique identifier to represent the specified privilege name.", "LsaLookupSids": "Looks up the names that correspond to an array of security identifiers.", "LsaLookupSids2": "Looks up the names that correspond to an array of security identifiers and supports Internet provider identities.", "LsaNtStatusToWinError": "The LsaNtStatusToWinError function converts an NTSTATUS code returned by an LSA function to a Windows error code.", "LsaOpenPolicy": "Opens a handle to the Policy object on a local or remote system.", "LsaOpenTrustedDomainByName": "The LsaOpenTrustedDomainByName function opens the LSA policy handle of a remote trusted domain.", "LsaQueryCAPs": "Returns the Central Access Policies for the specified IDs.", "LsaQueryDomainInformationPolicy": "Retrieves domain information from the Policyobject.", "LsaQueryForestTrustInformation": "Retrieves forest trust information for the specified Local Security Authority\u00ef\u00bf\u00bdTrustedDomain object.", "LsaQueryInformationPolicy": "Retrieves information about a Policy object.", "LsaQueryTrustedDomainInfo": "The LsaQueryTrustedDomainInfo function retrieves information about a trusted domain.", "LsaQueryTrustedDomainInfoByName": "The LsaQueryTrustedDomainInfoByName function returns information about a trusted domain.", "LsaRegisterLogonProcess": "Establishes a connection to the LSA server and verifies that the caller is a logon application.", "LsaRegisterPolicyChangeNotification": "The LsaRegisterPolicyChangeNotification function registers an event handle with the local security authority.", "LsaRemoveAccountRights": "Removes one or more privileges from an account.", "LsaRetrievePrivateData": "Do not use the LSA private data functions.", "LsaSetDomainInformationPolicy": "Sets domain information to the Policyobject.", "LsaSetForestTrustInformation": "Sets the forest trust information for a specified Local Security Authority\u00ef\u00bf\u00bdTrustedDomain object.", "LsaSetInformationPolicy": "Modifies information in a Policy object.", "LsaSetTrustedDomainInfoByName": "The LsaSetTrustedDomainInfoByName function sets values for a TrustedDomain object.", "LsaSetTrustedDomainInformation": "The LsaSetTrustedDomainInformation function modifies a Policy object's information about a trusted domain.", "LsaStorePrivateData": "Do not use the LSA private data functions.", "LsaUnregisterPolicyChangeNotification": "The LsaUnregisterPolicyChangeNotification function disables a previously registered notification event.", "LBItemFromPt": "Retrieves the index of the item at the specified point in a list box.", "ListView_ApproximateViewRect": "Calculates the approximate width and height required to display a given number of items.", "ListView_Arrange": "Arranges items in icon view.", "ListView_CancelEditLabel": "Cancels an item text editing operation.", "ListView_CreateDragImage": "Creates a drag image list for the specified item.", "ListView_DeleteAllItems": "Removes all items from a list-view control.", "ListView_DeleteColumn": "Removes a column from a list-view control.", "ListView_DeleteItem": "Removes an item from a list-view control.", "ListView_EditLabel": "The message implicitly selects and focuses the specified item.", "ListView_EnableGroupView": "Enables or disables whether the items in a list-view control display as a group.", "ListView_EnsureVisible": "Ensures that a list-view item is either entirely or partially visible, scrolling the list-view control if necessary.", "ListView_FindItem": "Searches for a list-view item with the specified characteristics.", "ListView_GetBkColor": "Gets the background color of a list-view control.", "ListView_GetBkImage": "Gets the background image in a list-view control.", "ListView_GetCallbackMask": "Gets the callback mask for a list-view control.", "ListView_GetCheckState": "This should be used only for list-view controls that have the LVS_EX_CHECKBOXES style.", "ListView_GetColumn": "Gets the attributes of a list-view control's column.", "ListView_GetColumnOrderArray": "Gets the current left-to-right order of columns in a list-view control.", "ListView_GetColumnWidth": "Gets the width of a column in report or list view.", "ListView_GetCountPerPage": "Only fully visible items are counted.", "ListView_GetEditControl": "Gets the handle to the edit control being used to edit a list-view item's text.", "ListView_GetEmptyText": "Use this macro or send the LVM_GETEMPTYTEXT message explicitly.", "ListView_GetExtendedListViewStyle": "Gets the extended styles that are currently in use for a given list-view control.", "ListView_GetFocusedGroup": "Gets the group that has the focus.", "ListView_GetFooterInfo": "Gets information on the footer of a specified list-view control.", "ListView_GetFooterItem": "Gets information on a footer item for a specified list-view control.", "ListView_GetFooterItemRect": "Gets the coordinates of a footer for a specified item in a list-view control.", "ListView_GetFooterRect": "Gets the coordinates of the footer for a specified list-view control.", "ListView_GetGroupCount": "Gets the number of groups.", "ListView_GetGroupHeaderImageList": "Gets the group header image list that has been set for an existing list-view control.", "ListView_GetGroupInfo": "Gets group information.", "ListView_GetGroupInfoByIndex": "Gets information on a specified group.", "ListView_GetGroupMetrics": "Gets information about the display of groups.", "ListView_GetGroupRect": "Gets the rectangle for a specified group.", "ListView_GetGroupState": "Gets the state for a specified group.", "ListView_GetHeader": "Gets the handle to the header control used by a list-view control.", "ListView_GetHotCursor": "Gets the HCURSOR used when the pointer is over an item while hot tracking is enabled.", "ListView_GetHotItem": "Gets the index of the hot item.", "ListView_GetHoverTime": "Gets the amount of time that the mouse cursor must hover over an item before it is selected.", "ListView_GetImageList": "Gets the handle to an image list used for drawing list-view items.", "ListView_GetInsertMark": "Gets the position of the insertion point.", "ListView_GetInsertMarkColor": "Gets the color of the insertion point.", "ListView_GetInsertMarkRect": "Gets the rectangle that bounds the insertion point.", "ListView_GetISearchString": "Gets the incremental search string of a list-view control.", "ListView_GetItem": "Gets some or all of a list-view item's attributes.", "ListView_GetItemCount": "Gets the number of items in a list-view control.", "ListView_GetItemIndexRect": "Gets the bounding rectangle for all or part of a subitem in the current view of a specified list-view control.", "ListView_GetItemPosition": "Gets the position of a list-view item.", "ListView_GetItemRect": "Gets the bounding rectangle for all or part of an item in the current view.", "ListView_GetItemSpacing": "Determines the spacing between items in a list-view control.", "ListView_GetItemState": "Gets the state of a list-view item.", "ListView_GetItemText": "Gets the text of a list-view item or subitem.", "ListView_GetNextItem": "Searches for a list-view item that has the specified properties and bears the specified relationship to a specified item.", "ListView_GetNextItemIndex": "Gets the index of the item in a particular list-view control that has the specified properties and relationship to another specific item.", "ListView_GetNumberOfWorkAreas": "Gets the number of working areas in a list-view control.", "ListView_GetOrigin": "Gets the current view origin for a list-view control.", "ListView_GetOutlineColor": "Gets the color of the border of a list-view control if the LVS_EX_BORDERSELECT extended window style is set.", "ListView_GetSelectedColumn": "Gets an integer that specifies the selected column.", "ListView_GetSelectedCount": "Determines the number of selected items in a list-view control.", "ListView_GetSelectionMark": "Gets the selection mark from a list-view control.", "ListView_GetStringWidth": "Determines the width of a specified string using the specified list-view control's current font.", "ListView_GetSubItemRect": "Gets information about the rectangle that surrounds a subitem in a list-view control.", "ListView_GetTextBkColor": "Gets the text background color of a list-view control.", "ListView_GetTextColor": "Gets the text color of a list-view control.", "ListView_GetTileInfo": "Gets information about a tile in a list-view control.", "ListView_GetTileViewInfo": "Gets information about a list-view control in tile view.", "ListView_GetToolTips": "Gets the tooltip control that the list-view control uses to display tooltips.", "ListView_GetTopIndex": "Gets the index of the topmost visible item when in list or report view.", "ListView_GetUnicodeFormat": "Gets the Unicode character format flag for the control.", "ListView_GetView": "Gets the current view of a list-view control.", "ListView_GetViewRect": "The list view must be in icon or small icon view.", "ListView_GetWorkAreas": "Gets the working areas from a list-view control.", "ListView_HasGroup": "Determines whether the list-view control has a specified group.", "ListView_HitTest": "Determines which list-view item, if any, is at a specified position.", "ListView_HitTestEx": "Determines which list-view item, if any, is at a specified position.", "ListView_InsertColumn": "Inserts a new column in a list-view control.", "ListView_InsertGroup": "Inserts a group into a list-view control.", "ListView_InsertGroupSorted": "Inserts a group into an ordered list of groups.", "ListView_InsertItem": "Inserts a new item in a list-view control.", "ListView_InsertMarkHitTest": "Retrieves the insertion point closest to a specified point.", "ListView_IsGroupViewEnabled": "Checks whether the list-view control has group view enabled.", "ListView_IsItemVisible": "Indicates whether an item in the list-view control is visible.", "ListView_MapIDToIndex": "Maps the ID of an item to an index.", "ListView_MapIndexToID": "Maps the index of an item to a unique ID.", "ListView_MoveGroup": "This macro is not implemented.", "ListView_MoveItemToGroup": "This macro is not implemented.", "ListView_RedrawItems": "Forces a list-view control to redraw a range of items.", "ListView_RemoveAllGroups": "Removes all groups from a list-view control.", "ListView_RemoveGroup": "Removes a group from a list-view control.", "ListView_Scroll": "Scrolls the content of a list-view control.", "ListView_SetBkColor": "Sets the background color of a list-view control.", "ListView_SetBkImage": "Sets the background image in a list-view control.", "ListView_SetCallbackMask": "Changes the callback mask for a list-view control.", "ListView_SetCheckState": "Selects or deselects an item in a list-view control.", "ListView_SetColumn": "Sets the attributes of a list-view column.", "ListView_SetColumnOrderArray": "Sets the left-to-right order of columns in a list-view control.", "ListView_SetColumnWidth": "Used to change the width of a column in report view or the width of all columns in list-view mode.", "ListView_SetExtendedListViewStyle": "Sets extended styles for list-view controls.", "ListView_SetExtendedListViewStyleEx": "Sets extended styles for list-view controls using the style mask.", "ListView_SetGroupHeaderImageList": "Assigns an image list to the group header of a list-view control.", "ListView_SetGroupInfo": "Sets group information.", "ListView_SetGroupMetrics": "Sets information about the display of groups.", "ListView_SetGroupState": "Sets the state for a specified group.", "ListView_SetHotCursor": "To check whether hot tracking is enabled, call SystemParametersInfo.", "ListView_SetHotItem": "Sets the hot item in a list-view control.", "ListView_SetHoverTime": "Sets the amount of time that the mouse cursor must hover over an item before it is selected.", "ListView_SetIconSpacing": "Sets the spacing between icons in list-view controls set to the LVS_ICON style.", "ListView_SetImageList": "Assigns an image list to a list-view control.", "ListView_SetInfoTip": "Sets tooltip text.", "ListView_SetInsertMark": "Sets the insertion point to the defined position.", "ListView_SetInsertMarkColor": "Sets the color of the insertion point.", "ListView_SetItem": "Sets some or all of a list-view item's attributes.", "ListView_SetItemCount": "Causes the list-view control to allocate memory for the specified number of items.", "ListView_SetItemCountEx": "Sets the virtual number of items in a virtual list view.", "ListView_SetItemIndexState": "Sets the state of a specified list-view item.", "ListView_SetItemPosition": "Moves an item to a specified position in a list-view control.", "ListView_SetItemPosition32": "Moves an item to a specified position in a list-view control.", "ListView_SetItemState": "Changes the state of an item in a list-view control.", "ListView_SetItemText": "Changes the text of a list-view item or subitem.", "ListView_SetOutlineColor": "Sets the color of the border of a list-view control if the LVS_EX_BORDERSELECT extended window style is set.", "ListView_SetSelectedColumn": "Sets the index of the selected column.", "ListView_SetSelectionMark": "Sets the selection mark in a list-view control.", "ListView_SetTextBkColor": "Sets the background color of text in a list-view control.", "ListView_SetTextColor": "Sets the text color of a list-view control.", "ListView_SetTileInfo": "Sets information for an existing tile of a list-view control.", "ListView_SetTileViewInfo": "Sets information that a list-view control uses in tile view.", "ListView_SetToolTips": "Sets the tooltip control that the list-view control will use to display tooltips.", "ListView_SetUnicodeFormat": "Sets the Unicode character format flag for the control.", "ListView_SetView": "Sets the view of a list-view control.", "ListView_SetWorkAreas": "Sets the working areas within a list-view control.", "ListView_SortGroups": "Uses an application-defined comparison function to sort groups by ID within a list-view control.", "ListView_SortItems": "The index of each item changes to reflect the new sequence.", "ListView_SortItemsEx": "The index of each item changes to reflect the new sequence.", "ListView_SubItemHitTest": "Determines which list-view item or subitem is located at a given position.", "ListView_SubItemHitTestEx": "Determines which list-view item or subitem is located at a given position.", "ListView_Update": "If the list-view control has the LVS_AUTOARRANGE style, this macro causes the list-view control to be arranged.", "LoadIconMetric": "Loads a specified icon resource with a client-specified system metric.", "LoadIconWithScaleDown": "Loads an icon.", "Linearize": "Translates the built-up math, ruby, and other inline objects in this range to linearized form.", "ListBox_AddItemData": "Adds item data to the list box at the specified location.", "ListBox_AddString": "Adds a string to a list box.", "ListBox_DeleteString": "Deletes the item at the specified location in a list box.", "ListBox_Dir": "Adds names to the list displayed by a list box.", "ListBox_Enable": "Enables or disables a list box control.", "ListBox_FindItemData": "Finds the first item in a list box that has the specified item data.", "ListBox_FindString": "Finds the first string in a list box that begins with the specified string.", "ListBox_FindStringExact": "Finds the first list box string that exactly matches the specified string, except that the search is not case sensitive.", "ListBox_GetCaretIndex": "The item may or may not be selected.", "ListBox_GetCount": "Gets the number of items in a list box.", "ListBox_GetCurSel": "Gets the index of the currently selected item in a single-selection list box.", "ListBox_GetHorizontalExtent": "Gets the width that a list box can be scrolled horizontally if the list box has a horizontal scroll bar.", "ListBox_GetItemData": "Gets the application-defined value associated with the specified list box item.", "ListBox_GetItemHeight": "Retrieves the height of items in a list box.", "ListBox_GetItemRect": "Gets the dimensions of the rectangle that bounds a list box item as it is currently displayed in the list box.", "ListBox_GetSel": "Gets the selection state of an item.", "ListBox_GetSelCount": "Gets the count of selected items in a multiple-selection list box.", "ListBox_GetSelItems": "Gets the indexes of selected items in a multiple-selection list box.", "ListBox_GetText": "Gets a string from a list box.", "ListBox_GetTextLen": "Gets the length of a string in a list box.", "ListBox_GetTopIndex": "Gets the index of the first visible item in a list box.", "ListBox_InsertItemData": "Inserts item data to a list box at the specified location.", "ListBox_InsertString": "Adds a string to a list box at the specified location.", "ListBox_ResetContent": "Removes all items from a list box.", "ListBox_SelectItemData": "If a matching item is found, the item is selected.", "ListBox_SelectString": "If a matching item is found, the item is selected.", "ListBox_SelItemRange": "Selects or deselects one or more consecutive items in a multiple-selection list box.", "ListBox_SetCaretIndex": "If the item is not visible, it is scrolled into view.", "ListBox_SetColumnWidth": "Sets the width of all columns in a multiple-column list box.", "ListBox_SetCurSel": "Sets the currently selected item in a single-selection list box.", "ListBox_SetHorizontalExtent": "Set the width by which a list box can be scrolled horizontally.", "ListBox_SetItemData": "Sets the application-defined value associated with the specified list box item.", "ListBox_SetItemHeight": "Sets the height of items in a list box.", "ListBox_SetSel": "Selects or deselects an item in a multiple-selection list box.", "ListBox_SetTabStops": "Sets the tab-stop positions in a list box.", "ListBox_SetTopIndex": "Ensures that the specified item in a list box is visible.", "LPFNADDPROPSHEETPAGE": "Specifies an application-defined callback function that a property sheet extension uses to add a page to a property sheet.", "LPFNPSPCALLBACKA": "An application can use this function to perform initialization and cleanup operations for the page.", "LPFNPSPCALLBACKW": "An application can use this function to perform initialization and cleanup operations for the page.", "LANGGROUPLOCALE_ENUMPROCA": "An application-defined callback function that processes enumerated language group locale information provided by the EnumLanguageGroupLocales function.", "LANGGROUPLOCALE_ENUMPROCW": "An application-defined callback function that processes enumerated language group locale information provided by the EnumLanguageGroupLocales function.", "LANGIDFROMLCID": "Retrieves a language identifier from a locale identifier.", "LCIDToLocaleName": "Converts a locale identifier to a locale name.", "LCMapStringA": "For a locale specified by identifier, maps one input character string to another using a specified transformation, or generates a sort key for the input string.", "LCMapStringEx": "For a locale specified by name, maps an input character string to another using a specified transformation, or generates a sort key for the input string.", "LCMapStringW": "For a locale specified by identifier, maps one input character string to another using a specified transformation, or generates a sort key for the input string.", "LoadMUILibraryA": "Returns a handle to the language-specific resources associated with a particular language-neutral file.", "LoadMUILibraryW": "Returns a handle to the language-specific resources associated with a particular language-neutral file.", "LoadStringByReference": "Unsupported.", "LOCALE_ENUMPROCEX": "An application-defined callback function that processes enumerated locale information provided by the EnumSystemLocalesEx function.", "LocaleNameToLCID": "Converts a locale name to a locale identifier.", "LoadLibraryA": "Loads the specified module into the address space of the calling process.", "LoadLibraryExA": "Loads the specified module into the address space of the calling process.", "LoadLibraryExW": "Loads the specified module into the address space of the calling process.", "LoadLibraryW": "Loads the specified module into the address space of the calling process.", "LoadResource": "Retrieves a handle that can be used to obtain a pointer to the first byte of the specified resource in memory.", "LockResource": "Retrieves a pointer to the specified resource in memory.", "LoadAcceleratorsA": "Loads the specified accelerator table.", "LoadAcceleratorsW": "Loads the specified accelerator table.", "LoadCursorA": "Loads the specified cursor resource from the executable file associated with an application instance.", "LoadCursorFromFileA": "Creates a cursor based on data contained in a file.", "LoadCursorFromFileW": "Creates a cursor based on data contained in a file.", "LoadCursorW": "Loads the specified cursor resource from the executable file associated with an application instance.", "LoadIconA": "Loads the specified icon resource from the executable file associated with an application instance.", "LoadIconW": "Loads the specified icon resource from the executable file associated with an application instance.", "LoadImageA": "Loads an icon, cursor, animated cursor, or bitmap.", "LoadImageW": "Loads an icon, cursor, animated cursor, or bitmap.", "LoadMenuA": "Loads the specified menu resource from the executable file associated with an application instance.", "LoadMenuIndirectA": "Loads the specified menu template in memory.", "LoadMenuIndirectW": "Loads the specified menu template in memory.", "LoadMenuW": "Loads the specified menu resource from the executable file associated with an application instance.", "LoadStringA": "Loads a string resource from the executable file associated with a specified module, copies the string into a buffer, and appends a terminating null character.", "LoadStringW": "Loads a string resource from the executable file associated with a specified module, copies the string into a buffer, and appends a terminating null character.", "LookupIconIdFromDirectory": "Searches through icon or cursor data for the icon or cursor that best fits the current display device.", "LookupIconIdFromDirectoryEx": "Searches through icon or cursor data for the icon or cursor that best fits the current display device.", "lstrcatA": "Appends one string to another.", "lstrcatW": "Appends one string to another.", "lstrcmpA": "Compares two character strings.", "lstrcmpiA": "Compares two character strings.", "lstrcmpiW": "Compares two character strings.", "lstrcmpW": "Compares two character strings.", "lstrcpyA": "Copies a string to a buffer.", "lstrcpynA": "Copies a specified number of characters from a source string into a buffer.", "lstrcpynW": "Copies a specified number of characters from a source string into a buffer.", "lstrcpyW": "Copies a string to a buffer.", "lstrlenA": "Determines the length of the specified string.", "lstrlenW": "Determines the length of the specified string.", "LresultFromObject": "Returns a reference, similar to a handle, to the specified object.", "LaunchAdvancedAssociationUI": "Launches an advanced association dialog box through which the user can customize the associations for the application specified in pszAppRegName.", "LauncherVisibilityChange": "Notifies a client that visibility of the Start screen has changed.", "LeaveFolder": "Sends notification that a folder is no longer the destination of a file operation.", "LinkItem": "Not implemented.", "LoadLibraryFromItem": "Loads the library from a specified library definition file.", "LoadLibraryFromKnownFolder": "Loads the library that is referenced by a KNOWNFOLDERID.", "LoadNonloadedOverlayIdentifiers": "Loads any registered overlay identifiers, or handlers, that are not currently loaded.", "LoadUserProfileA": "The profile can be a local user profile or a roaming user profile.", "LoadUserProfileW": "The profile can be a local user profile or a roaming user profile.", "Location": "Gets the current location of the input pane.", "LogError": "Called by a registered application to log information, warning, or an error message into the error tab on the synchronization manager status dialog box.", "LongAdd": "Adds two values of type LONG.", "LongLongAdd": "Adds two values of type LONGLONG.", "LongLongMult": "Multiplies two values of type LONGLONG.", "LongLongSub": "Subtracts one value of type LONGLONG from another.", "LongLongToChar": "Converts a value of type LONGLONG to a value of type CHAR.", "LongLongToInt": "Converts a value of type LONGLONG to a value of type INT.", "LongLongToInt8": "Converts a value of type LONGLONG to a value of type INT8.", "LongLongToIntPtr": "Converts a value of type LONGLONG to a value of type INT_PTR.", "LongLongToLong": "Converts a value of type LONGLONG to a value of type LONG.", "LongLongToLongPtr": "Converts a value of type LONGLONG to a value of type LONG_PTR.", "LongLongToShort": "Converts a value of type LONGLONG to a value of type SHORT.", "LongLongToUChar": "Converts a value of type LONGLONG to a value of type UCHAR.", "LongLongToUInt": "Converts a value of type LONGLONG to a value of type UINT.", "LongLongToUInt8": "Converts a value of type LONGLONG to a value of type UINT8.", "LongLongToULong": "Converts a value of type LONGLONG to a value of type ULONG.", "LongLongToULongLong": "Converts a value of type LONGLONG to a value of type ULONGLONG.", "LongLongToUShort": "Converts a value of type LONGLONG to a value of type USHORT.", "LongMult": "Multiplies two values of type LONG.", "LongPtrAdd": "Adds two values of type LONG_PTR.", "LongPtrMult": "Multiplies two values of type LONG_PTR.", "LongPtrSub": "Subtracts one value of type LONG_PTR from another.", "LongPtrToChar": "Converts a value of type LONG_PTR to a value of type CHAR.", "LongPtrToInt": "Converts a value of type LONG_PTR to a value of type INT.", "LongPtrToInt8": "Converts a value of type LONG_PTR to a value of type INT8.", "LongPtrToIntPtr": "Converts a value of type LONG_PTR to a value of type INT_PTR.", "LongPtrToLong": "Converts a value of type LONG_PTR to a value of type LONG.", "LongPtrToShort": "Converts a value of type LONG_PTR to a value of type SHORT.", "LongPtrToUChar": "Converts a value of type LONG_PTR to a value of type UCHAR.", "LongPtrToUInt": "Converts a value of type LONG_PTR to a value of type UINT.", "LongPtrToUInt8": "Converts a value of type LONG_PTR to a value of type UINT8.", "LongPtrToUIntPtr": "Converts a value of type LONG_PTR to a value of type UINT_PTR.", "LongPtrToULong": "Converts a value of type LONG_PTR to a value of type ULONG.", "LongPtrToULongLong": "Converts a value of type LONG_PTR to a value of type ULONGLONG.", "LongPtrToULongPtr": "Converts a value of type LONG_PTR to a value of type ULONG_PTR.", "LongPtrToUShort": "Converts a value of type LONG_PTR to a value of type USHORT.", "LongSub": "Subtracts one value of type LONG from another.", "LongToChar": "Converts a value of type LONG to a value of type CHAR.", "LongToInt": "Converts a value of type LONG to a value of type INT.", "LongToInt8": "Converts a value of type LONG to a value of type INT8.", "LongToIntPtr": "Converts a value of type LONG to a value of type INT_PTR.", "LongToShort": "Converts a value of type LONG to a value of type SHORT.", "LongToUChar": "Converts a value of type LONG to a value of type UCHAR.", "LongToUInt": "Converts a value of type LONG to a value of type UINT.", "LongToUInt8": "Converts a value of type LONG to a value of type UINT8.", "LongToUIntPtr": "Converts a value of type LONG to a value of type UINT_PTR.", "LongToULong": "Converts a value of type LONG to a value of type ULONG.", "LongToULongLong": "Converts a value of type LONG to a value of type ULONGLONG.", "LongToULongPtr": "Converts a value of type LONG to a value of type ULONG_PTR.", "LongToUShort": "Converts a value of type LONG to a value of type USHORT.", "LPFNDFMCALLBACK": "LPFNDFMCALLBACK may be altered or unavailable.", "LPFNVIEWCALLBACK": "This function essentially duplicates the functionality of IShellFolderViewCB.", "LegacyIAccessiblePattern_DoDefaultAction": "Performs the Microsoft Active Accessibility default action for the element.", "LegacyIAccessiblePattern_GetIAccessible": "Retrieves an IAccessible object that corresponds to the UI Automation element.", "LegacyIAccessiblePattern_Select": "Performs a Microsoft Active Accessibility selection.", "LegacyIAccessiblePattern_SetValue": "Sets the Microsoft Active Accessibility value property for the node.", "LocalInit": "Note Active Accessibility Text Services is deprecated.", "LookupByHWND": "Clients call IAccClientDocMgr::LookupByHWND to get a document by providing the HWND for the document.", "LookupByPoint": "Clients call IAccClientDocMgr::LookupByPoint to get a document object from a point within the document.", "LookupMnemonicTerm": "Clients call the IAccDictionary::LookupMnemonicTerm method to find the property for a given mnemonic string.", "LoadModule": "Loads and executes an application or creates a new instance of an existing application.", "LoadPackagedLibrary": "Loads the specified packaged module and its dependencies into the address space of the calling process.", "LocalAlloc": "Allocates the specified number of bytes from the heap.", "LocalFlags": "Retrieves information about the specified local memory object.", "LocalFree": "Frees the specified local memory object and invalidates its handle.", "LocalHandle": "Retrieves the handle associated with the specified pointer to a local memory object.", "LocalLock": "Locks a local memory object and returns a pointer to the first byte of the object's memory block.", "LocalReAlloc": "Changes the size or the attributes of a specified local memory object.", "LocalSize": "Retrieves the current size of the specified local memory object, in bytes.", "LocalUnlock": "Decrements the lock count associated with a memory object that was allocated with LMEM_MOVEABLE.", "LocateXStateFeature": "Retrieves a pointer to the processor state for an XState feature within a CONTEXT structure.", "LockSetForegroundWindow": "The foreground process can call the LockSetForegroundWindow function to disable calls to the SetForegroundWindow function.", "LogicalToPhysicalPoint": "Converts the logical coordinates of a point in a window to physical coordinates.", "LoadBitmapA": "The LoadBitmap function loads the specified bitmap resource from a module's executable file.", "LoadBitmapW": "The LoadBitmap function loads the specified bitmap resource from a module's executable file.", "LoadKeyboardLayoutA": "Loads a new input locale identifier into the system.", "LoadKeyboardLayoutW": "Loads a new input locale identifier into the system.", "LockWindowUpdate": "The LockWindowUpdate function disables or enables drawing in the specified window.", "LockWorkStation": "Locks the workstation's display.", "LogicalToPhysicalPointForPerMonitorDPI": "Converts a point in a window from logical coordinates into physical coordinates, regardless of the dots per inch awareness of the caller.", "Merge": "IFileSyncMergeHandler::Merge method", "MergeEx": "The MergeEx method executes a merge of the current database and current module.", "MsiAdvertiseProductA": "The MsiAdvertiseProduct function generates an advertise script or advertises a product to the computer.", "MsiAdvertiseProductExA": "The MsiAdvertiseProductEx function generates an advertise script or advertises a product to the computer.", "MsiAdvertiseProductExW": "The MsiAdvertiseProductEx function generates an advertise script or advertises a product to the computer.", "MsiAdvertiseProductW": "The MsiAdvertiseProduct function generates an advertise script or advertises a product to the computer.", "MsiAdvertiseScriptA": "The MsiAdvertiseScript function copies an advertised script file into the specified locations.", "MsiAdvertiseScriptW": "The MsiAdvertiseScript function copies an advertised script file into the specified locations.", "MsiApplyMultiplePatchesA": "Applies one or more patches to products eligible to receive the patches.", "MsiApplyMultiplePatchesW": "Applies one or more patches to products eligible to receive the patches.", "MsiApplyPatchA": "For each product listed by the patch package as eligible to receive the patch, the MsiApplyPatch function invokes an installation and sets the PATCH property to the path of the patch package.", "MsiApplyPatchW": "For each product listed by the patch package as eligible to receive the patch, the MsiApplyPatch function invokes an installation and sets the PATCH property to the path of the patch package.", "MsiBeginTransactionA": "The MsiBeginTransaction function starts transaction processing of a multiple-package installation and returns an identifier for the transaction.", "MsiBeginTransactionW": "The MsiBeginTransaction function starts transaction processing of a multiple-package installation and returns an identifier for the transaction.", "MsiCloseAllHandles": "The MsiCloseAllHandles function closes all open installation handles allocated by the current thread.", "MsiCloseHandle": "The MsiCloseHandle function closes an open installation handle.", "MsiCollectUserInfoA": "The MsiCollectUserInfo function obtains and stores the user information and product ID from an installation wizard.", "MsiCollectUserInfoW": "The MsiCollectUserInfo function obtains and stores the user information and product ID from an installation wizard.", "MsiConfigureFeatureA": "The MsiConfigureFeature function configures the installed state for a product feature.", "MsiConfigureFeatureW": "The MsiConfigureFeature function configures the installed state for a product feature.", "MsiConfigureProductA": "The MsiConfigureProduct function installs or uninstalls a product.", "MsiConfigureProductExA": "Installs or uninstalls a product.", "MsiConfigureProductExW": "Installs or uninstalls a product.", "MsiConfigureProductW": "The MsiConfigureProduct function installs or uninstalls a product.", "MsiCreateRecord": "The MsiCreateRecord function creates a new record object with the specified number of fields.", "MsiCreateTransformSummaryInfoA": "The MsiCreateTransformSummaryInfo function creates summary information of an existing transform to include validation and error conditions.", "MsiCreateTransformSummaryInfoW": "The MsiCreateTransformSummaryInfo function creates summary information of an existing transform to include validation and error conditions.", "MsiDatabaseApplyTransformA": "The MsiDatabaseApplyTransform function applies a transform to a database.", "MsiDatabaseApplyTransformW": "The MsiDatabaseApplyTransform function applies a transform to a database.", "MsiDatabaseCommit": "The MsiDatabaseCommit function commits changes to a database.", "MsiDatabaseExportA": "The MsiDatabaseExport function exports a Microsoft Installer table from an open database to a Text Archive File.", "MsiDatabaseExportW": "The MsiDatabaseExport function exports a Microsoft Installer table from an open database to a Text Archive File.", "MsiDatabaseGenerateTransformA": "The MsiDatabaseGenerateTransform function generates a transform file of differences between two databases.", "MsiDatabaseGenerateTransformW": "The MsiDatabaseGenerateTransform function generates a transform file of differences between two databases.", "MsiDatabaseGetPrimaryKeysA": "The MsiDatabaseGetPrimaryKeys function returns a record containing the names of all the primary key columns for a specified table.", "MsiDatabaseGetPrimaryKeysW": "The MsiDatabaseGetPrimaryKeys function returns a record containing the names of all the primary key columns for a specified table.", "MsiDatabaseImportA": "The MsiDatabaseImport function imports an installer text archive file into an open database table.", "MsiDatabaseImportW": "The MsiDatabaseImport function imports an installer text archive file into an open database table.", "MsiDatabaseIsTablePersistentA": "The MsiDatabaseIsTablePersistent function returns an enumeration that describes the state of a specific table.", "MsiDatabaseIsTablePersistentW": "The MsiDatabaseIsTablePersistent function returns an enumeration that describes the state of a specific table.", "MsiDatabaseMergeA": "The MsiDatabaseMerge function merges two databases together, which allows duplicate rows.", "MsiDatabaseMergeW": "The MsiDatabaseMerge function merges two databases together, which allows duplicate rows.", "MsiDatabaseOpenViewA": "The MsiDatabaseOpenView function prepares a database query and creates a view object.", "MsiDatabaseOpenViewW": "The MsiDatabaseOpenView function prepares a database query and creates a view object.", "MsiDetermineApplicablePatchesA": "The MsiDetermineApplicablePatches function takes a set of patch files, XML files, and XML blobs and determines which patches apply to a specified Windows Installer package and in what sequence.", "MsiDetermineApplicablePatchesW": "The MsiDetermineApplicablePatches function takes a set of patch files, XML files, and XML blobs and determines which patches apply to a specified Windows Installer package and in what sequence.", "MsiDeterminePatchSequenceA": "Takes a set of patch files, XML files, and XML blobs and determines the best sequence of application for the patches to a specified installed product.", "MsiDeterminePatchSequenceW": "Takes a set of patch files, XML files, and XML blobs and determines the best sequence of application for the patches to a specified installed product.", "MsiDoActionA": "The MsiDoAction function executes a built-in action, custom action, or user-interface wizard action.", "MsiDoActionW": "The MsiDoAction function executes a built-in action, custom action, or user-interface wizard action.", "MsiEnableLogA": "The MsiEnableLog function sets the log mode for all subsequent installations that are initiated in the calling process.", "MsiEnableLogW": "The MsiEnableLog function sets the log mode for all subsequent installations that are initiated in the calling process.", "MsiEnableUIPreview": "The MsiEnableUIPreview function enables preview mode of the user interface to facilitate authoring of user-interface dialog boxes.", "MsiEndTransaction": "The MsiEndTransaction function can commit or roll back all the installations belonging to the transaction opened by the MsiBeginTransaction function.", "MsiEnumClientsA": "The MsiEnumClients function enumerates the clients for a given installed component.", "MsiEnumClientsExA": "The MsiEnumClientsEx function enumerates the installed applications that use a specified component.", "MsiEnumClientsExW": "The MsiEnumClientsEx function enumerates the installed applications that use a specified component.", "MsiEnumClientsW": "The MsiEnumClients function enumerates the clients for a given installed component.", "MsiEnumComponentCostsA": "The MsiEnumComponentCosts function enumerates the disk-space per drive required to install a component.", "MsiEnumComponentCostsW": "The MsiEnumComponentCosts function enumerates the disk-space per drive required to install a component.", "MsiEnumComponentQualifiersA": "The MsiEnumComponentQualifiers function enumerates the advertised qualifiers for the given component.", "MsiEnumComponentQualifiersW": "The MsiEnumComponentQualifiers function enumerates the advertised qualifiers for the given component.", "MsiEnumComponentsA": "The MsiEnumComponents function enumerates the installed components for all products.", "MsiEnumComponentsExA": "The MsiEnumComponentsEx function enumerates installed components.", "MsiEnumComponentsExW": "The MsiEnumComponentsEx function enumerates installed components.", "MsiEnumComponentsW": "The MsiEnumComponents function enumerates the installed components for all products.", "MsiEnumFeaturesA": "The MsiEnumFeatures function enumerates the published features for a given product.", "MsiEnumFeaturesW": "The MsiEnumFeatures function enumerates the published features for a given product.", "MsiEnumPatchesA": "The MsiEnumPatches function enumerates all of the patches that have been applied to a product.", "MsiEnumPatchesExA": "Enumerates all patches in a specific context or across all contexts.", "MsiEnumPatchesExW": "Enumerates all patches in a specific context or across all contexts.", "MsiEnumPatchesW": "The MsiEnumPatches function enumerates all of the patches that have been applied to a product.", "MsiEnumProductsA": "The MsiEnumProducts function enumerates through all the products currently advertised or installed.", "MsiEnumProductsExA": "Enumerates through one or all the instances of products that are currently advertised or installed in the specified contexts.", "MsiEnumProductsExW": "Enumerates through one or all the instances of products that are currently advertised or installed in the specified contexts.", "MsiEnumProductsW": "The MsiEnumProducts function enumerates through all the products currently advertised or installed.", "MsiEnumRelatedProductsA": "The MsiEnumRelatedProducts function enumerates products with a specified upgrade code.", "MsiEnumRelatedProductsW": "The MsiEnumRelatedProducts function enumerates products with a specified upgrade code.", "MsiEvaluateConditionA": "The MsiEvaluateCondition function evaluates a conditional expression containing property names and values.", "MsiEvaluateConditionW": "The MsiEvaluateCondition function evaluates a conditional expression containing property names and values.", "MsiExtractPatchXMLDataA": "The MsiExtractPatchXMLData function extracts information from a patch that can be used to determine if the patch applies to a target system.", "MsiExtractPatchXMLDataW": "The MsiExtractPatchXMLData function extracts information from a patch that can be used to determine if the patch applies to a target system.", "MsiFormatRecordA": "The MsiFormatRecord function formats record field data and properties using a format string.", "MsiFormatRecordW": "The MsiFormatRecord function formats record field data and properties using a format string.", "MsiGetActiveDatabase": "The MsiGetActiveDatabase function returns the active database for the installation.", "MsiGetComponentPathA": "The MsiGetComponentPath function returns the full path to an installed component.", "MsiGetComponentPathExA": "Returns the full path to an installed component.", "MsiGetComponentPathExW": "Returns the full path to an installed component.", "MsiGetComponentPathW": "The MsiGetComponentPath function returns the full path to an installed component.", "MsiGetComponentStateA": "The MsiGetComponentState function obtains the state of a component.", "MsiGetComponentStateW": "The MsiGetComponentState function obtains the state of a component.", "MsiGetDatabaseState": "The MsiGetDatabaseState function returns the state of the database.", "MsiGetFeatureCostA": "The MsiGetFeatureCost function returns the disk space required by a feature and its selected children and parent features.", "MsiGetFeatureCostW": "The MsiGetFeatureCost function returns the disk space required by a feature and its selected children and parent features.", "MsiGetFeatureInfoA": "Returns descriptive information for a feature.", "MsiGetFeatureInfoW": "Returns descriptive information for a feature.", "MsiGetFeatureStateA": "The MsiGetFeatureState function gets the requested state of a feature.", "MsiGetFeatureStateW": "The MsiGetFeatureState function gets the requested state of a feature.", "MsiGetFeatureUsageA": "The MsiGetFeatureUsage function returns the usage metrics for a product feature.", "MsiGetFeatureUsageW": "The MsiGetFeatureUsage function returns the usage metrics for a product feature.", "MsiGetFeatureValidStatesA": "The MsiGetFeatureValidStates function returns a valid installation state.", "MsiGetFeatureValidStatesW": "The MsiGetFeatureValidStates function returns a valid installation state.", "MsiGetFileHashA": "The MsiGetFileHash function takes the path to a file and returns a 128-bit hash of that file.", "MsiGetFileHashW": "The MsiGetFileHash function takes the path to a file and returns a 128-bit hash of that file.", "MsiGetFileSignatureInformationA": "The MsiGetFileSignatureInformation function takes the path to a file that has been digitally signed and returns the file's signer certificate and hash.", "MsiGetFileSignatureInformationW": "The MsiGetFileSignatureInformation function takes the path to a file that has been digitally signed and returns the file's signer certificate and hash.", "MsiGetFileVersionA": "The MsiGetFileVersion returns the version string and language string in the format that the installer expects to find them in the database.", "MsiGetFileVersionW": "The MsiGetFileVersion returns the version string and language string in the format that the installer expects to find them in the database.", "MsiGetLanguage": "The MsiGetLanguage function returns the numeric language of the installation that is currently running.", "MsiGetLastErrorRecord": "The MsiGetLastErrorRecord function returns the error record that was last returned for the calling process.", "MsiGetMode": "The MsiGetMode function is used to determine whether the installer is currently running in a specified mode, as listed in the table.", "MsiGetPatchFileListA": "The MsiGetPatchFileList function is provided a list of.msp files, delimited by semicolons, and retrieves the list of files that can be updated by the patches.", "MsiGetPatchFileListW": "The MsiGetPatchFileList function is provided a list of.msp files, delimited by semicolons, and retrieves the list of files that can be updated by the patches.", "MsiGetPatchInfoA": "The MsiGetPatchInfo function returns information about a patch.", "MsiGetPatchInfoExA": "Queries for information about the application of a patch to a specified instance of a product.", "MsiGetPatchInfoExW": "Queries for information about the application of a patch to a specified instance of a product.", "MsiGetPatchInfoW": "The MsiGetPatchInfo function returns information about a patch.", "MsiGetProductCodeA": "The MsiGetProductCode function returns the product code of an application by using the component code of an installed or advertised component of the application.", "MsiGetProductCodeW": "The MsiGetProductCode function returns the product code of an application by using the component code of an installed or advertised component of the application.", "MsiGetProductInfoA": "The MsiGetProductInfo function returns product information for published and installed products.", "MsiGetProductInfoExA": "Returns product information for advertised and installed products.", "MsiGetProductInfoExW": "Returns product information for advertised and installed products.", "MsiGetProductInfoFromScriptA": "The MsiGetProductInfoFromScript function returns product information for a Windows Installer script file.", "MsiGetProductInfoFromScriptW": "The MsiGetProductInfoFromScript function returns product information for a Windows Installer script file.", "MsiGetProductInfoW": "The MsiGetProductInfo function returns product information for published and installed products.", "MsiGetProductPropertyA": "The MsiGetProductProperty function retrieves product properties.", "MsiGetProductPropertyW": "The MsiGetProductProperty function retrieves product properties.", "MsiGetPropertyA": "The MsiGetProperty function gets the value for an installer property.", "MsiGetPropertyW": "The MsiGetProperty function gets the value for an installer property.", "MsiGetShortcutTargetA": "The MsiGetShortcutTarget function examines a shortcut and returns its product, feature name, and component if available.", "MsiGetShortcutTargetW": "The MsiGetShortcutTarget function examines a shortcut and returns its product, feature name, and component if available.", "MsiGetSourcePathA": "The MsiGetSourcePath function returns the full source path for a folder in the Directory table.", "MsiGetSourcePathW": "The MsiGetSourcePath function returns the full source path for a folder in the Directory table.", "MsiGetSummaryInformationA": "The MsiGetSummaryInformation function obtains a handle to the _SummaryInformation stream for an installer database.", "MsiGetSummaryInformationW": "The MsiGetSummaryInformation function obtains a handle to the _SummaryInformation stream for an installer database.", "MsiGetTargetPathA": "The MsiGetTargetPath function returns the full target path for a folder in the Directory table.", "MsiGetTargetPathW": "The MsiGetTargetPath function returns the full target path for a folder in the Directory table.", "MsiGetUserInfoA": "The MsiGetUserInfo function returns the registered user information for an installed product.", "MsiGetUserInfoW": "The MsiGetUserInfo function returns the registered user information for an installed product.", "MsiInstallMissingComponentA": "The MsiInstallMissingComponent function installs files that are unexpectedly missing.", "MsiInstallMissingComponentW": "The MsiInstallMissingComponent function installs files that are unexpectedly missing.", "MsiInstallMissingFileA": "The MsiInstallMissingFile function installs files that are unexpectedly missing.", "MsiInstallMissingFileW": "The MsiInstallMissingFile function installs files that are unexpectedly missing.", "MsiInstallProductA": "Installs or uninstalls a product.", "MsiInstallProductW": "Installs or uninstalls a product.", "MsiIsProductElevatedA": "The MsiIsProductElevated function returns whether or not the product is managed.", "MsiIsProductElevatedW": "The MsiIsProductElevated function returns whether or not the product is managed.", "MsiJoinTransaction": "The MsiJoinTransaction function requests that the Windows Installer make the current process the owner of the transaction installing the multiple-package installation.", "MsiLocateComponentA": "The MsiLocateComponent function returns the full path to an installed component without a product code.", "MsiLocateComponentW": "The MsiLocateComponent function returns the full path to an installed component without a product code.", "MsiNotifySidChangeA": "The MsiNotifySidChange function notifies and updates the Windows Installer internal information with changes to user SIDs.", "MsiNotifySidChangeW": "The MsiNotifySidChange function notifies and updates the Windows Installer internal information with changes to user SIDs.", "MsiOpenDatabaseA": "The MsiOpenDatabase function opens a database file for data access.", "MsiOpenDatabaseW": "The MsiOpenDatabase function opens a database file for data access.", "MsiOpenPackageA": "The MsiOpenPackage function opens a package to use with the functions that access the product database.", "MsiOpenPackageExA": "The MsiOpenPackageEx function opens a package to use with functions that access the product database.", "MsiOpenPackageExW": "The MsiOpenPackageEx function opens a package to use with functions that access the product database.", "MsiOpenPackageW": "The MsiOpenPackage function opens a package to use with the functions that access the product database.", "MsiOpenProductA": "The MsiOpenProduct function opens a product for use with the functions that access the product database.", "MsiOpenProductW": "The MsiOpenProduct function opens a product for use with the functions that access the product database.", "MsiPreviewBillboardA": "The MsiPreviewBillboard function displays a billboard with the host control in the displayed dialog box.", "MsiPreviewBillboardW": "The MsiPreviewBillboard function displays a billboard with the host control in the displayed dialog box.", "MsiPreviewDialogA": "The MsiPreviewDialog function displays a dialog box as modeless and inactive.", "MsiPreviewDialogW": "The MsiPreviewDialog function displays a dialog box as modeless and inactive.", "MsiProcessAdvertiseScriptA": "The MsiProcessAdvertiseScript function processes an advertise script file into the specified locations.", "MsiProcessAdvertiseScriptW": "The MsiProcessAdvertiseScript function processes an advertise script file into the specified locations.", "MsiProcessMessage": "The MsiProcessMessage function sends an error record to the installer for processing.", "MsiProvideAssemblyA": "The MsiProvideAssembly function returns the full path to a Windows Installer component that contains an assembly.", "MsiProvideAssemblyW": "The MsiProvideAssembly function returns the full path to a Windows Installer component that contains an assembly.", "MsiProvideComponentA": "The MsiProvideComponent function returns the full component path, performing any necessary installation.", "MsiProvideComponentW": "The MsiProvideComponent function returns the full component path, performing any necessary installation.", "MsiProvideQualifiedComponentA": "The MsiProvideQualifiedComponent function returns the full component path for a qualified component and performs any necessary installation.", "MsiProvideQualifiedComponentExA": "The MsiProvideQualifiedComponentEx function returns the full component path for a qualified component that is published by a product and performs any necessary installation.", "MsiProvideQualifiedComponentExW": "The MsiProvideQualifiedComponentEx function returns the full component path for a qualified component that is published by a product and performs any necessary installation.", "MsiProvideQualifiedComponentW": "The MsiProvideQualifiedComponent function returns the full component path for a qualified component and performs any necessary installation.", "MsiQueryComponentStateA": "The MsiQueryComponentState function returns the installed state for a component.", "MsiQueryComponentStateW": "The MsiQueryComponentState function returns the installed state for a component.", "MsiQueryFeatureStateA": "The MsiQueryFeatureState function returns the installed state for a product feature.", "MsiQueryFeatureStateExA": "The MsiQueryFeatureStateEx function returns the installed state for a product feature.", "MsiQueryFeatureStateExW": "The MsiQueryFeatureStateEx function returns the installed state for a product feature.", "MsiQueryFeatureStateW": "The MsiQueryFeatureState function returns the installed state for a product feature.", "MsiQueryProductStateA": "The MsiQueryProductState function returns the installed state for a product.", "MsiQueryProductStateW": "The MsiQueryProductState function returns the installed state for a product.", "MsiRecordClearData": "The MsiRecordClearData function sets all fields in a record to null.", "MsiRecordDataSize": "The MsiRecordDataSize function returns the length of a record field.", "MsiRecordGetFieldCount": "Returns the number of fields in a record.", "MsiRecordGetInteger": "The MsiRecordGetInteger function returns the integer value from a record field.", "MsiRecordGetStringA": "The MsiRecordGetString function returns the string value of a record field.", "MsiRecordGetStringW": "The MsiRecordGetString function returns the string value of a record field.", "MsiRecordIsNull": "Reports a null record field.", "MsiRecordReadStream": "The MsiRecordReadStream function reads bytes from a record stream field into a buffer.", "MsiRecordSetInteger": "Sets a record field to an integer field.", "MsiRecordSetStreamA": "The MsiRecordSetStream function sets a record stream field from a file.", "MsiRecordSetStreamW": "The MsiRecordSetStream function sets a record stream field from a file.", "MsiRecordSetStringA": "The MsiRecordSetString function copies a string into the designated field.", "MsiRecordSetStringW": "The MsiRecordSetString function copies a string into the designated field.", "MsiReinstallFeatureA": "Reinstalls features.", "MsiReinstallFeatureW": "Reinstalls features.", "MsiReinstallProductA": "Reinstalls products.", "MsiReinstallProductW": "Reinstalls products.", "MsiRemovePatchesA": "Removes one or more patches from a single product.", "MsiRemovePatchesW": "Removes one or more patches from a single product.", "MsiSequenceA": "The MsiSequence function executes another action sequence, as described in the specified table.", "MsiSequenceW": "The MsiSequence function executes another action sequence, as described in the specified table.", "MsiSetComponentStateA": "The MsiSetComponentState function sets a component to the requested state.", "MsiSetComponentStateW": "The MsiSetComponentState function sets a component to the requested state.", "MsiSetExternalUIA": "The MsiSetExternalUI function enables an external user-interface handler.", "MsiSetExternalUIRecord": "The MsiSetExternalUIRecord function enables an external user-interface handler.", "MsiSetExternalUIW": "The MsiSetExternalUI function enables an external user-interface handler.", "MsiSetFeatureAttributesA": "The MsiSetFeatureAttributes function can modify the default attributes of a feature at runtime.", "MsiSetFeatureAttributesW": "The MsiSetFeatureAttributes function can modify the default attributes of a feature at runtime.", "MsiSetFeatureStateA": "The MsiSetFeatureState function sets a feature to a specified state.", "MsiSetFeatureStateW": "The MsiSetFeatureState function sets a feature to a specified state.", "MsiSetInstallLevel": "The MsiSetInstallLevel function sets the installation level for a full product installation.", "MsiSetInternalUI": "The MsiSetInternalUI function enables the installer's internal user interface.", "MsiSetMode": "The MsiSetMode function sets an internal engine Boolean state.", "MsiSetPropertyA": "The MsiSetProperty function sets the value for an installation property.", "MsiSetPropertyW": "The MsiSetProperty function sets the value for an installation property.", "MsiSetTargetPathA": "The MsiSetTargetPath function sets the full target path for a folder in the Directory table.", "MsiSetTargetPathW": "The MsiSetTargetPath function sets the full target path for a folder in the Directory table.", "MsiSourceListAddMediaDiskA": "The MsiSourceListAddMediaDisk function adds or updates a disk of the media source of a registered product or patch.", "MsiSourceListAddMediaDiskW": "The MsiSourceListAddMediaDisk function adds or updates a disk of the media source of a registered product or patch.", "MsiSourceListAddSourceA": "Adds to the list of valid network sources that contain the specified type of sources for a product or patch in a specified user context.", "MsiSourceListAddSourceExA": "Adds or reorders the set of sources of a patch or product in a specified context.", "MsiSourceListAddSourceExW": "Adds or reorders the set of sources of a patch or product in a specified context.", "MsiSourceListAddSourceW": "Adds to the list of valid network sources that contain the specified type of sources for a product or patch in a specified user context.", "MsiSourceListClearAllA": "The MsiSourceListClearAll function removes all network sources from the source list of a patch or product in a specified context.", "MsiSourceListClearAllExA": "The MsiSourceListClearAllEx function removes all the existing sources of a given source type for the specified product or patch instance.", "MsiSourceListClearAllExW": "The MsiSourceListClearAllEx function removes all the existing sources of a given source type for the specified product or patch instance.", "MsiSourceListClearAllW": "The MsiSourceListClearAll function removes all network sources from the source list of a patch or product in a specified context.", "MsiSourceListClearMediaDiskA": "The MsiSourceListClearMediaDisk function provides the ability to remove an existing registered disk under the media source for a product or patch in a specific context.", "MsiSourceListClearMediaDiskW": "The MsiSourceListClearMediaDisk function provides the ability to remove an existing registered disk under the media source for a product or patch in a specific context.", "MsiSourceListClearSourceA": "Removes an existing source for a product or patch in a specified context.", "MsiSourceListClearSourceW": "Removes an existing source for a product or patch in a specified context.", "MsiSourceListEnumMediaDisksA": "The MsiSourceListEnumMediaDisks function enumerates the list of disks registered for the media source for a patch or product.", "MsiSourceListEnumMediaDisksW": "The MsiSourceListEnumMediaDisks function enumerates the list of disks registered for the media source for a patch or product.", "MsiSourceListEnumSourcesA": "The MsiSourceListEnumSources function enumerates the sources in the source list of a specified patch or product.", "MsiSourceListEnumSourcesW": "The MsiSourceListEnumSources function enumerates the sources in the source list of a specified patch or product.", "MsiSourceListForceResolutionA": "The MsiSourceListForceResolution function forces the installer to search the source list for a valid product source the next time a source is required.", "MsiSourceListForceResolutionExA": "The MsiSourceListForceResolutionEx function removes the registration of the property called LastUsedSource.", "MsiSourceListForceResolutionExW": "The MsiSourceListForceResolutionEx function removes the registration of the property called LastUsedSource.", "MsiSourceListForceResolutionW": "The MsiSourceListForceResolution function forces the installer to search the source list for a valid product source the next time a source is required.", "MsiSourceListGetInfoA": "The MsiSourceListGetInfo function retrieves information about the source list for a product or patch in a specific context.", "MsiSourceListGetInfoW": "The MsiSourceListGetInfo function retrieves information about the source list for a product or patch in a specific context.", "MsiSourceListSetInfoA": "Sets information about the source list for a product or patch in a specific context.", "MsiSourceListSetInfoW": "Sets information about the source list for a product or patch in a specific context.", "MsiSummaryInfoGetPropertyA": "The MsiSummaryInfoGetProperty function gets a single property from the summary information stream.", "MsiSummaryInfoGetPropertyCount": "The MsiSummaryInfoGetPropertyCount function returns the number of existing properties in the summary information stream.", "MsiSummaryInfoGetPropertyW": "The MsiSummaryInfoGetProperty function gets a single property from the summary information stream.", "MsiSummaryInfoPersist": "The MsiSummaryInfoPersist function writes changed summary information back to the summary information stream.", "MsiSummaryInfoSetPropertyA": "The MsiSummaryInfoSetProperty function sets a single summary information property.", "MsiSummaryInfoSetPropertyW": "The MsiSummaryInfoSetProperty function sets a single summary information property.", "MsiUseFeatureA": "The MsiUseFeature function increments the usage count for a particular feature and indicates the installation state for that feature.", "MsiUseFeatureExA": "The MsiUseFeatureEx function increments the usage count for a particular feature and indicates the installation state for that feature.", "MsiUseFeatureExW": "The MsiUseFeatureEx function increments the usage count for a particular feature and indicates the installation state for that feature.", "MsiUseFeatureW": "The MsiUseFeature function increments the usage count for a particular feature and indicates the installation state for that feature.", "MsiVerifyDiskSpace": "The MsiVerifyDiskSpace function checks to see if sufficient disk space is present for the current installation.", "MsiVerifyPackageA": "The MsiVerifyPackage function verifies that the given file is an installation package.", "MsiVerifyPackageW": "The MsiVerifyPackage function verifies that the given file is an installation package.", "MsiViewClose": "The MsiViewClose function releases the result set for an executed view.", "MsiViewExecute": "The MsiViewExecute function executes a SQL view query and supplies any required parameters.", "MsiViewFetch": "The MsiViewFetch function fetches the next sequential record from the view.", "MsiViewGetColumnInfo": "The MsiViewGetColumnInfo function returns a record containing column names or definitions.", "MsiViewGetErrorA": "The MsiViewGetError function returns the error that occurred in the MsiViewModify function.", "MsiViewGetErrorW": "The MsiViewGetError function returns the error that occurred in the MsiViewModify function.", "MsiViewModify": "The MsiViewModify function updates a fetched record.", "MemoryBarrier": "Creates a hardware memory barrier that prevents the CPU from re-ordering read and write operations.", "MakeCustomHeadersWriteOnly": "Sets the HTTP custom headers for this job to be write-only.", "MAKEINTATOM": "Converts the specified atom into a string, so it can be passed to functions which accept either atoms or strings.", "MoveFileFromAppW": "Moves an existing file or a directory, including its children.", "MAXMEDIALABEL": "The MaxMediaLabel callback function determines the maximum size of the media label for the applications supported by the media label library.", "MountNtmsMedia": "The MountNtmsMedia function synchronously mounts one or more pieces of media.", "MoveFile": "Moves an existing file or a directory, including its children.", "MoveFileA": "Moves an existing file or a directory, including its children.", "MoveFileW": "Moves an existing file or a directory, including its children.", "MoveFileWithProgressA": "Moves a file or directory, including its children.", "MoveFileWithProgressW": "Moves a file or directory, including its children.", "MoveToNtmsMediaPool": "The MoveToNtmsMediaPool function moves the specified medium from its current media pool to the specified media pool.", "MoveElementTo": "The MoveElementTo method copies or moves a substorage or stream from this storage object to another storage object.", "MergeVirtualDisk": "Merges a child virtual hard disk in a differencing chain with one or more parent virtual disks in the chain.", "MirrorVirtualDisk": "Initiates a mirror operation for a virtual disk.", "ModifyVhdSet": "Modifies the internal contents of a virtual disk file.", "MakeAbsoluteSD": "Creates a security descriptor in absolute format by using a security descriptor in self-relative format as a template.", "MakeSelfRelativeSD": "Creates a security descriptor in self-relative format by using a security descriptor in absolute format as a template.", "MakeSignature": "Generates a cryptographic checksum of the message, and also includes sequencing information to prevent message loss or insertion.", "MapGeneric": "The MapGeneric method requests that the generic access rights in an access mask be mapped to their corresponding standard and specific access rights.", "MapGenericMask": "Maps the generic access rights in an access mask to specific and standard access rights.", "Msv1_0SubAuthenticationFilter": "Performs user logon authentication that is specific to domain controllers.", "Msv1_0SubAuthenticationRoutine": "Performs client/server-specific authentication.", "Msv1_0SubAuthenticationRoutineEx": "Performs Remote Access Service authentication when subauthentication is requested by calling the LogonUser function.", "Msv1_0SubAuthenticationRoutineGeneric": "Performs Remote Access Service authentication when subauthentication is requested by calling the LsaCallAuthenticationPackage function.", "MakeDragList": "Changes the specified single-selection list box to a drag list box.", "MAKEIPADDRESS": "Packs four byte-values into a single LPARAM suitable for use with the IPM_SETADDRESS message.", "MAKEIPRANGE": "Packs two byte-values into a single LPARAM suitable for use with the IPM_SETRANGE message.", "MenuHelp": "Processes WM_MENUSELECT and WM_COMMAND messages and displays Help text about the current menu in the specified status window.", "MonthCal_GetCalendarBorder": "Gets the border size, in pixels, of a month calendar control.", "MonthCal_GetCalendarCount": "Gets the number of calendars currently displayed in the calendar control.", "MonthCal_GetCalendarGridInfo": "Gets information about a calendar grid.", "MonthCal_GetCALID": "Gets the current calendar ID for the given calendar control.", "MonthCal_GetColor": "Retrieves the color for a given portion of a month calendar control.", "MonthCal_GetCurrentView": "Gets the view for a month calendar control.", "MonthCal_GetCurSel": "Retrieves the currently selected date.", "MonthCal_GetFirstDayOfWeek": "Retrieves the first day of the week for a month calendar control.", "MonthCal_GetMaxSelCount": "Retrieves the maximum date range that can be selected in a month calendar control.", "MonthCal_GetMaxTodayWidth": "This includes the label text and the date text.", "MonthCal_GetMinReqRect": "Retrieves the minimum size required to display a full month in a month calendar control.", "MonthCal_GetMonthDelta": "Retrieves the scroll rate for a month calendar control.", "MonthCal_GetMonthRange": "Retrieves date information that represents the high and low limits of a month calendar control's display.", "MonthCal_GetRange": "You can use this macro or send the MCM_GETRANGE message explicitly.", "MonthCal_GetSelRange": "Retrieves date information that represents the upper and lower limits of the date range currently selected by the user.", "MonthCal_GetToday": "Retrieves the date information for the date specified as today for a month calendar control.", "MonthCal_GetUnicodeFormat": "Retrieves the Unicode character format flag for the control.", "MonthCal_HitTest": "Determines which portion of a month calendar control is at a given point on the screen.", "MonthCal_SetCalendarBorder": "Sets the border size, in pixels, of a month calendar control.", "MonthCal_SetCALID": "Sets the calendar ID for the given calendar control.", "MonthCal_SetColor": "Sets the color for a given portion of a month calendar control.", "MonthCal_SetCurrentView": "Sets the view for a month calendar control.", "MonthCal_SetCurSel": "If the specified date is not in view, the control updates the display to bring it into view.", "MonthCal_SetDayState": "Sets the day states for all months that are currently visible within a month calendar control.", "MonthCal_SetFirstDayOfWeek": "Sets the first day of the week for a month calendar control.", "MonthCal_SetMaxSelCount": "Sets the maximum number of days that can be selected in a month calendar control.", "MonthCal_SetMonthDelta": "Sets the scroll rate for a month calendar control.", "MonthCal_SetRange": "Sets the minimum and maximum allowable dates for a month calendar control.", "MonthCal_SetSelRange": "Sets the selection for a month calendar control to a given date range.", "MonthCal_SetToday": "Sets the today selection for a month calendar control.", "MonthCal_SetUnicodeFormat": "Sets the Unicode character format flag for the control.", "MonthCal_SizeRectToMin": "Calculates how many calendars will fit in the given rectangle, and then returns the minimum size that a rectangle needs to be to fit that number of calendars.", "Move": "Moves the UI Automation element.", "MoveBoundary": "Moves the start boundary of a string, by index, for a selected number of characters.", "MoveDown": "Mimics the functionality of the Down Arrow and Page Down keys.", "MoveEnd": "Moves the end position of the range.", "MoveEndUntil": "Moves the range's end to the character position of the first character found that is in the set of characters specified by Cset, provided that the character is found within Count characters of the range's end.", "MoveEndWhile": "Moves the end of the range either Count characters or just past all contiguous characters that are found in the set of characters specified by Cset, whichever is less.", "MoveLeft": "Generalizes the functionality of the Left Arrow key.", "MoveRight": "Generalizes the functionality of the Right Arrow key.", "MoveStart": "Moves the start position of the range the specified number of units in the specified direction.", "MoveStartUntil": "Moves the start position of the range the position of the first character found that is in the set of characters specified by Cset, provided that the character is found within Count characters of the start position.", "MoveStartWhile": "Moves the start position of the range either Count characters, or just past all contiguous characters that are found in the set of characters specified by Cset, whichever is less.", "MoveUntil": "Searches up to Count characters for the first character in the set of characters specified by Cset.", "MoveUp": "Mimics the functionality of the Up Arrow and Page Up keys.", "MoveWhile": "Starts at a specified end of a range and searches while the characters belong to the set specified by Cset and while the number of characters is less than or equal to Count.", "MAKELANGID": "Creates a language identifier from a primary language identifier and a sublanguage identifier.", "MAKELCID": "Creates a locale identifier from a language identifier and a sort order identifier.", "MAKESORTLCID": "Constructs a locale identifier from a language identifier, a sort order identifier, and the sort version.", "MappingDoAction": "For example, a phone dialer service first must recognize phone numbers and then can perform the action of dialing a number.", "MappingFreePropertyBag": "Frees memory and resources allocated during an ELS text recognition operation.", "MappingFreeServices": "Frees memory and resources allocated for the application to interact with one or more ELS services.", "MappingGetServices": "Retrieves a list of available ELS platform-supported services, along with associated information, according to application-specified criteria.", "MappingRecognizeText": "For example, the Microsoft Language Detection service will attempt to recognize the language in which the input text is written.", "MultiByteToWideChar": "Maps a character string to a UTF-16 string.", "MAKEINTRESOURCEA": "Converts an integer value to a resource type compatible with the resource-management functions.", "MAKEINTRESOURCEW": "Converts an integer value to a resource type compatible with the resource-management functions.", "MenuItemFromPoint": "Determines which menu item, if any, is at the specified location.", "ModifyMenuA": "Changes an existing menu item.", "ModifyMenuW": "Changes an existing menu item.", "MakeDefault": "Sets an application as the default application for this file type.", "MAKEDLLVERULL": "Used to pack DLL version information into a ULONGLONG value.", "MakeProminent": "Places a control in the dialog so that it stands out compared to other added controls.", "MapColumnToSCID": "Converts a column to the appropriate property set ID.", "MarkForDelete": "Marks for delete.", "MarkFullscreenWindow": "Marks a window as full-screen.", "MessageSFVCB": "Allows communication between the system folder view object and a system folder view callback object.", "MIMEAssociationDialogA": "Runs the unregistered MIME content type dialog box.", "MIMEAssociationDialogW": "Runs the unregistered MIME content type dialog box.", "MoveIcons": "This method is not implemented.", "MoveItem": "Moves the item within the volume/namespace, returning the IShellItem in its new location.", "MoveItems": "Declares a set of items that are to be moved to a specified destination.", "MoveWindowToDesktop": "Moves a window to the specified virtual desktop.", "MoveEndpointByRange": "Moves one endpoint of the current text range to the specified endpoint of a second text range.", "MoveEndpointByUnit": "Moves one endpoint of the text range the specified number of text units within the document range.", "MultipleViewPattern_GetViewName": "Retrieves the name of a control-specific view.", "MultipleViewPattern_SetCurrentView": "Sets a control to a different layout.", "MapUserPhysicalPagesScatter": "Maps previously allocated physical memory pages at a specified address in an Address Windowing Extensions region.", "MapViewOfFileExNuma": "Maps a view of a file mapping into the address space of a calling process and specifies the NUMA node for the physical memory.", "MoveFileExA": "Moves an existing file or directory, including its children, with various move options.", "MoveFileExW": "Moves an existing file or directory, including its children, with various move options.", "MoveFileTransactedA": "Moves an existing file or a directory, including its children, as a transacted operation.", "MoveFileTransactedW": "Moves an existing file or a directory, including its children, as a transacted operation.", "MulDiv": "Multiplies two 32-bit values and then divides the 64-bit result by a third 32-bit value.", "MAKELPARAM": "Creates a value for use as an lParam parameter in a message.", "MAKELRESULT": "Creates a value for use as a return value from a window procedure.", "MAKEWPARAM": "Creates a value for use as a wParam parameter in a message.", "MoveWindow": "Changes the position and dimensions of the specified window.", "Multiply128": "Multiplies two 64-bit integers to produce a 128-bit integer.", "MultiplyExtract128": "Multiplies two 64-bit integers to produce a 128-bit integer, shifts the product to the right by the specified number of bits, and returns the low 64 bits of the result.", "MultiplyHigh": "Multiplies two 64-bit integers to produce a 128-bit integer and gets the high 64 bits.", "MapDialogRect": "Converts the specified dialog box units to screen units.", "MapVirtualKeyA": "Translates a virtual-key code into a scan code or character value, or translates a scan code into a virtual-key code.", "MapVirtualKeyExA": "Translates a virtual-key code into a scan code or character value, or translates a scan code into a virtual-key code.", "MapVirtualKeyExW": "Translates a virtual-key code into a scan code or character value, or translates a scan code into a virtual-key code.", "MapVirtualKeyW": "Translates a virtual-key code into a scan code or character value, or translates a scan code into a virtual-key code.", "MapWindowPoints": "The MapWindowPoints function converts a set of points from a coordinate space relative to one window to a coordinate space relative to another window.", "MessageBeep": "Plays a waveform sound.", "MessageBox": "Displays a modal dialog box that contains a system icon, a set of buttons, and a brief application-specific message, such as status or error information.", "MessageBoxA": "Displays a modal dialog box that contains a system icon, a set of buttons, and a brief application-specific message, such as status or error information.", "MessageBoxExA": "Creates, displays, and operates a message box.", "MessageBoxExW": "Creates, displays, and operates a message box.", "MessageBoxIndirectA": "Creates, displays, and operates a message box.", "MessageBoxIndirectW": "Creates, displays, and operates a message box.", "MessageBoxW": "Displays a modal dialog box that contains a system icon, a set of buttons, and a brief application-specific message, such as status or error information.", "MonitorFromPoint": "The MonitorFromPoint function retrieves a handle to the display monitor that contains a specified point.", "MonitorFromRect": "The MonitorFromRect function retrieves a handle to the display monitor that has the largest area of intersection with a specified rectangle.", "MonitorFromWindow": "The MonitorFromWindow function retrieves a handle to the display monitor that has the largest area of intersection with the bounding rectangle of a specified window.", "mouse_event": "The mouse_event function synthesizes mouse motion and button clicks.", "MsgWaitForMultipleObjects": "Waits until one or all of the specified objects are in the signaled state or the time-out interval elapses.", "MsgWaitForMultipleObjectsEx": "Waits until one or all of the specified objects are in the signaled state, an I/O completion routine or asynchronous procedure call is queued to the thread, or the time-out interval elapses.", "MapUserPhysicalPages": "Maps previously allocated physical memory pages at a specified address in an Address Windowing Extensions region.", "MapViewOfFile": "Maps a view of a file mapping into the address space of a calling process.", "MapViewOfFile2": "Maps a view of a file or a pagefile-backed section into the address space of the specified process.", "MapViewOfFile3": "Maps a view of a file or a pagefile-backed section into the address space of the specified process.", "MapViewOfFile3FromApp": "Maps a view of a file mapping into the address space of a calling Windows Store app.", "MapViewOfFileEx": "Maps a view of a file mapping into the address space of a calling process.", "MapViewOfFileFromApp": "Maps a view of a file mapping into the address space of a calling Windows Store app.", "MapViewOfFileNuma2": "Maps a view of a file or a pagefile-backed section into the address space of the specified process.", "Next": "Enumerates the next celt elements in the enumerator's list, returning them in rgelt along with the actual number of enumerated elements in pceltFetched.", "NetConnectionEnum": "Lists all connections made to a shared resource on the server or all connections established from a particular computer.", "NetFileClose": "Forces a resource to close.", "NetFileEnum": "Returns information about some or all open files on a server, depending on the parameters specified.", "NetFileGetInfo": "Retrieves information about a particular opening of a server resource.", "NetSessionDel": "Ends a network session between a server and a workstation.", "NetSessionEnum": "Provides information about sessions established on a server.", "NetSessionGetInfo": "Retrieves information about a session established between a particular server and workstation.", "NetShareAdd": "Shares a server resource.", "NetShareCheck": "Checks whether or not a server is sharing a device.", "NetShareDel": "Deletes a share name from a server's list of shared resources, disconnecting all connections to the shared resource.", "NetShareDelEx": "Deletes a share name from a server's list of shared resources, which disconnects all connections to that share.", "NetShareEnum": "Retrieves information about each shared resource on a server.", "NetShareGetInfo": "Retrieves information about a particular shared resource on a server.", "NetShareSetInfo": "Sets the parameters of a shared resource.", "NetStatisticsGet": "Retrieves operating statistics for a service.", "NtCurrentTeb": "The NtCurrentTeb routine returns a pointer to the Thread Environment Block of the current thread.", "NameFromSid": "Gets the display name that corresponds to the specified security identifier.", "NamesFromSids": "Gets the display names that correspond to the specified security identifiers.", "NCryptCloseProtectionDescriptor": "Zeros and frees a protection descriptor object and releases its handle.", "NCryptCreateClaim": "Creates a key attestation claim.", "NCryptCreatePersistedKey": "Creates a new key and stores it in the specified key storage provider.", "NCryptCreateProtectionDescriptor": "Retrieves a handle to a protection descriptor object.", "NCryptDecrypt": "Decrypts a block of encrypted data.", "NCryptDeleteKey": "Deletes a CNG key.", "NCryptDeriveKey": "Derives a key from a secret agreement value.", "NCryptEncrypt": "Encrypts a block of data.", "NCryptEnumAlgorithms": "Obtains the names of the algorithms that are supported by the specified key storage provider.", "NCryptEnumKeys": "Obtains the names of the keys that are stored by the provider.", "NCryptEnumStorageProviders": "Obtains the names of the registered key storage providers.", "NCryptExportKey": "Exports a CNG key to a memory BLOB.", "NCryptFinalizeKey": "Completes a CNG key storage key.", "NCryptFreeBuffer": "Releases a block of memory allocated by a CNG key storage provider.", "NCryptFreeObject": "Frees a CNG key storage object.", "NCryptGetProperty": "Retrieves the value of a named property for a key storage object.", "NCryptGetProtectionDescriptorInfo": "Retrieves a protection descriptor rule string.", "NCryptImportKey": "Imports a Cryptography API:_Next Generation key from a memory BLOB.", "NCryptIsAlgSupported": "Determines if a CNG key storage provider supports a specific cryptographic algorithm.", "NCryptIsKeyHandle": "Determines if the specified handle is a CNG key handle.", "NCryptKeyDerivation": "Creates a key from another key by using the specified key derivation function.", "NCryptNotifyChangeKey": "Creates or removes a key change notification.", "NCryptOpenKey": "Opens a key that exists in the specified CNG key storage provider.", "NCryptOpenStorageProvider": "Loads and initializes a CNG key storage provider.", "NCryptProtectSecret": "Encrypts data to a specified protection descriptor.", "NCryptQueryProtectionDescriptorName": "Retrieves the protection descriptor rule string associated with a registered descriptor display name.", "NCryptRegisterProtectionDescriptorName": "Registers the display name and the associated rule string for a protection descriptor.", "NCryptSecretAgreement": "Creates a secret agreement value from a private and a public key.", "NCryptSetProperty": "Sets the value for a named property for a CNG key storage object.", "NCryptSignHash": "Creates a signature of a hash value.", "NCryptStreamClose": "Closes a data protection stream object opened by using the NCryptStreamOpenToProtect or NCryptStreamOpenToUnprotect functions.", "NCryptStreamOpenToProtect": "Opens a stream object that can be used to encrypt large amounts of data to a given protection descriptor.", "NCryptStreamOpenToUnprotect": "Opens a stream object that can be used to decrypt large amounts of data to the same protection descriptor used for encryption.", "NCryptStreamOpenToUnprotectEx": "Opens a stream object that can be used to decrypt large amounts of data to the same protection descriptor used for encryption.", "NCryptStreamUpdate": "Encrypts and decrypts blocks of data.", "NCryptTranslateHandle": "Translates a CryptoAPI handle into a CNG key handle.", "NCryptUnprotectSecret": "Decrypts data to a specified protection descriptor.", "NCryptVerifyClaim": "Verifies a key attestation claim.", "NCryptVerifySignature": "Verifies that the specified signature matches the specified hash.", "NetAddServiceAccount": "Creates a standalone managed service account and stores the account information on the local computer.", "NetEnumerateServiceAccounts": "Enumerates the standalone managed service accounts on the specified server.", "NetIsServiceAccount": "Tests whether the specified standalone managed service account exists in the Netlogon store on the specified server.", "NetQueryServiceAccount": "Gets information about the specified managed service account.", "NetRemoveServiceAccount": "Deletes the specified service account from the Active Directory database if the account is a standalone managed service account.", "Notify": "Called by a Shell view to notify the common dialog box hosting it that an event has occurred.", "NotifyBootConfigStatus": "Reports the boot status to the service control manager.", "NotifyServiceStatusChangeA": "Enables an application to receive notification when the specified service is created or deleted or when its status changes.", "NotifyServiceStatusChangeW": "Enables an application to receive notification when the specified service is created or deleted or when its status changes.", "NPAddConnection": "Connects a local device to a network resource.", "NPAddConnection3": "Connects a local device to a network resource.", "NPCancelConnection": "Disconnects a network connection.", "NPCloseEnum": "Closes an enumeration.", "NPDeviceMode": "Specifies the parent window of a device.", "NPDirectoryNotify": "Notifies the network provider of certain directory operations.", "NPEnumResource": "Performs an enumeration based on a handle returned by NPOpenEnum.", "NPFMXEditPerm": "Enables network vendors to supply their own permission editor dialog boxes.", "NPFMXGetPermCaps": "Retrieves the capabilities of the permission editor.", "NPFMXGetPermHelp": "Retrieves the help file and help context of the permission editor dialog boxes when a menu item in the Security menu of File Manager is selected and F1 is pressed.", "NPFormatNetworkName": "Formats a network name in a provider-specific format for display in a control.", "NPGetCaps": "Returns information about which services are supported on the network.", "NPGetConnection": "Retrieves information about a connection.", "NPGetConnection3": "Retrieves information about a network connection, even if it is currently disconnected.", "NPGetConnectionPerformance": "Returns information about the expected performance of a connection used to access a network resource.", "NPGetDirectoryType": "Determines the type of a network directory.", "NPGetPropertyText": "Retrieves the names of buttons to add to a property dialog box for a network resource.", "NPGetResourceInformation": "Separates the part of a network resource accessed through the WNet API from the part accessed through APIs specific to the resource type.", "NPGetResourceParent": "Retrieves the parent of a specified network resource in the browse hierarchy.", "NPGetUniversalName": "Retrieves the universal name of a network resource.", "NPGetUser": "Retrieves the value of the current default user name or the user name used to establish a network connection.", "NPLogonNotify": "MPR calls this function to notify the credential manager that a logon event has occurred, allowing the credential manager to return a logon script.", "NPOpenEnum": "Opens an enumeration of network resources or existing connections.", "NPPasswordChangeNotify": "MPR calls this function to notify the credential manager of a password change event.", "NPPropertyDialog": "Called when the user clicks a button added by using the NPPropertyDialog function.", "NPSearchDialog": "Enables network vendors to supply their own form of browsing and search, beyond the hierarchical view presented in the Connection dialog box.", "New": "Opens a new document.", "NextWords": "Gets the next word entry from a dictionary.", "NlsDllCodePageTranslation": "Used to get code page information or do conversion, depending on flag settings.", "NormalizeString": "Normalizes characters of a text string according to Unicode 4.0 TR#15.", "NotifyUILanguageChange": "Unsupported.", "NavigateToPidl": "Deprecated.", "NetAddr_DisplayErrorTip": "Displays an error message in the balloon tip associated with the network address control.", "NetAddr_GetAddress": "Indicates whether a network address conforms to a specified type and format.", "NetAddr_GetAllowType": "Retrieves the network address types that a specified network address control accepts.", "NetAddr_SetAllowType": "Sets the network address types that a specified network address control accepts.", "NewItem": "Declares a new item that is to be created in a specified location.", "NextFrame": "Switches to the next frame of an animated image.", "NextPage": "Switches to the next page of a multipage image.", "NotifyRedirect": "Updates the browser to the specified pointer to an item identifier list, navigating if necessary.", "Navigate": "Gets the next element in the specified direction within the logical UI tree.", "NewDocument": "The adapter creates a wrapped document and registers it with the store, so clients can access information about the text in the document.", "NormalizeElement": "Retrieves the ancestor element nearest to the specified Microsoft UI Automation element in the tree view.", "NormalizeElementBuildCache": "Retrieves the ancestor element nearest to the specified Microsoft UI Automation element in the tree view, prefetches the requested properties and control patterns, and stores the prefetched items in the cache.", "NotifyWinEvent": "Signals the system that a predefined event occurred.", "NotifyChangeEventLog": "Enables an application to receive notification when an event is written to the specified event log.", "NEXTRAWINPUTBLOCK": "Retrieves the location of the next structure in an array of RAWINPUT structures.", "OpenCUB": "The OpenCUB method opens an Internal Consistency Evaluator file that is to be used for validation.", "OpenDatabase": "The OpenDatabase method opens a Windows Installer installation database, located at a specified path, that is to be merged with a module.", "OpenLog": "The OpenLog method opens a log file that receives progress and error messages.", "OpenModule": "The OpenModule method opens a Windows Installer merge module in read-only mode.", "OpenJobObjectA": "Opens an existing job object.", "OnStatus": "Implement the OnStatus method to receive notification when the group is complete or an error occurs.", "OpenClipboard": "Opens the clipboard for examination and prevents other applications from modifying the clipboard content.", "OnUserNameChanged": "Notifies the client's connection sink whenever a user's SID has been asynchronously resolved.", "OpenEncryptedFileRawA": "Opens an encrypted file in order to backup the file.", "OpenEncryptedFileRawW": "Opens an encrypted file in order to backup the file.", "OpenEnlistment": "Opens an existing enlistment object, and returns a handle to the enlistment.", "OpenFile": "Creates, opens, reopens, or deletes a file.", "OpenFileById": "Opens the file that matches the specified identifier.", "OpenNtmsNotification": "The OpenNtmsNotification function opens a channel to receive RSM object change notifications for objects of the specified type.", "OpenNtmsSessionA": "The OpenNtmsSession function sets up a session with a RSM server.", "OpenNtmsSessionW": "The OpenNtmsSession function sets up a session with a RSM server.", "OpenResourceManager": "Opens an existing resource manager.", "OpenTransaction": "Opens an existing transaction.", "OpenTransactionManager": "Opens an existing transaction manager.", "OpenTransactionManagerById": "Opens an existing transaction manager.", "OleConvertIStorageToOLESTREAM": "The OleConvertIStorageToOLESTREAM function converts the specified storage object from OLE 2 structured storage to the OLE 1 storage object model but does not include the presentation data.", "OleConvertIStorageToOLESTREAMEx": "The OleConvertIStorageToOLESTREAMEx function converts the specified storage object from OLE 2 structured storage to the OLE 1 storage object model, including the presentation data.", "OleConvertOLESTREAMToIStorage": "Converts the specified object from the OLE 1 storage model to an OLE 2 structured storage object without specifying presentation data.", "OleConvertOLESTREAMToIStorageEx": "The OleConvertOLESTREAMToIStorageEx function converts the specified object from the OLE 1 storage model to an OLE 2 structured storage object including presentation data.", "Open": "Opens the specified Control Panel item, optionally to a specific page.", "OpenStorage": "Opens an existing storage object with the specified name in the specified access mode.", "OpenStream": "Opens an existing stream object within this storage object in the specified access mode.", "OpenVirtualDisk": "Opens a virtual hard disk for use.", "OpenTraceA": "The OpenTrace function opens an ETW trace processing handle for consuming events from an ETW real-time trace session or an ETW log file.", "OpenTraceW": "The OpenTrace function opens an ETW trace processing handle for consuming events from an ETW real-time trace session or an ETW log file.", "OpenAppStatusKey": "The IDirectInputJoyConfig8::OpenAppStatusKey method opens the root key of the application status registry keys, and obtains a handle to the key as a return parameter.", "OpenTypeKey": "The IDirectInputJoyConfig8::OpenTypeKey method opens the registry key associated with a joystick type.", "ObjectCloseAuditAlarmA": "Generates an audit message in the security event log when a handle to a private object is deleted.", "ObjectCloseAuditAlarmW": "Generates an audit message in the security event log when a handle to a private object is deleted.", "ObjectDeleteAuditAlarmA": "Generates audit messages when an object is deleted.", "ObjectDeleteAuditAlarmW": "Generates audit messages when an object is deleted.", "ObjectOpenAuditAlarmA": "Generates audit messages when a client application attempts to gain access to an object or to create a new one.", "ObjectOpenAuditAlarmW": "Generates audit messages when a client application attempts to gain access to an object or to create a new one.", "ObjectPrivilegeAuditAlarmA": "Generates an audit message in the security event log.", "ObjectPrivilegeAuditAlarmW": "Generates an audit message in the security event log.", "OpenApplication": "Opens the IAzApplication object with the specified name.", "OpenApplication2": "Opens the IAzApplication2 object with the specified name.", "OpenApplicationGroup": "Opens an IAzApplicationGroup object by specifying its name.", "OpenConnection": "Establishes a connection with a Certificate Services server.", "OpenElevatedEditor": "Opens an access control editor when a user clicks the Edit button on an access control editor page that displays an image of a shield on that Edit button.", "OpenOperation": "Opens an IAzOperation object with the specified name.", "OpenPersonalTrustDBDialog": "Displays the Certificates dialog box.", "OpenPersonalTrustDBDialogEx": "Displays the Certificates dialog box.", "OpenProcessToken": "Opens the access token associated with a process.", "OpenRole": "Opens an IAzRole object with the specified name.", "OpenRoleAssignment": "Opens an IAzRoleAssignment object with the specified name in this scope.", "OpenRoleDefinition": "Opens an IAzRoleDefinition object with the specified name in this scope.", "OpenSCManagerA": "Establishes a connection to the service control manager on the specified computer and opens the specified service control manager database.", "OpenSCManagerW": "Establishes a connection to the service control manager on the specified computer and opens the specified service control manager database.", "OpenScope": "Opens an IAzScope object with the specified name.", "OpenScope2": "Opens an IAzScope2 object with the specified name.", "OpenServiceA": "Opens an existing service.", "OpenServiceW": "Opens an existing service.", "OpenTask": "Opens an IAzTask object with the specified name.", "OpenThreadToken": "Opens the access token associated with a thread.", "OpenView": "Opens a view to a Certificate Services database and instantiates an instance of an IEnumCERTVIEWROW object.", "OnTxCharFormatChange": "Sets the default character format for the text host.", "OnTxInPlaceActivate": "Notifies the text services object that this control is in-place active.", "OnTxInPlaceDeactivate": "Notifies the text services object that this control is no longer in-place active.", "OnTxParaFormatChange": "Sets the default paragraph format for the text host.", "OnTxPropertyBitsChange": "Sets properties for the control.", "OnTxSetCursor": "Notifies the text services object to set the cursor.", "OnTxUIActivate": "Informs the text services object that the control is now UI active.", "OnTxUIDeactivate": "Informs the text services object that the control is no longer UI active.", "OpenThemeData": "Opens the theme data for a window and its associated class.", "OpenThemeDataEx": "Opens the theme data associated with a window for specified theme classes.", "OemToCharA": "Translates a string from the OEM-defined character set into either an ANSI or a wide-character string.", "OemToCharBuffA": "Translates a specified number of characters in a string from the OEM-defined character set into either an ANSI or a wide-character string.", "OemToCharBuffW": "Translates a specified number of characters in a string from the OEM-defined character set into either an ANSI or a wide-character string.", "OemToCharW": "Translates a string from the OEM-defined character set into either an ANSI or a wide-character string.", "ObjectFromLresult": "Retrieves a requested interface pointer for an accessible object based on a previously generated object reference.", "OleCreateFontIndirect": "Creates and initializes a standard font object using an initial description of the font's properties in a FONTDESC structure.", "OleCreatePictureIndirect": "Creates a new picture object initialized according to a PICTDESC structure.", "OleCreatePropertyFrame": "Invokes a new property frame, that is, a property sheet dialog box, whose parent is hwndOwner, where the dialog is positioned at the point in the parent window and has the caption lpszCaption.", "OleCreatePropertyFrameIndirect": "Creates a property frame, that is, a property sheet dialog box, based on a structure that contains the parameters, rather than specifying separate parameters as when calling OleCreatePropertyFrame.", "OleIconToCursor": "Converts an icon to a cursor.", "OleLoadPicture": "Creates a new picture object and initializes it from the contents of a stream.", "OleLoadPictureEx": "Creates a new picture object and initializes it from the contents of a stream.", "OleLoadPictureFile": "Creates an IPictureDisp object from a picture file on disk.", "OleLoadPictureFileEx": "Loads a picture from a file.", "OleLoadPicturePath": "Creates a new picture object and initializes it from the contents of a stream.", "OleSavePictureFile": "Saves a picture to a file.", "OleTranslateColor": "Converts an OLE_COLOR type to a COLORREF.", "Offline": "Checks for and updates the browser's offline status, synchronizing the state between the base class and any derived classes.", "OnActivated": "Occurs when a Shell window's activation state changes.", "OnAfterContextMenu": "Called after a context menu is displayed.", "OnAfterExpand": "Called after an IShellItem is expanded.", "OnBalloonUserClick": "Called when the user clicks the balloon.", "OnBeforeContextMenu": "Called before a context menu is displayed; allows client to add additional menu entries.", "OnBeforeExpand": "Called before an IShellItem is expanded.", "OnBeforeItemDelete": "Called before an IShellItem and all of its children are deleted.", "OnBeforeStateImageChange": "Called before the state icon of the given IShellItem is changed.", "OnBeginLabelEdit": "Called before the IShellItem goes into edit mode.", "OnButtonClicked": "Called when the user clicks a command button.", "OnChange": "Informs a namespace extension that an event has taken place that affects its items.", "OnCheckButtonToggled": "Called when the user changes the state of a check button.", "OnColumnClicked": "Called after a specified column is clicked in the IShellView interface.", "OnCommand": "The derived class handles the message.", "OnContextMenu": "Called when the user right-clicks the icon in the notification area.", "OnControlActivating": "Called when an Open button drop-down list customized through EnableOpenDropDown or a Tools menu is about to display its contents.", "OnCreate": "The derived class handles the message.", "OnCreated": "Occurs when a new Shell window is created for a frame.", "OnCreating": "Allows you to modify the parameters of the process being created.", "OnCreatingWindow": "Called when the window is created.", "OnDefaultCommand": "Called when a user double-clicks in the view or presses the ENTER key.", "OnDestroy": "The derived class handles the message.", "OnDoDefaultAccessibilityAction": "Invokes the default accessibility action on a Shell item.", "OnDragEnter": "Called on drag enter to set drag effect, as specified.", "OnDragLeave": "Called on drag leave for a specified item.", "OnDragOver": "Called on drag over to set drag effect, as specified.", "OnDragPosition": "Called when the item is being dragged within the same level in the tree.", "OnDrop": "Called on drop to set drop effect, as specified.", "OnDropPosition": "Called when the item is being dropped within the same level in the tree.", "OnEndLabelEdit": "Called after the IShellItem leaves edit mode.", "OnFileOk": "Called just before the dialog is about to return with a result.", "OnFocusChangeIS": "Informs the browser that the focus has changed.", "OnFolderChange": "Called when the user navigates to a new folder.", "OnFolderChanging": "Called before IFileDialogEvents::OnFolderChange.", "OnFrameWindowActivateBS": "The derived class determines what to do in response to the action.", "OnGetAccessibilityRole": "Gets the accessibility role for a Shell item.", "OnGetDefaultAccessibilityAction": "Gets the default accessibility action for a Shell item.", "OnGetToolTip": "Enables you to provide a tooltip.", "OnHttpEquiv": "Called when the document object responds to an HTTP-EQUIV metatag by issuing either the OLECMDID_HTTPEQUIV or OLECMDID_HTTPEQUIV_DONE command through IOleCommandTarget::Exec.", "OnInvoke": "Not implemented.", "OnItemAdded": "Called after an IShellItem has been added.", "OnItemClick": "Called when the user clicks a button on the mouse.", "OnItemDeleted": "Called after an IShellItem has been deleted.", "OnItemSelected": "Called when an item is selected in a combo box, when a user clicks an option button, or an item is chosen from the Tools menu.", "OnItemStateChanged": "Not implemented.", "OnItemStateChanging": "Called before the state of an item changes.", "OnKeyboardInput": "Called when the user presses a key on the keyboard.", "OnLeftClick": "Called when the user clicks the icon in the notification area.", "OnNavigate": "Occurs when a Shell window is navigated to a new location.", "OnNavigationComplete": "Notifies clients that the Explorer browser has successfully navigated to a Shell folder.", "OnNavigationFailed": "Notifies clients that the Explorer browser has failed to navigate to a Shell folder.", "OnNavigationPending": "Notifies clients of a pending Explorer browser navigation to a Shell folder.", "OnNotify": "The derived class handles the message.", "OnOverwrite": "Called from the save dialog when the user chooses to overwrite a file.", "OnPictureChange": "Called to send notifications when the picture that represents a user account is changed.", "OnPosRectChangeDB": "Notifies the object that the rectangle has changed.", "OnPreViewCreated": "Called after a specified preview is created in the IShellView interface.", "OnPropertyItemCommit": "Not implemented.", "OnSelect": "Handles selection notifications.", "OnSelectionChange": "Called when the user changes the selection in the dialog's view.", "OnSelectionChanged": "Called when the selection changes.", "OnSetFocus": "The derived class handles the message.", "OnSetTitle": "Sets or retrieves the title of the site object.", "OnShareViolation": "Enables an application to respond to sharing violations that arise from Open or Save operations.", "OnSize": "The derived class handles the message.", "OnStateChange": "Called after a state, identified by the uChange parameter, has changed in the IShellView interface.", "OnStateChanged": "Called when package state changes during Windows Store app debugging.", "OnTranslateAccelerator": "Not implemented.", "OnTypeChange": "Called when the dialog is opened to notify the application of the initial chosen filetype.", "OnViewCreated": "Notifies clients that the view of the Explorer browser has been created and can be modified.", "OnViewWindowActive": "Called by the Shell view when the view window or one of its child windows gets the focus or becomes active.", "OpenItem": "Opens the item for copying.", "OpenRegStream": "OpenRegStream may be altered or unavailable.", "OpenResource": "Opens a specified resource.", "OverlappedResult": "Retrieves the results of an overlapped operation.", "OverlayIndexFromImageIndex": "Finds the index of an overlay image for the specified icon image.", "OnDocumentFocus": "Applications that use Text Services Framework call IAccServerDocMgr::OnDocumentFocus to notify the Microsoft Active Accessibility run time when a document gets or loses focus.", "OpenBackupEventLogA": "Opens a handle to a backup event log created by the BackupEventLog function.", "OpenBackupEventLogW": "Opens a handle to a backup event log created by the BackupEventLog function.", "OpenCommPort": "Attempts to open a communication device.", "OpenEventLogA": "Opens a handle to the specified event log.", "OpenEventLogW": "Opens a handle to the specified event log.", "OpenFileMappingA": "Opens a named file mapping object.", "OpenPrivateNamespaceA": "Opens a private namespace.", "OperationEnd": "Notifies the system that the application is about to end an operation.", "OperationStart": "Notifies the system that the application is about to start an operation.", "OpenIcon": "Restores a minimized window to its previous size and position; it then activates the window.", "OemKeyScan": "Maps OEMASCII codes 0 through 0x0FF into the OEM scan codes and shift states.", "OffsetRect": "The OffsetRect function moves the specified rectangle by the specified offsets.", "OpenDesktopA": "Opens the specified desktop object.", "OpenDesktopW": "Opens the specified desktop object.", "OpenInputDesktop": "Opens the desktop that receives user input.", "OpenWindowStationA": "Opens the specified window station.", "OpenWindowStationW": "Opens the specified window station.", "OfferVirtualMemory": "Indicates that the data contained in a range of memory pages is no longer needed by the application and can be discarded by the system if necessary.", "OpenFileMappingFromApp": "Opens a named file mapping object.", "OpenFileMappingW": "Opens a named file mapping object.", "ProvideIntegerData": "The ProvideIntegerData method retrieves integer data from the client tool.", "ProvideTextData": "The ProvideTextData method retrieves text data from the client tool.", "PSP_FILE_CALLBACK_A": "The FileCallback callback function is used by a few setup functions.", "PSP_FILE_CALLBACK_W": "The FileCallback callback function is used by a few setup functions.", "PAPCFUNC": "An application-defined completion routine.", "PFIBER_START_ROUTINE": "An application-defined function used with the CreateFiber function.", "PFLS_CALLBACK_FUNCTION": "An application-defined function.", "PreFetchCacheLine": "Indicates to the processor that a cache line will be needed in the near future.", "PrepareTape": "Prepares the tape to be accessed or removed.", "PTP_CLEANUP_GROUP_CANCEL_CALLBACK": "Applications implement this callback if they call the SetThreadpoolCallbackCleanupGroup function to specify the callback to use when CloseThreadpoolCleanupGroup is called.", "PulseEvent": "Sets the specified event object to the signaled state and then resets it to the nonsignaled state after releasing the appropriate number of waiting threads.", "PackDDElParam": "Packs a Dynamic Data Exchange lParam value into an internal structure used for sharing DDE data between processes.", "PFNCALLBACK": "An application-defined callback function used with the Dynamic Data Exchange Management Library functions.", "PCOPYFILE2_PROGRESS_ROUTINE": "An application-defined callback function used with the CopyFile2 function.", "PFE_EXPORT_FUNC": "An application-defined callback function used with ReadEncryptedFileRaw.", "PFE_IMPORT_FUNC": "An application-defined callback function used with WriteEncryptedFileRaw.", "PLOG_FULL_HANDLER_CALLBACK": "The LOG_FULL_HANDLER_CALLBACK function is an application-defined callback function that receives notification that the call to HandleLogFull is complete.", "PLOG_TAIL_ADVANCE_CALLBACK": "The LOG_TAIL_ADVANCE_CALLBACK function is an application-defined callback function that advances the log tail.", "PLOG_UNPINNED_CALLBACK": "The LOG_UNPINNED_CALLBACK function is an application-defined callback function that receives notification that the log has become unpinned.", "PopIoRingCompletion": "Pops a single entry from the completion queue, if one is available.", "PostQueuedCompletionStatus": "Posts an I/O completion packet to an I/O completion port.", "PrepareComplete": "Indicates that the resource manager has completed all processing necessary to guarantee that a commit or abort operation will succeed for the specified transaction.", "PrepareEnlistment": "Prepares the transaction associated with this enlistment handle.", "PrepareLogArchive": "Prepares a physical log for archival.", "PrePrepareComplete": "Signals that this resource manager has completed its prepare work, so that other resource managers can now begin their prepare operations.", "PrePrepareEnlistment": "Pre-prepares the transaction associated with this enlistment handle.", "PropStgNameToFmtId": "Converts a property set storage or stream name to its format identifier.", "PropVariantClear": "Frees all elements that can be freed in a given PROPVARIANT structure.", "PropVariantCopy": "The PropVariantCopy function copies the contents of one PROPVARIANT structure to another.", "PropVariantInit": "The PropVariantInit function initializes a PROPVARIANT structure.", "ProcessTrace": "Delivers events from one or more trace processing sessions to the consumer.", "PCRYPT_DECRYPT_PRIVATE_KEY_FUNC": "Decrypts the private key and returns the decrypted key in the pbClearTextKey parameter.", "PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC": "Encrypts the private key and returns the encrypted contents in the pbEncryptedKey parameter.", "PCRYPT_RESOLVE_HCRYPTPROV_FUNC": "Returns a handle to a cryptographic service provider by using the phCryptProv parameter to receive the key being imported.", "pCryptSIPGetCaps": "Is implemented by a subject interface package to report capabilities.", "PFN_CDF_PARSE_ERROR_CALLBACK": "Called for Catalog Definition Function errors while parsing a catalog definition file.", "PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK": "An application-defined callback function that allows the application to filter certificates that might be added to the certificate chain.", "PFN_CERT_CREATE_CONTEXT_SORT_FUNC": "Called for each sorted context entry when a context is created.", "PFN_CERT_DLL_OPEN_STORE_PROV_FUNC": "Implemented by a store-provider and is used to open a store.", "PFN_CERT_ENUM_PHYSICAL_STORE": "The CertEnumPhysicalStoreCallback callback function formats and presents information on each physical store found by a call to CertEnumPhysicalStore.", "PFN_CERT_ENUM_SYSTEM_STORE": "The CertEnumSystemStoreCallback callback function formats and presents information on each system store found by a call to CertEnumSystemStore.", "PFN_CERT_ENUM_SYSTEM_STORE_LOCATION": "The CertEnumSystemStoreLocationCallback callback function formats and presents information on each system store location found by a call to CertEnumSystemStoreLocation.", "PFN_CERT_STORE_PROV_CLOSE": "An application-defined callback function that is called by CertCloseStore when the store's reference count is decremented to zero.", "PFN_CERT_STORE_PROV_CONTROL": "The CertStoreProvControl callback function supports the CertControlStore API.", "PFN_CERT_STORE_PROV_DELETE_CERT": "An application-defined callback function that is called by CertDeleteCertificateFromStore before deleting a certificate from the store.", "PFN_CERT_STORE_PROV_DELETE_CRL": "An application-defined callback function that is called by CertDeleteCRLFromStore before deleting the CRL from the store.", "PFN_CERT_STORE_PROV_READ_CERT": "An application-defined callback function that reads the provider's copy of the certificate context.", "PFN_CERT_STORE_PROV_READ_CRL": "An application-defined callback function that reads the provider's copy of the CRL context.", "PFN_CERT_STORE_PROV_READ_CTL": "The CertStoreProvReadCTL callback function is called to read the provider's copy of the CTL context and, if it exists, to create a new CTL context.", "PFN_CERT_STORE_PROV_SET_CERT_PROPERTY": "An application-defined callback function that is called by CertSetCertificateContextProperty before setting the certificate's property.", "PFN_CERT_STORE_PROV_SET_CRL_PROPERTY": "An application-defined callback function that is called by CertSetCRLContextProperty before setting the CRL's property.", "PFN_CERT_STORE_PROV_SET_CTL_PROPERTY": "The CertStoreProvSetCTLProperty callback function determines whether a property can be set on a CTL.", "PFN_CERT_STORE_PROV_WRITE_CERT": "An application-defined callback function that is called by CertAddEncodedCertificateToStore, CertAddCertificateContextToStore and CertAddSerializedElementToStore before adding to the store.", "PFN_CERT_STORE_PROV_WRITE_CRL": "An application-defined callback function that is called by CertAddEncodedCRLToStore, CertAddCRLContextToStore and CertAddSerializedElementToStore before adding to the store.", "PFN_CERT_STORE_PROV_WRITE_CTL": "The CertStoreProvWriteCTL callback function can be called by CertAddEncodedCTLToStore, CertAddCTLContextToStore or CertAddSerializedElementToStore before a CTL is added to the store.", "PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY": "Imports an already decrypted content encryption key.", "PFN_CMSG_CNG_IMPORT_KEY_AGREE": "Decrypts a content encryption key that is intended for a key agreement recipient.", "PFN_CMSG_CNG_IMPORT_KEY_TRANS": "Imports and decrypts a content encryption key that is intended for a key transport recipient.", "PFN_CMSG_EXPORT_KEY_AGREE": "Encrypts and exports the content encryption key for a key agreement recipient of an enveloped message.", "PFN_CMSG_EXPORT_KEY_TRANS": "Encrypts and exports the content encryption key for a key transport recipient of an enveloped message.", "PFN_CMSG_EXPORT_MAIL_LIST": "Encrypts and exports the content encryption key for a mailing list recipient of an enveloped message.", "PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY": "Generates the symmetric key used to encrypt content for an enveloped message.", "PFN_CMSG_IMPORT_KEY_AGREE": "Imports a content encryption key for a key transport recipient of an enveloped message.", "PFN_CMSG_IMPORT_KEY_TRANS": "Imports a content encryption key for a key transport recipient of an enveloped message.", "PFN_CMSG_IMPORT_MAIL_LIST": "Imports a content encryption key for a key transport recipient of an enveloped message.", "PFN_CRYPT_ENUM_KEYID_PROP": "The CRYPT_ENUM_KEYID_PROP callback function is used with the CryptEnumKeyIdentifierProperties function.", "PFN_CRYPT_ENUM_OID_FUNC": "The CRYPT_ENUM_OID_FUNCTION callback function is used with the CryptEnumOIDFunction function.", "PFN_CRYPT_ENUM_OID_INFO": "The CRYPT_ENUM_OID_INFO callback function is used with the CryptEnumOIDInfo function.", "PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC": "Called by CryptExportPublicKeyInfoEx to export a public key BLOB and encode it.", "PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC": "Called to decode and return the hash algorithm identifier and optionally the signature parameters.", "PFN_CRYPT_GET_SIGNER_CERTIFICATE": "The CryptGetSignerCertificateCallback user supplied callback function is used with the CRYPT_VERIFY_MESSAGE_PARA structure to get and verify a message signer's certificate.", "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH": "Specifies that an object has changed.", "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE": "Releases the object returned by the provider.", "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER": "Releases memory for an object identifier.", "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD": "Releases the password used to encrypt a personal information exchange byte array.", "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET": "Retrieves an object.", "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE": "Initializes the provider.", "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE": "Releases the provider.", "PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC": "Called to sign and encode a computed hash.", "PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC": "Called to decrypt an encoded signature and compare it to a computed hash.", "PFN_CRYPT_XML_CREATE_TRANSFORM": "Creates a transform for a specified data provider.", "PFN_CRYPT_XML_DATA_PROVIDER_CLOSE": "Releases the data provider.", "PFN_CRYPT_XML_DATA_PROVIDER_READ": "Reads XML data.", "PFN_CRYPT_XML_ENUM_ALG_INFO": "Enumerates predefined and registered CRYPT_XML_ALGORITHM_INFO entries.", "PFN_CRYPT_XML_WRITE_CALLBACK": "Writes XML data.", "PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC": "Called by CryptImportPublicKeyInfoEx2 to decode the public key algorithm identifier, load the algorithm provider, and import the key pair.", "PFNCFILTERPROC": "An application-defined callback function that filters the certificates that appear in the digital signature wizard that are displayed by the CryptUIWizDigitalSign function.", "PFNCMFILTERPROC": "Filters each certificate to determine whether it will appear in the certificate selection dialog box that is displayed by the CertSelectCertificate function.", "PFNCMHOOKPROC": "Called before messages are processed by the certificate selection dialog box produced by the CertSelectCertificate function.", "PFNCryptStreamOutputCallback": "Receives encrypted or decrypted data from tasks started by using the NCryptStreamOpenToProtect or NCryptStreamOpenToUnprotect functions.", "pfnIsFileSupported": "Queries the subject interface packages listed in the registry to determine which SIP handles the file type.", "pfnIsFileSupportedName": "Queries the subject interface packages listed in the registry to determine which SIP handles the file type.", "PFSCE_FREE_INFO": "Frees the memory for buffers allocated by the Security Configuration tool set when it calls PFSCE_QUERY_INFO.", "PFSCE_LOG_INFO": "Logs messages to the configuration log file or analysis log file.", "PFSCE_QUERY_INFO": "Queries service-specific information from the Security Configuration file or analysis database.", "PFSCE_SET_INFO": "Sets or overwrites service-specific configuration and analysis information.", "PFXExportCertStore": "Exports the certificates and, if available, the associated private keys from the referenced certificate store.", "PFXExportCertStoreEx": "Exports the certificates and, if available, their associated private keys from the referenced certificate store.", "PFXImportCertStore": "Imports a PFX BLOB and returns the handle of a store that contains certificates and any associated private keys.", "PFXIsPFXBlob": "The PFXIsPFXBlob function attempts to decode the outer layer of a BLOB as a PFX packet.", "PFXVerifyPassword": "The PFXVerifyPassword function attempts to decode the outer layer of a BLOB as a Personal Information Exchange packet and to decrypt it with the given password.", "Ping": "Tests a DCOM connection with an Online Certificate Status Protocol responder service.", "PostUnInstall": "Is not implemented.", "PreUnInstall": "Removes registry and IIS settings for the Network Device Enrollment Service role.", "PrivilegeCheck": "Determines whether a specified set of privileges are enabled in an access token.", "PrivilegedServiceAuditAlarmA": "Generates an audit message in the security event log.", "PrivilegedServiceAuditAlarmW": "Generates an audit message in the security event log.", "ProcessResponseMessage": "Process a response message and return the disposition of the message.", "PropertySheetPageCallback": "The PropertySheetPageCallback method notifies an EditSecurity or CreateSecurityPage caller that an access control editor property page is being created or destroyed.", "PSAM_INIT_NOTIFICATION_ROUTINE": "The InitializeChangeNotify function is implemented by a password filter DLL.", "PSAM_PASSWORD_FILTER_ROUTINE": "Implemented by a password filter DLL.", "PSAM_PASSWORD_NOTIFICATION_ROUTINE": "Is implemented by a password filter DLL.", "PstAcquirePrivateKey": "Associates the caller's private key with the specified certificate.", "PstGetCertificates": "Retrieves certificate chains that specify certificates that can be used to authenticate a user on the specified server.", "PstGetTrustAnchors": "Retrieves a list of certification authorities trusted by the specified server.", "PstGetUserNameForCertificate": "Retrieves the user name associated with the specified certificate.", "PstMapCertificate": "Retrieves a structure that specifies information that can be used to create a user token associated with the specified certificate.", "PstValidate": "Validates the specified certificate.", "PublishCRL": "Sends a request to the Certificate Services certification authority.", "PublishCRLs": "Publishes certificate revocation lists.", "put_Algorithm": "Specifies or retrieves an object identifier for the public key algorithm.", "put_AlternateSignatureAlgorithm": "Specifies and retrieves a Boolean value that specifies whether the GetSignatureAlgorithm method should retrieve a discrete or combined algorithm object identifier for a PKCS", "put_ApplicationData": "The ApplicationData property of IAzTask sets or retrieves an opaque field that can be used by the application to store information.", "put_ApplyStoreSacl": "Sets or retrieves a value that indicates whether policy audits should be generated when the authorization store is modified.", "put_ArchivePrivateKey": "Specifies or retrieves a Boolean value that indicates whether to archive a private key on the certification authority.", "put_AttestationEncryptionCertificate": "The certificate used to encrypt the EKPUB and EKCERT values from the client.", "put_AttestPrivateKey": "True if the created private key needs to be attested ; otherwise false.", "put_AuthFlags": "Specifies and retrieves a value that indicates the authentication type used by the client to authenticate itself to the certificate enrollment policy server.", "put_AuthzInterfaceClsid": "Sets or retrieves the class identifier uses to perform application-specific operations.", "put_BizRule": "Sets or retrieves the text of the script that implements the business rule.", "put_BizRuleImportedPath": "Sets or retrieves the path to the file from which the business rule is imported.", "put_BizRuleLanguage": "Sets or retrieves the scripting language in which the business rule is implemented.", "put_BizRulesEnabled": "Gets or sets a value that indicates whether business rules are enabled for this application.", "put_BusinessRuleResult": "Sets a value that indicates whether the Business Rule allows the user to perform the requested task.", "put_BusinessRuleString": "Sets or retrieves an application-specific string for the Business Rule.", "put_CAConfig": "Gets or sets a certification authority name with which a signing certificate must be signed.", "put_CAStoreFlags": "The CAStoreFlags property of IEnroll4 sets or retrieves a flag that controls the certification authority store when the store is opened.", "put_CAStoreName": "Sets or retrieves the name of the store where all non-ROOT and non-MY certificates are kept.", "put_CAStoreNameWStr": "The CAStoreNameWStr property of IEnroll4 sets or retrieves the name of the store where all non-ROOT and non-MY certificates are kept.", "put_CAStoreType": "Sets or retrieves the type of store to use for the store specified by the CAStoreName property.", "put_CAStoreTypeWStr": "Sets or retrieves the type of store to use for the store specified by the CAStoreNameWStr property.", "put_Certificate": "Specifies or retrieves a byte array that contains the certificate associated with the private key.", "put_CertificateDescription": "Specifies or retrieves a string that contains a description of the certificate.", "put_CertificateFriendlyName": "Gets or sets the friendly name for the certificate.", "put_ChallengePassword": "The password to use when creating a request with a challenge.", "put_ClientId": "The ClientId property sets or retrieves a client ID request attribute.", "put_ContainerName": "The ContainerName property of ICEnroll4 sets or retrieves the name of the key container to use.", "put_ContainerNamePrefix": "Specifies or retrieves a prefix added to the name of the key container.", "put_ContainerNameWStr": "Sets or retrieves the name of the key container to use.", "put_Cost": "Specifies and retrieves an arbitrary cost for contacting the certificate enrollment policy server.", "put_Critical": "Specifies and retrieves a Boolean value that identifies whether the certificate extension is critical.", "put_CspInformations": "Specifies or retrieves a collection of ICspInformation objects that contain information about the available cryptographic providers that support the public key algorithm associated with the private key.", "put_CspStatus": "Specifies or retrieves an ICspStatus object that contains information about the cryptographic provider and algorithm pair associated with the private key.", "put_Default": "Specifies and retrieves a Boolean value that indicates whether this is the default certificate enrollment policy server.", "put_DeleteRequestCert": "The DeleteRequestCert property of IEnroll4 sets or retrieves a Boolean value that determines whether dummy certificates in the request store are deleted.", "put_Description": "Specifies or retrieves a string that contains a description of the private key.", "put_Display": "Specifies or retrieves a value that indicates whether to display the status information in a user interface.", "put_DomainTimeout": "Sets or retrieves the time in milliseconds after which a domain is determined to be unreachable.", "put_EnableSMIMECapabilities": "Controls whether the PKCS", "put_EnableT61DNEncoding": "Sets or retrieves a Boolean value that determines whether the distinguished name in the request is encoded as a T61 string instead of as a Unicode string.", "put_EncryptionAlgorithm": "The encryption algorithm used to encrypt the EKPUB and EKCERT values from the client.", "put_EncryptionStrength": "Identifies the bit length for the EncryptionAlgorithm to use for encryption.", "put_Error": "Specifies and retrieves a value that identifies the error status of the certificate enrollment process.", "put_Existing": "Gets or sets a value that indicates whether the private key already exists.", "put_ExistingCACertificate": "Gets or sets the binary value that has been encoded by using Distinguished Encoding Rules certificate that corresponds to an existing key.", "put_ExportPolicy": "Specifies or retrieves export constraints for a private key.", "put_Flags": "Specifies or retrieves a value that indicates whether the certificate enrollment policy server policy information can be loaded from group policy, from the registry, or both.", "put_FriendlyName": "Specifies or retrieves a display name for the private key.", "put_GenerateAudits": "Sets or retrieves a value that indicates whether run-time audits should be generated.", "put_GenKeyFlags": "Sets or retrieves the values passed to CryptGenKey when the certificate request is generated.", "put_HashAlgID": "The HashAlgID property of IEnroll4 sets or retrieves the hash algorithm used when signing a PKCS", "put_HashAlgorithm": "Gets or sets an identifier for the hash algorithm used to sign a certificate.", "put_HashAlgorithmWStr": "Sets or retrieves only the signature hashing algorithm used to sign the PKCS", "put_IncludeSubjectKeyID": "The IncludeSubjectKeyID property of IEnroll4 determines whether the subject key ID extension is added to the certificate request that is generated.", "put_IsRoleDefinition": "Sets or retrieves a value that indicates whether the task is a role definition.", "put_Issuer": "Specifies or retrieves the name of the certificate issuer.", "put_KeyArchivalCertificate": "Specifies or retrieves a certification authority encryption certificate.", "put_KeyContainerNamePrefix": "Specifies or retrieves a prefix used to create the container name for a new private key.", "put_KeyProtection": "Specifies or retrieves a value that indicates how a private key is protected before use.", "put_KeySpec": "Sets or retrieves the type of key generated.", "put_KeyUsage": "Specifies or retrieves a value that identifies the specific purpose for which a private key can be used.", "put_LdapQuery": "Sets or retrieves the Lightweight Directory Access Protocol query used to define membership for an LDAP query application group.", "put_LDAPQueryDN": "Retrieves or sets the domain name of the directory object to be used during evaluation of LDAP query groups.", "put_LegacyCsp": "Specifies or retrieves a Boolean value that indicates whether the provider is a CryptoAPI.", "put_Length": "Gets or sets the strength of the key to one of the values supported by the cryptographic service provider.", "put_LimitExchangeKeyToEncipherment": "The LimitExchangeKeyToEncipherment property of IEnroll4 sets or retrieves a Boolean value that determines whether an AT_KEYEXCHANGE request contains digital signature and nonrepudiation key usages.", "put_LocalRevocationInformation": "Gets or sets the certificate revocation list of the local machine.", "put_MachineContext": "Specifies or retrieves a Boolean value that identifies the local certificate store context.", "put_MaxScriptEngines": "Sets or retrieves the maximum number of Business Rule script engines that will be cached.", "put_MyStoreFlags": "Sets or retrieves the registry location used for the MY store.", "put_MyStoreName": "Sets or retrieves the name of the store where certificates with linked private keys are kept.", "put_MyStoreNameWStr": "The MyStoreNameWStr property of IEnroll4 sets or retrieves the name of the store where certificates with linked private keys are kept.", "put_MyStoreType": "Sets or retrieves the type of store specified by the MyStoreName property.", "put_MyStoreTypeWStr": "Sets or retrieves the type of store specified by the MyStoreTypeWStr property.", "put_Name": "Sets or retrieves the name of the task.", "put_NotAfter": "Specifies or retrieves the date and time after which the certificate is no longer valid.", "put_NotBefore": "Specifies or retrieves the date and time before which the certificate is not valid.", "put_NullSigned": "Specifies and retrieves a Boolean value that indicates whether the certificate request is null-signed.", "put_OldCertificate": "Gets or sets an old certificate that a request is intended to replace.", "put_OperationID": "Sets or retrieves an application-specific value that uniquely identifies the operation within the application.", "put_Ordinal": "Specifies or retrieves the position of the ICspStatus object in the ICspStatuses collection.", "put_Parameters": "Retrieves a byte array that contains the parameters associated with the signature algorithm.", "put_ParentWindow": "Specifies or retrieves the ID of the window used to display key information.", "put_Pin": "Specifies a personal identification number that is used to authenticate users prior to accessing a private key container on a smart card.", "put_PrivateKeyArchiveCertificate": "Sets or retrieves the certificate that is used to archive a private key with a PKCS", "put_Property": "Specifies or retrieves a property value for the IX509CertificateTemplateWritable object.", "put_PropertyId": "Specifies or retrieves a value of the CERTENROLL_PROPERTYID enumeration that identifies an external certificate property.", "put_ProviderCLSID": "Gets or sets the CLSID of the revocation information provider used by the CA configuration.", "put_ProviderFlags": "The ProviderFlags property of IEnroll4 sets or retrieves the provider type.", "put_ProviderName": "The ProviderName property of ICEnroll4 sets or retrieves the name of the cryptographic service provider to use.", "put_ProviderNameWStr": "Sets or retrieves the name of the cryptographic service provider to use.", "put_ProviderProperties": "Gets or sets information that provides certificate status responses.", "put_ProviderType": "Sets or retrieves the type of provider.", "put_PublicKeyAlgorithm": "Specifies and retrieves an object identifier for the public key algorithm used in the GetSignatureAlgorithm method.", "put_PVKFileName": "The PVKFileName property of ICEnroll4 sets or retrieves the name of the file that will contain exported keys.", "put_PVKFileNameWStr": "Sets or retrieves the name of the file that will contain exported keys.", "put_ReaderName": "Specifies or retrieves the name of a smart card reader.", "put_ReminderDuration": "Gets or sets the percentage of a signing certificate lifetime after which a warning event is logged.", "put_RenewalCertificate": "Specifies the certificate context for the renewal certificate.", "put_RequesterName": "Specifies or retrieves a string that contains the Security Account Manager name of the end-entity requesting the certificate.", "put_RequestStoreFlags": "The RequestStoreFlags property of IEnroll4 sets or retrieves the registry location used for the request store.", "put_RequestStoreName": "Sets or retrievesICEnroll the name of the store that contains the dummy certificate.", "put_RequestStoreNameWStr": "The RequestStoreNameWStr property of IEnroll4 sets or retrieves the name of the store that contains the dummy certificate.", "put_RequestStoreType": "Sets or retrieves the type of store to use for the store specified by the RequestStoreName property.", "put_RequestStoreTypeWStr": "Sets or retrieves the type of store to use for the store specified by the RequestStoreNameWStr property.", "put_ReuseHardwareKeyIfUnableToGenNew": "The ReuseHardwareKeyIfUnableToGenNew property of IEnroll4 sets or retrieves a Boolean value that determines the action taken by the certificate enrollment control object if an error is encountered when generating a new key.", "put_RoleForAccessCheck": "Sets or retrieves the role that is used to perform the access check.", "put_RootStoreFlags": "Sets or retrieves the registry location used for the root store.", "put_RootStoreName": "Sets or retrieves the name of the root store where all intrinsically trusted, self-signed root certificates are kept.", "put_RootStoreNameWStr": "The RootStoreNameWStr property of IEnroll4 sets or retrieves the name of the root store where all intrinsically trusted, self-signed root certificates are kept.", "put_RootStoreType": "Sets or retrieves the type of store to use for the store specified by the RootStoreName property.", "put_RootStoreTypeWStr": "Sets or retrieves the type of store to use for the store specified by the RootStoreNameWStr property.", "put_ScriptEngineTimeout": "Sets or retrieves the time in milliseconds that the IAzClientContext::AccessCheck method will wait for a Business Rule to complete execution before canceling it.", "put_SecurityDescriptor": "Specifies or retrieves the security descriptor for the private key.", "put_Selected": "Specifies or retrieves a value that indicates whether an item can be used during the enrollment process.", "put_SenderNonce": "Specifies or retrieves a byte array that contains a nonce.", "put_SerialNumber": "Specifies and retrieves the certificate serial number.", "put_ServerCapabilities": "Sets the preferred hash and encryption algorithms for the request.", "put_SignerCertificate": "Sets the signer's certificate.", "put_SigningCertificate": "Gets or sets a signing certificate that has been encoded by using Distinguished Encoding Rules responder service uses this certificate to sign its responses to certificate status requests.", "put_SigningCertificateTemplate": "Gets or sets the template name for a signing certificate.", "put_SigningFlags": "Gets or sets a combination of flag values.", "put_Silent": "Gets or sets whether to allow UI during the request.", "put_SmimeCapabilities": "Specifies or retrieves a Boolean value that tells the Encode method whether to create an IX509ExtensionSmimeCapabilities collection that identifies the encryption capabilities supported by the computer.", "put_SPCFileName": "Sets or retrieves the name of the file to which to write the base64-encoded PKCS", "put_SPCFileNameWStr": "The SPCFileNameWStr property of IEnroll4 sets or retrieves the name of the file to which to write the base64-encoded PKCS", "put_Status": "Specifies or retrieves a value that indicates the status of the enrollment process.", "put_Subject": "Specifies or retrieves the X.500 distinguished name of the entity requesting the certificate.", "put_SuppressDefaults": "Specifies or retrieves a Boolean value that indicates whether the default extensions and attributes are included in the request.", "put_Text": "Specifies or retrieves a string that contains a message associated with the status of the enrollment process.", "put_ThumbPrint": "Sets or retrieves a hash of the certificate data.", "put_ThumbPrintWStr": "Sets or retrieves a hash of the certificate data.", "put_TransactionId": "Gets or sets the transaction id for the request.", "put_Type": "Sets or retrieves the group type of the application group.", "put_UIContextMessage": "Specifies or retrieves a string that contains user interface text associated with the private key.", "put_Url": "Specifies or retrieves the URL for the certificate enrollment policy server.", "put_UseExistingKeySet": "The UseExistingKeySet property of IEnroll4 sets or retrieves a Boolean value that determines whether the existing keys should be used.", "put_Value": "Gets or sets the data part of the name-value pair represented by an OCSPProperty object.", "put_Version": "Sets or retrieves the version of the application.", "put_WriteCertToCSP": "Sets or retrieves a Boolean value that determines whether a certificate should be written to the cryptographic service provider.", "put_WriteCertToUserDS": "The WriteCertToUserDS property of IEnroll4 sets or retrieves a Boolean value that determines whether the certificate is written to the user's Active Directory store.", "PWLX_ASSIGN_SHELL_PROTECTION": "Called by GINA to assign protection to the shell program of a newly logged-on user.", "PWLX_CHANGE_PASSWORD_NOTIFY": "Called by GINA to indicate it has changed a password.", "PWLX_CHANGE_PASSWORD_NOTIFY_EX": "Called by GINA to tell a specific network provider that a password has changed.", "PWLX_CLOSE_USER_DESKTOP": "Called by GINA to close an alternate user desktop and clean up after the desktop is closed.", "PWLX_CREATE_USER_DESKTOP": "Called by GINA to create alternate application desktops for the user.", "PWLX_DIALOG_BOX": "Called by the GINA to create a modal dialog box from a dialog box template.", "PWLX_DIALOG_BOX_INDIRECT": "Called by GINA to create a modal dialog box from a dialog box template in memory.", "PWLX_DIALOG_BOX_INDIRECT_PARAM": "Called by GINA to initialize dialog box controls and then create a modal dialog box from a dialog box template in memory.", "PWLX_DIALOG_BOX_PARAM": "Called by GINA to initialize dialog box controls and then create a modal dialog box from a dialog box template resource.", "PWLX_DISCONNECT": "Called by a replacement GINA DLL if Terminal Services is enabled.", "PWLX_GET_OPTION": "Called by GINA to retrieve the current value of an option.", "PWLX_GET_SOURCE_DESKTOP": "Called by GINA to determine the name and handle of the desktop that was current before Winlogon switched to the Winlogon desktop.", "PWLX_MESSAGE_BOX": "Called by GINA to create, display, and operate a message box.", "PWLX_QUERY_CLIENT_CREDENTIALS": "Called by a replacement GINA DLL if Terminal Services is enabled.", "PWLX_QUERY_CONSOLESWITCH_CREDENTIALS": "Called by GINA to read the credentials transferred from the Winlogon of the temporary session to the Winlogon of the destination session.", "PWLX_QUERY_IC_CREDENTIALS": "Called by a replacement GINA DLL if Terminal Services is enabled.", "PWLX_QUERY_TERMINAL_SERVICES_DATA": "Called by GINA to retrieve Terminal Services user configuration information after a user has logged on.", "PWLX_QUERY_TS_LOGON_CREDENTIALS": "Called by a replacement GINA DLL to retrieve credentials information if Terminal Services is enabled.", "PWLX_SAS_NOTIFY": "Called by GINA to notify Winlogon of a secure attention sequence event.", "PWLX_SET_CONTEXT_POINTER": "Called by GINA to specify the context pointer passed by Winlogon as the first parameter to all future calls to GINA functions.", "PWLX_SET_OPTION": "Called by GINA to set the value of an option.", "PWLX_SET_RETURN_DESKTOP": "Called by GINA to specify the alternate application desktop that Winlogon will switch to when the current secure attention sequence event processing function is complete.", "PWLX_SET_TIMEOUT": "Called by GINA to change the time-out associated with a dialog box.", "PWLX_SWITCH_DESKTOP_TO_USER": "Called by GINA to switch to the application desktop.", "PWLX_SWITCH_DESKTOP_TO_WINLOGON": "Allows the GINA DLL switch to the Winlogon desktop.", "PWLX_USE_CTRL_ALT_DEL": "Called by GINA to tell Winlogon to use the standard CTRL+ALT+DEL key combination as a secure attention sequence.", "PWLX_WIN31_MIGRATE": "Called by a replacement GINA DLL if Terminal Services is enabled.", "Pager_ForwardMouse": "Enables or disables mouse forwarding for the pager control.", "Pager_GetBkColor": "Retrieves the current background color for the pager control.", "Pager_GetBorder": "Retrieves the current border size for the pager control.", "Pager_GetButtonSize": "Retrieves the current button size for the pager control.", "Pager_GetButtonState": "Retrieves the state of the specified button in a pager control.", "Pager_GetDropTarget": "Retrieves a pager control's IDropTarget interface pointer.", "Pager_GetPos": "Retrieves the current scroll position of the pager control.", "Pager_RecalcSize": "Using this macro will result in a PGN_CALCSIZE notification being sent.", "Pager_SetBkColor": "Sets the current background color for the pager control.", "Pager_SetBorder": "Sets the current border size for the pager control.", "Pager_SetButtonSize": "Sets the current button size for the pager control.", "Pager_SetChild": "Sets the contained window for the pager control.", "Pager_SetPos": "Sets the scroll position for the pager control.", "Pager_SetScrollInfo": "Sets the scrolling parameters of the pager control, including the timeout value, the lines per timeout, and the pixels per line.", "PackTouchHitTestingProximityEvaluation": "Returns the proximity evaluation score and the adjusted touch-point coordinates as a packed value for the WM_TOUCHHITTESTING callback.", "Paste": "Pastes text from a specified data object.", "PFNDACOMPARE": "Defines the prototype for the compare function used by DSA_Sort.", "PFNDACOMPARECONST": "Defines the prototype for the compare function used by DSA_Sort when the items being compared are constant objects.", "PFNDAENUMCALLBACK": "Defines the prototype for the callback function used by dynamic structure array functions.", "PFNDAENUMCALLBACKCONST": "Defines the prototype for the callback function used by dynamic structure array functions when the items involved are pointers to constant data.", "PFNDPAMERGE": "Defines the prototype for the merge function used by DPA_Merge.", "PFNDPAMERGECONST": "Defines the prototype for the merge function used by DPA_Merge, using constant values.", "PFNDPASTREAM": "Defines the prototype for the callback function used by DPA_LoadStream and DPA_SaveStream.", "PFNLVGROUPCOMPARE": "The LVGroupCompare function is an application-defined callback function used with the LVM_INSERTGROUPSORTED and LVM_SORTGROUPS messages.", "PFNPROPSHEETCALLBACK": "An application-defined callback function that the system calls when the property sheet is being created and initialized.", "PFTASKDIALOGCALLBACK": "The TaskDialogCallbackProc function is an application-defined function used with the TaskDialogIndirect function.", "PrefixTop": "Prefixes a string to the top string in the collection.", "PreloadImages": "Preloads images, as specified.", "PropertySheetA": "Creates a property sheet and adds the pages defined in the specified property sheet header structure.", "PropertySheetW": "Creates a property sheet and adds the pages defined in the specified property sheet header structure.", "PropSheet_AddPage": "Adds a new page to the end of an existing property sheet.", "PropSheet_Apply": "Simulates the selection of the Apply button, indicating that one or more pages have changed and the changes need to be validated and recorded.", "PropSheet_CancelToClose": "Used when changes made since the most recent PSN_APPLY notification can not be canceled.", "PropSheet_Changed": "Informs a property sheet that information in a page has changed.", "PropSheet_EnableWizButtons": "Enables or disables buttons in an Aero wizard.", "PropSheet_GetCurrentPageHwnd": "Retrieves a handle to the window of the current page of a property sheet.", "PropSheet_GetResult": "Used by modeless property sheets to retrieve the information returned to modal property sheets by PropertySheet.", "PropSheet_GetTabControl": "Retrieves the handle to the tab control of a property sheet.", "PropSheet_HwndToIndex": "Takes a window handle of the property sheet page and returns its zero-based index.", "PropSheet_IdToIndex": "Takes the resource identifier of a property sheet page and returns its zero-based index.", "PropSheet_IndexToHwnd": "Takes the index of a property sheet page and returns its window handle.", "PropSheet_IndexToId": "Takes the index of a property sheet page and returns its resource identifier.", "PropSheet_IndexToPage": "Takes the index of a property sheet page and returns its HPROPSHEETPAGE handle.", "PropSheet_InsertPage": "Inserts a new page into an existing property sheet.", "PropSheet_IsDialogMessage": "Passes a message to a property sheet dialog box and indicates whether the dialog box processed the message.", "PropSheet_PageToIndex": "Takes the HPROPSHEETPAGE handle of a property sheet page and returns its zero-based index.", "PropSheet_PressButton": "Simulates the selection of a property sheet button.", "PropSheet_QuerySiblings": "Causes a property sheet to send the PSM_QUERYSIBLINGS message to each of its pages.", "PropSheet_RebootSystem": "Indicates the system needs to be restarted for the changes to take effect.", "PropSheet_RecalcPageSizes": "Recalculates the page size of a standard or wizard property sheet after pages have been added or removed.", "PropSheet_RemovePage": "Removes a page from a property sheet.", "PropSheet_RestartWindows": "Sends a PSM_RESTARTWINDOWS message indicating that Windows needs to be restarted for changes to take effect.", "PropSheet_SetButtonText": "Sets the text of a button in an Aero wizard.", "PropSheet_SetCurSel": "Activates the specified page in a property sheet.", "PropSheet_SetCurSelByID": "Activates the specified page in a property sheet based on the resource identifier of the page.", "PropSheet_SetFinishText": "Sets the text of the Finish button in a wizard, shows and enables the button, and hides the Next and Back buttons.", "PropSheet_SetHeaderSubTitle": "Sets the subtitle text for the header of a wizard's interior page.", "PropSheet_SetHeaderTitle": "Sets the title text for the header of a wizard's interior page.", "PropSheet_SetNextText": "Sets the text of the Next button in a wizard.", "PropSheet_SetTitle": "Sets the title of a property sheet.", "PropSheet_SetWizButtons": "Enables or disables the Back, Next, and Finish buttons in a wizard by posting a PSM_SETWIZBUTTONS message.", "PropSheet_ShowWizButtons": "Show or hide buttons in a wizard.", "PropSheet_UnChanged": "Informs a property sheet that information in a page has reverted to the previously saved state.", "PFN_MAPPINGCALLBACKPROC": "An application-defined callback function that asynchronously processes data produced by the MappingRecognizeText function.", "PRIMARYLANGID": "Extracts a primary language identifier from a language identifier.", "PrivateExtractIconsA": "Creates an array of handles to icons that are extracted from a specified file.", "PrivateExtractIconsW": "Creates an array of handles to icons that are extracted from a specified file.", "PageInThumbnail": ".", "PAPPSTATE_CHANGE_ROUTINE": "Specifies an app-defined callback function that notifies the app when the app is entering or leaving a suspended state.", "ParseDisplayName": "Translates the display name of a file object or a folder into an item identifier list.", "ParseURLA": "Performs rudimentary parsing of a URL.", "ParseURLW": "Performs rudimentary parsing of a URL.", "PathAddBackslashA": "Adds a backslash to the end of a string to create the correct syntax for a path.", "PathAddBackslashW": "Adds a backslash to the end of a string to create the correct syntax for a path.", "PathAddExtensionA": "Adds a file name extension to a path string.", "PathAddExtensionW": "Adds a file name extension to a path string.", "PathAllocCanonicalize": "This function differs from PathCchCanonicalize and PathCchCanonicalizeEx in that it returns the result on the heap.", "PathAllocCombine": "Concatenates two path fragments into a single path.", "PathAppendA": "Appends one path to the end of another.", "PathAppendW": "Appends one path to the end of another.", "PathBuildRootA": "Creates a root path from a given drive number.", "PathBuildRootW": "Creates a root path from a given drive number.", "PathCanonicalizeA": "and .. to produce a direct, well-formed path.", "PathCanonicalizeW": "and .. to produce a direct, well-formed path.", "PathCchAddBackslash": "Adds a backslash to the end of a string to create the correct syntax for a path.", "PathCchAddBackslashEx": "Adds a backslash to the end of a string to create the correct syntax for a path.", "PathCchAddExtension": "This function differs from PathAddExtension in that it accepts paths with \\ , \\?&quot ; and \\?\\UNC&quot ; prefixes.", "PathCchAppend": "This function differs from PathCchAppendEx in that you are restricted to a final path of length MAX_PATH.This function differs from PathAppend in that it accepts paths with \\ , \\?&quot ; and \\?\\UNC&quot ; prefixes.", "PathCchAppendEx": "This function differs from PathAppend in that it accepts paths with \\ , \\?&quot ; and \\?\\UNC&quot ; prefixes.", "PathCchCanonicalize": "This function differs from PathCanonicalize in that it accepts paths with \\ , \\?&quot ; and \\?\\UNC&quot ; prefixes.", "PathCchCanonicalizeEx": "This function differs from PathCchCanonicalize in that it allows for a longer final path to be constructed.", "PathCchCombine": "Combines two path fragments into a single path.", "PathCchCombineEx": "Combines two path fragments into a single path.", "PathCchFindExtension": "Searches a path to find its file name extension, such as .exe or .ini .", "PathCchIsRoot": "Determines whether a path string refers to the root of a volume.", "PathCchRemoveBackslash": "This function differs from PathRemoveBackslash in that it accepts paths with \\ , \\?&quot ; and \\?\\UNC&quot ; prefixes.", "PathCchRemoveBackslashEx": "This function differs from PathRemoveBackslash in that it accepts paths with \\ , \\?&quot ; and \\?\\UNC&quot ; prefixes.", "PathCchRemoveExtension": "This function differs from PathRemoveExtension in that it accepts paths with \\ , \\?&quot ; and \\?\\UNC&quot ; prefixes.", "PathCchRemoveFileSpec": "Removes the last element in a path string, whether that element is a file name or a directory name.", "PathCchRenameExtension": "Replaces a file name's extension at the end of a path string with a new extension.", "PathCchSkipRoot": "This function differs from PathSkipRoot in that it accepts paths with \\ , \\?&quot ; and \\?\\UNC&quot ; prefixes.", "PathCchStripPrefix": "Removes the \\?&quot; prefix, if present, from a file path.", "PathCchStripToRoot": "This function differs from PathStripToRoot in that it accepts paths with \\ , \\?&quot ; and \\?\\UNC&quot ; prefixes.", "PathCleanupSpec": "PathCleanupSpec may be altered or unavailable.", "PathCombineA": "Concatenates two strings that represent properly formed paths into one path; also concatenates any relative path elements.", "PathCombineW": "Concatenates two strings that represent properly formed paths into one path; also concatenates any relative path elements.", "PathCommonPrefixA": "A prefix is one of these types:_C:\\ , . ", "PathCommonPrefixW": "A prefix is one of these types:_C:\\ , . ", "PathCompactPathA": "Truncates a file path to fit within a given pixel width by replacing path components with ellipses.", "PathCompactPathExA": "Truncates a path to fit within a certain number of characters by replacing path components with ellipses.", "PathCompactPathExW": "Truncates a path to fit within a certain number of characters by replacing path components with ellipses.", "PathCompactPathW": "Truncates a file path to fit within a given pixel width by replacing path components with ellipses.", "PathCreateFromUrlA": "Converts a file URL to a Microsoft MS-DOS path.", "PathCreateFromUrlAlloc": "Creates a path from a file URL.", "PathCreateFromUrlW": "Converts a file URL to a Microsoft MS-DOS path.", "PathFileExistsA": "Determines whether a path to a file system object such as a file or folder is valid.", "PathFileExistsW": "Determines whether a path to a file system object such as a file or folder is valid.", "PathFindExtensionA": "Searches a path for an extension.", "PathFindExtensionW": "Searches a path for an extension.", "PathFindFileNameA": "Searches a path for a file name.", "PathFindFileNameW": "Searches a path for a file name.", "PathFindNextComponentA": "Parses a path and returns the portion of that path that follows the first backslash.", "PathFindNextComponentW": "Parses a path and returns the portion of that path that follows the first backslash.", "PathFindOnPathA": "Searches for a file.", "PathFindOnPathW": "Searches for a file.", "PathFindSuffixArrayA": "Determines whether a given file name has one of a list of suffixes.", "PathFindSuffixArrayW": "Determines whether a given file name has one of a list of suffixes.", "PathGetArgsA": "Finds the command line arguments within a given path.", "PathGetArgsW": "Finds the command line arguments within a given path.", "PathGetCharTypeA": "Determines the type of character in relation to a path.", "PathGetCharTypeW": "Determines the type of character in relation to a path.", "PathGetDriveNumberA": "Searches a path for a drive letter within the range of'A' to'Z' and returns the corresponding drive number.", "PathGetDriveNumberW": "Searches a path for a drive letter within the range of'A' to'Z' and returns the corresponding drive number.", "PathGetShortPath": "PathGetShortPath may be altered or unavailable.", "PathIsContentTypeA": "Determines if a file's registered content type matches the specified content type.", "PathIsContentTypeW": "Determines if a file's registered content type matches the specified content type.", "PathIsDirectoryA": "Verifies that a path is a valid directory.", "PathIsDirectoryEmptyA": "Determines whether a specified path is an empty directory.", "PathIsDirectoryEmptyW": "Determines whether a specified path is an empty directory.", "PathIsDirectoryW": "Verifies that a path is a valid directory.", "PathIsExe": "PathIsExe may be altered or unavailable.", "PathIsFileSpecA": "Searches a path for any path-delimiting characters.", "PathIsFileSpecW": "Searches a path for any path-delimiting characters.", "PathIsHTMLFileA": "Determines if a file is an HTML file.", "PathIsHTMLFileW": "Determines if a file is an HTML file.", "PathIsLFNFileSpecA": "Determines whether a file name is in long format.", "PathIsLFNFileSpecW": "Determines whether a file name is in long format.", "PathIsNetworkPathA": "Determines whether a path string represents a network resource.", "PathIsNetworkPathW": "Determines whether a path string represents a network resource.", "PathIsPrefixA": "Examines a path to determine if it starts with a prefix value passed by pszPrefix.", "PathIsPrefixW": "Examines a path to determine if it starts with a prefix value passed by pszPrefix.", "PathIsRelativeA": "Searches a path and determines if it is relative.", "PathIsRelativeW": "Searches a path and determines if it is relative.", "PathIsRootA": "Determines whether a path string refers to the root of a volume.", "PathIsRootW": "Determines whether a path string refers to the root of a volume.", "PathIsSameRootA": "Compares two paths to determine if they have a common root component.", "PathIsSameRootW": "Compares two paths to determine if they have a common root component.", "PathIsSlowA": "PathIsSlow may be altered or unavailable.", "PathIsSlowW": "PathIsSlow may be altered or unavailable.", "PathIsSystemFolderA": "Determines if an existing folder contains the attributes that make it a system folder.", "PathIsSystemFolderW": "Determines if an existing folder contains the attributes that make it a system folder.", "PathIsUNCA": "Determines if a path string is a valid Universal Naming Convention path, as opposed to a path based on a drive letter.", "PathIsUNCEx": "Determines if a path string is a valid Universal Naming Convention path, as opposed to a path based on a drive letter.", "PathIsUNCServerA": "Determines if a string is a valid Universal Naming Convention for a server path only.", "PathIsUNCServerShareA": "Determines if a string is a valid Universal Naming Convention share path, \\server\\share.", "PathIsUNCServerShareW": "Determines if a string is a valid Universal Naming Convention share path, \\server\\share.", "PathIsUNCServerW": "Determines if a string is a valid Universal Naming Convention for a server path only.", "PathIsUNCW": "Determines if a path string is a valid Universal Naming Convention path, as opposed to a path based on a drive letter.", "PathIsURLA": "Tests a given string to determine if it conforms to a valid URL format.", "PathIsURLW": "Tests a given string to determine if it conforms to a valid URL format.", "PathMakePrettyA": "Converts an all-uppercase path to all lowercase characters to give the path a consistent appearance.", "PathMakePrettyW": "Converts an all-uppercase path to all lowercase characters to give the path a consistent appearance.", "PathMakeSystemFolderA": "Gives an existing folder the proper attributes to become a system folder.", "PathMakeSystemFolderW": "Gives an existing folder the proper attributes to become a system folder.", "PathMakeUniqueName": "Creates a unique path name from a template.", "PathMatchSpecA": "Searches a string using a Microsoft MS-DOS wildcard match type.", "PathMatchSpecExA": "Matches a file name from a path against one or more file name patterns.", "PathMatchSpecExW": "Matches a file name from a path against one or more file name patterns.", "PathMatchSpecW": "Searches a string using a Microsoft MS-DOS wildcard match type.", "PathParseIconLocationA": "Parses a file location string that contains a file location and icon index, and returns separate values.", "PathParseIconLocationW": "Parses a file location string that contains a file location and icon index, and returns separate values.", "PathProcessCommand": "Deprecated.", "PathQuoteSpacesA": "Searches a path for spaces.", "PathQuoteSpacesW": "Searches a path for spaces.", "PathRelativePathToA": "Creates a relative path from one file or folder to another.", "PathRelativePathToW": "Creates a relative path from one file or folder to another.", "PathRemoveArgsA": "Removes any arguments from a given path.", "PathRemoveArgsW": "Removes any arguments from a given path.", "PathRemoveBackslashA": "Removes the trailing backslash from a given path.", "PathRemoveBackslashW": "Removes the trailing backslash from a given path.", "PathRemoveBlanksA": "Removes all leading and trailing spaces from a string.", "PathRemoveBlanksW": "Removes all leading and trailing spaces from a string.", "PathRemoveExtensionA": "Removes the file name extension from a path, if one is present.", "PathRemoveExtensionW": "Removes the file name extension from a path, if one is present.", "PathRemoveFileSpecA": "Removes the trailing file name and backslash from a path, if they are present.", "PathRemoveFileSpecW": "Removes the trailing file name and backslash from a path, if they are present.", "PathRenameExtensionA": "Replaces the extension of a file name with a new extension.", "PathRenameExtensionW": "Replaces the extension of a file name with a new extension.", "PathResolve": "PathResolve may be altered or unavailable.", "PathSearchAndQualifyA": "Determines if a given path is correctly formatted and fully qualified.", "PathSearchAndQualifyW": "Determines if a given path is correctly formatted and fully qualified.", "PathSetDlgItemPathA": "Sets the text of a child control in a window or dialog box, using PathCompactPath to ensure the path fits in the control.", "PathSetDlgItemPathW": "Sets the text of a child control in a window or dialog box, using PathCompactPath to ensure the path fits in the control.", "PathSkipRootA": "Retrieves a pointer to the first character in a path following the drive letter or Universal Naming Convention server/share path elements.", "PathSkipRootW": "Retrieves a pointer to the first character in a path following the drive letter or Universal Naming Convention server/share path elements.", "PathStripPathA": "Removes the path portion of a fully qualified path and file.", "PathStripPathW": "Removes the path portion of a fully qualified path and file.", "PathStripToRootA": "Removes all file and directory elements in a path except for the root information.", "PathStripToRootW": "Removes all file and directory elements in a path except for the root information.", "PathUndecorateA": "Removes the decoration from a path string.", "PathUndecorateW": "Removes the decoration from a path string.", "PathUnExpandEnvStringsA": "Replaces certain folder names in a fully qualified path with their associated environment string.", "PathUnExpandEnvStringsW": "Replaces certain folder names in a fully qualified path with their associated environment string.", "PathUnmakeSystemFolderA": "Removes the attributes from a folder that make it a system folder.", "PathUnmakeSystemFolderW": "Removes the attributes from a folder that make it a system folder.", "PathUnquoteSpacesA": "Removes quotes from the beginning and end of a path.", "PathUnquoteSpacesW": "Removes quotes from the beginning and end of a path.", "PathYetAnotherMakeUniqueName": "Creates a unique filename based on an existing filename.", "PauseTimer": "Pauses progress dialog timer.", "PerformOperations": "Executes all selected operations.", "PerUserInit": "Creates My Documents and other special folders, initializes them as needed, and creates the Send To shortcut menu item for My Documents.", "PickIconDlg": "PickIconDlg may be altered or unavailable.", "PlaySound": "Plays a sound in conjunction with the notification.", "Popup": "Displays a modal pop-up menu at a specific location.", "PopupItemMenu": "Creates a shortcut menu for the specified item and returns the selected command string.", "PostCopyItem": "Performs caller-implemented actions after the copy process for each item is complete.", "PostDeleteItem": "Performs caller-implemented actions after the delete process for each item is complete.", "PostMoveItem": "Performs caller-implemented actions after the move process for each item is complete.", "PostNewItem": "Performs caller-implemented actions after the new item is created.", "PostPaint": "Called after the namespace tree control is drawn.", "PostRenameItem": "Performs caller-implemented actions after the rename process for each item is complete.", "PreCopyItem": "Performs caller-implemented actions before the copy process for each item begins.", "PreDeleteItem": "Performs caller-implemented actions before the delete process for each item begins.", "PreMoveItem": "Performs caller-implemented actions before the move process for each item begins.", "PreNewItem": "Performs caller-implemented actions before the process to create a new item begins.", "PrePaint": "Called before the namespace tree control is drawn.", "PrepareForSync": "Allows a registered application to display any user interface, and perform any necessary initialization before the ISyncMgrSynchronize::Synchronize method is called.", "PrepareForSyncCompleted": "Called by a registered handler of an application after the PrepareForSync method is complete.", "PreRenameItem": "Performs caller-implemented actions before the rename process for each item begins.", "PresentConflict": "Presents the conflict to the user.", "PrevPage": "Switches to the previous page of a multipage image.", "PrintTo": "Prints a file.", "ProcessAttachDetach": "Deprecated.", "ProfferService": "Makes a service available to other objects on the same host.", "Progress": "Called by a registered application to update the progress information and determine whether an operation should continue.", "Prompt": "Presents a prompt UI to the user.", "PropertyFailure": "Called when there is a failure that involves file properties and user interaction is needed.", "ProposeItem": "Proposes the addition of a new item to the set of items previously enumerated.", "PtrdiffTAdd": "Adds two values of type ptrdiff_t.", "PtrdiffTMult": "Multiplies two values of type ptrdiff_t.", "PtrdiffTSub": "Subtracts one value of type ptrdiff_t from another.", "put_CurrentViewMode": "Sets the current view mode of the current folder.", "put_FolderFlags": "Sets the current folders settings.", "put_GroupBy": "Sets the column used in grouping the folder view.", "put_IconSize": "Sets the icon size setting for the current folder.", "put_SortColumns": "Sets the names of the columns to be sorted.", "PutBaseBrowserData": "Note, however, that state should only be updated by the base browser.", "PollForPotentialSupportedPatterns": "Retrieves the control patterns that might be supported on a UI Automation element.", "PollForPotentialSupportedProperties": "Retrieves the properties that might be supported on a UI Automation element.", "put_accName": "Client applications should use a control-specific workaround, such as the SetWindowText function.", "put_accValue": "The IAccessible::put_accValue method sets the value of the specified object.", "put_AllowSubstringMatch": "Sets or retrieves a value that specifies whether the proxy allows substring matching.", "put_AutomationElementMode": "Indicates whether returned elements contain full references to the underlying UI, or only cached information.", "put_AutoSetFocus": "Specifies whether calls to UI Automation control pattern methods automatically set focus to the target element.", "put_CanCheckBaseClass": "Sets or retrieves a value that specifies whether the base class can be checked when searching for a proxy factory.", "put_ClassName": "Sets or retrieves the name of the window class served by the proxy factory.", "put_CoalesceEvents": "Gets or sets whether an accessible technology client receives all events, or a subset where duplicate events are detected and filtered.", "put_ConnectionRecoveryBehavior": "Indicates whether an accessible technology client adjusts provider request timeouts when the provider is non-responsive.", "put_ConnectionTimeout": "Specifies the length of time that UI Automation will wait for a provider to respond to a client request for an automation element.", "put_ImageName": "Sets or retrieves the name of the image of the proxy factory.", "put_NeedsAdviseEvents": "Sets or retrieves a value that specifies whether the proxy must be notified when an application has registered for events.", "put_TransactionTimeout": "Specifies the length of time that UI Automation will wait for a provider to respond to a client request for information about an automation element.", "put_TreeFilter": "Specifies the view of the UI Automation element tree that is used when caching.", "put_TreeScope": "Specifies the scope of caching.", "PowerClearRequest": "Decrements the count of power requests of the specified type for a power request object.", "PowerCreateRequest": "Creates a new power request object.", "PowerSetRequest": "Increments the count of power requests of the specified type for a power request object.", "PurgeComm": "Discards all characters from the output or input buffer of a specified communications resource.", "PeekMessageA": "Dispatches incoming sent messages, checks the thread message queue for a posted message, and retrieves the message.", "PeekMessageW": "Dispatches incoming sent messages, checks the thread message queue for a posted message, and retrieves the message.", "PhysicalToLogicalPoint": "Converts the physical coordinates of a point in a window to logical coordinates.", "PostMessageA": "Places a message in the message queue associated with the thread that created the specified window and returns without waiting for the thread to process the message.", "PostMessageW": "Places a message in the message queue associated with the thread that created the specified window and returns without waiting for the thread to process the message.", "PostQuitMessage": "Indicates to the system that a thread has made a request to terminate.", "PostThreadMessageA": "Posts a message to the message queue of the specified thread.", "PostThreadMessageW": "Posts a message to the message queue of the specified thread.", "PROPENUMPROCA": "An application-defined callback function used with the EnumProps function.", "PROPENUMPROCEXA": "Application-defined callback function used with the EnumPropsEx function.", "PROPENUMPROCEXW": "Application-defined callback function used with the EnumPropsEx function.", "PROPENUMPROCW": "An application-defined callback function used with the EnumProps function.", "PopulationCount64": "Counts the number of one bits in a 64-bit unsigned integer.", "PaintDesktop": "The PaintDesktop function fills the clipping region in the specified device context with the desktop pattern or wallpaper.", "PhysicalToLogicalPointForPerMonitorDPI": "Converts a point in a window from physical coordinates into logical coordinates, regardless of the dots per inch awareness of the caller.", "POINTSTOPOINT": "The POINTSTOPOINT macro copies the contents of a POINTS structure into a POINT structure.", "POINTTOPOINTS": "The POINTTOPOINTS macro converts a POINT structure to a POINTS structure.", "PrintWindow": "The PrintWindow function copies a visual window into the specified device context, typically a printer DC.", "PtInRect": "The PtInRect function determines whether the specified point lies within the specified rectangle.", "PrefetchVirtualMemory": "Provides an efficient mechanism to bring into memory potentially discontiguous virtual address ranges in a process address space.", "QueryActCtxSettingsW": "The QueryActCtxSettingsW function specifies the activation context, and the namespace and name of the attribute that is to be queried.", "QueryActCtxW": "The QueryActCtxW function queries the activation context.", "QueryAssemblyInfo": "The QueryAssemblyInfo method queries the side-by-side assembly store for assembly information and validates the files in the side-by-side assembly store against the assembly manifest.", "QueryFullProcessImageNameA": "Retrieves the full name of the executable image for the specified process.", "QueryFullProcessImageNameW": "Retrieves the full name of the executable image for the specified process.", "QueryUmsThreadInformation": "Retrieves information about the specified user-mode scheduling worker thread.", "QueryLogPolicy": "The QueryLogPolicy function allows you to obtain a policy that is installed for the specified log.", "QueryDosDeviceW": "Retrieves information about MS-DOS device names.", "QueryDosDeviceA": "Retrieves information about MS-DOS device names.", "QueryIoRingCapabilities": "Queries the OS for the supported capabilities for IORINGs.", "QueryRecoveryAgentsOnEncryptedFile": "Retrieves a list of recovery agents for the specified file.", "QueryUsersOnEncryptedFile": "Retrieves a list of users for the specified file.", "QueryChangesVirtualDisk": "Retrieves information about changes to the specified areas of a virtual hard disk.", "QueryAllTracesA": "The QueryAllTraces function retrieves the properties and statistics for all event tracing sessions for which the caller has permissions to query.", "QueryAllTracesW": "The QueryAllTraces function retrieves the properties and statistics for all event tracing sessions for which the caller has permissions to query.", "QueryTraceA": "The QueryTrace function retrieves the property settings and session statistics for the specified event tracing session.", "QueryTraceProcessingHandle": "Retrieves information about an ETW trace processing session opened by OpenTrace.", "QueryTraceW": "The QueryTrace function retrieves the property settings and session statistics for the specified event tracing session.", "QueryInterface": "The IDirectInputJoyConfig8::QueryInterface method determines whether the DirectInputJoyConfig object supports a particular COM interface.", "QueryChanges": "Retrieves a value that specifies whether the template or certification authority collections have changed in Active Directory.", "QueryContextAttributesA": "Lets a transport application query the Credential Security Support Provider security package for certain attributes of a security context.", "QueryContextAttributesExA": "Enables a transport application to query a security package for certain attributes of a security context.", "QueryContextAttributesExW": "Enables a transport application to query a security package for certain attributes of a security context.", "QueryContextAttributesW": "Lets a transport application query the Credential Security Support Provider security package for certain attributes of a security context.", "QueryCredentialsAttributesA": "Retrieves the attributes of a credential, such as the name associated with the credential.", "QueryCredentialsAttributesW": "Retrieves the attributes of a credential, such as the name associated with the credential.", "QuerySecurityAccessMask": "Creates an access mask that represents the access permissions necessary to query the specified object security information.", "QuerySecurityContextToken": "Obtains the access token for a client security context and uses it directly.", "QuerySecurityPackageInfoA": "Retrieves information about a specified security package.", "QuerySecurityPackageInfoW": "Retrieves information about a specified security package.", "QueryServiceConfig2A": "Retrieves the optional configuration parameters of the specified service.", "QueryServiceConfig2W": "Retrieves the optional configuration parameters of the specified service.", "QueryServiceConfigA": "Retrieves the configuration parameters of the specified service.", "QueryServiceConfigW": "Retrieves the configuration parameters of the specified service.", "QueryServiceDynamicInformation": "Retrieves dynamic information related to the current service start.", "QueryServiceLockStatusA": "Retrieves the lock status of the specified service control manager database.", "QueryServiceLockStatusW": "Retrieves the lock status of the specified service control manager database.", "QueryServiceObjectSecurity": "Retrieves a copy of the security descriptor associated with a service object.", "QueryServiceStatus": "Retrieves the current status of the specified service.", "QueryServiceStatusEx": "Retrieves the current status of the specified service based on the specified information level.", "QueryAcceptData": "During a paste operation or a drag event, determines if the data that is pasted or dragged should be accepted.", "QueryInsertObject": "Queries the application as to whether an object should be inserted.", "QISearch": "A table-driven implementation of the IUnknown::QueryInterface method.", "QueryAbilities": "Determines what options the conflict presenter will display.", "QueryAbort": "Aborts an IShellImageData process such as Decode, Draw, or Scale.", "QueryActiveShellView": "Retrieves the currently active Shell view object.", "QueryAppIsDefault": "Determines whether an application owns the registered default association for a given application level and type.", "QueryAppIsDefaultAll": "Determines whether an application owns all of the registered default associations for a given application level.", "QueryBand": "Gets information about a band in a band site.", "QueryCancel": "Provides information about whether the action is being canceled.", "QueryContextMenu": "Adds commands to a shortcut menu.", "QueryContinue": "Returns S_OK if the operation associated with the current instance of this interface should continue.", "QueryCurrentDefault": "Determines the default application for a given association type.", "QueryFocus": "Directs the preview handler to return the HWND from calling the GetFocus Function.", "QueryForAdditionalItems": "This is the set of items that will be synchronized after the current synchronization is finished.", "QueryObject": "Queries for a specified object.", "QuerySupport": "QuerySupport may be altered or unavailable.", "QueryObjectIdRanges": "Retrieves the object ID ranges that a particular windowless Microsoft ActiveX control has reserved.", "QueryThreadProfiling": "Determines whether thread profiling is enabled for the specified thread.", "QueryDisplayConfig": "The QueryDisplayConfig function retrieves information about all possible display paths for all display devices, or views, in the current setting.", "QueryMemoryResourceNotification": "Retrieves the state of the specified memory resource object.", "QueryVirtualMemoryInformation": "The QueryVirtualMemoryInformation function returns information about a page or a set of pages within the virtual address space of the specified process.", "ReleaseActCtx": "The ReleaseActCtx function decrements the reference count of the specified activation context.", "RegisterWaitForSingleObject": "Directs a wait thread in the thread pool to wait on the object.", "RTL_UMS_SCHEDULER_ENTRY_POINT": "The application-defined user-mode scheduling scheduler entry point function associated with a UMS completion list.", "RtlFirstEntrySList": "Retrieves the first entry in a singly linked list.", "RtlInitializeSListHead": "Initializes the head of a singly linked list.", "RtlInterlockedFlushSList": "Removes all items from a singly linked list.", "RtlInterlockedPopEntrySList": "Removes an item from the front of a singly linked list.", "RtlInterlockedPushEntrySList": "Inserts an item at the front of a singly linked list.", "RtlQueryDepthSList": "Retrieves the number of entries in the specified singly linked list.", "RemoveClientCertificate": "Removes the client certificate from the job.", "RemoveCredentials": "Removes credentials from use.", "ReplaceRemotePrefix": "Replaces the beginning text of all remote names in the download job with the specified string.", "RequestFileRanges": "Adds a new set of file ranges to be prioritized for download.", "Reset": "Instructs the enumerator to position itself at the beginning of the list of elements.", "Resume": "Requests that a task resume.", "ResumeGroup": "Use the ResumeGroup method to start a group that has been suspended in the download queue.", "ReadLogNotification": "Retrieves notifications from the log manager.", "RegisterForLogWriteNotification": "The RegisterForLogWriteNotification function is called by a managed log client to enable or disable log write notifications.", "RegisterManageableLogClient": "Registers a client with the log manager.", "RemoveLogPolicy": "Resets the specified policy to its default behavior.", "RegisterClipboardFormatA": "Registers a new clipboard format.", "RegisterClipboardFormatW": "Registers a new clipboard format.", "RemoveClipboardFormatListener": "Removes the given window from the system-maintained clipboard format listener list.", "ReuseDDElParam": "Enables an application to reuse a packed Dynamic Data Exchange lParam parameter, rather than allocating a new packed lParam.", "ReadFile": "Reads data from the specified file or I/O device.", "ReadFileEx": "Reads data from the specified file or I/O device.", "ReadFileScatter": "Reads data from a file and stores it in an array of buffers.", "RemoveDirectoryA": "Deletes an existing empty directory.", "RemoveDirectoryW": "Deletes an existing empty directory.", "RemoveDirectoryFromAppW": "Deletes an existing empty directory.", "ReplaceFileFromAppW": "Replaces one file with another file, with the option of creating a backup copy of the original file.", "ReadDirectoryChangesExW": "Retrieves information that describes the changes within the specified directory, which can include extended information if that information type is specified.", "ReadDirectoryChangesW": "Retrieves information that describes the changes within the specified directory.", "ReadEncryptedFileRaw": "Backs up encrypted files.", "ReadLogArchiveMetadata": "Copies a range of the archive view of the metadata to the specified buffer.", "ReadLogRecord": "Initiates a sequence of reads from a specified log sequence number in one of three modes, and returns the first of the specified log records and a read context.", "ReadLogRestartArea": "Returns the last restart area that is written successfully to the log associated with the marshaling area of WriteLogRestartArea.", "ReadNextLogRecord": "Reads the next record in a sequence that is initiated by a call to ReadLogRecord or ReadLogRestartArea.", "ReadOnlyEnlistment": "Requests that the specified enlistment be converted to a read-only enlistment.", "ReadPreviousLogRestartArea": "Reads the previous log restart area that is relative to the current restart record specified in the read context, pvReadContext.", "RecoverEnlistment": "Recovers an enlistment's state.", "RecoverResourceManager": "Recovers a resource manager's state from its log file.", "RecoverTransactionManager": "Recovers a transaction manager's state from its log file.", "ReleaseNtmsCleanerSlot": "The ReleaseNtmsCleanerSlot function removes an existing slot reservation for a cleaning cartridge.", "Remove": "Removes an object from the collection of managed objects.", "RemoveAll": "Removes all items from the results folder.", "RemoveDirectoryTransactedA": "Deletes an existing empty directory as a transacted operation.", "RemoveDirectoryTransactedW": "Deletes an existing empty directory as a transacted operation.", "RemoveLogContainer": "Removes one container from a log that is associated with a dedicated or multiplexed log handle.", "RemoveLogContainerSet": "Removes multiple containers from a log that is associated with a dedicated or multiplexed log handle.", "RemoveUsersFromEncryptedFile": "Removes specified certificate hashes from a specified file.", "RenameTransactionManager": "Renames a transaction manager object.", "ReOpenFile": "Reopens the specified file system object with different access rights, sharing mode, and flags.", "ReplaceFileA": "Replaces one file with another file, with the option of creating a backup copy of the original file.", "ReplaceFileW": "Replaces one file with another file, with the option of creating a backup copy of the original file.", "ReserveAndAppendLog": "Reserves space for log buffers, or appends a log record to the log, or does both.", "ReserveAndAppendLogAligned": "Reserves space for log buffers, or appends a log record to the log, or both.", "ReserveNtmsCleanerSlot": "The ReserveNtmsCleanerSlot function reserves a single slot in a library unit for a drive cleaner cartridge.", "RollbackComplete": "Indicates that the resource manager has successfully completed rolling back a transaction.", "RollbackEnlistment": "Rolls back the specified transaction that is associated with an enlistment.", "RollbackTransaction": "Requests that the specified transaction be rolled back.", "RollbackTransactionAsync": "Requests that the specified transaction be rolled back.", "RollforwardTransactionManager": "Recovers information only to the specified virtual clock value.", "Read": "Reads a specified number of bytes from the stream object into memory, starting at the current seek pointer.", "ReadAt": "The ReadAt method reads a specified number of bytes starting at a specified offset from the beginning of the byte array object.", "ReadClassStg": "The ReadClassStg function reads the CLSID previously written to a storage object with the WriteClassStg function.", "ReadClassStm": "Reads the CLSID previously written to a stream object with the WriteClassStm function.", "ReadFmtUserTypeStg": "The ReadFmtUserTypeStg function returns the clipboard format and user type previously saved with the WriteFmtUserTypeStg function.", "ReadMultiple": "Reads specified properties from the current property set.", "ReadPropertyNames": "Retrieves any existing string names for the specified property IDs.", "ReLayoutDocfile": "The ReLayoutDocfile method rewrites the compound file, using the layout script obtained through monitoring, or provided through explicit layout scripting, to create a new compound file.", "ReLayoutDocfileOnILockBytes": "Is not implemented.", "ReleaseWriteAccess": "The ReleaseWriteAccess method releases the write lock previously obtained.", "RenameElement": "The RenameElement method renames the specified substorage or stream in this storage object.", "Revert": "Deprecated.", "RawSCSIVirtualDisk": "Issues an embedded SCSI request directly to a virtual hard disk.", "ResizeVirtualDisk": "Resizes a virtual disk.", "RegisterTraceGuidsA": "Registers a Classic ETW event trace provider and the event trace classes that it uses to generate events.", "RegisterTraceGuidsW": "Registers a Classic ETW event trace provider and the event trace classes that it uses to generate events.", "RemoveTraceCallback": "The RemoveTraceCallback function stops an EventCallback function from receiving events for an event trace class.", "Release": "The IDirectInputJoyConfig8::Release method decreases the reference count of the DirectInputJoyConfig object by 1.", "RegGetKeySecurity": "Retrieves a copy of the security descriptor protecting the specified open registry key.", "RegisterServiceCtrlHandlerA": "Registers a function to handle service control requests.", "RegisterServiceCtrlHandlerExA": "Registers a function to handle extended service control requests.", "RegisterServiceCtrlHandlerExW": "Registers a function to handle extended service control requests.", "RegisterServiceCtrlHandlerW": "Registers a function to handle service control requests.", "RegSetKeySecurity": "Sets the security of an open registry key.", "RemoveCertificate": "Removes an endorsement certificate related to the endorsement key from the key storage provider.", "RemoveFromCertificate": "Disassociates a property from a certificate.", "RemoveFromRegistry": "Unregisters a certificate enrollment policy server.", "removePendingRequest": "Removes a pending request from the client's request store.", "removePendingRequestWStr": "Removes a pending request from the client's request store.", "ReportError": "Reports any errors from the requested operation.", "ReportProgress": "Reports the progress of the synchronization of a single sync item to Sync Center.", "resetAttributes": "Removes all attributes from the request.", "resetBlobProperties": "Resets the properties of a BLOB.", "resetExtensions": "Removes all extensions from the request.", "ResetForEncode": "Restores the state of the request object to that which existed before the Encode method was called.", "ResubmitRequest": "Submits the specified certificate request to the policy module for the specified certification authority.", "RetrievePending": "Retrieves a certificate's disposition status from an earlier request that may have previously returned CR_DISP_INCOMPLETE or CR_DISP_UNDER_SUBMISSION.", "RevertSecurityContext": "Allows a security package to discontinue the impersonation of the caller and restore its own security context.", "RevertToSelf": "Terminates the impersonation of a client application.", "RevokeCertificate": "Revokes a certificate either on a specified date or immediately.", "RoleAssignments": "Returns a collection of the role assignments associated with this task.", "RtlConvertSidToUnicodeString": "Converts a security identifier to its Unicode character representation.", "RtlDecryptMemory": "Decrypts memory contents previously encrypted by the RtlEncryptMemory function.", "RtlEncryptMemory": "Encrypts memory contents.", "RtlGenRandom": "Generates a pseudo-random number.", "RemoveWindowSubclass": "Removes a subclass callback from a window.", "ReplaceTextA": "Creates a system-defined modeless dialog box that lets the user specify a string to search for and a replacement string, as well as options to control the find and replace operations.", "ReplaceTextW": "Creates a system-defined modeless dialog box that lets the user specify a string to search for and a replacement string, as well as options to control the find and replace operations.", "Range": "Retrieves a text range object for a specified range of content in the active story of the document.", "Range2": "Retrieves a new text range for the active story of the document.", "RangeFromPoint": "Retrieves the degenerate text range nearest to the specified screen coordinates.", "RangeFromPoint2": "Retrieves the degenerate range at a particular point on the screen.", "Redo": "Performs a specified number of redo operations.", "RegisterPointerDeviceNotifications": "Registers a window to process the WM_POINTERDEVICECHANGE, WM_POINTERDEVICEINRANGE, and WM_POINTERDEVICEOUTOFRANGE pointer device notifications.", "RegisterTouchHitTestingWindow": "Registers a window to process the WM_TOUCHHITTESTING notification.", "ReleaseCallManager": "Releases the call manager.", "ReleaseImmContext": "Releases an Input Method Manager input context.", "Replace": "Replaces an image in an image list with a new image.", "Replace2": "Replaces an image in an image list.", "ReplaceFromImageList": "Replaces an image in one image list with an image from another image list.", "ReplaceIcon": "Replaces an image with an icon or cursor.", "Resize": "Resizes the UI Automation element.", "RegisterUserDictionary": "Registers a file to be used as a user dictionary for the current user, until unregistered.", "RegisterWord": "Registers a new word or deletes an existing word in the IFEDictionary.", "REGISTERWORDENUMPROCA": "An application-defined callback function used with the ImmEnumRegisterWord function.", "REGISTERWORDENUMPROCW": "An application-defined callback function used with the ImmEnumRegisterWord function.", "remove_SpellCheckerChanged": "Removes an event handler that has been added for the SpellCheckerChanged event.", "Request": "Called by an IImePadApplet to insert text into an app.", "ResolveLocaleName": "Finds a possible locale name match for the supplied name.", "RemoveDllDirectory": "Removes a directory that was added to the process DLL search path by using AddDllDirectory.", "RemoveMenu": "Deletes a menu item or detaches a submenu from the specified menu.", "ReadAsync": "Reads information from a stream asynchronously.", "ReadCabinetState": "ReadCabinetState may be altered or unavailable.", "ReadPropertyNPB": "Causes a property to be read from the named property bag.", "RealDriveType": "RealDriveType may be altered or unavailable.", "Rearrange": "Rearrange may be altered or unavailable.", "RecompressImage": "Recompresses an image.", "RecycleItem": "Recycle the item into the provided recycle location and return the item in its new location.", "Redirect": "Redirects folder requests for common and per-user folders.", "Refresh": "Refreshes the view's contents in response to user input.", "RefreshObject": "RefreshObject may be altered or unavailable.", "RefreshOverlayImages": "Refreshes the overlay cache, the image list, or both.", "Register": "Registers an open window as a Shell window; the window is specified by handle.", "RegisterAbort": "Sets a callback abort object, optionally returning a pointer to the previous object.", "RegisterAppStateChangeNotification": "Enables an app to register a callback function through which it can be notified that its library is going into or coming out of a suspended state.", "RegisterAsChild": "ISuspensionDependencyManager::RegisterAsChild method", "RegisterDialogClasses": "Registers any nonstandard window classes required by a screen saver's configuration dialog box.", "RegisterFolder": "Adds a new known folder to the registry.", "RegisterForPackageStateChanges": "Register for package state-change notifications.", "RegisterPending": "Registers a pending window as a Shell window; the window is specified by an absolute PIDL.", "RegisterScaleChangeEvent": "This function replaces RegisterScaleChangeNotifications.", "RegisterScaleChangeNotifications": "Registers a window to receive callbacks when scaling information changes.", "RegisterSyncMgrHandler": "Registers a handler with the synchronization manager when the handler has items to synchronize.", "RegisterTab": "Informs the taskbar that a new tab or document thumbnail has been provided for display in an application's taskbar group flyout.", "RegisterWindow": "Registers the browser in the list of browser windows.", "ReleaseShellView": "Coordinates the view lifetime between the base class and its derived class.", "RemoveAllControlItems": "Not implemented.", "RemoveAllDestinations": "Clears all destination entries from the Recent and Frequent categories in an application's Jump List.", "RemoveAllRoots": "Removes all roots and their children from a tree.", "RemoveBackReferences": "Removes all back references held by an object.", "RemoveBand": "Removes a band from the band site.", "RemoveConflicts": "Deletes a set of conflicts, specified by conflict ID, from the store.", "RemoveControlItem": "Removes an item from a container control in the dialog.", "RemoveDataBlock": "Removes a data block from a link.", "RemoveDestination": "Removes a single destination from the Recent and Frequent categories in a Jump List.", "RemoveEvent": "Removes events, as specified.", "RemoveFolder": "Removes a folder from the library.", "RemoveFromList": "Windows\u00c2\u00a0Vista:_Removes an item from the Start menu pinned list, which is the list in the upper left position of the Start menu.", "RemoveFromSyncSet": "Deletes the conflict and removes the IShellItem from synchronization.", "RemoveIDList": "Removes a pointer to an item identifier list from a results folder.", "RemoveItem": "Removes the item without moving the item to the Recycle Bin.", "RemoveMenusSB": "Permits the container to remove any of its menu elements from the in-place composite menu and to free all associated resources.", "RemoveObject": "RemoveObject may be altered or unavailable.", "RemoveObjectAt": "Removes a single, specified object from the collection.", "RemovePropertyNPB": "Removes a property from a named property bag.", "RemoveRoot": "Removes a root and its children from a tree.", "RemoveTasks": "Removes tasks from the scheduler's background queue.", "RemoveToolbar": "Removes the specified IDockingWindow from the toolbar frame.", "RenameItem": "Changes the name of an item, returning the IShellItem with the new name.", "RenameItems": "All items are given the same name.", "ReplaceFrame": "Replaces the current frame with a new image.", "ReplacePage": "Replaces a page in a property sheet for a Control Panel object.", "ReportEvent": "Provides an event to add to the Sync Results folder for an item being synchronized.", "ReportManualSync": "Reports that a synchronization operation is being performed that was requested manually from outside the Sync Center UI.", "ReportResult": "Translates a received error status code into the appropriate user-readable message.", "RequestBorderSpaceDW": "The border space is not allocated until the SetBorderSpaceDW method is called.", "RequireTouchInEditControl": "Requires an explicit user tap in an edit field before the touch keyboard invokes.", "ResetCancel": "Resets progress dialog after a cancellation has been completed.", "ResetEnumerator": "Forces the autocomplete object to refresh its list of suggestions when the list is visible.", "ResetTimer": "Resets progress dialog timer to 0.", "ResizeBorderDW": "Notifies the docking window object that the frame's border space has changed.", "Resolve": "Resolves the conflict using its own sync handler, controls UI.", "ResolveFolder": "Resolves the target location of a library folder, even if the folder has been moved or renamed.", "ResolveShellLink": "Requests that a folder object resolve a Shell link.", "RestartDialog": "Displays a dialog box that prompts the user to restart Windows.", "RestartDialogEx": "Displays a dialog box that asks the user to restart Windows.", "Result": "Gets the result of a StartHandlerSync or StartItemSync call.", "ResumeTimer": "Resumes progress dialog timer.", "RetrieveProperties": "Gets the properties managed by the sync engine.", "Revoke": "Revokes a Shell window's registration and removes the window from the Shell windows collection.", "RevokeScaleChangeNotifications": "Revokes the registration of a window, preventing it from receiving callbacks when scaling information changes.", "RevokeService": "Makes a service unavailable that had previously been available to other objects through IProfferService::ProfferService.", "Rotate": "Rotates the UI Automation element.", "Run": "Performs the actual display of UI for a handler or sync item when requested to do so by Sync Center.", "RunGadget": "Adds an installed gadget to the desktop.", "RangeFromAnnotation": "Retrieves a text range containing the text that is the target of the annotation associated with the specified annotation element.", "RangeFromChild": "Retrieves a text range enclosing a child element such as an image, hyperlink, Microsoft Excel spreadsheet, or other embedded object.", "RangeValuePattern_SetValue": "Sets the value of a control that has a numerical range.", "Realize": "Creates a full UI Automation element for a virtualized item.", "RectToVariant": "Creates a VARIANT that contains the coordinates of a rectangle.", "RegisterEvent": "Registers a third-party Microsoft UI Automation event.", "RegisterPattern": "Registers a third-party control pattern.", "RegisterPointerInputTarget": "Allows the caller to register a target window to which all pointer input of the specified type is redirected.", "RegisterPointerInputTargetEx": "RegisterPointerInputTargetEx may be altered or unavailable.", "RegisterProperty": "Registers a third-party property.", "ReleaseObjectIdRange": "Releases an object ID range that was acquired by a previous call to the IAccessibleWindowlessSite::AcquireObjectIdRange method.", "RemoveActiveTextPositionChangedEventHandler": "Removes an active text position changed event handler.", "RemoveAllEventHandlers": "Removes all registered Microsoft UI Automation event handlers.", "RemoveAutomationEventHandler": "Removes the specified UI Automation event handler.", "RemoveChangesEventHandler": "Removes a changes event handler.", "RemoveEntry": "Removes an entry from the table of proxy factories.", "RemoveEventHandlerGroup": "Asynchronously removes the specified UI Automation event handler group.", "RemoveFocusChangedEventHandler": "Removes a focus-changed event handler.", "RemoveFromSelection": "Removes the text range from an existing collection of selected text in a text container that supports multiple, disjoint selections.", "RemoveNotificationEventHandler": "Removes a notification event handler.", "RemovePropertyChangedEventHandler": "Removes a property-changed event handler.", "RemoveStructureChangedEventHandler": "Removes a structure-changed event handler.", "RemoveTextEditTextChangedEventHandler": "Removes a programmatic text-edit event handler.", "RespondToWinEvent": "Handles a WinEvent.", "RestoreDefaultTable": "Restores the default table of proxy factories.", "RevokeDocument": "Server applications call the IAccServerDocMgr::RevokeDocument method to notify the Microsoft Active Accessibility run time that a document is no longer available.", "ReadEventLogA": "Reads the specified number of entries from the specified event log.", "ReadEventLogW": "Reads the specified number of entries from the specified event log.", "ReadThreadProfilingData": "Reads the specified profiling data associated with the thread.", "RegisterApplicationRecoveryCallback": "Registers the active instance of an application for recovery.", "RegisterApplicationRestart": "Registers the active instance of an application for restart.", "RegisterEventSourceA": "Retrieves a registered handle to the specified event log.", "RegisterEventSourceW": "Retrieves a registered handle to the specified event log.", "RemoveSecureMemoryCacheCallback": "Unregisters a callback function that was previously registered with the AddSecureMemoryCacheCallback function.", "ReportEventA": "Writes an entry at the end of the specified event log.", "ReportEventW": "Writes an entry at the end of the specified event log.", "RequestWakeupLatency": "This function is provided only for compatibility with earlier versions of Windows.", "RealChildWindowFromPoint": "Retrieves a handle to the child window at the specified point.", "RealGetWindowClassA": "Retrieves a string that specifies the window type.", "RealGetWindowClassW": "Retrieves a string that specifies the window type.", "RegisterClassA": "Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function.", "RegisterClassExA": "Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function.", "RegisterClassExW": "Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function.", "RegisterClassW": "Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function.", "RegisterShellHookWindow": "Registers a specified Shell window to receive certain messages for events or notifications that are useful to Shell applications.", "RegisterWindowMessageA": "Defines a new window message that is guaranteed to be unique throughout the system.", "RegisterWindowMessageW": "Defines a new window message that is guaranteed to be unique throughout the system.", "RemovePropA": "Removes an entry from the property list of the specified window.", "RemovePropW": "Removes an entry from the property list of the specified window.", "ReplyMessage": "Replies to a message sent from another thread by the SendMessage function.", "RtlAddFunctionTable": "Adds a dynamic function table to the dynamic function table list.", "RtlAddGrowableFunctionTable": "Informs the system of a dynamic function table representing a region of memory containing code.", "RtlCaptureContext": "Retrieves a context record in the context of the caller.", "RtlCaptureStackBackTrace": "The RtlCaptureStackBackTrace routine captures a stack back trace by walking up the stack and recording the information for each frame.", "RtlDeleteFunctionTable": "Removes a dynamic function table from the dynamic function table list.", "RtlDeleteGrowableFunctionTable": "Informs the system that a previously reported dynamic function table is no longer in use.", "RtlGrowFunctionTable": "Reports that a dynamic function table has increased in size.", "RtlInstallFunctionTableCallback": "Adds a dynamic function table to the dynamic function table list.", "RtlLookupFunctionEntry": "Searches the active function tables for an entry that corresponds to the specified PC value.", "RtlPcToFileHeader": "Retrieves the base address of the image that contains the specified PC value.", "RtlRestoreContext": "Restores the context of the caller to the specified context record.", "RtlUnwind": "Initiates an unwind of procedure call frames.", "RtlUnwind2": "Initiates an unwind of procedure call frames.", "RtlUnwindEx": "Initiates an unwind of procedure call frames.", "RtlVirtualUnwind": "Retrieves the invocation context of the function that precedes the specified function context.", "RedrawWindow": "The RedrawWindow function updates the specified rectangle or region in a window's client area.", "RegisterDeviceNotificationA": "Registers the device or type of device for which a window will receive notifications.", "RegisterDeviceNotificationW": "Registers the device or type of device for which a window will receive notifications.", "RegisterHotKey": "Defines a system-wide hot key.", "RegisterPowerSettingNotification": "Registers the application to receive power setting notifications for the specific power setting event.", "RegisterRawInputDevices": "Registers the devices that supply the raw input data.", "RegisterSuspendResumeNotification": "Registers to receive notification when the system is suspended or resumed.", "RegisterTouchWindow": "Registers a window as being touch-capable.", "ReleaseCapture": "Releases the mouse capture from a window in the current thread and restores normal mouse input processing.", "ReleaseDC": "The ReleaseDC function releases a device context, freeing it for use by other applications.", "RegCloseKey": "Closes a handle to the specified registry key.", "RegConnectRegistryA": "Establishes a connection to a predefined registry key on another computer.", "RegConnectRegistryW": "Establishes a connection to a predefined registry key on another computer.", "RegCopyTreeA": "Copies the specified registry key, along with its values and subkeys, to the specified destination key.", "RegCopyTreeW": "Copies the specified registry key, along with its values and subkeys, to the specified destination key.", "RegCreateKeyA": "Creates the specified registry key.", "RegCreateKeyExA": "Creates the specified registry key.", "RegCreateKeyExW": "Creates the specified registry key.", "RegCreateKeyTransactedA": "Creates the specified registry key and associates it with a transaction.", "RegCreateKeyTransactedW": "Creates the specified registry key and associates it with a transaction.", "RegCreateKeyW": "Creates the specified registry key.", "RegDeleteKeyA": "Deletes a subkey and its values.", "RegDeleteKeyExA": "Deletes a subkey and its values from the specified platform-specific view of the registry.", "RegDeleteKeyExW": "Deletes a subkey and its values from the specified platform-specific view of the registry.", "RegDeleteKeyTransactedA": "Deletes a subkey and its values from the specified platform-specific view of the registry as a transacted operation.", "RegDeleteKeyTransactedW": "Deletes a subkey and its values from the specified platform-specific view of the registry as a transacted operation.", "RegDeleteKeyValueA": "Removes the specified value from the specified registry key and subkey.", "RegDeleteKeyValueW": "Removes the specified value from the specified registry key and subkey.", "RegDeleteKeyW": "Deletes a subkey and its values.", "RegDeleteTreeA": "Deletes the subkeys and values of the specified key recursively.", "RegDeleteTreeW": "Deletes the subkeys and values of the specified key recursively.", "RegDeleteValueA": "Removes a named value from the specified registry key.", "RegDeleteValueW": "Removes a named value from the specified registry key.", "RegDisablePredefinedCache": "Disables handle caching of the predefined registry handle for HKEY_CURRENT_USER for the current process.", "RegDisablePredefinedCacheEx": "Disables handle caching for all predefined registry handles for the current process.", "RegDisableReflectionKey": "Disables registry reflection for the specified key.", "RegEnableReflectionKey": "Restores registry reflection for the specified disabled key.", "RegEnumKeyA": "Enumerates the subkeys of the specified open registry key.", "RegEnumKeyExA": "Enumerates the subkeys of the specified open registry key.", "RegEnumKeyExW": "Enumerates the subkeys of the specified open registry key.", "RegEnumKeyW": "Enumerates the subkeys of the specified open registry key.", "RegEnumValueA": "Enumerates the values for the specified open registry key.", "RegEnumValueW": "Enumerates the values for the specified open registry key.", "RegFlushKey": "Writes all the attributes of the specified open registry key into the registry.", "RegGetValueA": "Retrieves the type and data for the specified registry value.", "RegGetValueW": "Retrieves the type and data for the specified registry value.", "RegLoadAppKeyA": "Loads the specified registry hive as an application hive.", "RegLoadAppKeyW": "Loads the specified registry hive as an application hive.", "RegLoadKeyA": "Creates a subkey under HKEY_USERS or HKEY_LOCAL_MACHINE and loads the data from the specified registry hive into that subkey.", "RegLoadKeyW": "Creates a subkey under HKEY_USERS or HKEY_LOCAL_MACHINE and loads the data from the specified registry hive into that subkey.", "RegLoadMUIStringA": "Loads the specified string from the specified key and subkey.", "RegLoadMUIStringW": "Loads the specified string from the specified key and subkey.", "RegNotifyChangeKeyValue": "Notifies the caller about changes to the attributes or contents of a specified registry key.", "RegOpenCurrentUser": "Retrieves a handle to the HKEY_CURRENT_USER key for the user the current thread is impersonating.", "RegOpenKeyA": "Opens the specified registry key.", "RegOpenKeyExA": "Opens the specified registry key.", "RegOpenKeyExW": "Opens the specified registry key.", "RegOpenKeyTransactedA": "Opens the specified registry key and associates it with a transaction.", "RegOpenKeyTransactedW": "Opens the specified registry key and associates it with a transaction.", "RegOpenKeyW": "Opens the specified registry key.", "RegOpenUserClassesRoot": "Retrieves a handle to the HKEY_CLASSES_ROOT key for a specified user.", "RegOverridePredefKey": "Maps a predefined registry key to the specified registry key.", "RegQueryInfoKeyA": "Retrieves information about the specified registry key.", "RegQueryInfoKeyW": "Retrieves information about the specified registry key.", "RegQueryMultipleValuesA": "Retrieves the type and data for a list of value names associated with an open registry key.", "RegQueryMultipleValuesW": "Retrieves the type and data for a list of value names associated with an open registry key.", "RegQueryReflectionKey": "Determines whether reflection has been disabled or enabled for the specified key.", "RegQueryValueA": "Retrieves the data associated with the default or unnamed value of a specified registry key.", "RegQueryValueExA": "Retrieves the type and data for the specified value name associated with an open registry key.", "RegQueryValueExW": "Retrieves the type and data for the specified value name associated with an open registry key.", "RegQueryValueW": "Retrieves the data associated with the default or unnamed value of a specified registry key.", "RegRenameKey": "Changes the name of the specified registry key.", "RegReplaceKeyA": "Replaces the file backing a registry key and all its subkeys with another file, so that when the system is next started, the key and subkeys will have the values stored in the new file.", "RegReplaceKeyW": "Replaces the file backing a registry key and all its subkeys with another file, so that when the system is next started, the key and subkeys will have the values stored in the new file.", "RegRestoreKeyA": "Reads the registry information in a specified file and copies it over the specified key.", "RegRestoreKeyW": "Reads the registry information in a specified file and copies it over the specified key.", "RegSaveKeyA": "Saves the specified key and all of its subkeys and values to a new file, in the standard format.", "RegSaveKeyExA": "Saves the specified key and all of its subkeys and values to a registry file, in the specified format.", "RegSaveKeyExW": "Saves the specified key and all of its subkeys and values to a registry file, in the specified format.", "RegSaveKeyW": "Saves the specified key and all of its subkeys and values to a new file, in the standard format.", "RegSetKeyValueA": "Sets the data for the specified value in the specified registry key and subkey.", "RegSetKeyValueW": "Sets the data for the specified value in the specified registry key and subkey.", "RegSetValueA": "Sets the data for the default or unnamed value of a specified registry key.", "RegSetValueExA": "Sets the data and type of a specified value under a registry key.", "RegSetValueExW": "Sets the data and type of a specified value under a registry key.", "RegSetValueW": "Sets the data for the default or unnamed value of a specified registry key.", "RegUnLoadKeyA": "Unloads the specified registry key and its subkeys from the registry.", "RegUnLoadKeyW": "Unloads the specified registry key and its subkeys from the registry.", "ReadProcessMemory": "Reads data from an area of memory in a specified process.", "ReclaimVirtualMemory": "Reclaims a range of memory pages that were offered to the system with OfferVirtualMemory.", "RegisterBadMemoryNotification": "Registers a bad memory notification that is called when one or more bad memory pages are detected.", "ResetWriteWatch": "Resets the write-tracking state for a region of virtual memory.", "SetDisplay": "The SetDisplay method enables an authoring tool to obtain ICE status messages through a callback function.", "SetProperty": "Sets the value of the specified property.", "SetStatus": "The SetStatus method enables an authoring tool to receive information about the progress of validation through a registered callback function.", "SetupAddInstallSectionToDiskSpaceListA": "The SetupAddInstallSectionToDiskSpaceList function searches for CopyFile and DelFile lines in an Install section of an INF file.", "SetupAddInstallSectionToDiskSpaceListW": "The SetupAddInstallSectionToDiskSpaceList function searches for CopyFile and DelFile lines in an Install section of an INF file.", "SetupAddSectionToDiskSpaceListA": "The SetupAddSectionToDiskSpaceList function adds to a disk-space list all the file delete or copy operations listed in a Copy Files or Delete Files section of an INF file.", "SetupAddSectionToDiskSpaceListW": "The SetupAddSectionToDiskSpaceList function adds to a disk-space list all the file delete or copy operations listed in a Copy Files or Delete Files section of an INF file.", "SetupAddToDiskSpaceListA": "The SetupAddToDiskSpaceList function adds a single delete or copy operation to a disk-space list.", "SetupAddToDiskSpaceListW": "The SetupAddToDiskSpaceList function adds a single delete or copy operation to a disk-space list.", "SetupAddToSourceListA": "The SetupAddToSourceList function appends a value to the list of installation sources for either the current user or the system.", "SetupAddToSourceListW": "The SetupAddToSourceList function appends a value to the list of installation sources for either the current user or the system.", "SetupAdjustDiskSpaceListA": "The SetupAdjustDiskSpaceList function adjusts the amount of required space for a specified drive.", "SetupAdjustDiskSpaceListW": "The SetupAdjustDiskSpaceList function adjusts the amount of required space for a specified drive.", "SetupBackupErrorA": "The SetupBackupError function generates a dialog box that informs the user of a backup error.", "SetupBackupErrorW": "The SetupBackupError function generates a dialog box that informs the user of a backup error.", "SetupCancelTemporarySourceList": "The SetupCancelTemporarySourceList function cancels any temporary list and no-browse behavior and reestablishes standard list behavior.", "SetupCloseFileQueue": "The SetupCloseFileQueue function destroys a setup file queue.", "SetupCloseInfFile": "The SetupCloseInfFile function closes the INF file opened by a call to SetupOpenInfFile.", "SetupCloseLog": "The SetupCloseLog function closes the log files.", "SetupCommitFileQueueA": "The SetupCommitFileQueue function performs file operations queued on a setup file queue.", "SetupCommitFileQueueW": "The SetupCommitFileQueue function performs file operations queued on a setup file queue.", "SetupConfigureWmiFromInfSectionA": "The SetupConfigureWmiFromInfSection function configures the security of the WMI data that is exposed by an INF file when passed to the [ DDInstall.", "SetupConfigureWmiFromInfSectionW": "The SetupConfigureWmiFromInfSection function configures the security of the WMI data that is exposed by an INF file when passed to the [ DDInstall.", "SetupCopyErrorA": "The SetupCopyError function generates a dialog box to notify a user of a copy file error.", "SetupCopyErrorW": "The SetupCopyError function generates a dialog box to notify a user of a copy file error.", "SetupCopyOEMInfA": "The SetupCopyOEMInf function copies a specified.inf file to the % windir%/Inf directory.", "SetupCopyOEMInfW": "The SetupCopyOEMInf function copies a specified.inf file to the % windir%/Inf directory.", "SetupCreateDiskSpaceListA": "The SetupCreateDiskSpaceList function creates a disk-space list.", "SetupCreateDiskSpaceListW": "The SetupCreateDiskSpaceList function creates a disk-space list.", "SetupDecompressOrCopyFileA": "The SetupDecompressOrCopyFile function copies a file, decompressing it if necessary.", "SetupDecompressOrCopyFileW": "The SetupDecompressOrCopyFile function copies a file, decompressing it if necessary.", "SetupDefaultQueueCallbackA": "The SetupDefaultQueueCallback function is the default queue callback routine included with the Setup API.", "SetupDefaultQueueCallbackW": "The SetupDefaultQueueCallback function is the default queue callback routine included with the Setup API.", "SetupDeleteErrorA": "The SetupDeleteError function generates a dialog box that informs the user of a delete error.", "SetupDeleteErrorW": "The SetupDeleteError function generates a dialog box that informs the user of a delete error.", "SetupDestroyDiskSpaceList": "The SetupDestroyDiskSpaceList function destroys a disk-space list and releases the resources allocated to it.", "SetupDiGetClassDevsA": "The SetupDiGetClassDevs function returns a handle to a device information set that contains requested device information elements for a local computer.", "SetupDuplicateDiskSpaceListA": "The SetupDuplicateDiskSpaceList function duplicates a disk-space list as a new independent disk-space list.", "SetupDuplicateDiskSpaceListW": "The SetupDuplicateDiskSpaceList function duplicates a disk-space list as a new independent disk-space list.", "SetupEnumInfSectionsA": "The SetupEnumInfSections function retrieves section names from an INF file.", "SetupEnumInfSectionsW": "The SetupEnumInfSections function retrieves section names from an INF file.", "SetupFindFirstLineA": "The SetupFindFirstLine function locates a line in the specified section of an INF file.", "SetupFindFirstLineW": "The SetupFindFirstLine function locates a line in the specified section of an INF file.", "SetupFindNextLine": "The SetupFindNextLine returns the location of the next line in an INF file section relative to ContextIn.", "SetupFindNextMatchLineA": "The SetupFindNextMatchLine function returns the location of the next line in an INF file relative to ContextIn.", "SetupFindNextMatchLineW": "The SetupFindNextMatchLine function returns the location of the next line in an INF file relative to ContextIn.", "SetupFreeSourceListA": "The SetupFreeSourceList function frees the system resources allocated to a source list.", "SetupFreeSourceListW": "The SetupFreeSourceList function frees the system resources allocated to a source list.", "SetupGetBinaryField": "The SetupGetBinaryField function retrieves binary data from a line in an INF file section, from the specified field to the end of the line.", "SetupGetFieldCount": "The SetupGetFieldCount function retrieves the number of fields in the specified line in an INF file.", "SetupGetFileCompressionInfoA": "The SetupGetFileCompressionInfo function examines a physical file to determine if it is compressed and gets its full path, size, and the size of the uncompressed target file.", "SetupGetFileCompressionInfoExA": "The SetupGetFileCompressionInfoEx function examines a potentially compressed file and gets the type of compression, the file's full path, the compressed size, and the size of the uncompressed target file.", "SetupGetFileCompressionInfoExW": "The SetupGetFileCompressionInfoEx function examines a potentially compressed file and gets the type of compression, the file's full path, the compressed size, and the size of the uncompressed target file.", "SetupGetFileCompressionInfoW": "The SetupGetFileCompressionInfo function examines a physical file to determine if it is compressed and gets its full path, size, and the size of the uncompressed target file.", "SetupGetFileQueueCount": "The SetupGetFileQueueCount function gets the count from a setup file queue.", "SetupGetFileQueueFlags": "The SetupGetFileQueueFlags function gets the flags from a setup file queue.", "SetupGetInfFileListA": "The SetupGetInfFileList function returns a list of INF files located in a caller-specified directory to a call-supplied buffer.", "SetupGetInfFileListW": "The SetupGetInfFileList function returns a list of INF files located in a caller-specified directory to a call-supplied buffer.", "SetupGetInfInformationA": "The SetUpGetInfInformation function returns the SP_INF_INFORMATION structure for the specified INF file to a buffer.", "SetupGetInfInformationW": "The SetUpGetInfInformation function returns the SP_INF_INFORMATION structure for the specified INF file to a buffer.", "SetupGetIntField": "The SetupGetIntField function retrieves an integer value from the specified field of a line in an INF file.", "SetupGetLineByIndexA": "The SetupGetLineByIndex function locates a line by its index value in the specified section in the INF file.", "SetupGetLineByIndexW": "The SetupGetLineByIndex function locates a line by its index value in the specified section in the INF file.", "SetupGetLineCountA": "The SetupGetLineCount function returns the number of lines in a specified section of an INF file.", "SetupGetLineCountW": "The SetupGetLineCount function returns the number of lines in a specified section of an INF file.", "SetupGetLineTextA": "The SetupGetLineText function returns the contents of a line in an INF file in a compact form.", "SetupGetLineTextW": "The SetupGetLineText function returns the contents of a line in an INF file in a compact form.", "SetupGetMultiSzFieldA": "The SetupGetMultiSzField function retrieves multiple strings stored in a line of an INF file, from the specified field to the end of the line.", "SetupGetMultiSzFieldW": "The SetupGetMultiSzField function retrieves multiple strings stored in a line of an INF file, from the specified field to the end of the line.", "SetupGetSourceFileLocationA": "The SetupGetSourceFileLocation function retrieves the location of a source file listed in an INF file.", "SetupGetSourceFileLocationW": "The SetupGetSourceFileLocation function retrieves the location of a source file listed in an INF file.", "SetupGetSourceFileSizeA": "The SetupGetSourceFileSize function reads the uncompressed size of a source file listed in an INF file.", "SetupGetSourceFileSizeW": "The SetupGetSourceFileSize function reads the uncompressed size of a source file listed in an INF file.", "SetupGetSourceInfoA": "The SetupGetSourceInfo function retrieves the path, tag file, or media description for a source listed in an INF file.", "SetupGetSourceInfoW": "The SetupGetSourceInfo function retrieves the path, tag file, or media description for a source listed in an INF file.", "SetupGetStringFieldA": "The SetupGetStringField function retrieves a string from the specified field of a line in an INF file.", "SetupGetStringFieldW": "The SetupGetStringField function retrieves a string from the specified field of a line in an INF file.", "SetupGetTargetPathA": "The SetupGetTargetPath function determines the target directory for a file list section.", "SetupGetTargetPathW": "The SetupGetTargetPath function determines the target directory for a file list section.", "SetupInitDefaultQueueCallback": "The SetupInitDefaultQueueCallback function initializes the context used by the default queue callback routine included with the Setup API.", "SetupInitDefaultQueueCallbackEx": "Initializes the context used by the default queue callback routine included with the Setup API in the same manner as SetupInitDefaultQueueCallback, except that an additional window is provided to the callback function to accept progress messages.", "SetupInitializeFileLogA": "The SetupInitializeFileLog function initializes a file to record installation operations and outcomes.", "SetupInitializeFileLogW": "The SetupInitializeFileLog function initializes a file to record installation operations and outcomes.", "SetupInstallFileA": "The SetupInstallFile function installs a file as specified either by an INFCONTEXT returned by SetupFindXXXLine or explicitly by the file name and path.", "SetupInstallFileExA": "The SetupInstallFileEx function installs a file as specified either by an INFCONTEXT returned by SetupFindXXXLine or explicitly by the filename and path information.", "SetupInstallFileExW": "The SetupInstallFileEx function installs a file as specified either by an INFCONTEXT returned by SetupFindXXXLine or explicitly by the filename and path information.", "SetupInstallFilesFromInfSectionA": "The SetupInstallFilesFromInfSection function queues all the files for an installation that are specified in the Copy Files, Delete Files, and Rename Files sections that are listed by an Install section.", "SetupInstallFilesFromInfSectionW": "The SetupInstallFilesFromInfSection function queues all the files for an installation that are specified in the Copy Files, Delete Files, and Rename Files sections that are listed by an Install section.", "SetupInstallFileW": "The SetupInstallFile function installs a file as specified either by an INFCONTEXT returned by SetupFindXXXLine or explicitly by the file name and path.", "SetupInstallFromInfSectionA": "The SetupInstallFromInfSection function carries out all the directives in an INF file Install section.", "SetupInstallFromInfSectionW": "The SetupInstallFromInfSection function carries out all the directives in an INF file Install section.", "SetupInstallServicesFromInfSectionA": "The SetupInstallServicesFromInfSection function performs service installation and deletion operations that are specified in the Service Install sections listed in the Service section of an INF file.", "SetupInstallServicesFromInfSectionExA": "The SetupInstallServicesFromInfSectionEx function performs service installation and deletion operations that are specified in the Service Install sections listed in the Service section of an INF file.", "SetupInstallServicesFromInfSectionExW": "The SetupInstallServicesFromInfSectionEx function performs service installation and deletion operations that are specified in the Service Install sections listed in the Service section of an INF file.", "SetupInstallServicesFromInfSectionW": "The SetupInstallServicesFromInfSection function performs service installation and deletion operations that are specified in the Service Install sections listed in the Service section of an INF file.", "SetupIterateCabinetA": "The SetupIterateCabinet function iterates through all the files in a cabinet and sends a notification to a callback function for each file found.", "SetupIterateCabinetW": "The SetupIterateCabinet function iterates through all the files in a cabinet and sends a notification to a callback function for each file found.", "SetupLogErrorA": "The SetupLogError function writes an error message to a log file.", "SetupLogErrorW": "The SetupLogError function writes an error message to a log file.", "SetupLogFileA": "The SetupLogFile function adds an entry to the log file.", "SetupLogFileW": "The SetupLogFile function adds an entry to the log file.", "SetupOpenAppendInfFileA": "The SetupOpenAppendInfFile function appends the information in an INF file to an INF file previously opened by SetupOpenInfFile.", "SetupOpenAppendInfFileW": "The SetupOpenAppendInfFile function appends the information in an INF file to an INF file previously opened by SetupOpenInfFile.", "SetupOpenFileQueue": "The SetupOpenFileQueue function creates a setup file queue.", "SetupOpenInfFileA": "The SetupOpenInfFile function opens an INF file and returns a handle to it.", "SetupOpenInfFileW": "The SetupOpenInfFile function opens an INF file and returns a handle to it.", "SetupOpenLog": "The SetupOpenLog function opens the log files.", "SetupOpenMasterInf": "The SetupOpenMasterInf function opens the master INF file that contains file and layout information for files shipped with Windows.", "SetupPromptForDiskA": "The SetupPromptForDisk function displays a dialog box that prompts the user for a disk.", "SetupPromptForDiskW": "The SetupPromptForDisk function displays a dialog box that prompts the user for a disk.", "SetupPromptReboot": "The SetupPromptReboot function asks the user if he wants to reboot the system, optionally dependent on whether any files in a committed file queue were in use during a file operation.", "SetupQueryDrivesInDiskSpaceListA": "The SetupQueryDrivesInDiskSpaceList function fills a buffer with a list of the drives referenced by the file operations listed in the disk-space list.", "SetupQueryDrivesInDiskSpaceListW": "The SetupQueryDrivesInDiskSpaceList function fills a buffer with a list of the drives referenced by the file operations listed in the disk-space list.", "SetupQueryFileLogA": "The SetupQueryFileLog function returns information from a setup file log.", "SetupQueryFileLogW": "The SetupQueryFileLog function returns information from a setup file log.", "SetupQueryInfFileInformationA": "The SetupQueryInfFileInformation function returns an INF filename from an SP_INF_INFORMATION structure to a buffer.", "SetupQueryInfFileInformationW": "The SetupQueryInfFileInformation function returns an INF filename from an SP_INF_INFORMATION structure to a buffer.", "SetupQueryInfOriginalFileInformationA": "The SetupQueryInfOriginalFileInformation function returns the original name of an OEM INF file.", "SetupQueryInfOriginalFileInformationW": "The SetupQueryInfOriginalFileInformation function returns the original name of an OEM INF file.", "SetupQueryInfVersionInformationA": "The SetupQueryInfVersionInformation function returns INF file version information from an SP_INF_INFORMATION structure to a buffer.", "SetupQueryInfVersionInformationW": "The SetupQueryInfVersionInformation function returns INF file version information from an SP_INF_INFORMATION structure to a buffer.", "SetupQuerySourceListA": "The SetupQuerySourceList function queries the current list of installation sources.", "SetupQuerySourceListW": "The SetupQuerySourceList function queries the current list of installation sources.", "SetupQuerySpaceRequiredOnDriveA": "The SetupQuerySpaceRequiredOnDrive function examines a disk space list to determine the space that is required to perform all the file operations listed for a specific drive.", "SetupQuerySpaceRequiredOnDriveW": "The SetupQuerySpaceRequiredOnDrive function examines a disk space list to determine the space that is required to perform all the file operations listed for a specific drive.", "SetupQueueCopyA": "The SetupQueueCopy function adds a single file copy operation to a setup file queue.", "SetupQueueCopyIndirectA": "The SetupQueueCopyIndirect function is an extended form of SetupQueueCopy passing additional parameters as a structure.", "SetupQueueCopyIndirectW": "The SetupQueueCopyIndirect function is an extended form of SetupQueueCopy passing additional parameters as a structure.", "SetupQueueCopySectionA": "The SetupQueueCopySection function places all the files in a section of an INF file in a setup queue for copying.", "SetupQueueCopySectionW": "The SetupQueueCopySection function places all the files in a section of an INF file in a setup queue for copying.", "SetupQueueCopyW": "The SetupQueueCopy function adds a single file copy operation to a setup file queue.", "SetupQueueDefaultCopyA": "The SetupQueueDefaultCopy function adds a single file to a setup file queue for copying, using the default source media and destination as specified in an INF file.", "SetupQueueDefaultCopyW": "The SetupQueueDefaultCopy function adds a single file to a setup file queue for copying, using the default source media and destination as specified in an INF file.", "SetupQueueDeleteA": "The SetupQueueDelete function places an individual file delete operation on a setup file queue.", "SetupQueueDeleteSectionA": "The SetupQueueDeleteSection function queues all the files in a section of an INF file for deletion.", "SetupQueueDeleteSectionW": "The SetupQueueDeleteSection function queues all the files in a section of an INF file for deletion.", "SetupQueueDeleteW": "The SetupQueueDelete function places an individual file delete operation on a setup file queue.", "SetupQueueRenameA": "The SetupQueueRename function places an individual file rename operation on a setup file queue.", "SetupQueueRenameSectionA": "The SetupQueueRenameSection function queues a section in an INF file for renaming.", "SetupQueueRenameSectionW": "The SetupQueueRenameSection function queues a section in an INF file for renaming.", "SetupQueueRenameW": "The SetupQueueRename function places an individual file rename operation on a setup file queue.", "SetupRemoveFileLogEntryA": "The SetupRemoveFileLogEntry function removes an entry or section from a file log.", "SetupRemoveFileLogEntryW": "The SetupRemoveFileLogEntry function removes an entry or section from a file log.", "SetupRemoveFromDiskSpaceListA": "The SetupRemoveFromDiskSpaceList function removes a file delete or copy operation from a disk-space list.", "SetupRemoveFromDiskSpaceListW": "The SetupRemoveFromDiskSpaceList function removes a file delete or copy operation from a disk-space list.", "SetupRemoveFromSourceListA": "The SetupRemoveFromSourceList function removes a value from the list of installation sources for either the current user or the system.", "SetupRemoveFromSourceListW": "The SetupRemoveFromSourceList function removes a value from the list of installation sources for either the current user or the system.", "SetupRemoveInstallSectionFromDiskSpaceListA": "The SetupRemoveInstallSectionFromDiskSpaceList function searches an Install section of an INF file for CopyFiles and DelFiles lines, and removes the file operations specified in those sections from a disk-space list.", "SetupRemoveInstallSectionFromDiskSpaceListW": "The SetupRemoveInstallSectionFromDiskSpaceList function searches an Install section of an INF file for CopyFiles and DelFiles lines, and removes the file operations specified in those sections from a disk-space list.", "SetupRemoveSectionFromDiskSpaceListA": "The SetupRemoveSectionFromDiskSpaceList function removes the file delete or copy operations listed in a Copy Files section of an INF file from a disk-space list.", "SetupRemoveSectionFromDiskSpaceListW": "The SetupRemoveSectionFromDiskSpaceList function removes the file delete or copy operations listed in a Copy Files section of an INF file from a disk-space list.", "SetupRenameErrorA": "The RenameError function generates a dialog box that informs the user of a file renaming error.", "SetupRenameErrorW": "The RenameError function generates a dialog box that informs the user of a file renaming error.", "SetupScanFileQueueA": "The SetupScanFileQueue function scans a setup file queue, performing an operation on each node in its copy list.", "SetupScanFileQueueW": "The SetupScanFileQueue function scans a setup file queue, performing an operation on each node in its copy list.", "SetupSetDirectoryIdA": "The SetupSetDirectoryId function associates a directory identifier in an INF file with a specific directory.", "SetupSetDirectoryIdExA": "The SetupSetDirectoryIdEx function associates a directory identifier in an INF file with a specific directory.", "SetupSetDirectoryIdExW": "The SetupSetDirectoryIdEx function associates a directory identifier in an INF file with a specific directory.", "SetupSetDirectoryIdW": "The SetupSetDirectoryId function associates a directory identifier in an INF file with a specific directory.", "SetupSetFileQueueAlternatePlatformA": "The SetupSetFileQueueAlternatePlatform function associates the file queue with a target platform that is different from the platform running the function.", "SetupSetFileQueueAlternatePlatformW": "The SetupSetFileQueueAlternatePlatform function associates the file queue with a target platform that is different from the platform running the function.", "SetupSetFileQueueFlags": "The SetupSetFileQueueFlags function sets the flags on a setup file queue.", "SetupSetPlatformPathOverrideA": "The SetupSetPlatformPathOverride function is used to set a platform path override for a target machine when working with INFs from a different machine.", "SetupSetPlatformPathOverrideW": "The SetupSetPlatformPathOverride function is used to set a platform path override for a target machine when working with INFs from a different machine.", "SetupSetSourceListA": "The SetupSetSourceList function allows the caller to set the list of installation sources for either the current user or the system.", "SetupSetSourceListW": "The SetupSetSourceList function allows the caller to set the list of installation sources for either the current user or the system.", "SetupTermDefaultQueueCallback": "The SetupTermDefaultQueueCallback function is called after a queue has finished committing.", "SetupTerminateFileLog": "The SetupTerminateFileLog function releases resources associated with a file log.", "SetupUninstallNewlyCopiedInfs": "The SetupUninstallNewlyCopiedInfs function uninstalls INF files that are previously installed during the committal of the specified file queue.", "SetupUninstallOEMInfA": "The SetupUninstallOEMInf function uninstalls a specified.inf file and any associated.pnf file.", "SetupUninstallOEMInfW": "The SetupUninstallOEMInf function uninstalls a specified.inf file and any associated.pnf file.", "SetupVerifyInfFileA": "The SetupVerifyInfFile function verifies the digital signature of the specified INF file by using its corresponding catalog.", "SetupVerifyInfFileW": "The SetupVerifyInfFile function verifies the digital signature of the specified INF file by using its corresponding catalog.", "SfcGetNextProtectedFile": "Retrieves the complete list of protected files.", "SfcIsFileProtected": "Determines whether the specified file is protected.", "SfcIsKeyProtected": "Determines whether the specified registry key is protected.", "SetEnvironmentVariable": "Sets the contents of the specified environment variable for the current process.", "SetProcessAffinityMask": "Sets a processor affinity mask for the threads of the specified process.", "SetTapeParameters": "Specifies the block size of a tape or configures the tape device.", "SetTapePosition": "Sets the tape position on the specified device.", "SetThreadAffinityMask": "Sets a processor affinity mask for the specified thread.", "SetThreadpoolCallbackCleanupGroup": "Associates the specified cleanup group with the specified callback environment.", "SetThreadpoolCallbackLibrary": "Ensures that the specified DLL remains loaded as long as there are outstanding callbacks.", "SetThreadpoolCallbackPersistent": "Specifies that the callback should run on a persistent thread.", "SetThreadpoolCallbackPool": "Sets the thread pool to be used when generating callbacks.", "SetThreadpoolCallbackPriority": "Specifies the priority of a callback function relative to other work items in the same thread pool.", "SetThreadpoolCallbackRunsLong": "Indicates that callbacks associated with this callback environment may not return quickly.", "SetUmsThreadInformation": "Sets application-specific context information for the specified user-mode scheduling worker thread.", "SwitchToFiber": "Schedules a fiber.", "SetClientCertificateByID": "Specifies the identifier of the client certificate to use for client authentication in an HTTPS request.", "SetClientCertificateByName": "Specifies the subject name of the client certificate to use for client authentication in an HTTPS request.", "SetConfigurationFlags": "Sets the configuration flags that determine if the computer can serve content to peers and can download content from peers.", "SetCredentials": "Specifies the credentials to use for a proxy or remote server user authentication request.", "SetCustomHeaders": "Specifies one or more custom HTTP headers to include in HTTP requests.", "SetDescription": "The description can be any application-defined string.", "SetDisplayName": "Sets the search folder display name, as specified.", "SetFileACLFlags": "Specifies the owner and ACL information to maintain when using SMB to download or upload a file.", "SetHelperToken": "Sets the helper token to impersonate the token of the COM client.", "SetHelperTokenFlags": "Sets the usage flags for a token that is associated with a BITS transfer job.", "SetHttpMethod": "Overrides the default HTTP method used for a BITS transfer.", "SetMaximumCacheSize": "Specifies the maximum size of the cache.", "SetMaximumContentAge": "Specifies when files are removed from the cache based on age.", "SetMaximumDownloadTime": "Sets the maximum time that BITS will spend transferring the files in the job.", "SetMinimumRetryDelay": "Sets the minimum length of time that BITS waits after encountering a transient error condition before trying to transfer the file.", "SetNoProgressTimeout": "Sets the length of time that BITS tries to transfer the file after a transient error condition occurs.", "SetNotifyCmdLine": "Specifies a program to execute if the job enters the BG_JOB_STATE_ERROR or BG_JOB_STATE_TRANSFERRED state.", "SetNotifyFlags": "Specifies the type of event notification you want to receive, such as job transferred events.", "SetNotifyInterface": "Identifies your implementation of the IBackgroundCopyCallback interface to BITS.", "SetPeerCachingFlags": "Sets flags that determine if the files of the job can be cached and served to peers and if the job can download content from peers.", "SetPriority": "Specifies the priority level of your job.", "SetProp": "Use the SetProp method to set the property value for a group property.", "SetProxySettings": "Specifies which proxy to use to transfer files.", "SetRemoteName": "Changes the remote name to a new URL in a download job.", "SetReplyFileName": "Specifies the name of the file to contain the reply data from the server application.", "SetSecurityFlags": "Sets flags for HTTP that determine whether the certificate revocation list is checked and certain certificate errors are ignored, and the policy to use when a server redirects the HTTP request.", "SetServerCertificateValidationInterface": "Server certificates are sent when an HTTPS connection is opened.", "SetValidationState": "Sets the validation state of this file.", "Skip": "Instructs the enumerator to skip the next celt elements in the enumeration so that the next call to ISyncMgrEnumItems::Next does not return those elements.", "Suspend": "Requests that a task be suspended.", "SuspendGroup": "Use the SuspendGroup method to pause a group in the download queue.", "SwitchToForeground": "Use the SwitchToForeground method to download the group in the foreground instead of the background.", "SetLogFileSizeWithPolicy": "Adds or deletes containers from a log based on the state of the installed policies.", "SetClipboardData": "Places data on the clipboard in a specified clipboard format.", "SetClipboardViewer": "Adds the specified window to the chain of clipboard viewers.", "SetupDiAskForOEMDisk": "The SetupDiAskForOEMDisk function displays a dialog that asks the user for the path of an OEM installation disk.", "SetupDiBuildClassInfoList": "The SetupDiBuildClassInfoList function returns a list of setup class GUIDs that identify the classes that are installed on a local computer.", "SetupDiBuildClassInfoListExA": "The SetupDiBuildClassInfoListEx function returns a list of setup class GUIDs that includes every class installed on the local system or a remote system.", "SetupDiBuildClassInfoListExW": "The SetupDiBuildClassInfoListEx function returns a list of setup class GUIDs that includes every class installed on the local system or a remote system.", "SetupDiBuildDriverInfoList": "The SetupDiBuildDriverInfoList function builds a list of drivers that is associated with a specific device or with the global class driver list for a device information set.", "SetupDiCallClassInstaller": "The SetupDiCallClassInstaller function calls the appropriate class installer, and any registered co-installers, with the specified installation request.", "SetupDiCancelDriverInfoSearch": "The SetupDiCancelDriverInfoSearch function cancels a driver list search that is currently in progress in a different thread.", "SetupDiChangeState": "The SetupDiChangeState function is the default handler for the DIF_PROPERTYCHANGE installation request.", "SetupDiClassGuidsFromNameA": "The SetupDiClassGuidsFromName function retrieves the GUID associated with the specified class name.", "SetupDiClassGuidsFromNameExA": "The SetupDiClassGuidsFromNameEx function retrieves the GUIDs associated with the specified class name.", "SetupDiClassGuidsFromNameExW": "The SetupDiClassGuidsFromNameEx function retrieves the GUIDs associated with the specified class name.", "SetupDiClassGuidsFromNameW": "The SetupDiClassGuidsFromName function retrieves the GUID associated with the specified class name.", "SetupDiClassNameFromGuidA": "The SetupDiClassNameFromGuid function retrieves the class name associated with a class GUID.", "SetupDiClassNameFromGuidExA": "The SetupDiClassNameFromGuidEx function retrieves the class name associated with a class GUID.", "SetupDiClassNameFromGuidExW": "The SetupDiClassNameFromGuidEx function retrieves the class name associated with a class GUID.", "SetupDiClassNameFromGuidW": "The SetupDiClassNameFromGuid function retrieves the class name associated with a class GUID.", "SetupDiCreateDeviceInfoA": "The SetupDiCreateDeviceInfo function creates a new device information element and adds it as a new member to the specified device information set.", "SetupDiCreateDeviceInfoList": "The SetupDiCreateDeviceInfoList function creates an empty device information set and optionally associates the set with a device setup class and a top-level window.", "SetupDiCreateDeviceInfoListExA": "The SetupDiCreateDeviceInfoList function creates an empty device information set on a remote or a local computer and optionally associates the set with a device setup class.", "SetupDiCreateDeviceInfoListExW": "The SetupDiCreateDeviceInfoList function creates an empty device information set on a remote or a local computer and optionally associates the set with a device setup class.", "SetupDiCreateDeviceInfoW": "The SetupDiCreateDeviceInfo function creates a new device information element and adds it as a new member to the specified device information set.", "SetupDiCreateDeviceInterfaceA": "The SetupDiCreateDeviceInterface function registers a device interface on a local system or a remote system.", "SetupDiCreateDeviceInterfaceRegKeyA": "The SetupDiCreateDeviceInterfaceRegKey function creates a registry key for storing information about a device interface and returns a handle to the key.", "SetupDiCreateDeviceInterfaceRegKeyW": "The SetupDiCreateDeviceInterfaceRegKey function creates a registry key for storing information about a device interface and returns a handle to the key.", "SetupDiCreateDeviceInterfaceW": "The SetupDiCreateDeviceInterface function registers a device interface on a local system or a remote system.", "SetupDiCreateDevRegKeyA": "The SetupDiCreateDevRegKey function creates a registry key for device-specific configuration information and returns a handle to the key.", "SetupDiCreateDevRegKeyW": "The SetupDiCreateDevRegKey function creates a registry key for device-specific configuration information and returns a handle to the key.", "SetupDiDeleteDeviceInfo": "The SetupDiDeleteDeviceInfo function deletes a device information element from a device information set.", "SetupDiDeleteDeviceInterfaceData": "The SetupDiDeleteDeviceInterfaceData function deletes a device interface from a device information set.", "SetupDiDeleteDeviceInterfaceRegKey": "The SetupDiDeleteDeviceInterfaceRegKey function deletes the registry subkey that is used by applications and drivers to store interface-specific information.", "SetupDiDeleteDevRegKey": "The SetupDiDeleteDevRegKey function deletes specified user-accessible registry keys that are associated with a device information element.", "SetupDiDestroyClassImageList": "The SetupDiDestroyClassImageList function destroys a class image list that was built by a call to SetupDiGetClassImageList or SetupDiGetClassImageListEx.", "SetupDiDestroyDeviceInfoList": "The SetupDiDestroyDeviceInfoList function deletes a device information set and frees all associated memory.", "SetupDiDestroyDriverInfoList": "The SetupDiDestroyDriverInfoList function deletes a driver list.", "SetupDiDrawMiniIcon": "The SetupDiDrawMiniIcon function draws the specified mini-icon at the location requested.", "SetupDiEnumDeviceInfo": "The SetupDiEnumDeviceInfo function returns a SP_DEVINFO_DATA structure that specifies a device information element in a device information set.", "SetupDiEnumDeviceInterfaces": "The SetupDiEnumDeviceInterfaces function enumerates the device interfaces that are contained in a device information set.", "SetupDiEnumDriverInfoA": "The SetupDiEnumDriverInfo function enumerates the members of a driver list.", "SetupDiEnumDriverInfoW": "The SetupDiEnumDriverInfo function enumerates the members of a driver list.", "SetupDiGetActualModelsSectionA": "The SetupDiGetActualModelsSection function retrieves the appropriate decorated INF Models section to use when installing a device from a device INF file.", "SetupDiGetActualModelsSectionW": "The SetupDiGetActualModelsSection function retrieves the appropriate decorated INF Models section to use when installing a device from a device INF file.", "SetupDiGetActualSectionToInstallA": "The SetupDiGetActualSectionToInstall function retrieves the appropriate INF DDInstall section to use when installing a device from a device INF file on a local computer.", "SetupDiGetActualSectionToInstallExA": "The SetupDiGetActualSectionToInstallEx function retrieves the name of the INF DDInstall section that installs a device for a specified operating system and processor architecture.", "SetupDiGetActualSectionToInstallExW": "The SetupDiGetActualSectionToInstallEx function retrieves the name of the INF DDInstall section that installs a device for a specified operating system and processor architecture.", "SetupDiGetActualSectionToInstallW": "The SetupDiGetActualSectionToInstall function retrieves the appropriate INF DDInstall section to use when installing a device from a device INF file on a local computer.", "SetupDiGetClassBitmapIndex": "The SetupDiGetClassBitmapIndex function retrieves the index of the mini-icon supplied for the specified class.", "SetupDiGetClassDescriptionA": "The SetupDiGetClassDescription function retrieves the class description associated with the specified setup class GUID.", "SetupDiGetClassDescriptionExA": "The SetupDiGetClassDescriptionEx function retrieves the description of a setup class installed on a local or remote computer.", "SetupDiGetClassDescriptionExW": "The SetupDiGetClassDescriptionEx function retrieves the description of a setup class installed on a local or remote computer.", "SetupDiGetClassDescriptionW": "The SetupDiGetClassDescription function retrieves the class description associated with the specified setup class GUID.", "SetupDiGetClassDevPropertySheetsA": "The SetupDiGetClassDevPropertySheets function retrieves handles to the property sheets of a device information element or of the device setup class of a device information set.", "SetupDiGetClassDevPropertySheetsW": "The SetupDiGetClassDevPropertySheets function retrieves handles to the property sheets of a device information element or of the device setup class of a device information set.", "SetupDiGetClassDevsExA": "The SetupDiGetClassDevsEx function returns a handle to a device information set that contains requested device information elements for a local or a remote computer.", "SetupDiGetClassDevsExW": "The SetupDiGetClassDevsEx function returns a handle to a device information set that contains requested device information elements for a local or a remote computer.", "SetupDiGetClassDevsW": "The SetupDiGetClassDevs function returns a handle to a device information set that contains requested device information elements for a local computer.", "SetupDiGetClassImageIndex": "The SetupDiGetClassImageIndex function retrieves the index within the class image list of a specified class.", "SetupDiGetClassImageList": "The SetupDiGetClassImageList function builds an image list that contains bitmaps for every installed class and returns the list in a data structure.", "SetupDiGetClassImageListExA": "The SetupDiGetClassImageListEx function builds an image list of bitmaps for every class installed on a local or remote system.", "SetupDiGetClassImageListExW": "The SetupDiGetClassImageListEx function builds an image list of bitmaps for every class installed on a local or remote system.", "SetupDiGetClassInstallParamsA": "The SetupDiGetClassInstallParams function retrieves class installation parameters for a device information set or a particular device information element.", "SetupDiGetClassInstallParamsW": "The SetupDiGetClassInstallParams function retrieves class installation parameters for a device information set or a particular device information element.", "SetupDiGetClassPropertyExW": "The SetupDiGetClassPropertyEx function retrieves a class property for a device setup class or a device interface class on a local or remote computer.", "SetupDiGetClassPropertyKeys": "The SetupDiGetClassPropertyKeys function retrieves an array of the device property keys that represent the device properties that are set for a device setup class or a device interface class.", "SetupDiGetClassPropertyKeysExW": "The SetupDiGetClassPropertyKeysEx function retrieves an array of the device property keys that represent the device properties that are set for a device setup class or a device interface class on a local or a remote computer.", "SetupDiGetClassPropertyW": "The SetupDiGetClassProperty function retrieves a device property that is set for a device setup class or a device interface class.", "SetupDiGetClassRegistryPropertyA": "The SetupDiGetClassRegistryProperty function retrieves a property for a specified device setup class from the registry.", "SetupDiGetClassRegistryPropertyW": "The SetupDiGetClassRegistryProperty function retrieves a property for a specified device setup class from the registry.", "SetupDiGetCustomDevicePropertyA": "The SetupDiGetCustomDeviceProperty function retrieves a specified custom device property from the registry.", "SetupDiGetCustomDevicePropertyW": "The SetupDiGetCustomDeviceProperty function retrieves a specified custom device property from the registry.", "SetupDiGetDeviceInfoListClass": "The SetupDiGetDeviceInfoListClass function retrieves the GUID for the device setup class associated with a device information set if the set has an associated class.", "SetupDiGetDeviceInfoListDetailA": "The SetupDiGetDeviceInfoListDetail function retrieves information associated with a device information set including the class GUID, remote computer handle, and remote computer name.", "SetupDiGetDeviceInfoListDetailW": "The SetupDiGetDeviceInfoListDetail function retrieves information associated with a device information set including the class GUID, remote computer handle, and remote computer name.", "SetupDiGetDeviceInstallParamsA": "The SetupDiGetDeviceInstallParams function retrieves device installation parameters for a device information set or a particular device information element.", "SetupDiGetDeviceInstallParamsW": "The SetupDiGetDeviceInstallParams function retrieves device installation parameters for a device information set or a particular device information element.", "SetupDiGetDeviceInstanceIdA": "The SetupDiGetDeviceInstanceId function retrieves the device instance ID that is associated with a device information element.", "SetupDiGetDeviceInstanceIdW": "The SetupDiGetDeviceInstanceId function retrieves the device instance ID that is associated with a device information element.", "SetupDiGetDeviceInterfaceAlias": "The SetupDiGetDeviceInterfaceAlias function returns an alias of a specified device interface.", "SetupDiGetDeviceInterfaceDetailA": "The SetupDiGetDeviceInterfaceDetail function returns details about a device interface.", "SetupDiGetDeviceInterfaceDetailW": "The SetupDiGetDeviceInterfaceDetail function returns details about a device interface.", "SetupDiGetDeviceInterfacePropertyKeys": "The SetupDiGetDeviceInterfacePropertyKeys function retrieves an array of device property keys that represent the device properties that are set for a device interface.", "SetupDiGetDeviceInterfacePropertyW": "The SetupDiGetDeviceInterfaceProperty function retrieves a device property that is set for a device interface.", "SetupDiGetDevicePropertyKeys": "The SetupDiGetDevicePropertyKeys function retrieves an array of the device property keys that represent the device properties that are set for a device instance.", "SetupDiGetDevicePropertyW": "The SetupDiGetDeviceProperty function retrieves a device instance property.", "SetupDiGetDeviceRegistryPropertyA": "The SetupDiGetDeviceRegistryProperty function retrieves a specified Plug and Play device property.", "SetupDiGetDeviceRegistryPropertyW": "The SetupDiGetDeviceRegistryProperty function retrieves a specified Plug and Play device property.", "SetupDiGetDriverInfoDetailA": "The SetupDiGetDriverInfoDetail function retrieves driver information detail for a device information set or a particular device information element in the device information set.", "SetupDiGetDriverInfoDetailW": "The SetupDiGetDriverInfoDetail function retrieves driver information detail for a device information set or a particular device information element in the device information set.", "SetupDiGetDriverInstallParamsA": "The SetupDiGetDriverInstallParams function retrieves driver installation parameters for a device information set or a particular device information element.", "SetupDiGetDriverInstallParamsW": "The SetupDiGetDriverInstallParams function retrieves driver installation parameters for a device information set or a particular device information element.", "SetupDiGetHwProfileFriendlyNameA": "The SetupDiGetHwProfileFriendlyName function retrieves the friendly name associated with a hardware profile ID.", "SetupDiGetHwProfileFriendlyNameExA": "The SetupDiGetHwProfileFriendlyNameEx function retrieves the friendly name associated with a hardware profile ID on a local or remote computer.", "SetupDiGetHwProfileFriendlyNameExW": "The SetupDiGetHwProfileFriendlyNameEx function retrieves the friendly name associated with a hardware profile ID on a local or remote computer.", "SetupDiGetHwProfileFriendlyNameW": "The SetupDiGetHwProfileFriendlyName function retrieves the friendly name associated with a hardware profile ID.", "SetupDiGetHwProfileList": "The SetupDiGetHwProfileList function retrieves a list of all currently defined hardware profile IDs.", "SetupDiGetHwProfileListExA": "The SetupDiGetHwProfileListEx function retrieves a list of all currently defined hardware profile IDs on a local or remote computer.", "SetupDiGetHwProfileListExW": "The SetupDiGetHwProfileListEx function retrieves a list of all currently defined hardware profile IDs on a local or remote computer.", "SetupDiGetINFClassA": "The SetupDiGetINFClass function returns the class of a specified device INF file.", "SetupDiGetINFClassW": "The SetupDiGetINFClass function returns the class of a specified device INF file.", "SetupDiGetSelectedDevice": "The SetupDiGetSelectedDevice function retrieves the selected device information element in a device information set.", "SetupDiGetSelectedDriverA": "The SetupDiGetSelectedDriver function retrieves the selected driver for a device information set or a particular device information element.", "SetupDiGetSelectedDriverW": "The SetupDiGetSelectedDriver function retrieves the selected driver for a device information set or a particular device information element.", "SetupDiInstallClassA": "The SetupDiInstallClass function installs the ClassInstall32 section of the specified INF file.", "SetupDiInstallClassExA": "The SetupDiInstallClassEx function installs a class installer or an interface class.", "SetupDiInstallClassExW": "The SetupDiInstallClassEx function installs a class installer or an interface class.", "SetupDiInstallClassW": "The SetupDiInstallClass function installs the ClassInstall32 section of the specified INF file.", "SetupDiInstallDevice": "The SetupDiInstallDevice function is the default handler for the DIF_INSTALLDEVICE installation request.", "SetupDiInstallDeviceInterfaces": "The SetupDiInstallDeviceInterfaces function is the default handler for the DIF_INSTALLINTERFACES installation request.", "SetupDiInstallDriverFiles": "The SetupDiInstallDriverFiles function is the default handler for the DIF_INSTALLDEVICEFILES installation request.", "SetupDiLoadClassIcon": "The SetupDiLoadClassIcon function loads both the large and mini-icon for the specified class.", "SetupDiLoadDeviceIcon": "The SetupDiLoadDeviceIcon function retrieves an icon for a specified device.", "SetupDiOpenClassRegKey": "The SetupDiOpenClassRegKey function opens the setup class registry key or a specific class's subkey.", "SetupDiOpenClassRegKeyExA": "The SetupDiOpenClassRegKeyEx function opens the device setup class registry key, the device interface class registry key, or a specific class's subkey.", "SetupDiOpenClassRegKeyExW": "The SetupDiOpenClassRegKeyEx function opens the device setup class registry key, the device interface class registry key, or a specific class's subkey.", "SetupDiOpenDeviceInfoA": "The SetupDiOpenDeviceInfo function adds a device information element for a device instance to a device information set, if one does not already exist in the device information set, and retrieves information that identifies the device information element for the device instance in the device information set.", "SetupDiOpenDeviceInfoW": "The SetupDiOpenDeviceInfo function adds a device information element for a device instance to a device information set, if one does not already exist in the device information set, and retrieves information that identifies the device information element for the device instance in the device information set.", "SetupDiOpenDeviceInterfaceA": "The SetupDiOpenDeviceInterface function retrieves information about a device interface and adds the interface to the specified device information set for a local system or a remote system.", "SetupDiOpenDeviceInterfaceRegKey": "The SetupDiOpenDeviceInterfaceRegKey function opens the registry subkey that is used by applications and drivers to store information that is specific to a device interface.", "SetupDiOpenDeviceInterfaceW": "The SetupDiOpenDeviceInterface function retrieves information about a device interface and adds the interface to the specified device information set for a local system or a remote system.", "SetupDiOpenDevRegKey": "The SetupDiOpenDevRegKey function opens a registry key for device-specific configuration information.", "SetupDiRegisterCoDeviceInstallers": "The SetupDiRegisterCoDeviceInstallers function is the default handler for DIF_REGISTER_COINSTALLERS.", "SetupDiRegisterDeviceInfo": "The SetupDiRegisterDeviceInfo function is the default handler for the DIF_REGISTERDEVICE request.", "SetupDiRemoveDevice": "The SetupDiRemoveDevice function is the default handler for the DIF_REMOVE installation request.", "SetupDiRemoveDeviceInterface": "The SetupDiRemoveDeviceInterface function removes a registered device interface from the system.", "SetupDiRestartDevices": "The SetupDiRestartDevices function restarts a specified device or, if necessary, restarts all devices that are operated by the same function and filter drivers that operate the specified device.", "SetupDiSelectBestCompatDrv": "The SetupDiSelectBestCompatDrv function is the default handler for the DIF_SELECTBESTCOMPATDRV installation request.", "SetupDiSelectDevice": "The SetupDiSelectDevice function is the default handler for the DIF_SELECTDEVICE request.", "SetupDiSelectOEMDrv": "The SetupDiSelectOEMDrv function selects a driver for a device information set or a particular device information element that uses an OEM path supplied by the user.", "SetupDiSetClassInstallParamsA": "The SetupDiSetClassInstallParams function sets or clears class install parameters for a device information set or a particular device information element.", "SetupDiSetClassInstallParamsW": "The SetupDiSetClassInstallParams function sets or clears class install parameters for a device information set or a particular device information element.", "SetupDiSetClassPropertyExW": "The SetupDiSetClassPropertyEx function sets a device property for a device setup class or a device interface class on a local or remote computer.", "SetupDiSetClassPropertyW": "The SetupDiSetClassProperty function sets a class property for a device setup class or a device interface class.", "SetupDiSetClassRegistryPropertyA": "The SetupDiSetClassRegistryProperty function sets a specified device class property in the registry.", "SetupDiSetClassRegistryPropertyW": "The SetupDiSetClassRegistryProperty function sets a specified device class property in the registry.", "SetupDiSetDeviceInstallParamsA": "The SetupDiSetDeviceInstallParams function sets device installation parameters for a device information set or a particular device information element.", "SetupDiSetDeviceInstallParamsW": "The SetupDiSetDeviceInstallParams function sets device installation parameters for a device information set or a particular device information element.", "SetupDiSetDeviceInterfaceDefault": "The SetupDiSetDeviceInterfaceDefault function sets a device interface as the default interface for a device interface class.", "SetupDiSetDeviceInterfacePropertyW": "The SetupDiSetDeviceInterfaceProperty function sets a device property of a device interface.", "SetupDiSetDevicePropertyW": "The SetupDiSetDeviceProperty function sets a device instance property.", "SetupDiSetDeviceRegistryPropertyA": "The SetupDiSetDeviceRegistryProperty function sets a Plug and Play device property for a device.", "SetupDiSetDeviceRegistryPropertyW": "The SetupDiSetDeviceRegistryProperty function sets a Plug and Play device property for a device.", "SetupDiSetDriverInstallParamsA": "The SetupDiSetDriverInstallParams function sets driver installation parameters for a driver information element.", "SetupDiSetDriverInstallParamsW": "The SetupDiSetDriverInstallParams function sets driver installation parameters for a driver information element.", "SetupDiSetSelectedDevice": "The SetupDiSetSelectedDevice function sets a device information element as the selected member of a device information set.", "SetupDiSetSelectedDriverA": "The SetupDiSetSelectedDriver function sets, or resets, the selected driver for a device information element or the selected class driver for a device information set.", "SetupDiSetSelectedDriverW": "The SetupDiSetSelectedDriver function sets, or resets, the selected driver for a device information element or the selected class driver for a device information set.", "SetupDiUnremoveDevice": "The SetupDiUnremoveDevice function is the default handler for the DIF_UNREMOVE installation request.", "SetupGetInfDriverStoreLocationA": "The SetupGetInfDriverStoreLocation function retrieves the fully qualified file name of an INF file in the driver store that corresponds to a specified INF file in the system INF file directory or a specified INF file in the driver store.", "SetupGetInfDriverStoreLocationW": "The SetupGetInfDriverStoreLocation function retrieves the fully qualified file name of an INF file in the driver store that corresponds to a specified INF file in the system INF file directory or a specified INF file in the driver store.", "SetupGetInfPublishedNameA": "The SetupGetInfPublishedName function retrieves the fully qualified file name of an INF file in the system INF file directory that corresponds to a specified INF file in the driver store or a specified INF file in the system INF file directory.", "SetupGetInfPublishedNameW": "The SetupGetInfPublishedName function retrieves the fully qualified file name of an INF file in the system INF file directory that corresponds to a specified INF file in the driver store or a specified INF file in the system INF file directory.", "SetupGetNonInteractiveMode": "The SetupGetNonInteractiveMode function returns the value of a SetupAPI non-interactive flag that indicates whether the caller's process can interact with a user through user interface components, such as dialog boxes.", "SetupGetThreadLogToken": "The SetupGetThreadLogToken function retrieves the log token for the thread from which this function was called.", "SetupSetNonInteractiveMode": "The SetupSetNonInteractiveMode function sets a non-interactive SetupAPI flag that determines whether SetupAPI can interact with a user in the caller's context.", "SetupSetThreadLogToken": "The SetupSetThreadLogToken function sets the log context, as represented by a log token, for the thread from which this function was called.", "SetupWriteTextLog": "The SetupWriteTextLog function writes a log entry in a SetupAPI text log.", "SetupWriteTextLogError": "The SetupWriteTextLogError function writes information about a SetupAPI-specific error or a Win32 system error to a SetupAPI text log.", "SetupWriteTextLogInfLine": "The SetupWriteTextLogInfLine function writes a log entry in a SetupAPI text log that contains the text of a specified INF file line.", "SetEndOfFile": "Sets the physical file size for the specified file to the current position of the file pointer.", "SetFileApisToANSI": "Causes the file I/O functions to use the ANSI character set code page for the current process.", "SetFileApisToOEM": "Causes the file I/O functions for the process to use the OEM character set code page.", "SetFileAttributesA": "Sets the attributes for a file or directory.", "SetFileAttributesW": "Sets the attributes for a file or directory.", "SetFileInformationByHandle": "Sets the file information for the specified file.", "SetFileIoOverlappedRange": "Associates a virtual address range with the specified file handle.", "SetFilePointer": "Moves the file pointer of the specified file.", "SetFilePointerEx": "Moves the file pointer of the specified file.", "SetFileTime": "Sets the date and time that the specified file or directory was created, last accessed, or last modified.", "SetFileValidData": "Sets the valid data length of the specified file.", "SetFileAttributesFromAppW": "Sets the attributes for a file or directory.", "SatisfyNtmsOperatorRequest": "The SatisfyNtmsOperatorRequest function completes the specified RSM operator request.", "ScanLogContainers": "Enumerates log containers.", "SearchPathA": "Searches for a specified file in a specified path.", "SearchPathW": "Searches for a specified file in a specified path.", "SetCurrentDirectory": "Changes the current directory for the current process.", "SetDefaultQuotaLimit": "Modifies the default quota limit.", "SetDefaultQuotaThreshold": "Modifies the default warning threshold.", "SetEndOfLog": "This function has been deprecated.", "SetEnlistmentRecoveryInformation": "Sets an opaque, user-defined structure of recovery data from KTM.", "SetFileAttributesTransactedA": "Sets the attributes for a file or directory as a transacted operation.", "SetFileAttributesTransactedW": "Sets the attributes for a file or directory as a transacted operation.", "SetFileBandwidthReservation": "Requests that bandwidth for the specified file stream be reserved.", "SetFileCompletionNotificationModes": "Sets the notification modes for a file handle, allowing you to specify how completion notifications work for the specified file.", "SetFileShortNameA": "Sets the short name for the specified file.", "SetFileShortNameW": "Sets the short name for the specified file.", "SetLogArchiveMode": "Enables or disables log archive support for a specified log.", "SetLogArchiveTail": "Sets the last archived log sequence number or archive tail of an archivable log.", "SetNtmsDeviceChangeDetection": "The SetNtmsDeviceChangeDetection function sets one or more target devices for change detection.", "SetNtmsMediaComplete": "The SetNtmsMediaComplete function marks a piece of logical media as complete.", "SetNtmsObjectAttributeA": "The SetNtmsObjectAttribute function creates an extended attribute in the specified RSM object.", "SetNtmsObjectAttributeW": "The SetNtmsObjectAttribute function creates an extended attribute in the specified RSM object.", "SetNtmsObjectInformation": "The SetNtmsObjectInformation function changes the information structure of the specified object.", "SetNtmsObjectInformationA": "The SetNtmsObjectInformation function changes the information structure of the specified object.", "SetNtmsObjectInformationW": "The SetNtmsObjectInformation function changes the information structure of the specified object.", "SetNtmsObjectSecurity": "The SetNtmsObjectSecurity function writes the security descriptor for the specified RSM object.", "SetNtmsRequestOrder": "The SetNtmsRequestOrder function sets the order that the specified request will be processed in the library queue.", "SetNtmsUIOptionsA": "The SetNtmsUIOptions function modifies the list of computer names to which the specified type of UI is being directed for the given object.", "SetNtmsUIOptionsW": "The SetNtmsUIOptions function modifies the list of computer names to which the specified type of UI is being directed for the given object.", "SetQuotaLimit": "Sets the user's quota limit value on the volume.", "SetQuotaLogFlags": "Controls the logging of user-related quota events on the volume.", "SetQuotaState": "Sets the state of the quota system.", "SetQuotaThreshold": "Sets the user's warning threshold value on the volume.", "SetResourceManagerCompletionPort": "Associates the specified I/O completion port with the specified resource manager.", "SetSearchPathMode": "Sets the per-process mode that the SearchPath function uses when locating files.", "SetTransactionInformation": "Sets the transaction information for the specified transaction.", "SetUserFileEncryptionKey": "Sets the user's current key to the specified certificate.", "SetVolumeLabelA": "Sets the label of a file system volume.", "SetVolumeLabelW": "Sets the label of a file system volume.", "SetVolumeMountPointA": "Associates a volume with a drive letter or a directory on another volume.", "SetVolumeMountPointW": "Associates a volume with a drive letter or a directory on another volume.", "ShutdownNameResolution": "Translates user security identifiers to user names.", "SinglePhaseReject": "Indicates that the resource manager receives this call, it initiates a two-phase commit and sends a prepare request to all enlisted RMs.", "SubmitIoRing": "Submits all constructed but not yet submitted entries to the kernel\u00e2\u0080\u0099s queue and optionally waits for a set of operations to complete.", "SubmitNtmsOperatorRequestA": "The SubmitNtmsOperatorRequest function submits an RSM operator request.", "SubmitNtmsOperatorRequestW": "The SubmitNtmsOperatorRequest function submits an RSM operator request.", "SwapNtmsMedia": "The SwapNtmsMedia function swaps the sides associated with the two specified LMIDs.", "Seek": "Changes the seek pointer to a new location.", "SetClass": "The SetClass method assigns a new CLSID to the current property storage object, and persistently stores the CLSID with the object.", "SetConvertStg": "The SetConvertStg function sets the convert bit in a storage object to indicate that the object is to be converted to a new class when it is opened.", "SetElementTimes": "The SetElementTimes method sets the modification, access, and creation times of the specified storage element, if the underlying file system supports this method.", "SetFillSize": "The SetFillSize method sets the expected size of the byte array.", "SetSize": "Sets the font size.", "SetStateBits": "The SetStateBits method stores up to 32 bits of state information in this storage object.", "SetTimes": "Sets file times.", "Stat": "The Stat method retrieves information about the current open property set.", "StgConvertPropertyToVariant": "Converts a SERIALIZEDPROPERTYVALUE data type to a PROPVARIANT data type.", "StgConvertVariantToProperty": "Converts a PROPVARIANT data type to a SERIALIZEDPROPERTYVALUE data type.", "StgCreateDocfile": "Creates a new compound file storage object using the COM-provided compound file implementation for the IStorage interface.", "StgCreateDocfileOnILockBytes": "Creates and opens a new compound file storage object on top of a byte-array object provided by the caller.", "StgCreatePropSetStg": "Creates a property set storage object from a specified storage object.", "StgCreatePropStg": "Creates and opens a property set in a specified storage or stream object.", "StgCreateStorageEx": "Creates a new storage object using a provided implementation for the IStorage or IPropertySetStorage interfaces.", "StgDeserializePropVariant": "The StgDeserializePropVariant function converts a SERIALIZEDPROPERTYVALUE data type to a PROPVARIANT data type.", "StgGetIFillLockBytesOnFile": "Opens a wrapper object on a temporary file.", "StgGetIFillLockBytesOnILockBytes": "Creates a new wrapper object on a byte array object provided by the caller.", "StgIsStorageFile": "The StgIsStorageFile function indicates whether a particular disk file contains a storage object.", "StgIsStorageILockBytes": "The StgIsStorageILockBytes function indicates whether the specified byte array contains a storage object.", "StgOpenAsyncDocfileOnIFillLockBytes": "Opens an existing root asynchronous storage object on a byte-array wrapper object provided by the caller.", "StgOpenLayoutDocfile": "Opens a compound file on an ILockBytes implementation that is capable of monitoring sector data.", "StgOpenPropStg": "Opens a specified property set in a specified storage or stream object.", "StgOpenStorage": "Opens an existing root storage object in the file system.", "StgOpenStorageEx": "Opens an existing root storage object in the file system.", "StgOpenStorageOnILockBytes": "The StgOpenStorageOnILockBytes function opens an existing storage object that does not reside in a disk file, but instead has an underlying byte array provided by the caller.", "StgPropertyLengthAsVariant": "The StgPropertyLengthAsVariant function examines a SERIALIZEDPROPERTYVALUE and returns the amount of memory that this property would occupy as a PROPVARIANT.", "StgSerializePropVariant": "The StgSerializePropVariant function converts a PROPVARIANT data type to a SERIALIZEDPROPERTYVALUE data type.", "StgSetTimes": "The StgSetTimes function sets the creation, access, and modification times of the indicated file, if supported by the underlying file system.", "SwitchToFile": "The SwitchToFile method copies the current file associated with the storage object to a new file.", "SetVirtualDiskInformation": "Sets information about a virtual hard disk.", "SetVirtualDiskMetadata": "Sets a metadata item for a virtual disk.", "SetTraceCallback": "The SetTraceCallback function specifies an EventCallback function to process events for the specified event trace class.", "StartTraceA": "The StartTrace function starts an event tracing session.", "StartTraceW": "The StartTrace function starts an event tracing session.", "StopTraceA": "The StopTrace function stops the specified event tracing session.", "StopTraceW": "The StopTrace function stops the specified event tracing session.", "SendForceFeedbackCommand": "The IDirectInputEffectDriver::SendForceFeedbackCommand method changes the force-feedback state for the device.", "SendNotify": "The IDirectInputJoyConfig8::SendNotify method notifies device drivers and applications that changes to the device configuration have been made.", "SetConfig": "The IDirectInputJoyConfig8::SetConfig method creates or redefines configuration information about a joystick.", "SetCooperativeLevel": "The IDirectInputJoyConfig8::SetCooperativeLevel method establishes the cooperation level for the instance of the device.", "SetGain": "The IDirectInputEffectDriver::SetGain method sets the overall device gain.", "SetTypeInfo": "The IDirectInputJoyConfig8::SetTypeInfo method creates a new joystick type or redefines information about an existing joystick type.", "SetUserValues": "The IDirectInputJoyConfig8::SetUserValues method sets the user settings for the joystick.", "StartEffect": "The IDirectInputEffectDriver::StartEffect method begins the playback of an effect.", "StopEffect": "The IDirectInputEffectDriver::StopEffect method halts the playback of an effect.", "SaferCloseLevel": "Closes a SAFER_LEVEL_HANDLE that was opened by using the SaferIdentifyLevel function or the SaferCreateLevel function.", "SaferComputeTokenFromLevel": "Restricts a token using restrictions specified by a SAFER_LEVEL_HANDLE.", "SaferCreateLevel": "Opens a SAFER_LEVEL_HANDLE.", "SaferGetLevelInformation": "Retrieves information about a policy level.", "SaferGetPolicyInformation": "Gets information about a policy.", "SaferIdentifyLevel": "Retrieves information about a level.", "SaferiIsExecutableFileType": "Determines whether a specified file is an executable file.", "SaferRecordEventLogEntry": "Saves messages to an event log.", "SaferSetLevelInformation": "Sets the information about a policy level.", "SaferSetPolicyInformation": "Sets the global policy controls.", "SaslAcceptSecurityContext": "Wraps a standard call to the Security Support Provider Interface AcceptSecurityContext function and includes creation of SASL server cookies.", "SaslEnumerateProfilesA": "Lists the packages that provide a SASL interface.", "SaslEnumerateProfilesW": "Lists the packages that provide a SASL interface.", "SaslGetContextOption": "Retrieves the specified property of the specified SASL context.", "SaslGetProfilePackageA": "Returns the package information for the specified package.", "SaslGetProfilePackageW": "Returns the package information for the specified package.", "SaslIdentifyPackageA": "Returns the negotiate prefix that matches the specified SASL negotiation buffer.", "SaslIdentifyPackageW": "Returns the negotiate prefix that matches the specified SASL negotiation buffer.", "SaslInitializeSecurityContextA": "Wraps a standard call to the Security Support Provider Interface InitializeSecurityContext function and processes SASL server cookies from the server.", "SaslInitializeSecurityContextW": "Wraps a standard call to the Security Support Provider Interface InitializeSecurityContext function and processes SASL server cookies from the server.", "SaslSetContextOption": "Sets the value of the specified property for the specified SASL context.", "Save": "Saves the library to a new Library Description file.", "SCardAccessStartedEvent": "Returns an event handle when an event signals that the smart card resource manager is started.", "SCardAddReaderToGroupA": "Adds a reader to a reader group.", "SCardAddReaderToGroupW": "Adds a reader to a reader group.", "SCardAudit": "Writes event messages to the Windows application log Microsoft-Windows-SmartCard-Audit/Authentication.", "SCardBeginTransaction": "Starts a transaction.", "SCardCancel": "Terminates all outstanding actions within a specific resource manager context.", "SCardConnectA": "Establishes a connection between the calling application and a smart card contained by a specific reader.", "SCardConnectW": "Establishes a connection between the calling application and a smart card contained by a specific reader.", "SCardControl": "Gives you direct control of the reader.", "SCardDisconnect": "Terminates a connection previously opened between the calling application and a smart card in the target reader.", "SCardEndTransaction": "Completes a previously declared transaction, allowing other applications to resume interactions with the card.", "SCardEstablishContext": "Establishes the resource manager context within which database operations are performed.", "SCardForgetCardTypeA": "Removes an introduced smart card from the smart card subsystem.", "SCardForgetCardTypeW": "Removes an introduced smart card from the smart card subsystem.", "SCardForgetReaderA": "Removes a previously introduced reader from control by the smart card subsystem.", "SCardForgetReaderGroupA": "Removes a previously introduced smart card reader group from the smart card subsystem.", "SCardForgetReaderGroupW": "Removes a previously introduced smart card reader group from the smart card subsystem.", "SCardForgetReaderW": "Removes a previously introduced reader from control by the smart card subsystem.", "SCardFreeMemory": "Releases memory that has been returned from the resource manager using the SCARD_AUTOALLOCATE length designator.", "SCardGetAttrib": "Retrieves the current reader attributes for the given handle.", "SCardGetCardTypeProviderNameA": "Returns the name of the module that contains the provider for a given card name and provider type.", "SCardGetCardTypeProviderNameW": "Returns the name of the module that contains the provider for a given card name and provider type.", "SCardGetDeviceTypeIdA": "Gets the device type identifier of the card reader for the given reader name.", "SCardGetDeviceTypeIdW": "Gets the device type identifier of the card reader for the given reader name.", "SCardGetProviderIdA": "Returns the identifier of the primary service provider for a given card.", "SCardGetProviderIdW": "Returns the identifier of the primary service provider for a given card.", "SCardGetReaderDeviceInstanceIdA": "Gets the device instance identifier of the card reader for the given reader name.", "SCardGetReaderDeviceInstanceIdW": "Gets the device instance identifier of the card reader for the given reader name.", "SCardGetReaderIconA": "Gets an icon of the smart card reader for a given reader's name.", "SCardGetReaderIconW": "Gets an icon of the smart card reader for a given reader's name.", "SCardGetStatusChangeA": "Blocks execution until the current availability of the cards in a specific set of readers changes.", "SCardGetStatusChangeW": "Blocks execution until the current availability of the cards in a specific set of readers changes.", "SCardGetTransmitCount": "Retrieves the number of transmit operations that have completed since the specified card reader was inserted.", "SCardIntroduceCardTypeA": "Introduces a smart card to the smart card subsystem by adding it to the smart card database.", "SCardIntroduceCardTypeW": "Introduces a smart card to the smart card subsystem by adding it to the smart card database.", "SCardIntroduceReaderA": "Introduces a new name for an existing smart card reader.", "SCardIntroduceReaderGroupA": "Introduces a reader group to the smart card subsystem.", "SCardIntroduceReaderGroupW": "Introduces a reader group to the smart card subsystem.", "SCardIntroduceReaderW": "Introduces a new name for an existing smart card reader.", "SCardIsValidContext": "Determines whether a smart card context handle is valid.", "SCardListCardsA": "Searches the smart card database and provides a list of named cards previously introduced to the system by the user.", "SCardListCardsW": "Searches the smart card database and provides a list of named cards previously introduced to the system by the user.", "SCardListInterfacesA": "Provides a list of interfaces supplied by a given card.", "SCardListInterfacesW": "Provides a list of interfaces supplied by a given card.", "SCardListReaderGroupsA": "Provides the list of reader groups that have previously been introduced to the system.", "SCardListReaderGroupsW": "Provides the list of reader groups that have previously been introduced to the system.", "SCardListReadersA": "Provides the list of readers within a set of named reader groups, eliminating duplicates.", "SCardListReadersW": "Provides the list of readers within a set of named reader groups, eliminating duplicates.", "SCardListReadersWithDeviceInstanceIdA": "Gets the list of readers that have provided a device instance identifier.", "SCardListReadersWithDeviceInstanceIdW": "Gets the list of readers that have provided a device instance identifier.", "SCardLocateCardsA": "Searches the readers listed in the rgReaderStates parameter for a card with an ATR string that matches one of the card names specified in mszCards, returning immediately with the result.", "SCardLocateCardsByATRA": "Searches the readers listed in the rgReaderStates parameter for a card with a name that matches one of the card names contained in one of the SCARD_ATRMASK structures specified by the rgAtrMasks parameter.", "SCardLocateCardsByATRW": "Searches the readers listed in the rgReaderStates parameter for a card with a name that matches one of the card names contained in one of the SCARD_ATRMASK structures specified by the rgAtrMasks parameter.", "SCardLocateCardsW": "Searches the readers listed in the rgReaderStates parameter for a card with an ATR string that matches one of the card names specified in mszCards, returning immediately with the result.", "SCardReadCacheA": "Retrieves the value portion of a name-value pair from the global cache maintained by the Smart Card Resource Manager.", "SCardReadCacheW": "Retrieves the value portion of a name-value pair from the global cache maintained by the Smart Card Resource Manager.", "SCardReconnect": "Reestablishes an existing connection between the calling application and a smart card.", "SCardReleaseContext": "Closes an established resource manager context, freeing any resources allocated under that context, including SCARDHANDLE objects and memory allocated using the SCARD_AUTOALLOCATE length designator.", "SCardReleaseStartedEvent": "Decrements the reference count for a handle acquired by a previous call to the SCardAccessStartedEvent function.", "SCardRemoveReaderFromGroupA": "Removes a reader from an existing reader group.", "SCardRemoveReaderFromGroupW": "Removes a reader from an existing reader group.", "SCardSetAttrib": "Sets the given reader attribute for the given handle.", "SCardSetCardTypeProviderNameA": "Specifies the name of the module containing the provider for a given card name and provider type.", "SCardSetCardTypeProviderNameW": "Specifies the name of the module containing the provider for a given card name and provider type.", "SCardStatusA": "Provides the current status of a smart card in a reader.", "SCardStatusW": "Provides the current status of a smart card in a reader.", "SCardTransmit": "Sends a service request to the smart card and expects to receive data back from the card.", "SCardUIDlgSelectCardA": "Displays the smart card Select Card dialog box.", "SCardUIDlgSelectCardW": "Displays the smart card Select Card dialog box.", "SCardWriteCacheA": "Writes a name-value pair from a smart card to the global cache maintained by the Smart Card Resource Manager.", "SCardWriteCacheW": "Writes a name-value pair from a smart card to the global cache maintained by the Smart Card Resource Manager.", "ScopeExists": "Indicates whether the specified scope exists in this IAzApplication3 object.", "SendSAS": "Simulates a secure attention sequence.", "SetAccountInformation": "Sets the user account information used by the IIS Network Device Enrollment Service extension to perform enrollment on behalf of network devices.", "SetAclInformation": "Sets information about an access control list.", "SetApplicationPoolCredentials": "Specifies user account information for the application pool in which the Certificate Enrollment Web Service runs.", "SetCADistinguishedName": "Sets a certification authority common name and an optional distinguished name suffix.", "SetCAProperty": "Sets a property value for the certification authority.", "SetCASetupProperty": "Sets a property value for a certification authority configuration.", "SetCertificateExtension": "Adds a new extension to the certificate.", "SetCertificateProperty": "To set a property associated with a certificate.", "SetConfigEntry": "Sets configuration information for a certification authority.", "SetConfiguration": "Updates a responder service with configuration changes.", "SetContext": "Enables a thumbnail provider to return a thumbnail specific to the user's context.", "SetContextAttributesA": "Enables a transport application to set attributes of a security context for a security package.", "SetContextAttributesW": "Enables a transport application to set attributes of a security context for a security package.", "SetCredential": "Sets the credential used to contact the Certificate Enrollment Web Service.", "SetCredentialsAttributesA": "Sets the attributes of a credential, such as the name associated with the credential.", "SetCredentialsAttributesW": "Sets the attributes of a credential, such as the name associated with the credential.", "SetDatabaseInformation": "Sets the database related information for the certification authority role.", "SetDefaultValues": "Specifies a default hashing algorithm used to create a digest of the certificate request prior to signing.", "SetEntriesInAclA": "Creates a new access control list by merging new access control or audit control information into an existing ACL structure.", "SetEntriesInAclW": "Creates a new access control list by merging new access control or audit control information into an existing ACL structure.", "SetFileSecurityA": "Sets the security of a file or directory object.", "SetFileSecurityW": "Sets the security of a file or directory object.", "SetHStoreCA": "The SetHStoreCA method specifies the handle to use for the CA store.", "SetHStoreMy": "The SetHStoreMy method specifies the handle to use for the MY store.", "SetHStoreRequest": "The SetHStoreRequest method specifies the handle to use for the request store.", "SetHStoreROOT": "The SetHStoreROOT method specifies the handle to use for the Root store.", "SetKernelObjectSecurity": "Sets the security of a kernel object.", "SetMSCEPSetupProperty": "Sets a property value for a Network Device Enrollment Service configuration.", "SetNameCount": "Sets a name count for the specified distribution point in a certificate revocation list distribution information array.", "SetNamedSecurityInfoA": "Sets specified security information in the security descriptor of a specified object.", "SetNamedSecurityInfoW": "Sets specified security information in the security descriptor of a specified object.", "SetNameEntry": "Sets a name at a specified index of a distribution point in a certificate revocation list distribution information array.", "SetParentCAInformation": "Sets the parent certification authority information for a subordinate CA configuration.", "setPendingRequestInfo": "Sets properties for a pending request.", "setPendingRequestInfoWStr": "Sets properties for a pending request.", "SetPrivateKeyArchiveCertificate": "The SetPrivateKeyArchiveCertificate method specifies the certificate used to archive the private key.", "SetPrivateObjectSecurity": "Modifies a private object's security descriptor.", "SetPrivateObjectSecurityEx": "Modifies the security descriptor of a private object maintained by the resource manager calling this function.", "SetRequestAttributes": "Sets attributes in the specified pending certificate request.", "SetRestriction": "Sets the sorting and qualifying restrictions on a column.", "SetResultColumn": "Specifies a column for the result set of a customized view of the Certificate Services database.", "SetResultColumnCount": "Specifies the maximum number of columns for the result set of a customized view of the Certificate Services database.", "SetSecurity": "Updates security descriptor information for an Online Certificate Status Protocol responder server.", "SetSecurityAccessMask": "Creates an access mask that represents the access permissions necessary to set the specified object security information.", "SetSecurityDescriptorControl": "Sets the control bits of a security descriptor.", "SetSecurityDescriptorDacl": "Sets information in a discretionary access control list.", "SetSecurityDescriptorGroup": "Sets the primary group information of an absolute-format security descriptor, replacing any primary group information already present in the security descriptor.", "SetSecurityDescriptorOwner": "Sets the owner information of an absolute-format security descriptor.", "SetSecurityDescriptorRMControl": "Sets the resource manager control bits in the SECURITY_DESCRIPTOR structure.", "SetSecurityDescriptorSacl": "Sets information in a system access control list.", "SetSecurityInfo": "Sets specified security information in the security descriptor of a specified object.", "SetServiceObjectSecurity": "Sets the security descriptor of a service object.", "SetServiceStatus": "Updates the service control manager's status information for the calling service.", "SetSharedFolder": "Specifies the path to be used as the certification authority's shared folder.", "SetSignerCertificate": "The SetSignerCertificate method specifies the signer's certificate.", "SetStringProperty": "Specifies the certificate enrollment policy server ID or the display name of the CEP server.", "SetTable": "Sets the table of proxy factories.", "SetThreadToken": "Assigns an impersonation token to a thread.", "SetTokenInformation": "Sets various types of information for a specified access token.", "SetUserObjectSecurity": "Sets the security of a user object.", "SetValue": "Sets the value of the element.", "SetValueOnCertificate": "Associates a property value with an existing certificate.", "SetWebCAInformation": "Sets the certification authority information for the Certification Authority Web Enrollment role.", "ShutDown": "Called by the server engine before the server is terminated.", "SLAcquireGenuineTicket": "Gets a XrML genuine ticket acquired from the Software Licensing Server.", "SLActivateProduct": "Acquires a use license from the Software License Server.", "SLClose": "Closes the Software Licensing Client context handle.", "SLConsumeRight": "Let an application to exercise rights on a locally-stored licenses.", "SLDepositMigrationBlob": "Deposits licensing information previously collected and gathered using the SLGatherMigrationBlob function.", "SLDepositOfflineConfirmationId": "Deposits Installation ID for offline activation.", "SLDepositOfflineConfirmationIdEx": "Deposits Installation ID for offline activation.", "SLFireEvent": "Sends a specified event to a registered listener.", "SLGatherMigrationBlob": "Gathers licensing information for the provided file handle.", "SLGenerateOfflineInstallationId": "Generates the Installation ID.", "SLGenerateOfflineInstallationIdEx": "Generates Installation ID.", "SLGetApplicationInformation": "Gets information about the specified application.", "SLGetApplicationPolicy": "Queries a policy from the set stored with the SLPersistApplicationPolicies function and loaded using the SLLoadApplicationPolicies function.", "SLGetAuthenticationResult": "Gets the authentication results.", "SLGetGenuineInformation": "Gets information about the genuine state of a Windows computer.", "SLGetGenuineInformationEx": "Specifies information about the genuine status of a Windows computer.", "SLGetInstalledProductKeyIds": "This function returns a list of product key IDs associated with the specified Product SKU ID.", "SLGetLicense": "Returns the license file BLOB.", "SLGetLicenseFileId": "Checks if the license BLOB has been installed already.", "SLGetLicenseInformation": "Gets the specified license information.", "SLGetLicensingStatusInformation": "Gets the licensing status of the specified application or SKU.", "SLGetPKeyId": "Gets the registered product key ID associated with the product.", "SLGetPKeyInformation": "Gets the information of the specified product key.", "SLGetPolicyInformation": "Gets the policy information after right has been consumed successfully.", "SLGetPolicyInformationDWORD": "Gets the policy information after right has been consumed successfully.", "SLGetProductSkuInformation": "Gets information about the specified product SKU.", "SLGetReferralInformation": "Gets referral information for the specified product.", "SLGetServerStatus": "Checks the server status according to the specified URL and RequestType.", "SLGetServiceInformation": "Gets global data information.", "SLGetSLIDList": "Gets a list of SLIDs according to the input query ID type and the ID value.", "SLGetWindowsInformation": "Retrieves the value portion of a name-value pair from the licensing policy of a software component.", "SLGetWindowsInformationDWORD": "Retrieves the DWORD value portion of a name-value pair from the licensing policy of a software component.", "SLInstallLicense": "Stores the specified license and returns a license file ID.", "SLInstallProofOfPurchase": "Registers the product key with SL.", "SLInstallProofOfPurchaseEx": "Register the product key with SL.", "SLIsGenuineLocal": "Checks whether the specified application is a genuine Windows installation.", "SLIsGenuineLocalEx": "Checks whether the specified application installation is genuine.", "SLLoadApplicationPolicies": "Loads the application policies set with the SLPersistApplicationPolicies function for use by the SLGetApplicationPolicy function.", "SLOpen": "Initializes the Software Licensing Client.", "SLPersistApplicationPolicies": "Stores the current consumed policies to disk for fast policy access.", "SLPersistRTSPayloadOverride": "Associates information with the specified product for both online and phone activation.", "SLQueryLicenseValueFromApp": "Gets the value for the specified component policy.", "SLReArm": "This function is rearm application activation.", "SLRegisterEvent": "Registers an event in the SL service.", "SLSetAuthenticationData": "Sets authentication data.", "SLSetCurrentProductKey": "Sets the current product key to the previously installed product key.", "SLSetGenuineInformation": "Specifies information about the genuine status of a Windows computer.", "SLUninstallLicense": "Uninstalls the license specified by the license file ID and target user option.", "SLUninstallProofOfPurchase": "Unregisters the product key information.", "SLUnloadApplicationPolicies": "Releases the policy context handle returned by the SLLoadApplicationPolicies function.", "SLUnregisterEvent": "Unregisters a registered event in the SL service.", "SpAcceptCredentialsFn": "Called by the Local Security Authority to pass the security package any credentials stored for the authenticated security principal.", "SpAcceptLsaModeContextFn": "Server dispatch function used to create a security context shared by a server and client.", "SpAcquireCredentialsHandleFn": "Called to obtain a handle to a principal's credentials.", "SpAddCredentialsFn": "Used to add credentials for a security principal.", "SpApplyControlTokenFn": "Applies a control token to a security context.", "SpCompleteAuthTokenFn": "Completes an authentication token.", "SpDeleteCredentialsFn": "Deletes credentials from a security package's list of primary or supplemental credentials.", "SpExchangeMetaDataFn": "Sends metadata to a security support provider.", "SpExportSecurityContextFn": "Exports a security context to another process.", "SpFormatCredentialsFn": "Formats credentials to be stored in a user object.", "SpFreeCredentialsHandleFn": "Frees credentials acquired by calling the SpAcquireCredentialsHandle function.", "SpGetContextTokenFn": "Obtains the token to impersonate.", "SpGetCredentialsFn": "Retrieves the primary and supplemental credentials from the user object.", "SpGetCredUIContextFn": "Retrieves context information from a credential provider.", "SpGetExtendedInformationFn": "Provides extended information about a security package.", "SpGetInfoFn": "Provides general information about the security package, such as its name and capabilities.", "SpGetUserInfoFn": "Retrieves information about a logon session.", "SpImportSecurityContextFn": "Imports a security context from another process.", "SpInitializeFn": "Is called once by the Local Security Authority to provide a security package with general security information and a dispatch table of support functions.", "SpInitLsaModeContextFn": "The client dispatch function used to establish a security context between a server and client.", "SpInitUserModeContextFn": "Creates a user-mode security context from a packed Local Security Authority -mode context.", "SpInstanceInitFn": "Initializes user-mode security packages in an SSP/AP.", "SpLsaModeInitializeFn": "Provides the LSA with pointers to the functions implemented by each security package in the SSP/AP DLL.", "SpMarshallSupplementalCredsFn": "Converts supplemental credentials from a public format into a format suitable for local procedure calls.", "SpQueryContextAttributesFn": "Retrieves the attributes of a security context.", "SpQueryCredentialsAttributesFn": "Retrieves the attributes for a credential.", "SpQueryMetaDataFn": "Gets metadata from a security support provider when it is initiating a security context.", "SpSaveCredentialsFn": "Saves a supplemental credential to the user object.", "SpSealMessageFn": "Encrypts a message exchanged between a client and server.", "SpSetExtendedInformationFn": "Sets extended information about the security package.", "SpUnsealMessageFn": "Decrypts a message that was previously encrypted with the SpSealMessage function.", "SpUpdateCredentialsFn": "Updates the credentials associated with the specified context.", "SpUserModeInitializeFn": "Called when a security support provider/authentication package DLL is loaded into the process space of a client/server application.", "SpValidateTargetInfoFn": "Validates that the specified SECPKG_TARGETINFO structure represents a valid target.", "SslCrackCertificate": "Returns an X509Certificate structure with the information contained in the specified certificate BLOB.", "SslEmptyCacheA": "Removes the specified string from the Schannel cache.", "SslEmptyCacheW": "Removes the specified string from the Schannel cache.", "SslFreeCertificate": "Frees a certificate that was allocated by a previous call to the SslCrackCertificate function.", "SslGetServerIdentity": "Gets the identity of the server.", "SspiAcceptSecurityContextAsync": "Lets the server component of a transport application asynchronously establish a security context between the server and a remote client.", "SspiAcquireCredentialsHandleAsyncA": "Asynchronously acquires a handle to preexisting credentials of a security principal.", "SspiAcquireCredentialsHandleAsyncW": "Asynchronously acquires a handle to preexisting credentials of a security principal.", "SspiAsyncContextRequiresNotify": "Determines whether a given async context requires notification on completion of the call.", "SspiAsyncNotifyCallback": "Callback used for notifying completion of an async SSPI call.", "SspiCompareAuthIdentities": "Compares the two specified credentials.", "SspiCopyAuthIdentity": "Creates a copy of the specified opaque credential structure.", "SspiCreateAsyncContext": "Creates an instance of SspiAsyncContext which is used to track the async call.", "SspiDecryptAuthIdentity": "Decrypts the specified encrypted credential.", "SspiDecryptAuthIdentityEx": "Decrypts a SEC_WINNT_AUTH_IDENTITY_OPAQUE structure.", "SspiDeleteSecurityContextAsync": "Deletes the local data structures associated with the specified security context initiated by a previous call to the SspiInitializeSecurityContextAsync function or the SspiAcceptSecurityContextAsync function.", "SspiEncodeAuthIdentityAsStrings": "Encodes the specified authentication identity as three strings.", "SspiEncodeStringsAsAuthIdentity": "Encodes a set of three credential strings as an authentication identity structure.", "SspiEncryptAuthIdentity": "Encrypts the specified identity structure.", "SspiEncryptAuthIdentityEx": "Encrypts a SEC_WINNT_AUTH_IDENTITY_OPAQUE structure.", "SspiExcludePackage": "Creates a new identity structure that is a copy of the specified identity structure modified to exclude the specified security support provider.", "SspiFreeAsyncContext": "Frees up a context created in the call to the SspiCreateAsyncContext function.", "SspiFreeAuthIdentity": "Frees the memory allocated for the specified identity structure.", "SspiFreeCredentialsHandleAsync": "Frees up a credential handle.", "SspiGetAsyncCallStatus": "Gets the current status of an async call associated with the provided context.", "SspiGetCredUIContext": "Retrieves context information from a credential provider.", "SspiGetTargetHostName": "Gets the host name associated with the specified target.", "SspiInitializeSecurityContextAsyncA": "Initializes an async security context.", "SspiInitializeSecurityContextAsyncW": "Initializes an async security context.", "SspiIsAuthIdentityEncrypted": "Indicates whether the specified identity structure is encrypted.", "SspiIsPromptingNeeded": "Indicates whether an error returned after a call to either the InitializeSecurityContext or the AcceptSecurityContext function requires an additional call to the SspiPromptForCredentials function.", "SspiLocalFree": "Frees the memory associated with the specified buffer.", "SspiMarshalAuthIdentity": "Serializes the specified identity structure into a byte array.", "SspiPrepareForCredRead": "Generates a target name and credential type from the specified identity structure.", "SspiPrepareForCredWrite": "Generates values from an identity structure that can be passed as the values of parameters in a call to the CredWrite function.", "SspiPromptForCredentialsA": "Allows a Security Support Provider Interface application to prompt a user to enter credentials.", "SspiPromptForCredentialsW": "Allows a Security Support Provider Interface application to prompt a user to enter credentials.", "SspiReinitAsyncContext": "Marks an async context for reuse.", "SspiSetAsyncNotifyCallback": "Registers a callback that is notified on async call completion.", "SspiUnmarshalAuthIdentity": "Deserializes the specified array of byte values into an identity structure.", "SspiUnmarshalCredUIContext": "Deserializes credential information obtained by a credential provider during a previous call to the ICredentialProvider::SetSerialization method.", "SspiUpdateCredentials": "Updates the credentials associated with the specified context.", "SspiValidateAuthIdentity": "Indicates whether the specified identity structure is valid.", "SspiZeroAuthIdentity": "Fills the block of memory associated with the specified identity structure with zeros.", "StartServiceA": "Starts a service.", "StartServiceCtrlDispatcherA": "Connects the main thread of a service process to the service control manager, which causes the thread to be the service control dispatcher thread for the calling process.", "StartServiceCtrlDispatcherW": "Connects the main thread of a service process to the service control manager, which causes the thread to be the service control dispatcher thread for the calling process.", "StartServiceW": "Starts a service.", "stringToBinary": "Converts an encoded string to a binary data BLOB.", "stringToBinaryBlob": "Converts an encoded string to a binary data BLOB.", "StringToString": "Modifies the type of Unicode encoding applied to a string.", "StringToVariantByteArray": "Creates a byte array from a Unicode encoded string.", "Submit": "Submits a request to the Certificate Services server.", "SECOND_IPADDRESS": "Extracts the field 1 value from a packed IP address retrieved with the IPM_GETADDRESS message.", "SetWindowSubclass": "Installs or updates a window subclass callback.", "ShowHideMenuCtl": "Sets or removes the specified menu item's check mark attribute and shows or hides the corresponding control.", "SaveCompleted": "Indicates when the most recent save operation has been completed and that the rich edit control should hold onto a different storage for the object.", "ScrollBar_Enable": "Enables or disables a scroll bar control.", "ScrollBar_GetPos": "Retrieves the position of the scroll box in the specified scroll bar.", "ScrollBar_GetRange": "Gets the range of a scroll bar.", "ScrollBar_SetPos": "Sets the position of the scroll box in the specified scroll bar and, if requested, redraws the scroll bar to reflect the new position of the scroll box.", "ScrollBar_SetRange": "Sets the range of a scroll bar.", "ScrollBar_Show": "Shows or hides a scroll bar control.", "ScrollDC": "The ScrollDC function scrolls a rectangle of bits horizontally and vertically.", "ScrollIntoView": "Causes the text control to scroll until the text range is visible in the viewport.", "ScrollWindow": "The ScrollWindow function scrolls the contents of the specified window's client area.", "ScrollWindowEx": "The ScrollWindowEx function scrolls the contents of the specified window's client area.", "Select": "Selects the span of text that corresponds to this text range, and removes any previous selection.", "SetActive": "Sets the active state of a story.", "SetActiveStory": "Sets the active story; that is, the story that receives keyboard and mouse input.", "SetActiveSubrange": "Makes the specified subrange the active subrange of this range.", "SetAlignment": "Sets the horizontal alignment of a row.", "SetAllCaps": "Sets whether the characters are all uppercase.", "SetAnimation": "Specifies an Audio-Video Interleaved clip that runs in the dialog box.", "SetAutoLigatures": "Sets whether support for automatic ligatures is active.", "SetAutospaceAlpha": "Sets the East Asian autospace alpha state.", "SetAutospaceNumeric": "Sets the East Asian autospace numeric state.", "SetAutospaceParens": "Sets the East Asian autospace parentheses state.", "SetBackColor": "Sets the background color.", "SetBkColor": "Sets the background color for an image list.", "SetBold": "Sets whether characters are bold.", "SetCallback": "IShellFolderView::SetCallback may be altered or unavailable.", "SetCaretType": "Sets the caret type.", "SetCellAlignment": "Sets the vertical alignment of the active cell.", "SetCellBorderColors": "Sets the border colors of the active cell.", "SetCellBorderWidths": "Sets the border widths of the active cell.", "SetCellColorBack": "Sets the background color of the active cell.", "SetCellColorFore": "Sets the foreground color of the active cell.", "SetCellCount": "Sets the count of cells in a row.", "SetCellCountCache": "Sets the count of cells cached for a row.", "SetCellIndex": "Sets the index of the active cell.", "SetCellMargin": "Sets the cell margin of a row.", "SetCellMergeFlags": "Sets the merge flags of the active cell.", "SetCellShading": "Sets the shading of the active cell.", "SetCellVerticalText": "Sets the vertical-text setting of the active cell.", "SetCellWidth": "Sets the active cell width in twips.", "SetChar": "Sets the character at the starting position of the range.", "SetCharRep": "Sets the character repertoire.", "SetCompressionMode": "Sets the East Asian compression mode.", "SetCookie": "Sets the client cookie.", "SetDefaultTabStop": "Sets the default tab stop, which is used when no tab exists beyond the current display position.", "SetDocumentFont": "Sets the default character formatting for this instance of the Text Object Model engine.", "SetDocumentPara": "Sets the default paragraph formatting for this instance of the Text Object Model engine.", "SetDoubleStrike": "Sets whether characters are displayed with double horizontal lines through the center.", "SetDragCursorImage": "Creates a new drag image by combining the specified image, which is typically a mouse cursor image, with the current drag image.", "SetDropCap": "Sets the drop-cap parameters for the paragraph that contains the current range.", "SetDuplicate": "Sets the formatting for an existing paragraph by copying a given format.", "SetDuplicate2": "Sets the properties of this object by copying the properties of another text paragraph object.", "SetDvaspect": "The call does cause the object to be redrawn.", "SetEffectColor": "Specifies the color to use for special text attributes.", "SetEffects": "Sets the paragraph format effects.", "SetEffects2": "Sets the additional character format effects.", "SetEmboss": "Sets whether characters are embossed.", "SetEnd": "Sets the end position of the range.", "SetEngrave": "Sets whether characters are displayed as imprinted characters.", "SetFlags": "Deprecated.", "SetFont": "Sets the font attributes to be used for text within the preview handler.", "SetFont2": "Sets the character formatting attributes of the range.", "SetFontAlignment": "Sets the paragraph font alignment for Chinese, Japanese, Korean text.", "SetForeColor": "Sets the foreground color.", "SetFormattedText": "Replaces text with formatted text.", "SetFormattedText2": "Sets the text of this range to the formatted text of the specified range.", "SetGravity": "Sets the gravity of this range.", "SetHangingPunctuation": "Sets whether to hang punctuation symbols on the right margin when the paragraph is justified.", "SetHeight": "Sets the height of a row.", "SetHidden": "Sets whether characters are hidden.", "SetHostNames": "Sets the host names to be given to objects as they are inserted to a rich edit control.", "SetHyphenation": "Controls hyphenation for the paragraphs in the range.", "SetIconSize": "The default settings are based on the FolderTypeID which is set by the ISearchFolderItemFactory::SetFolderTypeID method.", "SetImageCount": "Resizes an existing image list.", "SetIMEInProgress": "Sets the state of the Input Method Editor in-progress flag.", "SetIndent": "Sets the indent of a row.", "SetIndents": "Sets the first-line indent, the left indent, and the right indent for a paragraph.", "SetIndex": "Changes this range to the specified unit of the story.", "SetInlineObject": "Sets or inserts the properties of an inline object for a degenerate range.", "SetItalic": "Sets whether characters are in italics.", "SetKeepTogether": "Sets whether this row is allowed to be broken across pages.", "SetKeepWithNext": "Sets whether a row should appear on the same page as the row that follows it.", "SetKerning": "Sets the minimum font size at which kerning occurs.", "SetLanguageID": "Sets the language ID or language code identifier.", "SetLineSpacing": "Sets the paragraph line-spacing rule and the line spacing for a paragraph.", "SetLinkAvailable": "Sets the value of the link-available bit in the object's flags.", "SetListAlignment": "Sets the alignment of bulleted or numbered text used for paragraphs.", "SetListLevelIndex": "Sets the list level index used for paragraphs.", "SetListStart": "Sets the starting number or Unicode value for a numbered list.", "SetListTab": "Sets the list tab setting, which is the distance between the first indent and the start of the text on the first line.", "SetListType": "Sets the type of list to be used for paragraphs.", "SetMathProperties": "Specifies the math properties to use for the document.", "SetMathZone": "Sets whether a math zone is active.", "SetModWidthPairs": "Sets whether decrease widths on pairs is active.", "SetModWidthSpace": "Sets whether increase width of whitespace is active.", "SetName": "Sets the font name.", "SetNoLineNumber": "Determines whether to suppress line numbering of paragraphs in a range.", "SetNotificationMode": "Sets the notification mode.", "SetOldNumbers": "Sets whether old-style numbers are active.", "SetOpCp": "Sets the character position in the source range's story that has desired character formatting attributes.", "SetOriginalSize": "Sets the original size of a specified image.", "SetOutline": "Sets whether characters are displayed as outlined characters.", "SetOverlapping": "Sets whether overlapping text is active.", "SetOverlayImage": "Adds a specified image to the list of images used as overlay masks.", "SetPageBreakBefore": "Controls whether there is a page break before each paragraph in a range.", "SetPara": "Sets the paragraph attributes of this range to those of the specified ITextPara object.", "SetPara2": "Sets the paragraph format attributes of a range.", "SetPoint": "Changes the range based on a specified point at or up through aligned according to Type.", "SetPosition": "Sets the coordinates of a point used for display.", "SetPositionSubSuper": "Sets the position of a subscript or superscript relative to the baseline, as a percentage of the font height.", "SetProtected": "Sets whether characters are protected against attempts to modify them.", "SetRange": "Adjusts the range endpoints to the specified values.", "SetRightIndent": "Sets the right margin of paragraph.", "SetRTL": "Sets whether this row has right-to-left orientation.", "SetSaved": "Sets the document Saved property.", "SetScaling": "Sets the font horizontal scaling percentage.", "SetScrollInfo": "The SetScrollInfo function sets the parameters of a scroll bar, including the minimum and maximum scrolling positions, the page size, and the position of the scroll box.", "SetScrollPos": "The SetScrollPos function sets the position of the scroll box in the specified scroll bar and, if requested, redraws the scroll bar to reflect the new position of the scroll box.", "SetScrollRange": "The SetScrollRange function sets the minimum and maximum scroll box positions for the specified scroll bar.", "SetShadow": "Sets whether characters are displayed as shadowed characters.", "SetSmallCaps": "Sets whether characters are in small capital letters.", "SetSnapToGrid": "Sets whether paragraph lines snap to a vertical grid that could be defined for the whole document.", "SetSpaceAfter": "Sets the amount of space that follows a paragraph.", "SetSpaceBefore": "Sets the amount of space preceding a paragraph.", "SetSpaceExtension": "Sets the East Asian space extension value.", "SetSpacing": "Sets the amount of horizontal spacing between characters.", "SetStart": "Sets the character position for the start of this range.", "SetStrikeThrough": "Sets whether characters are displayed with a horizontal line through the center.", "SetStyle": "Sets the paragraph style for the paragraphs in a range.", "SetSubscript": "Sets whether characters are displayed as subscript.", "SetSuperscript": "Sets whether characters are displayed as superscript.", "SetText": "Sets the default text to be used when there are no items in the view.", "SetText2": "Sets the text of this range.", "SetThemeAppProperties": "Sets the flags that determine how visual styles are implemented in the calling application.", "SetTrimPunctuationAtStart": "Sets whether to trim the leading space of a punctuation symbol at the start of a line.", "SetType": "Sets the story type.", "SetTypographyOptions": "Specifies the typography options for the document.", "SetUnderline": "Sets the type of underlining for the characters in a range.", "SetUnderlinePositionMode": "Sets the underline position mode.", "SetURL": "Sets the text in this range to that of the specified URL.", "SetWeight": "Sets the font weight for the characters in a range.", "SetWidowControl": "Controls the suppression of widows and orphans.", "SetWindowFeedbackSetting": "Sets the feedback configuration for a window.", "SetWindowTheme": "Causes a window to use a different set of visual style information than its class normally uses.", "SetWindowThemeAttribute": "Sets attributes to control how visual styles are applied to a specified window.", "SetWindowThemeNonClientAttributes": "Sets non-client attributes to control how visual styles are applied to a specified window.", "ShowContainerUI": "Indicates whether or not the application is to display its container UI.", "ShowScrollBar": "The ShowScrollBar function shows or hides the specified scroll bar.", "ShutdownTextServices": "Disconnects a host from a text services instance.", "StartOf": "Moves the range ends to the start of the first overlapping Unit in the range.", "Static_Enable": "Enables or disables a static control.", "Static_GetIcon": "Retrieves a handle to the icon associated with a static control that has the SS_ICON style.", "Static_GetText": "Gets the text of a static control.", "Static_GetTextLength": "Gets the number of characters in the text of a static control.", "Static_SetIcon": "Sets the icon for a static control.", "Static_SetText": "Sets the text of a static control.", "Str_SetPtrW": "Sets ppszCurrent to a copy of pszNew and frees the previous value, if necessary.", "SuffixTop": "Suffixes a string to the top string in the collection.", "Swap": "Swaps the top two strings in the collection.", "SysBeep": "Generates a system beep.", "ScriptApplyDigitSubstitution": "Applies the specified digit substitution settings to the specified script control and script state structures.", "ScriptApplyLogicalWidth": "Takes an array of advance widths for a run and generates an array of adjusted advance glyph widths.", "ScriptBreak": "Retrieves information for determining line breaks.", "ScriptCacheGetHeight": "Retrieves the height of the currently cached font.", "ScriptCPtoX": "Generates the x offset from the left end or leading edge of a run to either the leading or trailing edge of a logical character cluster.", "ScriptFreeCache": "Frees a script cache.", "ScriptGetCMap": "Retrieves the glyph indexes of the Unicode characters in a string according to either the TrueType cmap table or the standard cmap table implemented for old-style fonts.", "ScriptGetFontAlternateGlyphs": "Retrieves a list of alternate glyphs for a specified character that can be accessed through a specified OpenType feature.", "ScriptGetFontFeatureTags": "The typographic feature tags comprising the list are retrieved from the font in the supplied device context or cache.", "ScriptGetFontLanguageTags": "Retrieves a list of language tags that are available for the specified item and are supported by a specified script tag for OpenType processing.", "ScriptGetFontProperties": "Retrieves information from the font cache on the special glyphs used by a font.", "ScriptGetFontScriptTags": "Scripts comprising the list are retrieved from the font located in the supplied device context or from the script shaping engine that processes the font of the current run.", "ScriptGetGlyphABCWidth": "Retrieves the ABC width of a given glyph.", "ScriptGetLogicalWidths": "Converts the glyph advance widths for a specific font into logical widths.", "ScriptGetProperties": "Retrieves information about the current scripts.", "ScriptIsComplex": "Determines whether a Unicode string requires complex script processing.", "ScriptItemize": "Breaks a Unicode string into individually shapeable items.", "ScriptItemizeOpenType": "Breaks a Unicode string into individually shapeable items and provides an array of feature tags for each shapeable item for OpenType processing.", "ScriptJustify": "Creates an advance widths table to allow text justification when passed to the ScriptTextOut function.", "ScriptLayout": "Converts an array of run embedding levels to a map of visual-to-logical position and/or logical-to-visual position.", "ScriptPlace": "Generates glyph advance width and two-dimensional offset information from the output of ScriptShape.", "ScriptPlaceOpenType": "Generates glyphs and visual attributes for a Unicode run with OpenType information from the output of ScriptShapeOpenType.", "ScriptPositionSingleGlyph": "Positions a single glyph with a single adjustment using a specified feature provided in the font for OpenType processing.", "ScriptRecordDigitSubstitution": "Reads the National Language Support native digit and digit substitution settings and records them in a SCRIPT_DIGITSUBSTITUTE structure.", "ScriptShape": "Generates glyphs and visual attributes for a Unicode run.", "ScriptShapeOpenType": "Generates glyphs and visual attributes for a Unicode run with OpenType information.", "ScriptString_pcOutChars": "Returns a pointer to the length of a string after clipping.", "ScriptString_pLogAttr": "Returns a pointer to a logical attributes buffer for an analyzed string.", "ScriptString_pSize": "Returns a pointer to a SIZE structure for an analyzed string.", "ScriptStringAnalyse": "Analyzes a plain text string.", "ScriptStringCPtoX": "Retrieves the x coordinate for the leading or trailing edge of a character position.", "ScriptStringFree": "Frees a SCRIPT_STRING_ANALYSIS structure.", "ScriptStringGetLogicalWidths": "Converts visual widths into logical widths.", "ScriptStringGetOrder": "Creates an array that maps an original character position to a glyph position.", "ScriptStringOut": "Displays a string generated by a prior call to ScriptStringAnalyse and optionally adds highlighting.", "ScriptStringValidate": "Checks a SCRIPT_STRING_ANALYSIS structure for invalid sequences.", "ScriptStringXtoCP": "Converts an x coordinate to a character position.", "ScriptSubstituteSingleGlyph": "Enables substitution of a single glyph with one alternate form of the same glyph for OpenType processing.", "ScriptTextOut": "Displays text for the specified script shape and place information.", "ScriptXtoCP": "Generates the leading or trailing edge of a logical character cluster from the x offset of a run.", "SetCalendarInfoA": "Sets an item of locale information for a calendar.", "SetCalendarInfoW": "Sets an item of locale information for a calendar.", "SetDefaultIME": "Allows the Microsoft IME to become the default IME in the keyboard layout.", "SetHeader": "Sets a dictionary header in a dictionary file.", "SetLocaleInfoA": "Sets an item of information in the user override portion of the current locale.", "SetLocaleInfoW": "Sets an item of information in the user override portion of the current locale.", "SetOptionValue": "Sets the value associated with the given option.", "SetProcessPreferredUILanguages": "Sets the process preferred UI languages for the application process.", "SetThreadLocale": "Sets the current locale of the calling thread.", "SetThreadPreferredUILanguages": "Sets the thread preferred UI languages for the current thread.", "SetThreadUILanguage": "Sets the user interface language for the current thread.", "SetUserGeoID": "Sets the geographical location identifier for the user.", "SetUserGeoName": "Sets the geographic location for the current user to the specified two-letter International Organization for Standardization code.", "SORTIDFROMLCID": "Retrieves a sort order identifier from a locale identifier.", "SORTVERSIONFROMLCID": "Retrieves the sort version from a locale identifier.", "SUBLANGID": "Extracts a sublanguage identifier from a language identifier.", "Suggest": "Retrieves spelling suggestions for the supplied text.", "SetDefaultDllDirectories": "Specifies a default set of directories to search when the calling process loads a DLL.", "SizeofResource": "Retrieves the size, in bytes, of the specified resource.", "SetCaretBlinkTime": "Sets the caret blink time to the specified number of milliseconds.", "SetCaretPos": "Moves the caret to the specified coordinates.", "SetCursor": "Sets the cursor shape.", "SetCursorPos": "Moves the cursor to the specified screen coordinates.", "SetMenu": "Assigns a new menu to the specified window.", "SetMenuDefaultItem": "Sets the default menu item for the specified menu.", "SetMenuInfo": "Sets information for a specified menu.", "SetMenuItemBitmaps": "Associates the specified bitmap with a menu item.", "SetMenuItemInfoA": "Changes information about a menu item.", "SetMenuItemInfoW": "Changes information about a menu item.", "SetPhysicalCursorPos": "Sets the position of the cursor in physical coordinates.", "SetSystemCursor": "Enables an application to customize the system cursors.", "ShowCaret": "Makes the caret visible on the screen at the caret's current position.", "ShowCursor": "Displays or hides the cursor.", "StringCbCatA": "Concatenates one string to another string.", "StringCbCatExA": "Concatenates one string to another string.", "StringCbCatExW": "Concatenates one string to another string.", "StringCbCatNA": "Concatenates the specified number of bytes from one string to another string.", "StringCbCatNExA": "Concatenates the specified number of bytes from one string to another string.", "StringCbCatNExW": "Concatenates the specified number of bytes from one string to another string.", "StringCbCatNW": "Concatenates the specified number of bytes from one string to another string.", "StringCbCatW": "Concatenates one string to another string.", "StringCbCopyA": "Copies one string to another.", "StringCbCopyExA": "Copies one string to another.", "StringCbCopyExW": "Copies one string to another.", "StringCbCopyNA": "Copies the specified number of bytes from one string to another.", "StringCbCopyNExA": "Copies the specified number of bytes from one string to another.", "StringCbCopyNExW": "Copies the specified number of bytes from one string to another.", "StringCbCopyNW": "Copies the specified number of bytes from one string to another.", "StringCbCopyW": "Copies one string to another.", "StringCbGetsA": "Gets one line of text from stdin, up to and including the newline character.", "StringCbGetsExA": "Gets one line of text from stdin, up to and including the newline character.", "StringCbGetsExW": "Gets one line of text from stdin, up to and including the newline character.", "StringCbGetsW": "Gets one line of text from stdin, up to and including the newline character.", "StringCbLengthA": "Determines whether a string exceeds the specified length, in bytes.", "StringCbLengthW": "Determines whether a string exceeds the specified length, in bytes.", "StringCbPrintf_lA": "The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.", "StringCbPrintf_lExA": "The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.", "StringCbPrintf_lExW": "The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.", "StringCbPrintf_lW": "The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.", "StringCbPrintfA": "Writes formatted data to the specified string.", "StringCbPrintfExA": "Writes formatted data to the specified string.", "StringCbPrintfExW": "Writes formatted data to the specified string.", "StringCbPrintfW": "Writes formatted data to the specified string.", "StringCbVPrintf_lA": "The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.", "StringCbVPrintf_lExA": "The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.", "StringCbVPrintf_lExW": "The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.", "StringCbVPrintf_lW": "The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.", "StringCbVPrintfA": "Writes formatted data to the specified string using a pointer to a list of arguments.", "StringCbVPrintfExA": "Writes formatted data to the specified string using a pointer to a list of arguments.", "StringCbVPrintfExW": "Writes formatted data to the specified string using a pointer to a list of arguments.", "StringCbVPrintfW": "Writes formatted data to the specified string using a pointer to a list of arguments.", "StringCchCatA": "Concatenates one string to another string.", "StringCchCatExA": "Concatenates one string to another string.", "StringCchCatExW": "Concatenates one string to another string.", "StringCchCatNA": "Concatenates the specified number of characters from one string to another string.", "StringCchCatNExA": "Concatenates the specified number of characters from one string to another string.", "StringCchCatNExW": "Concatenates the specified number of characters from one string to another string.", "StringCchCatNW": "Concatenates the specified number of characters from one string to another string.", "StringCchCatW": "Concatenates one string to another string.", "StringCchCopyA": "Copies one string to another.", "StringCchCopyExA": "Copies one string to another.", "StringCchCopyExW": "Copies one string to another.", "StringCchCopyNA": "Copies the specified number of characters from one string to another.", "StringCchCopyNExA": "Copies the specified number of characters from one string to another.", "StringCchCopyNExW": "Copies the specified number of characters from one string to another.", "StringCchCopyNW": "Copies the specified number of characters from one string to another.", "StringCchCopyW": "Copies one string to another.", "StringCchGetsA": "Gets one line of text from stdin, up to and including the newline character.", "StringCchGetsExA": "Gets one line of text from stdin, up to and including the newline character.", "StringCchGetsExW": "Gets one line of text from stdin, up to and including the newline character.", "StringCchGetsW": "Gets one line of text from stdin, up to and including the newline character.", "StringCchLengthA": "Determines whether a string exceeds the specified length, in characters.", "StringCchLengthW": "Determines whether a string exceeds the specified length, in characters.", "StringCchPrintf_lA": "The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.", "StringCchPrintf_lExA": "The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.", "StringCchPrintf_lExW": "The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.", "StringCchPrintf_lW": "The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.", "StringCchPrintfA": "Writes formatted data to the specified string.", "StringCchPrintfExA": "Writes formatted data to the specified string.", "StringCchPrintfExW": "Writes formatted data to the specified string.", "StringCchPrintfW": "Writes formatted data to the specified string.", "StringCchVPrintf_lA": "The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.", "StringCchVPrintf_lExA": "The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.", "StringCchVPrintf_lExW": "The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.", "StringCchVPrintf_lW": "The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.", "StringCchVPrintfA": "Writes formatted data to the specified string using a pointer to a list of arguments.", "StringCchVPrintfExA": "Writes formatted data to the specified string using a pointer to a list of arguments.", "StringCchVPrintfExW": "Writes formatted data to the specified string using a pointer to a list of arguments.", "StringCchVPrintfW": "Writes formatted data to the specified string using a pointer to a list of arguments.", "SaveInKnownFolder": "Saves the library to a new file in a specified known folder.", "SaveProperties": "Saves properties associated with a file or folder.", "SaveViewState": "Deprecated.", "SaveWithUI": "Presents the user with explanatory error UI if the save action fails.", "Scale": "Adjusts the size of an image.", "ScreenSaverConfigureDialog": "A screen saver that allows user configuration must define this function.", "ScreenSaverProc": "Receives messages sent to the specified screen saver window.", "SelectAndEditItem": "INewMenuClient::SelectAndEditItem method", "SelectAndPositionItem": "Selects and positions an item in a Shell View.", "SelectAndPositionItems": "Allows the selection and positioning of items visible in the folder's view.", "SelectedItems": "Gets a FolderItems object that represents all of the selected items in the view.", "SelectItem": "Changes the selection state of one or more items within the Shell view window.", "SelectItemRelative": "Selects an item relative to the current item.", "SelectPage": "Selects a specified page in a multipage image.", "SendControlMsg": "Sends control messages to either the toolbar or the status bar in a Windows Explorer window.", "SetAcceleratorMenu": "Implemented by a derived class to define menu accelerators that can be used in a call to TranslateAcceleratorSB.", "SetAccelerators": "Sets accelerators.", "SetAccessibleName": "Sets text that is retrieved by IAccessible::get_accName which accessibility tools use to obtain the Name Property of an object.", "SetActivateState": "The derived class makes this call to the base class.", "SetActiveAlt": "Marks a taskbar item as active but does not visually activate it.", "SetAdjacentDisplayEdges": "Sets whether the application window will be adjacent to the edge of the emulated display.", "SetAppAsDefault": "For more information, see Default Programs.", "SetAppAsDefaultAll": "Sets an application as the default for all of the registered associations of any type for that application.", "SetAppID": "Specifies a unique application-defined Application User Model ID that identifies the object as a handler for a specific file type.", "SetApplicationViewMinWidth": "Sets the desired minimum width of the application design mode window.", "SetApplicationViewOrientation": "Sets the window orientation used for the design mode window.", "SetApplicationViewState": "Sets a spoofed application view state to be used for a Windows Store app running in design mode.", "SetArguments": "Sets the command-line arguments for a Shell link object.", "SetAsDefFolderSettings": "Sets the folder's current view mode as the default view mode for all folders.", "SetAsyncMode": "Called by a drop source to specify whether the data object supports asynchronous data extraction.", "SetAutomationObject": "Replaces the internal automation object of the IShellView.", "SetBackgroundColor": "Sets the background color of the preview handler.", "SetBalloonInfo": "Sets the information to be displayed in a balloon notification.", "SetBalloonRetry": "Specifies the conditions for trying to display user information when the first attempt fails.", "SetBandAvailability": "Sets the availability of a specified band.", "SetBandInfoSFB": "Uses the information in a BANDINFOSFB structure to set the band information for a IShellFolderBand object.", "SetBandSiteInfo": "Sets information about the band site.", "SetBandState": "Set the state of a band in the band site.", "SetBorderSpaceDW": "Allocates and reserves border space for an IDockingWindow object.", "SetCancelButtonLabel": "Replaces the default text Cancel on the common file dialog's Cancel button.", "SetCancelInformation": "Sets information that is posted when a user selects Cancel from the progress UI.", "SetCancelMsg": "Sets a message to be displayed if the user cancels the operation.", "SetCascade": "Sets a cascade folder.", "SetCheckboxValue": "Enables a Logon UI and Credential UI to indicate that a checkbox value has changed.", "SetCheckButtonState": "Sets the state of a check button in the dialog.", "SetCheckState": "Sets the state of a check box item in a tree-view control.", "SetClient": "Sets the client specified by punkClient.", "SetClientGuid": "Enables a calling application to associate a GUID with a dialog's persisted state.", "SetClientTitle": "Specifies and stores the title of the prompt window.", "SetClipboard": "SetClipboard may be altered or unavailable.", "SetCodePage": "Sets the numeric value of the ANSI code page to a specified code page identifier.", "SetCollectedProperties": "Specifies which properties will be collected in the save dialog.", "SetColor": "Sets the color, as specified.", "SetColumnInfo": "Sets the state for a specified column.", "SetColumns": "Sets the collection of columns for the view to display.", "SetComboBoxSelectedValue": "Enables a Logon UI and Credential UI to indicate that a combo box value has been selected.", "SetCompositionState": "Sets the composition state.", "SetCondition": "Sets the ICondition of the search.", "SetContractDelegateWindow": "Associates an app window other than the primary foreground window with an app's contracts.", "SetControlItemState": "Sets the current state of an item in a container control found in the dialog.", "SetControlItemText": "Sets the text of a control item.", "SetControlLabel": "Sets the text associated with a control, such as button text or an edit box label.", "SetControlState": "Sets the current visibility and enabled states of a given control.", "SetControlStyle": "Sets the display styles for the namespace object's treeview controls.", "SetControlStyle2": "Sets the extended display styles for the namespace object's treeview controls.", "SetCreateFlags": "Set the flags that will be included in the call to CreateProcess.", "SetCurrentFolderFlags": "Sets and applies specified folder flags.", "SetCurrentProcessExplicitAppUserModelID": "Specifies a unique application-defined Application User Model ID that identifies the current process to the taskbar.", "SetCurrentViewMode": "Sets the selected folder's view mode.", "SetDataObject": "Wraps an IDataObject instance as a Windows Runtime DataPackage.", "SetDefaultExtension": "Sets the default extension to be added to file names.", "SetDefaultFolder": "Sets the folder used as a default if there is not a recently used folder value available.", "SetDefaultIcon": "Sets the default icon.", "SetDefaultSaveFolder": "Sets the default target folder that the library will use for save operations.", "SetDeselected": "Called when a credential loses selection.", "SetDirectory": "Sets a new working directory.", "SetEditBoxText": "Sets the text in an edit box control found in the dialog.", "SetEmptyText": "Sets the default empty text.", "SetEncoderParams": "Sets encoder parameters.", "SetEnumReadyCallback": "Sets a callback on the view that is notified when the initial view enumeration is complete.", "SetErrorURL": "Specifies the URL of a page that displays when a user experiences an error while navigating through the wizard extension pages.", "SetExtendedTileViewProperties": "Sets the list of extended tile properties for an item.", "SetFieldBitmap": "Communicates to the Logon UI or Credential UI that a tile image field has changed and that the UI should be updated.", "SetFieldCheckbox": "Communicates to the Logon UI or Credential UI that a checkbox field has changed and that the UI should be updated.", "SetFieldComboBoxSelectedItem": "Communicates to the Logon UI or Credential UI that the selected item in a combo box has changed and that the UI should be updated.", "SetFieldInteractiveState": "Communicates to the Logon UI or Credential UI that the interactivity state of a field has changed and that the UI should be updated.", "SetFieldOptions": "Specifies whether a specified field in the logon or credential UI should display a password reveal glyph or is expected to receive an e-mail address.", "SetFieldState": "Communicates to the Logon UI or Credential UI that a field state has changed and that the UI should be updated.", "SetFieldString": "Communicates to the Logon UI or Credential UI that the string associated with a field has changed and that the UI should be updated.", "SetFieldSubmitButton": "Enables credentials to set the field that the submit button appears adjacent to.", "SetFileID": "Sets the unique file identifier for the current file.", "SetFileName": "Sets the file name that appears in the File name edit box when that dialog box is opened.", "SetFileNameLabel": "Sets the text of the label next to the file name edit box.", "SetFileTypeIndex": "Sets the file type that appears as selected in the dialog.", "SetFileTypes": "Sets the file types that the dialog can open or save.", "SetFilter": "Exposed by a host to allow clients to pass the host their IUnknown interface pointers.", "SetFindData": "This information is used by ParseDisplayName.", "SetFocus": "Sets the keyboard focus to the specified window.", "SetFolder": "Sets a folder that is always selected when the dialog is opened, regardless of previous user action.", "SetFolderLogicalViewMode": "The default settings are based on the FolderTypeID which is set by the ISearchFolderItemFactory::SetFolderTypeID method.", "SetFolderSettings": "Sets the folder settings for the current view.", "SetFolderType": "Sets the library's folder type.", "SetFolderTypeID": "Sets a search folder type ID, as specified.", "SetFolderViewOptions": "Sets specified options for the view.", "SetGroupBy": "Groups the view by the given property key and direction.", "SetGroupColumn": "Sets a group column, as specified.", "SetGroupSubsetCount": "Turns on group subsetting and sets the number of visible rows of items in each group.", "SetHandlerClsid": ".", "SetHandlerProgressText": "Sets the content of an information field for the handler while that handler is performing a synchronization.", "SetHistoryObject": "Deprecated.", "SetHotkey": "Sets a keyboard shortcut for a Shell link object.", "SetHotKey": "Sets the hot key for the application.", "SetIcon": "Sets the default icon for the library.", "SetIconInfo": "Sets the notification area icon associated with specific user information.", "SetIconLocation": "Sets the location of the icon for a Shell link object.", "SetIDList": "Sets the pointer to an item identifier list for a Shell link object.", "SetInitialURL": "Sets the URL of the initial server-provided HTML page in a hosted wizard.", "SetIsOnLockScreen": "This method determines whether or not the application, in design mode, can display information on the Windows 8 lock screen.", "SetItem": "IParseAndCreateItem::SetItem method", "SetItemAlloc": "Provides the CItemIDFactory an IMalloc interface used to allocate and free item IDs.", "SetItemChoices": "Sets the array of indexes that represents which items the user wants to keep.", "SetItemCustomState": "Sets the state of the checkbox associated with the Shell item.", "SetItemHeight": "Sets the specified item height.", "SetItemPos": "Sets the position of the given item.", "SetItemState": "Sets state information for a Shell item.", "SetItemStatus": "Called by the synchronization manager in a registered application's handler to change the status of an item in the following two cases:_between the time the handler has returned from the ISyncMgrSynchronize::PrepareForSync method and called the PrepareForSyncCompleted callback method, or after the handler has returned from the ISyncMgrSynchronize::Synchronize method but has not yet called the SynchronizeCompleted callback method.", "SetJunctionCLSID": "Sets the class identifier of the object that implements IShellFolder, if the current item is a junction point.", "SetKey": "Sets the registry key from which to load the DefaultIcon value.", "SetKeyState": "Sets a value based on the current state of the keys CTRL and SHIFT.", "SetLine": "Displays a message in the progress dialog.", "SetLocalPath": "Sets and stores the path to the file.", "SetMenuContextHelpId": "Associates a Help context identifier with a menu.", "SetMenuRestrictions": ".", "SetMenuSB": "Installs the composite menu in the view window.", "SetMenuToolbar": "Adds a menu to the menuband.", "SetMode": "Sets progress dialog operations mode.", "SetNamedValue": "Sets the value of a named property.", "SetNameOf": "Sets the display name of a file object or subfolder, changing the item identifier in the process.", "SetNativeDisplayOrientation": "Sets the orientation of the emulated display for the design mode window.", "SetNativeDisplaySize": "Sets a spoofed native display size to be used for a Windows Store app running in design mode.", "SetNavigateState": "Deprecated.", "SetNavigationRoot": "Users can not navigate above this location.", "SetNoIcons": "Sets whether icons are displayed in a folder band.", "SetNormalIcon": "Sets the normal icon.", "SetNoShowUI": "Indicates whether any UI associated with the selected Shell item should be displayed.", "SetNoText": "Sets whether text is displayed in a folder band.", "SetObjectCount": "SetObjectCount is no longer available.", "SetObscured": "Coordinates obscured items on a toolbar with items in a menu.", "SetOkButtonLabel": "Sets the text of the Open or Save button.", "SetOpenIcon": "Sets the icon that allows containers to specify an open look.", "SetOperation": "Sets which progress dialog operation is occurring, and whether we are in pre-flight or undo mode.", "SetOperationFlags": "Sets parameters for the current operation.", "SetOptions": "Sets the library options.", "SetOverlayIcon": "Applies an overlay to a taskbar button to indicate application status or a notification to the user.", "SetOwner": "Deprecated.", "SetOwnerWindow": "Sets the parent or owner window for progress and dialog windows.", "SetParameters": "Provides parameter values for the verb.", "SetParentAndItem": "Sets the parent of an item and the parent's child ID.", "SetPath": "Sets the path and file name for the target of a Shell link object.", "SetPinnedWindow": "Sets the pinned window.", "SetPoints": "SetPoints may be altered or unavailable.", "SetPresenterChoice": "Sets what kind of choice was made about a sync manager conflict resolution and whether to apply the choice to all subsequent conflicts in the set.", "SetPresenterNextStep": "Sets what the presenter wants to do as the next step in the sync manager conflict resolution.", "SetProcessReference": "Provides a Component Object Model object that allows hosted Shell extensions and other components to prevent their host process from closing prematurely.", "SetProgID": "Sets the ProgID of an object.", "SetProgress": "Updates the progress dialog box with the current state of the operation.", "SetProgress64": "Updates the progress dialog box with the current state of the operation.", "SetProgressCallback": "Sets the ISyncMgrSynchronizeCallback interface.", "SetProgressDialog": "Specifies a dialog box used to display the progress of the operation.", "SetProgressMessage": "Not implemented.", "SetProgressState": "Sets the type and state of the progress indicator displayed on a taskbar button.", "SetProgressValue": "Displays or updates a progress bar hosted in a taskbar button to show the specific percentage completed of the full operation.", "SetProperties": "Sets properties that should be applied to an item.", "SetPropertyBag": "Sets the name of the property bag.", "SetPropertyKey": "Sets the property key.", "SetPropertyStorage": "Initializes the property store instance from the specified serialized property storage data.", "SetProviderFilter": "Limits the set of users in the array to either local accounts or Microsoft accounts.", "SetRect": "The SetRect function sets the coordinates of the specified rectangle.", "SetRedraw": "Sets redraw on and off.", "SetReferent": "Sets the referent of the shortcut object.", "SetReferrer": "Deprecated.", "SetRelativePath": "Sets the relative path to the Shell link object.", "SetSaveAsItem": "Sets an item to be used as the initial entry in a Save As dialog.", "SetScaleFactor": "Sets a spoofed device scale factor to be used for a Windows Store app running in design mode.", "SetScope": "Sets search scope, as specified.", "SetSelected": "Called when a credential is selected.", "SetSelectedControlItem": "Sets the selected state of a particular item in an option button group or a combo box found in the dialog.", "SetSelection": "Provides the Shell item array that specifies the items included in the selection.", "SetSerialization": "Sets the serialization characteristics of the credential provider.", "SetShellFolder": "Specifies the folder for the menu band to browse.", "SetShortcutIcon": "Sets the icon for a shortcut to the object.", "SetShowCmd": "The show command sets the initial show state of the window.", "SetShowWindow": "Sets the specified window's visual state.", "SetSlideshow": "Specifies the images to use for the desktop wallpaper slideshow.", "SetSlideshowOptions": "Sets the desktop wallpaper slideshow settings for shuffle and timing.", "SetSortColumns": "Creates a list of sort column directions, as specified.", "SetSource": "Sets an alternate path or URL for the source of a file transfer.", "SetStacks": "Creates a list of stack keys, as specified.", "SetStatusMessage": "Enables the credential provider to set status messages as it attempts to complete IConnectableCredentialProviderCredential::Connect.", "SetStatusTextSB": "Sets and displays status text about the in-place object in the container's frame-window status bar.", "SetStringValue": "Enables a Logon UI or Credential UI to update the text for a CPFT_EDIT_TEXT fields as the user types in them.", "SetSubMenu": "Sets the given menu bar interface to be the submenu of the calling application object's interface.", "SetTabActive": "Informs the taskbar that a tab or document window has been made the active window.", "SetTabOrder": "Inserts a new thumbnail into a tabbed-document interface application's group flyout or moves an existing thumbnail to a new position in the application's group.", "SetTabProperties": "Allows a tab to specify whether the main application frame window or the tab window should be used as a thumbnail or in the peek feature under certain circumstances.", "SetTargetSessionId": "Sets the session identifier.", "SetTextColor": "Sets the color of the text within the preview handler.", "SetTheme": "Sets the desktop theme for the current window only.", "SetThumbnailClip": "Selects a portion of a window's client area to display as that window's thumbnail in the taskbar.", "SetThumbnailStream": "This method is for internal use only and can only be called by the photos application.", "SetThumbnailTooltip": "Specifies or updates the text of the tooltip that is displayed when the mouse pointer rests on an individual preview thumbnail in a taskbar button flyout.", "SetTileViewProperties": "Set the list of tile properties for an item.", "SetTitle": "Deprecated.", "SetToolbarItems": "Adds toolbar items to Windows Explorer's toolbar.", "SetTopBrowser": "Deprecated.", "SetUsageScenario": "Called whenever the credential provider is initialized.", "SetUserArray": "Called by the system during the initialization of a logon or credential UI to retrieve the set of users to show in that UI.", "SetViewModeAndIconSize": "Sets and applies the view mode and image size.", "SetViewProperty": "Caches a property for an item in the view's property cache.", "SetVisibleColumns": "Creates a new column list whose columns are all visible, given an array of PROPERTYKEY structures.", "SetWallpaper": "Sets the desktop wallpaper.", "SetWatermark": "Provides a bitmap to use as a watermark.", "SetWindow": "Sets the parent window of the previewer window, as well as the area within the parent to be used for the previewer window.", "SetWindowContextHelpId": "Associates a Help context identifier with the specified window.", "SetWorkingDirectory": "Sets the name of the working directory for a Shell link object.", "SHAddFolderPathToLibrary": "Adds a folder to a library.", "SHAddFromPropSheetExtArray": "Adds pages to a property sheet extension array created by SHCreatePropSheetExtArray.", "SHAddToRecentDocs": "This function can also be used to clear all usage data.", "SHAlloc": "Allocates memory from the Shell's heap.", "SHAllocShared": "SHAllocShared may be altered or unavailable.", "SHAnsiToAnsi": "Copies an ANSI string.", "SHAnsiToUnicode": "Converts a string from the ANSI code page to the Unicode code page.", "SHAppBarMessage": "Sends an appbar message to the system.", "ShareExists": "Queries whether the Users or Public folder is shared.", "SharePrinters": "Shares all local printers connected to a computer, enabling them to be discovered by other computers on the network.", "SHAssocEnumHandlers": "Returns an enumeration object for a specified set of file name extension handlers.", "SHAssocEnumHandlersForProtocolByApplication": "Gets an enumeration interface that provides access to handlers associated with a given protocol.", "SHAutoComplete": "Instructs system edit controls to use AutoComplete to help complete URLs or file system paths.", "SHBindToFolderIDListParent": "Given a Shell namespace item specified in the form of a folder, and an item identifier list relative to that folder, this function binds to the parent of the namespace item and optionally returns a pointer to the final component of the item identifier list.", "SHBindToFolderIDListParentEx": "Extends the SHBindToFolderIDListParent function by allowing the caller to specify a bind context.", "SHBindToObject": "Retrieves and binds to a specified object by using the Shell namespace IShellFolder::BindToObject method.", "SHBindToParent": "Takes a pointer to a fully qualified item identifier list, and returns a specified interface pointer on the parent object.", "SHBrowseForFolderA": "Displays a dialog box that enables the user to select a Shell folder.", "SHBrowseForFolderW": "Displays a dialog box that enables the user to select a Shell folder.", "SHChangeNotification_Lock": "Locks the shared memory associated with a Shell change notification event.", "SHChangeNotification_Unlock": "Unlocks shared memory for a change notification.", "SHChangeNotify": "Notifies the system of an event that an application has performed.", "SHChangeNotifyDeregister": "Unregisters the client's window process from receiving SHChangeNotify messages.", "SHChangeNotifyRegister": "Registers a window to receive notifications from the file system or Shell, if the file system supports notifications.", "SHChangeNotifyRegisterThread": "Enables asynchronous register and deregister of a thread.", "SHCloneSpecialIDList": "SHCloneSpecialIDList may be altered or unavailable.", "SHCLSIDFromString": "Takes the string form of a class identifier and creates the corresponding CLSID.", "SHCoCreateInstance": "SHCoCreateInstance may be altered or unavailable.", "SHCopyKeyA": "Recursively copies the subkeys and values of the source subkey to the destination key.", "SHCopyKeyW": "Recursively copies the subkeys and values of the source subkey to the destination key.", "SHCreateAssociationRegistration": "Creates an IApplicationAssociationRegistration object based on the stock implementation of the interface provided by Windows.", "SHCreateDataObject": "Creates a data object in a parent folder.", "SHCreateDefaultContextMenu": "Creates an object that represents the Shell's default context menu implementation.", "SHCreateDefaultExtractIcon": "Creates a standard icon extractor, whose defaults can be further configured via the IDefaultExtractIconInit interface.", "SHCreateDefaultPropertiesOp": "Creates a file operation that sets the default properties on the Shell item that have not already been set.", "SHCreateDirectory": "Creates a new file system folder.", "SHCreateDirectoryExA": "Creates a new file system folder, with optional security attributes.", "SHCreateDirectoryExW": "Creates a new file system folder, with optional security attributes.", "SHCreateFileExtractIconA": "SHCreateFileExtractIcon may be altered or unavailable.", "SHCreateFileExtractIconW": "SHCreateFileExtractIcon may be altered or unavailable.", "SHCreateItemFromIDList": "Creates and initializes a Shell item object from a pointer to an item identifier list.", "SHCreateItemFromParsingName": "Creates and initializes a Shell item object from a parsing name.", "SHCreateItemFromRelativeName": "Creates and initializes a Shell item object from a relative parsing name.", "SHCreateItemInKnownFolder": "Creates a Shell item object for a single file that exists inside a known folder.", "SHCreateItemWithParent": "Create a Shell item, given a parent folder and a child item ID.", "SHCreateLibrary": "Creates an IShellLibrary object.", "SHCreateMemStream": "Creates a memory stream using a similar process to CreateStreamOnHGlobal.", "SHCreateProcessAsUserW": "Creates a new user-mode process and its primary thread to run a specified executable file.", "SHCreatePropSheetExtArray": "SHCreatePropSheetExtArray may be altered or unavailable.", "SHCreateQueryCancelAutoPlayMoniker": "Deprecated.", "SHCreateShellFolderView": "Creates a new instance of the default Shell folder view object.", "SHCreateShellFolderViewEx": "Creates a new instance of the default Shell folder view object.", "SHCreateShellItem": "Creates an IShellItem object.", "SHCreateShellItemArray": "Creates a Shell item array object.", "SHCreateShellItemArrayFromDataObject": "Creates a Shell item array object from a data object.", "SHCreateShellItemArrayFromIDLists": "Creates a Shell item array object from a list of ITEMIDLIST structures.", "SHCreateShellItemArrayFromShellItem": "Creates an array of one element from a single Shell item.", "SHCreateShellPalette": "Creates a halftone palette for the specified device context.", "SHCreateStdEnumFmtEtc": "SHCreateStdEnumFmtEtc may be altered or unavailable.", "SHCreateStreamOnFileA": "SHCreateStreamOnFile may be altered or unavailable.", "SHCreateStreamOnFileEx": "Opens or creates a file and retrieves a stream to read or write to that file.", "SHCreateStreamOnFileW": "SHCreateStreamOnFile may be altered or unavailable.", "SHCreateThread": "Creates a thread.", "SHCreateThreadRef": "Creates a per-thread reference to a Component Object Model object.", "SHCreateThreadWithHandle": "Creates a new thread and retrieves its handle.", "SHDefExtractIconA": "Provides a default handler to extract an icon from a file.", "SHDefExtractIconW": "Provides a default handler to extract an icon from a file.", "SHDeleteEmptyKeyA": "Deletes an empty key.", "SHDeleteEmptyKeyW": "Deletes an empty key.", "SHDeleteKeyA": "This function removes the key and all the key's values from the registry.", "SHDeleteKeyW": "This function removes the key and all the key's values from the registry.", "SHDeleteValueA": "Deletes a named value from the specified registry key.", "SHDeleteValueW": "Deletes a named value from the specified registry key.", "SHDestroyPropSheetExtArray": "Frees property sheet handlers that are pointed to an array created by SHCreatePropSheetExtArray.", "SHDoDragDrop": "Supports drag source creation on demand, as well as drag images.", "Shell_GetCachedImageIndex": "Shell_GetCachedImageIndex may be altered or unavailable.", "Shell_GetCachedImageIndexA": "Shell_GetCachedImageIndex may be altered or unavailable.", "Shell_GetCachedImageIndexW": "Shell_GetCachedImageIndex may be altered or unavailable.", "Shell_GetImageLists": "Retrieves system image lists for large and small icons.", "Shell_MergeMenus": "Shell_MergeMenus may be altered or unavailable.", "Shell_NotifyIconA": "Sends a message to the taskbar's status area.", "Shell_NotifyIconGetRect": "Gets the screen coordinates of the bounding rectangle of a notification icon.", "Shell_NotifyIconW": "Sends a message to the taskbar's status area.", "ShellAboutA": "Displays a ShellAbout dialog box.", "ShellAboutW": "Displays a ShellAbout dialog box.", "ShellExecuteA": "Performs an operation on a specified file.", "ShellExecuteExA": "Performs an operation on a specified file.", "ShellExecuteExW": "Performs an operation on a specified file.", "ShellExecuteW": "Performs an operation on a specified file.", "ShellMessageBoxA": "ShellMessageBox may be altered or unavailable.", "ShellMessageBoxW": "ShellMessageBox may be altered or unavailable.", "SHEmptyRecycleBinA": "Empties the Recycle Bin on the specified drive.", "SHEmptyRecycleBinW": "Empties the Recycle Bin on the specified drive.", "SHEnumerateUnreadMailAccountsA": "Enumerates the user accounts that have unread email.", "SHEnumerateUnreadMailAccountsW": "Enumerates the user accounts that have unread email.", "SHEnumKeyExA": "Enumerates the subkeys of the specified open registry key.", "SHEnumKeyExW": "Enumerates the subkeys of the specified open registry key.", "SHEnumValueA": "Enumerates the values of the specified open registry key.", "SHEnumValueW": "Enumerates the values of the specified open registry key.", "SHEvaluateSystemCommandTemplate": "Enforces strict validation of parameters used in a call to CreateProcess or ShellExecute.", "SHFileOperationA": "Copies, moves, renames, or deletes a file system object.", "SHFileOperationW": "Copies, moves, renames, or deletes a file system object.", "SHFind_InitMenuPopup": "SHFind_InitMenuPopup may be altered or unavailable.", "SHFindFiles": "SHFindFiles may be altered or unavailable.", "SHFlushSFCache": "SHFlushSFCache may be altered or unavailable.", "SHFormatDateTimeA": "SHFormatDateTime may be altered or unavailable.", "SHFormatDateTimeW": "SHFormatDateTime may be altered or unavailable.", "SHFormatDrive": "SHFormatDrive may be altered or unavailable.", "SHFree": "Frees the memory allocated by SHAlloc.", "SHFreeNameMappings": "Frees a file name mapping object that was retrieved by the SHFileOperation function.", "SHFreeShared": "SHFreeShared may be altered or unavailable.", "SHGetAssocKeys": "Retrieves an array of class subkeys associated with an IQueryAssociations object.", "SHGetAttributesFromDataObject": "SHGetAttributesFromDataObject may be altered or unavailable.", "SHGetDataFromIDListA": "Retrieves extended property data from a relative identifier list.", "SHGetDataFromIDListW": "Retrieves extended property data from a relative identifier list.", "SHGetDesktopFolder": "Retrieves the IShellFolder interface for the desktop folder, which is the root of the Shell's namespace.", "SHGetDiskFreeSpaceExA": "Retrieves disk space information for a disk volume.", "SHGetDiskFreeSpaceExW": "Retrieves disk space information for a disk volume.", "SHGetDriveMedia": "Returns the type of media that is in the given drive.", "SHGetFileInfoA": "Retrieves information about an object in the file system, such as a file, folder, directory, or drive root.", "SHGetFileInfoW": "Retrieves information about an object in the file system, such as a file, folder, directory, or drive root.", "SHGetFolderLocation": "Deprecated.", "SHGetFolderPathA": "Deprecated.", "SHGetFolderPathAndSubDirA": "Gets the path of a folder and appends a user-provided subfolder path.", "SHGetFolderPathAndSubDirW": "Gets the path of a folder and appends a user-provided subfolder path.", "SHGetFolderPathW": "Deprecated.", "SHGetIconOverlayIndexA": "Returns the index of the overlay icon in the system image list.", "SHGetIconOverlayIndexW": "Returns the index of the overlay icon in the system image list.", "SHGetIDListFromObject": "Retrieves the pointer to an item identifier list of an object.", "SHGetImageList": "Retrieves an image list.", "SHGetInstanceExplorer": "Retrieves an interface that allows hosted Shell extensions and other components to prevent their host process from closing prematurely.", "SHGetInverseCMAP": "Retrieves the inverse color table mapping for the halftone palette.", "SHGetItemFromDataObject": "Creates an IShellItem or related object based on an item specified by an IDataObject.", "SHGetItemFromObject": "Retrieves an IShellItem for an object.", "SHGetKnownFolderIDList": "Retrieves the path of a known folder as an ITEMIDLIST structure.", "SHGetKnownFolderItem": "Retrieves an IShellItem object that represents a known folder.", "SHGetKnownFolderPath": "Retrieves the full path of a known folder identified by the folder's KNOWNFOLDERID.", "SHGetLocalizedName": "Retrieves the localized name of a file in a Shell folder.", "SHGetMalloc": "Retrieves a pointer to the Shell's IMalloc interface.", "SHGetNameFromIDList": "Retrieves the display name of an item identified by its IDList.", "SHGetNewLinkInfoA": "Creates a name for a new shortcut based on the shortcut's proposed target.", "SHGetNewLinkInfoW": "Creates a name for a new shortcut based on the shortcut's proposed target.", "SHGetPathFromIDListA": "Converts an item identifier list to a file system path.", "SHGetPathFromIDListEx": "This function extends SHGetPathFromIDList by allowing you to set the initial size of the string buffer and declare the options below.", "SHGetPathFromIDListW": "Converts an item identifier list to a file system path.", "SHGetRealIDL": "SHGetRealIDL may be altered or unavailable.", "SHGetSetFolderCustomSettings": "SHGetSetFolderCustomSettings may be altered or unavailable.", "SHGetSetSettings": "SHGetSetSettings may be altered or unavailable.", "SHGetSettings": "Retrieves the current Shell option settings.", "SHGetSpecialFolderLocation": "SHGetSpecialFolderLocation is not supported and may be altered or unavailable in the future.", "SHGetSpecialFolderPathA": "SHGetSpecialFolderPath is not supported.", "SHGetSpecialFolderPathW": "SHGetSpecialFolderPath is not supported.", "SHGetStockIconInfo": "Retrieves information about system-defined Shell icons.", "SHGetTemporaryPropertyForItem": "Retrieves the temporary property for the given item.", "SHGetThreadRef": "Retrieves the per-thread object reference set by SHSetThreadRef.", "SHGetUnreadMailCountA": "Retrieves a specified user's unread message count for any or all email accounts.", "SHGetUnreadMailCountW": "Retrieves a specified user's unread message count for any or all email accounts.", "SHGetValueA": "Retrieves a registry value.", "SHGetValueW": "Retrieves a registry value.", "SHGetViewStatePropertyBag": "SHGetViewStatePropertyBag may be altered or unavailable.", "SHGlobalCounterDecrement": "Decrements a global counter.", "SHGlobalCounterGetValue": "Gets the current value of a global counter.", "SHGlobalCounterIncrement": "Increments a global counter.", "SHHandleUpdateImage": "SHHandleUpdateImage may be altered or unavailable.", "SHILCreateFromPath": "SHILCreateFromPath may be altered or unavailable.", "SHInvokePrinterCommandA": "Executes a command on a printer object.", "SHInvokePrinterCommandW": "Executes a command on a printer object.", "SHIsFileAvailableOffline": "Determines whether a file or folder is available for offline use.", "SHIsLowMemoryMachine": "Not supported.", "SHLimitInputEdit": "Sets limits on valid characters for an edit control.", "SHLoadIndirectString": "Extracts a specified text resource when given that resource in the form of an indirect string.", "SHLoadInProc": "Creates an instance of the specified object class from within the context of the Shell's process.", "SHLoadLibraryFromItem": "Creates and loads an IShellLibrary object from a specified library definition file.", "SHLoadLibraryFromKnownFolder": "Creates and loads an IShellLibrary object for a specified known folder ID.", "SHLoadLibraryFromParsingName": "Creates and loads an IShellLibrary object for a specified path.", "SHLoadNonloadedIconOverlayIdentifiers": "Signals the Shell that during the next operation requiring overlay information, it should load icon overlay identifiers that either failed creation or were not present for creation at startup.", "SHLoadOLE": "Deprecated.", "SHLocalStrDupA": "Makes a copy of a string in newly allocated memory.", "SHLocalStrDupW": "Makes a copy of a string in newly allocated memory.", "SHLockShared": "SHLockShared may be altered or unavailable.", "SHMapPIDLToSystemImageListIndex": "SHMapPIDLToSystemImageListIndex may be altered or unavailable.", "SHMessageBoxCheckA": "SHMessageBoxCheck may be altered or unavailable.", "SHMessageBoxCheckW": "SHMessageBoxCheck may be altered or unavailable.", "SHMultiFileProperties": "Displays a merged property sheet for a set of files.", "SHObjectProperties": "SHObjectProperties may be altered or unavailable.", "SHOpenFolderAndSelectItems": "Opens a Windows Explorer window with specified items in a particular folder selected.", "SHOpenPropSheetA": "SHOpenPropSheet may be altered or unavailable.", "SHOpenPropSheetW": "SHOpenPropSheet may be altered or unavailable.", "SHOpenRegStream2A": "This function supersedes SHOpenRegStream.", "SHOpenRegStream2W": "This function supersedes SHOpenRegStream.", "SHOpenRegStreamA": "Deprecated.", "SHOpenRegStreamW": "Deprecated.", "SHOpenWithDialog": "Displays the Open With dialog box.", "ShortAdd": "Adds two values of type SHORT.", "ShortMult": "Multiplies two values of type SHORT.", "ShortSub": "Subtracts one value of type SHORT from another.", "ShortToChar": "Converts a value of type SHORT to a value of CHAR.", "ShortToDWordPtr": "Converts a value of type SHORT to a value of type DWORD_PTR.", "ShortToInt8": "Converts a value of type SHORT to a value of type INT8.", "ShortToUChar": "Converts a value of type SHORT to a value of UCHAR.", "ShortToUInt": "Converts a value of type SHORT to a value of type UINT.", "ShortToUInt8": "Converts a value of type SHORT to a value of type UINT8.", "ShortToUIntPtr": "Converts a value of type SHORT to a value of type UINT_PTR.", "ShortToULong": "Converts a value of type SHORT to a value of type ULONG.", "ShortToULongLong": "Converts a value of type SHORT to a value of type ULONGLONG.", "ShortToULongPtr": "Converts a value of type SHORT to a value of type ULONG_PTR.", "ShortToUShort": "Converts a value of type SHORT to a value of type USHORT.", "ShouldShow": "Specifies whether an individual item should be allowed through the filter and which should be blocked.", "Show": "Displays the notification.", "ShowContactCardForWindow": "Displays the UI for a contact on the specified window.", "ShowControlWindow": "Deprecated.", "ShowDeskBand": "Shows a specified deskband.", "ShowDW": "Instructs the docking window object to show or hide itself.", "ShowError": "Called by the synchronization manager in a registered application handler when a user double-clicks an associated message in the error tab.", "ShowErrorCompleted": "Called by the registered application's handler before or after its PrepareForSync operation has been completed.", "Showing": "Called before the input pane is shown, to allow the app window to make any necessary adjustments to its UI in response to the reduced screen space available to it.", "ShowInitialize": "Allows a file viewer to determine whether it can display a file.", "ShowProperties": "Called by the synchronization manager when a user selects an item in the choice dialog box, and then clicks the Properties button.", "ShowPropertiesCompleted": "Called by the registered application's handler before or after its ShowProperties operation is completed.", "ShowResolveConflictUIAsync": "IFileSyncMergeHandler::ShowResolveConflictUIAsync method", "ShowShareUIForWindow": "Displays the UI for sharing content for the specified window.", "ShowSharingWizard": "Displays a wizard that allows a user to create a Home Group, and then retrieves the sharing options that the user selected through the wizard.", "SHParseDisplayName": "Translates a Shell namespace object's display name into an item identifier list and returns the attributes of the object.", "SHPathPrepareForWriteA": "Checks to see if the path exists.", "SHPathPrepareForWriteW": "Checks to see if the path exists.", "SHQueryInfoKeyA": "Retrieves information about a specified registry key.", "SHQueryInfoKeyW": "Retrieves information about a specified registry key.", "SHQueryRecycleBinA": "Retrieves the size of the Recycle Bin and the number of items in it, for a specified drive.", "SHQueryRecycleBinW": "Retrieves the size of the Recycle Bin and the number of items in it, for a specified drive.", "SHQueryUserNotificationState": "Checks the state of the computer for the current user to determine whether sending a notification is appropriate.", "SHQueryValueExA": "Opens a registry key and queries it for a specific value.", "SHQueryValueExW": "Opens a registry key and queries it for a specific value.", "SHRegCloseUSKey": "Closes a handle to a user-specific registry subkey in a user-specific subtree.", "SHRegCreateUSKeyA": "Creates or opens a registry subkey in a user-specific subtree.", "SHRegCreateUSKeyW": "Creates or opens a registry subkey in a user-specific subtree.", "SHRegDeleteEmptyUSKeyA": "Deletes an empty registry subkey in a user-specific subtree.", "SHRegDeleteEmptyUSKeyW": "Deletes an empty registry subkey in a user-specific subtree.", "SHRegDeleteUSValueA": "Deletes a registry subkey value in a user-specific subtree.", "SHRegDeleteUSValueW": "Deletes a registry subkey value in a user-specific subtree.", "SHRegDuplicateHKey": "Duplicates a registry key's HKEY handle.", "SHRegEnumUSKeyA": "Enumerates the subkeys of a registry subkey in a user-specific subtree.", "SHRegEnumUSKeyW": "Enumerates the subkeys of a registry subkey in a user-specific subtree.", "SHRegEnumUSValueA": "Enumerates the values of the specified registry subkey in a user-specific subtree.", "SHRegEnumUSValueW": "Enumerates the values of the specified registry subkey in a user-specific subtree.", "SHRegGetBoolUSValueA": "Retrieves a Boolean value from a registry subkey in a user-specific subtree.", "SHRegGetBoolUSValueW": "Retrieves a Boolean value from a registry subkey in a user-specific subtree.", "SHRegGetBoolValueFromHKCUHKLM": "Evaluates a registry key value and returns a boolean value that reflects whether the value exists and the expected state matches the actual state.", "SHRegGetIntW": "Reads a numeric string value from the registry and converts it to an integer.", "SHRegGetPathA": "Retrieves a file path from the registry, expanding environment variables as needed.", "SHRegGetPathW": "Retrieves a file path from the registry, expanding environment variables as needed.", "SHRegGetUSValueA": "Retrieves a value from a registry subkey in a user-specific subtree.", "SHRegGetUSValueW": "Retrieves a value from a registry subkey in a user-specific subtree.", "SHRegGetValueA": "Retrieves a registry value.", "SHRegGetValueFromHKCUHKLM": "Obtains specified information from the registry.", "SHRegGetValueW": "Retrieves a registry value.", "SHRegOpenUSKeyA": "Opens a registry subkey in a user-specific subtree.", "SHRegOpenUSKeyW": "Opens a registry subkey in a user-specific subtree.", "SHRegQueryInfoUSKeyA": "Retrieves information about a specified registry subkey in a user-specific subtree.", "SHRegQueryInfoUSKeyW": "Retrieves information about a specified registry subkey in a user-specific subtree.", "SHRegQueryUSValueA": "Retrieves the type and data for a specified name associated with an open registry subkey in a user-specific subtree.", "SHRegQueryUSValueW": "Retrieves the type and data for a specified name associated with an open registry subkey in a user-specific subtree.", "SHRegSetPathA": "Takes a file path, replaces folder names with environment strings, and places the resulting string in the registry.", "SHRegSetPathW": "Takes a file path, replaces folder names with environment strings, and places the resulting string in the registry.", "SHRegSetUSValueA": "Sets a registry subkey value in a user-specific subtree.", "SHRegSetUSValueW": "Sets a registry subkey value in a user-specific subtree.", "SHRegSetValue": "Not supported.", "SHRegWriteUSValueA": "Writes a value to a registry subkey in a user-specific subtree.", "SHRegWriteUSValueW": "Writes a value to a registry subkey in a user-specific subtree.", "SHReleaseThreadRef": "Releases a thread reference before the thread procedure returns.", "SHRemoveFolderPathFromLibrary": "Removes a folder from a library.", "SHRemoveLocalizedName": "Removes the localized name of a file in a Shell folder.", "SHReplaceFromPropSheetExtArray": "Requests each property sheet in a property sheet extension array to replace pages.", "SHResolveFolderPathInLibrary": "Attempts to resolve the target location of a library folder that has been moved or renamed.", "SHResolveLibrary": "Resolves all locations in a library, even those locations that have been moved or renamed.", "SHRestricted": "SHRestricted may be altered or unavailable.", "SHRunControlPanel": "Opens a Control Panel item.", "SHSaveLibraryInFolderPath": "Saves an IShellLibrary object to disk.", "SHSendMessageBroadcastA": "Sends a message to all top-level windows in the system.", "SHSendMessageBroadcastW": "Sends a message to all top-level windows in the system.", "SHSetDefaultProperties": "Applies the default set of properties on a Shell item.", "SHSetFolderPathA": "Deprecated.", "SHSetFolderPathW": "Deprecated.", "SHSetInstanceExplorer": "Provides an interface that allows hosted Shell extensions and other components to prevent their host process from closing prematurely.", "SHSetKnownFolderPath": "Redirects a known folder to a new location.", "SHSetLocalizedName": "Sets the localized name of a file in a Shell folder.", "SHSetTemporaryPropertyForItem": "Sets a temporary property for the specified item.", "SHSetThreadRef": "Stores a per-thread reference to a Component Object Model object.", "SHSetUnreadMailCountA": "Stores the current user's unread message count for a specified email account in the registry.", "SHSetUnreadMailCountW": "Stores the current user's unread message count for a specified email account in the registry.", "SHSetValueA": "Sets the value of a registry key.", "SHSetValueW": "Sets the value of a registry key.", "SHShellFolderView_Message": "SHShellFolderView_Message may be altered or unavailable.", "SHShowManageLibraryUI": "Shows the library management dialog box, which enables users to manage the library folders and default save location.", "SHSimpleIDListFromPath": "Deprecated.", "SHSkipJunction": "Checks a bind context to see if it is safe to bind to a particular component object.", "SHStartNetConnectionDialogA": "SHStartNetConnectionDialog may be altered or unavailable.", "SHStartNetConnectionDialogW": "SHStartNetConnectionDialog may be altered or unavailable.", "SHStrDupA": "Makes a copy of a string in newly allocated memory.", "SHStrDupW": "Makes a copy of a string in newly allocated memory.", "SHStripMneumonicA": "Removes the mnemonic marker from a string.", "SHStripMneumonicW": "Removes the mnemonic marker from a string.", "SHTestTokenMembership": "Uses CheckTokenMembership to test whether the given token is a member of the local group with the specified RID.", "SHUnicodeToAnsi": "Converts a string from the Unicode code page to the ANSI code page.", "SHUnicodeToUnicode": "Copies a Unicode string.", "SHUnlockShared": "SHUnlockShared may be altered or unavailable.", "SHUpdateImageA": "Notifies the Shell that an image in the system image list has changed.", "SHUpdateImageW": "Notifies the Shell that an image in the system image list has changed.", "SHValidateUNC": "SHValidateUNC may be altered or unavailable.", "SignalFileOpen": "SignalFileOpen may be altered or unavailable.", "SizeTAdd": "Adds two values of type size_t.", "SizeTMult": "Multiplies one value of type size_t by another.", "SizeTSub": "Subtracts one value of type size_t from another.", "SoftwareUpdateMessageBox": "Displays a standard message box that can be used to notify a user that an application has been updated.", "SSIZETAdd": "Adds two SSIZE_T values together.", "SSIZETMult": "Multiplies one SSIZE_T value by another.", "SSIZETSub": "Subtracts one SSIZE_T value from another.", "StartHandlerSync": "Initiates the synchronization of all items managed by a particular handler.", "StartItemSync": "Initiates the synchronization of specified items managed by a particular handler.", "StartOperation": "Called by a drop target to indicate that asynchronous data extraction is starting.", "StartOperations": "Performs caller-implemented actions before any specific file operations are performed.", "StartProgressDialog": "Starts the specified progress dialog.", "StartServicing": "Suspends and terminates the non-background portion of the apps associated with the specified package and cancels the background tasks associated with the package.", "StartSessionRedirection": "Causes background tasks for the specified package to activate in the specified user session.", "StartSyncAll": "Synchronizes all items managed by all handlers.", "StartVisualGroup": "Subsequent calls to any add method add those elements to this group.", "Status": "Sets the release status and background thread timeout for the current task.", "StgMakeUniqueName": "Creates a unique name for a stream or storage object from a template.", "Stop": "Stops a progress dialog.", "StopHandlerSync": "Stops the synchronization of a specified handler.", "StopItemSync": "Stops the synchronization of specified items managed by a particular handler.", "StopProgressDialog": "Stops current progress dialog.", "StopServicing": "Completes the previous servicing operation that was started by a call to the StartServicing method.", "StopSessionRedirection": "Stops redirection of background tasks for the specified package.", "StopSharingPrinters": "Stops sharing all local, shared printers connected to a computer.", "StopSyncAll": "Stops the synchronization of all items managed by all handlers.", "StopWatchFlush": "StopWatchFlush may be altered or unavailable.", "StopWatchMode": "StopWatchMode may be altered or unavailable.", "StrCatBuffA": "Copies and appends characters from one string to the end of another.", "StrCatBuffW": "Copies and appends characters from one string to the end of another.", "StrCatChainW": "Concatenates two Unicode strings.", "StrCatW": "Appends one string to another.", "StrChrA": "Searches a string for the first occurrence of a character that matches the specified character.", "StrChrIA": "Searches a string for the first occurrence of a character that matches the specified character.", "StrChrIW": "Searches a string for the first occurrence of a character that matches the specified character.", "StrChrNIW": "Searches a string for the first occurrence of a specified character.", "StrChrNW": "Searches a string for the first occurrence of a specified character.", "StrChrW": "Searches a string for the first occurrence of a character that matches the specified character.", "StrCmpCA": "Compares strings using C run-time collation rules.", "StrCmpCW": "Compares strings using C run-time collation rules.", "StrCmpICA": "Compares two strings using C run-time collation rules.", "StrCmpICW": "Compares two strings using C run-time collation rules.", "StrCmpIW": "Compares two strings to determine if they are the same.", "StrCmpLogicalW": "Compares two Unicode strings.", "StrCmpNA": "Compares a specified number of characters from the beginning of two strings to determine if they are the same.", "StrCmpNCA": "The comparison is case-sensitive.", "StrCmpNCW": "The comparison is case-sensitive.", "StrCmpNIA": "Compares a specified number of characters from the beginning of two strings to determine if they are the same.", "StrCmpNICA": "The comparison is not case-sensitive.", "StrCmpNICW": "The comparison is not case-sensitive.", "StrCmpNIW": "Compares a specified number of characters from the beginning of two strings to determine if they are the same.", "StrCmpNW": "Compares a specified number of characters from the beginning of two strings to determine if they are the same.", "StrCmpW": "Compares two strings to determine if they are the same.", "StrCpyNW": "Copies a specified number of characters from the beginning of one string to another.", "StrCpyW": "Copies one string to another.", "StrCSpnA": "The search method is case-sensitive, and the terminating NULL character is included within the search pattern match.", "StrCSpnIA": "The search method is not case-sensitive, and the terminating NULL character is included within the search pattern match.", "StrCSpnIW": "The search method is not case-sensitive, and the terminating NULL character is included within the search pattern match.", "StrCSpnW": "The search method is case-sensitive, and the terminating NULL character is included within the search pattern match.", "StrDupA": "Duplicates a string.", "StrDupW": "Duplicates a string.", "StrFormatByteSize64A": "Converts a numeric value into a string that represents the number expressed as a size value in bytes, kilobytes, megabytes, or gigabytes, depending on the size.", "StrFormatByteSizeA": "Converts a numeric value into a string that represents the number expressed as a size value in bytes, kilobytes, megabytes, or gigabytes, depending on the size.", "StrFormatByteSizeEx": "Converts a numeric value into a string that represents the number in bytes, kilobytes, megabytes, or gigabytes, depending on the size.", "StrFormatByteSizeW": "Converts a numeric value into a string that represents the number expressed as a size value in bytes, kilobytes, megabytes, or gigabytes, depending on the size.", "StrFormatKBSizeA": "Converts a numeric value into a string that represents the number expressed as a size value in kilobytes.", "StrFormatKBSizeW": "Converts a numeric value into a string that represents the number expressed as a size value in kilobytes.", "StrFromTimeIntervalA": "Converts a time interval, specified in milliseconds, to a string.", "StrFromTimeIntervalW": "Converts a time interval, specified in milliseconds, to a string.", "StrIsIntlEqualA": "Compares a specified number of characters from the beginning of two strings to determine if they are equal.", "StrIsIntlEqualW": "Compares a specified number of characters from the beginning of two strings to determine if they are equal.", "StrNCatA": "Appends a specified number of characters from the beginning of one string to the end of another.", "StrNCatW": "Appends a specified number of characters from the beginning of one string to the end of another.", "StrPBrkA": "This search does not include the terminating null character.", "StrPBrkW": "This search does not include the terminating null character.", "StrRChrA": "Searches a string for the last occurrence of a specified character.", "StrRChrIA": "Searches a string for the last occurrence of a specified character.", "StrRChrIW": "Searches a string for the last occurrence of a specified character.", "StrRChrW": "Searches a string for the last occurrence of a specified character.", "StrRetToBSTR": "Accepts a STRRET structure returned by IShellFolder::GetDisplayNameOf that contains or points to a string, and returns that string as a BSTR.", "StrRetToBufA": "Converts an STRRET structure returned by IShellFolder::GetDisplayNameOf to a string, and places the result in a buffer.", "StrRetToBufW": "Converts an STRRET structure returned by IShellFolder::GetDisplayNameOf to a string, and places the result in a buffer.", "StrRetToStrA": "Takes an STRRET structure returned by IShellFolder::GetDisplayNameOf and returns a pointer to an allocated string containing the display name.", "StrRetToStrW": "Takes an STRRET structure returned by IShellFolder::GetDisplayNameOf and returns a pointer to an allocated string containing the display name.", "StrRStrIA": "Searches for the last occurrence of a specified substring within a string.", "StrRStrIW": "Searches for the last occurrence of a specified substring within a string.", "StrSpnA": "Obtains the length of a substring within a string that consists entirely of characters contained in a specified buffer.", "StrSpnW": "Obtains the length of a substring within a string that consists entirely of characters contained in a specified buffer.", "StrStrA": "Finds the first occurrence of a substring within a string.", "StrStrIA": "Finds the first occurrence of a substring within a string.", "StrStrIW": "Finds the first occurrence of a substring within a string.", "StrStrNIW": "Finds the first occurrence of a substring within a string.", "StrStrNW": "Finds the first occurrence of a substring within a string.", "StrStrW": "Finds the first occurrence of a substring within a string.", "StrToInt64ExA": "Converts a string representing a decimal or hexadecimal value to a 64-bit integer.", "StrToInt64ExW": "Converts a string representing a decimal or hexadecimal value to a 64-bit integer.", "StrToIntA": "Converts a string that represents a decimal value to an integer.", "StrToIntExA": "Converts a string representing a decimal or hexadecimal number to an integer.", "StrToIntExW": "Converts a string representing a decimal or hexadecimal number to an integer.", "StrToIntW": "Converts a string that represents a decimal value to an integer.", "StrTrimA": "Removes specified leading and trailing characters from a string.", "StrTrimW": "Removes specified leading and trailing characters from a string.", "SUBCLASSPROC": "Defines the prototype for the callback function used by RemoveWindowSubclass and SetWindowSubclass.", "SubStreamFailure": "Called when there is a failure that involves secondary streams and user interaction is needed.", "SupportsResource": "Retrieves whether an item supports a specified resource.", "SupportsSelection": "Determines whether an invoker supports its selection.", "Synchronize": "Called by the synchronization manager once for each selected group after the user has chosen the registered applications to be synchronized.", "SynchronizeCompleted": "Called by an application when its Synchronize method is complete.", "SHGetPropertyStoreForWindow": "Retrieves an object that represents a specific window's collection of properties, which allows those properties to be queried or set.", "SafeArrayToRectNativeArray": "Converts a SAFEARRAY containing rectangle coordinates to an array of type RECT.", "Scroll": "Scrolls the visible region of the content area horizontally and vertically.", "ScrollItemPattern_ScrollIntoView": "Scrolls the content area of a container object in order to display the UI Automation element within the visible region of the container.", "ScrollPattern_Scroll": "Scrolls the currently visible region of the content area the specified ScrollAmount, horizontally, vertically, or both.", "ScrollPattern_SetScrollPercent": "Scrolls a container to a specific position horizontally, vertically, or both.", "SelectionItemPattern_AddToSelection": "Adds an unselected element to a selection in a control.", "SelectionItemPattern_RemoveFromSelection": "Removes an element from the selection in a selection container.", "SelectionItemPattern_Select": "Selects an element in a selection container.", "SetCurrentView": "Sets the view of the control.", "SetDockPosition": "Sets the dock position of this element.", "SetHmenuProp": "This method wraps SetPropValue, providing a convenient entry point for callers who are annotating HMENU-based accessible elements.", "SetHmenuPropServer": "This method wraps SetPropServer, providing a convenient entry point for callers who are annotating HMENU-based accessible elements.", "SetHmenuPropStr": "This method wraps SetPropValue, providing a more convenient entry point for callers who are annotating HMENU-based accessible elements.", "SetHwndProp": "This method wraps SetPropValue, providing a convenient entry point for callers who are annotating HWND-based accessible elements.", "SetHwndPropServer": "This method wraps SetPropServer, providing a convenient entry point for callers who are annotating HWND-based accessible elements.", "SetHwndPropStr": "This method wraps SetPropValue, providing a more convenient entry point for callers who are annotating HWND-based accessible elements.", "SetPropServer": "Servers use SetPropServer to specify a callback object to be used to annotate an array of properties for the accessible element.", "SetPropValue": "Use SetPropValue to identify the accessible element to be annotated, specify the property to be annotated, and provide a new value for that property.", "SetScrollPercent": "Sets the horizontal and vertical scroll positions as a percentage of the total content area within the UI Automation element.", "SetVisualState": "For example, minimizes or maximizes it.", "SetWindowVisualState": "Minimizes, maximizes, or restores the window.", "SetWinEventHook": "Sets an event hook function for a range of events.", "SetWinEventsForAutomationEvent": "Maps Microsoft UI Automation events to WinEvents.", "ShowContextMenu": "Programmatically invokes a context menu on the target text range.", "StartListening": "Causes the Microsoft UI Automation provider to start listening for mouse or keyboard input.", "SynchronizedInputPattern_Cancel": "Causes the UI Automation provider to stop listening for mouse or keyboard input.", "SynchronizedInputPattern_StartListening": "Causes the UI Automation provider to start listening for mouse or keyboard input.", "SetCommBreak": "Suspends character transmission for a specified communications device and places the transmission line in a break state until the ClearCommBreak function is called.", "SetCommConfig": "Sets the current configuration of a communications device.", "SetCommMask": "Specifies a set of events to be monitored for a communications device.", "SetCommState": "Configures a communications device according to the specifications in a device-control block.", "SetCommTimeouts": "Sets the time-out parameters for all read and write operations on a specified communications device.", "SetDefaultCommConfigA": "Sets the default configuration for a communications device.", "SetDefaultCommConfigW": "Sets the default configuration for a communications device.", "SetDllDirectoryA": "Adds a directory to the search path used to locate DLLs for the application.", "SetDllDirectoryW": "Adds a directory to the search path used to locate DLLs for the application.", "SetFirmwareEnvironmentVariableA": "Sets the value of the specified firmware environment variable.", "SetFirmwareEnvironmentVariableExA": "Sets the value of the specified firmware environment variable as the attributes that indicate how this variable is stored and maintained.", "SetFirmwareEnvironmentVariableExW": "Sets the value of the specified firmware environment variable and the attributes that indicate how this variable is stored and maintained.", "SetFirmwareEnvironmentVariableW": "Sets the value of the specified firmware environment variable.", "SetHandleCount": "", "SetMailslotInfo": "Sets the time-out value used by the specified mailslot for a read operation.", "SetProcessDEPPolicy": "Changes data execution prevention and DEP-ATL thunk emulation settings for a 32-bit process.", "SetSystemPowerState": "Suspends the system by shutting power down.", "SetThreadExecutionState": "Enables an application to inform the system that it is in use, thereby preventing the system from entering sleep or turning off the display while the application is running.", "SetupComm": "Initializes the communications parameters for a specified communications device.", "SetXStateFeaturesMask": "Sets the mask of XState features set within a CONTEXT structure.", "SENDASYNCPROC": "An application-defined callback function used with the SendMessageCallback function.", "SendMessage": "Sends the specified message to a window or windows.", "SendMessageA": "Sends the specified message to a window or windows.", "SendMessageCallbackA": "Sends the specified message to a window or windows.", "SendMessageCallbackW": "Sends the specified message to a window or windows.", "SendMessageTimeoutA": "Sends the specified message to one or more windows.", "SendMessageTimeoutW": "Sends the specified message to one or more windows.", "SendMessageW": "Sends the specified message to a window or windows.", "SendNotifyMessageA": "Sends the specified message to a window or windows.", "SendNotifyMessageW": "Sends the specified message to a window or windows.", "SetClassLongA": "Replaces the specified 32-bit value at the specified offset into the extra class memory or the WNDCLASSEX structure for the class to which the specified window belongs.", "SetClassLongPtrA": "Replaces the specified value at the specified offset in the extra class memory or the WNDCLASSEX structure for the class to which the specified window belongs.", "SetClassLongPtrW": "Replaces the specified value at the specified offset in the extra class memory or the WNDCLASSEX structure for the class to which the specified window belongs.", "SetClassLongW": "Replaces the specified 32-bit value at the specified offset into the extra class memory or the WNDCLASSEX structure for the class to which the specified window belongs.", "SetClassWord": "Replaces the 16-bit value at the specified offset into the extra class memory for the window class to which the specified window belongs.", "SetCoalescableTimer": "Creates a timer with the specified time-out value and coalescing tolerance delay.", "SetForegroundWindow": "Brings the thread that created the specified window into the foreground and activates the window.", "SetLayeredWindowAttributes": "Sets the opacity and transparency color key of a layered window.", "SetMessageExtraInfo": "Sets the extra message information for the current thread.", "SetParent": "Changes the parent window of the specified child window.", "SetProcessDefaultLayout": "Changes the default layout when windows are created with no parent or owner only for the currently running process.", "SetProcessDPIAware": "SetProcessDPIAware may be altered or unavailable.", "SetPropA": "Adds a new entry or changes an existing entry in the property list of the specified window.", "SetPropW": "Adds a new entry or changes an existing entry in the property list of the specified window.", "SetSysColors": "Sets the colors for the specified display elements.", "SetTimer": "Creates a timer with the specified time-out value.", "SetWindowDisplayAffinity": "Stores the display affinity setting in kernel mode on the hWnd associated with the window.", "SetWindowLongA": "Changes an attribute of the specified window.", "SetWindowLongPtrA": "Changes an attribute of the specified window.", "SetWindowLongPtrW": "Changes an attribute of the specified window.", "SetWindowLongW": "Changes an attribute of the specified window.", "SetWindowPlacement": "Sets the show state and the restored, minimized, and maximized positions of the specified window.", "SetWindowPos": "Changes the size, position, and Z order of a child, pop-up, or top-level window.", "SetWindowsHookExA": "Installs an application-defined hook procedure into a hook chain.", "SetWindowsHookExW": "Installs an application-defined hook procedure into a hook chain.", "SetWindowTextA": "Changes the text of the specified window's title bar.", "SetWindowTextW": "Changes the text of the specified window's title bar.", "ShowOwnedPopups": "Shows or hides all pop-up windows owned by the specified window.", "ShowWindow": "Sets the specified window's show state.", "ShowWindowAsync": "Sets the show state of a window without waiting for the operation to complete.", "SoundSentry": "Triggers a visual signal to indicate that a sound is playing.", "SwitchToThisWindow": "Switches focus to the specified window and brings it to the foreground.", "SystemParametersInfoA": "Retrieves or sets the value of one of the system-wide parameters.", "SystemParametersInfoW": "Retrieves or sets the value of one of the system-wide parameters.", "ShiftLeft128": "Shifts 128-bit left.", "ShiftRight128": "Shifts 128-bit right.", "ScreenToClient": "The ScreenToClient function converts the screen coordinates of a specified point on the screen to client-area coordinates.", "SendDlgItemMessageA": "Sends a message to the specified control in a dialog box.", "SendDlgItemMessageW": "Sends a message to the specified control in a dialog box.", "SendInput": "Synthesizes keystrokes, mouse motions, and button clicks.", "SetActiveWindow": "Activates a window.", "SetCapture": "Sets the mouse capture to the specified window belonging to the current thread.", "SetDialogControlDpiChangeBehavior": "Overrides the default per-monitor DPI scaling behavior of a child window in a dialog.", "SetDialogDpiChangeBehavior": "Dialogs in Per-Monitor v2 contexts are automatically DPI scaled.", "SetDisplayAutoRotationPreferences": "Sets the screen auto-rotation preferences for the current process.", "SetDisplayConfig": "The SetDisplayConfig function modifies the display topology, source, and target modes by exclusively enabling the specified paths in the current session.", "SetDlgItemInt": "Sets the text of a control in a dialog box to the string representation of a specified integer value.", "SetDlgItemTextA": "Sets the title or text of a control in a dialog box.", "SetDlgItemTextW": "Sets the title or text of a control in a dialog box.", "SetDoubleClickTime": "Sets the double-click time for the mouse.", "SetGestureConfig": "Configures the messages that are sent from a window for Windows Touch gestures.", "SetKeyboardState": "Changes made to this table do not affect keyboard input to any other thread.", "SetLastErrorEx": "Sets the last-error code.", "SetProcessDpiAwarenessContext": "Sets the current process to a specified dots per inch awareness context.", "SetProcessRestrictionExemption": "Exempts the calling process from restrictions preventing desktop processes from interacting with the Windows Store app environment.", "SetProcessWindowStation": "Assigns the specified window station to the calling process.", "SetRectEmpty": "The SetRectEmpty function creates an empty rectangle in which all coordinates are set to zero.", "SetThreadCursorCreationScaling": "Sets the DPI scale for which the cursors being created on this thread are intended.", "SetThreadDesktop": "Assigns the specified desktop to the calling thread.", "SetThreadDpiAwarenessContext": "Set the DPI awareness for the current thread to the provided value.", "SetThreadDpiHostingBehavior": "Sets the thread's DPI_HOSTING_BEHAVIOR.", "SetUserObjectInformationA": "Sets information about the specified window station or desktop object.", "SetUserObjectInformationW": "Sets information about the specified window station or desktop object.", "SetWindowRgn": "The SetWindowRgn function sets the window region of a window.", "ShutdownBlockReasonCreate": "Indicates that the system cannot be shut down and sets a reason string to be displayed to the user if system shutdown is initiated.", "ShutdownBlockReasonDestroy": "Indicates that the system can be shut down and frees the reason string.", "ShutdownBlockReasonQuery": "Retrieves the reason string set by the ShutdownBlockReasonCreate function.", "SkipPointerFrameMessages": "Determines which pointer input frame generated the most recently retrieved message for the specified pointer and discards any queued pointer input messages generated from the same pointer input frame.", "SubtractRect": "The SubtractRect function determines the coordinates of a rectangle formed by subtracting one rectangle from another.", "SwapMouseButton": "Reverses or restores the meaning of the left and right mouse buttons.", "SwitchDesktop": "Makes the specified desktop visible and activates it.", "SystemParametersInfoForDpi": "Retrieves the value of one of the system-wide parameters, taking into account the provided DPI value.", "SetHandleInformation": "Sets certain properties of an object handle.", "SetProcessValidCallTargets": "Provides Control Flow Guard with a list of valid indirect call targets and specifies whether they should be marked valid or not.", "SetProcessWorkingSetSize": "Sets the minimum and maximum working set sizes for the specified process.", "SetProcessWorkingSetSizeEx": "Sets the minimum and maximum working set sizes for the specified process.", "SetSystemFileCacheSize": "Limits the size of the working set for the file system cache.", "TpDestroyCallbackEnviron": "Deletes the specified callback environment.", "TpInitializeCallbackEnviron": "Initializes a callback environment for the thread pool.", "TpSetCallbackActivationContext": "Assigns an activation context to the callback environment.", "TpSetCallbackCleanupGroup": "Associates the specified cleanup group with the specified callback environment.", "TpSetCallbackFinalizationCallback": "Indicates a function to call when the callback environment is finalized.", "TpSetCallbackLongFunction": "Indicates that callbacks associated with this callback environment may not return quickly.", "TpSetCallbackNoActivationContext": "Indicates that the callback environment has no activation context.", "TpSetCallbackPersistent": "Specifies that the callback should run on a persistent thread.", "TpSetCallbackPriority": "Specifies the priority of a callback function relative to other work items in the same thread pool.", "TpSetCallbackRaceWithDll": "Ensures that the specified DLL remains loaded as long as there are outstanding callbacks.", "TpSetCallbackThreadpool": "Assigns a thread pool to a callback environment.", "TakeOwnership": "Changes ownership of the job to the current user.", "TerminateLogArchive": "Deallocates system resources that are allocated originally for a log archive context by PrepareLogArchive.", "TerminateReadLog": "Terminates a read context.", "TruncateLog": "Truncates the log.", "TxfGetThreadMiniVersionForCreate": "Returns the MiniVersion a subsequent create is set to open.", "TxfLogCreateFileReadContext": "Creates a context to be used to read replication records.", "TxfLogCreateRangeReadContext": "Creates a context that is required to read any replication records.", "TxfLogDestroyReadContext": "Closes a read context created by the TxfLogCreateFileReadContext function.", "TxfLogReadRecords": "Reads the redo records from the log.", "TxfSetThreadMiniVersionForCreate": "Sets the MiniVersion that a subsequent create should open.", "Terminate": "Called from IImePad to terminate IImePadApplet when the IMEPad instance exits.", "TakeSnapshotVhdSet": "Creates a snapshot of the current virtual disk for VHD Set files.", "TraceEvent": "A RegisterTraceGuids-based event provider uses the TraceEvent function to send a structured event to an event tracing session.", "TraceEventInstance": "A RegisterTraceGuids-based event provider uses the TraceEventInstance function to send a structured event to an event tracing session with an instance identifier.", "TraceMessage": "A RegisterTraceGuids-based event to an event tracing session.", "TraceMessageVa": "A RegisterTraceGuids-based event to an event tracing session using va_list parameters.", "TraceQueryInformation": "Provides information about an event tracing session.", "TraceSetInformation": "Configures event tracing session settings.", "TokenBindingDeleteAllBindings": "Deletes all token binding keys that are associated with the calling user or app container.", "TokenBindingDeleteBinding": "Deletes the token binding key that is associated with the specified target string.", "TokenBindingGenerateBinding": "Constructs one token binding that contains the exported public key and signature by using the specified key type for the token binding, a target identifier string for creating and retrieving the token binding key, and the unique data.", "TokenBindingGenerateID": "Constructs the token binding identifier by extracting the signature algorithm from the key type and copying the exported public key.", "TokenBindingGenerateMessage": "Assembles the list of token bindings and generates the final message for the client device to the server.", "TokenBindingGetKeyTypesClient": "Retrieves a list of the key types that the client device supports.", "TokenBindingGetKeyTypesServer": "Retrieves a list of the key types that the server supports.", "TokenBindingVerifyMessage": "Validates the token binding message and verifies the token bindings that the message contains.", "TreeResetNamedSecurityInfoA": "Resets specified security information in the security descriptor of a specified tree of objects.", "TreeResetNamedSecurityInfoW": "Resets specified security information in the security descriptor of a specified tree of objects.", "TreeSetNamedSecurityInfoA": "Sets specified security information in the security descriptor of a specified tree of objects.", "TreeSetNamedSecurityInfoW": "Sets specified security information in the security descriptor of a specified tree of objects.", "TabCtrl_AdjustRect": "Calculates a tab control's display area given a window rectangle, or calculates the window rectangle that would correspond to a specified display area.", "TabCtrl_DeleteAllItems": "Removes all items from a tab control.", "TabCtrl_DeleteItem": "Removes an item from a tab control.", "TabCtrl_DeselectAll": "Resets items in a tab control, clearing any that were set to the TCIS_BUTTONPRESSED state.", "TabCtrl_GetCurFocus": "Returns the index of the item that has the focus in a tab control.", "TabCtrl_GetCurSel": "Determines the currently selected tab in a tab control.", "TabCtrl_GetExtendedStyle": "Retrieves the extended styles that are currently in use for the tab control.", "TabCtrl_GetImageList": "Retrieves the image list associated with a tab control.", "TabCtrl_GetItem": "Retrieves information about a tab in a tab control.", "TabCtrl_GetItemCount": "Retrieves the number of tabs in the tab control.", "TabCtrl_GetItemRect": "Retrieves the bounding rectangle for a tab in a tab control.", "TabCtrl_GetRowCount": "Retrieves the current number of rows of tabs in a tab control.", "TabCtrl_GetToolTips": "Retrieves the handle to the tooltip control associated with a tab control.", "TabCtrl_GetUnicodeFormat": "Retrieves the UNICODE character format flag for the control.", "TabCtrl_HighlightItem": "Sets the highlight state of a tab item.", "TabCtrl_HitTest": "Determines which tab, if any, is at a specified screen position.", "TabCtrl_InsertItem": "Inserts a new tab in a tab control.", "TabCtrl_RemoveImage": "Removes an image from a tab control's image list.", "TabCtrl_SetCurFocus": "Sets the focus to a specified tab in a tab control.", "TabCtrl_SetCurSel": "Selects a tab in a tab control.", "TabCtrl_SetExtendedStyle": "Sets the extended styles that the tab control will use.", "TabCtrl_SetImageList": "Assigns an image list to a tab control.", "TabCtrl_SetItem": "Sets some or all of a tab's attributes.", "TabCtrl_SetItemExtra": "Sets the number of bytes per tab reserved for application-defined data in a tab control.", "TabCtrl_SetItemSize": "Sets the width and height of tabs in a fixed-width or owner-drawn tab control.", "TabCtrl_SetMinTabWidth": "Sets the minimum width of items in a tab control.", "TabCtrl_SetPadding": "Sets the amount of space around each tab's icon and label in a tab control.", "TabCtrl_SetToolTips": "Assigns a tooltip control to a tab control.", "TabCtrl_SetUnicodeFormat": "Sets the Unicode character format flag for the control.", "TaskDialog": "The TaskDialog function creates, displays, and operates a task dialog.", "TaskDialogIndirect": "The TaskDialogIndirect function creates, displays, and operates a task dialog.", "THIRD_IPADDRESS": "Extracts the field 2 value from a packed IP address retrieved with the IPM_GETADDRESS message.", "TreeView_CreateDragImage": "Creates a dragging bitmap for the specified item in a tree-view control.", "TreeView_DeleteAllItems": "Deletes all items from a tree-view control.", "TreeView_DeleteItem": "You can also send the TVM_DELETEITEM message explicitly.", "TreeView_EditLabel": "Begins in-place editing of the specified item's text, replacing the text of the item with a single-line edit control containing the text.", "TreeView_EndEditLabelNow": "Ends the editing of a tree-view item's label.", "TreeView_EnsureVisible": "Ensures that a tree-view item is visible, expanding the parent item or scrolling the tree-view control, if necessary.", "TreeView_Expand": "You can use this macro or send the TVM_EXPAND message explicitly.", "TreeView_GetBkColor": "Retrieves the current background color of the control.", "TreeView_GetCheckState": "Gets the check state of the specified item.", "TreeView_GetChild": "Retrieves the first child item of the specified tree-view item.", "TreeView_GetCount": "Retrieves a count of the items in a tree-view control.", "TreeView_GetDropHilight": "You can use this macro, or you can explicitly send the TVM_GETNEXTITEM message with the TVGN_DROPHILITE flag.", "TreeView_GetEditControl": "Retrieves the handle to the edit control being used to edit a tree-view item's text.", "TreeView_GetExtendedStyle": "Retrieves the extended style for a specified tree-view control.", "TreeView_GetFirstVisible": "Retrieves the first visible item in a tree-view control window.", "TreeView_GetImageList": "You can use this macro or send the TVM_GETIMAGELIST message explicitly.", "TreeView_GetIndent": "Retrieves the amount, in pixels, that child items are indented relative to their parent items.", "TreeView_GetInsertMarkColor": "Retrieves the color used to draw the insertion mark for the tree view.", "TreeView_GetISearchString": "Retrieves the incremental search string for a tree-view control.", "TreeView_GetItem": "Retrieves some or all of a tree-view item's attributes.", "TreeView_GetItemHeight": "Retrieves the current height of the tree-view items.", "TreeView_GetItemPartRect": "Use this macro or send the TVM_GETITEMPARTRECT message explicitly.", "TreeView_GetItemRect": "Retrieves the bounding rectangle for a tree-view item and indicates whether the item is visible.", "TreeView_GetItemState": "Retrieves some or all of a tree-view item's state attributes.", "TreeView_GetLastVisible": "Retrieves the last expanded item in a tree-view control.", "TreeView_GetLineColor": "Gets the current line color.", "TreeView_GetNextItem": "Retrieves the tree-view item that bears the specified relationship to a specified item.", "TreeView_GetNextSelected": "Retrieves the tree-view item that bears the TVGN_NEXTSELECTED relationship to a specified tree item.", "TreeView_GetNextSibling": "Retrieves the next sibling item of a specified item in a tree-view control.", "TreeView_GetNextVisible": "Retrieves the next visible item that follows a specified item in a tree-view control.", "TreeView_GetParent": "Retrieves the parent item of the specified tree-view item.", "TreeView_GetPrevSibling": "Retrieves the previous sibling item of a specified item in a tree-view control.", "TreeView_GetPrevVisible": "Retrieves the first visible item that precedes a specified item in a tree-view control.", "TreeView_GetRoot": "Retrieves the topmost or very first item of the tree-view control.", "TreeView_GetScrollTime": "Retrieves the maximum scroll time for the tree-view control.", "TreeView_GetSelectedCount": "TreeView_GetSelectedCount macro", "TreeView_GetSelection": "Retrieves the currently selected item in a tree-view control.", "TreeView_GetTextColor": "Retrieves the current text color of the control.", "TreeView_GetToolTips": "Retrieves the handle to the child tooltip control used by a tree-view control.", "TreeView_GetUnicodeFormat": "Retrieves the Unicode character format flag for the control.", "TreeView_GetVisibleCount": "Obtains the number of items that can be fully visible in the client window of a tree-view control.", "TreeView_HitTest": "You can use this macro or send the TVM_HITTEST message explicitly.", "TreeView_InsertItem": "Inserts a new item in a tree-view control.", "TreeView_MapAccIDToHTREEITEM": "Maps an accessibility ID to an HTREEITEM.", "TreeView_MapHTREEITEMToAccID": "Maps an HTREEITEM to an accessibility ID.", "TreeView_Select": "Selects the specified tree-view item, scrolls the item into view, or redraws the item in the style used to indicate the target of a drag-and-drop operation.", "TreeView_SelectDropTarget": "You can use this macro or the TreeView_Select macro, or you can send the TVM_SELECTITEM message explicitly.", "TreeView_SelectItem": "You can use this macro or the TreeView_Select macro, or you can send the TVM_SELECTITEM message explicitly.", "TreeView_SelectSetFirstVisible": "Scrolls the tree-view control vertically to ensure that the specified item is visible.", "TreeView_SetAutoScrollInfo": "Sets information used to determine auto-scroll characteristics.", "TreeView_SetBkColor": "Sets the background color of the control.", "TreeView_SetBorder": "Sets the size of the border for the items in a tree-view control.", "TreeView_SetCheckState": "Sets the item's state image to checked or unchecked. ", "TreeView_SetExtendedStyle": "Sets the extended style for a specified TreeView control.", "TreeView_SetHot": "Sets the hot item for a tree-view control.", "TreeView_SetImageList": "Sets the normal or state image list for a tree-view control and redraws the control using the new images.", "TreeView_SetIndent": "Sets the width of indentation for a tree-view control and redraws the control to reflect the new width.", "TreeView_SetInsertMark": "Sets the insertion mark in a tree-view control.", "TreeView_SetInsertMarkColor": "Sets the color used to draw the insertion mark for the tree view.", "TreeView_SetItem": "You can use this macro or send the TVM_SETITEM message explicitly.", "TreeView_SetItemHeight": "Sets the height of the tree-view items.", "TreeView_SetItemState": "Sets a tree-view item's state attributes.", "TreeView_SetLineColor": "Sets the current line color.", "TreeView_SetScrollTime": "Sets the maximum scroll time for the tree-view control.", "TreeView_SetTextColor": "Sets the text color of the control.", "TreeView_SetToolTips": "Sets a tree-view control's child tooltip control.", "TreeView_SetUnicodeFormat": "Sets the Unicode character format flag for the control.", "TreeView_ShowInfoTip": "Shows the infotip for a specified item in a tree-view control.", "TreeView_SortChildren": "Sorts the child items of the specified parent item in a tree-view control.", "TreeView_SortChildrenCB": "Sorts tree-view items using an application-defined callback function that compares the items.", "TxActivate": "Notifies the text host that the control is active.", "TxClientToScreen": "Converts text host coordinates to screen coordinates.", "TxCreateCaret": "Creates a new shape for windowless rich edit control's caret.", "TxDeactivate": "Notifies the text host that the control is now inactive.", "TxDestroyCaret": "Destroys the caret.", "TxDraw": "Draws the text services object.", "TxDrawD2D": "Draws the text services object by using Direct2D rendering.", "TxEnableScrollBar": "Enables or disables one or both scroll bar arrows in the text host window.", "TxFreeTextServicesNotification": "Notifies the text host that text services have been freed.", "TxGetAcceleratorPos": "Requests the special character to use for the underlining accelerator character.", "TxGetBackStyle": "Requests the background style of the text host.", "TxGetBaseLinePos": "Gets the base line position of the first visible line, in pixels, relative to the text services client rectangle.", "TxGetCachedSize": "Typically, this will be the size of the last client rectangle used in ITextServices::TxDraw, ITextServices::OnTxSetCursor, and so forth, although it is not guaranteed to be.", "TxGetCharFormat": "Requests the text host's default character format.", "TxGetClientRect": "Retrieves the client coordinates of the text host's client area.", "TxGetCurTargetX": "Gets the target x position, that is, the current horizontal position of the caret.", "TxGetDC": "Requests the device context for the text host window.", "TxGetDropTarget": "Gets the drop target for the text control.", "TxGetEastAsianFlags": "Gets whether Input Method Editor input is allowed and whether the edit styles include ES_SELFIME.", "TxGetEditStyle": "Gets whether a rich edit control is in a dialog box.", "TxGetExtent": "Requests the native size of the control in HIMETRIC.", "TxGetHorzExtent": "Gets the horizontal scroll extent of the text host window.", "TxGetHScroll": "Returns horizontal scroll bar information.", "TxGetMaxLength": "Gets the text host's maximum allowed length for the text.", "TxGetNaturalSize": "Allows a control to be resized so it fits its content appropriately.", "TxGetNaturalSize2": "Resizes a control so it fits its content appropriately.", "TxGetPalette": "Retrieves the color palette of the rich edit control.", "TxGetParaFormat": "Requests the text host's default paragraph format.", "TxGetPasswordChar": "Requests the text host's password character.", "TxGetPropertyBits": "Requests the bit property settings for the text host.", "TxGetScrollBars": "Requests information about the scroll bars supported by the text host.", "TxGetSelectionBarWidth": "Returns the size of selection bar in HIMETRIC.", "TxGetSysColor": "Retrieves the text host's color for a specified display element.", "TxGetText": "Returns all of the Unicode plain text in the control as a BSTR.", "TxGetViewInset": "Requests the dimensions of the white space inset around the text in the text host window.", "TxGetVScroll": "Returns vertical scroll bar state information.", "TxGetWindow": "Retrieves the handle of the text host window for the rich edit control.", "TxGetWindowStyles": "Retrieves the window styles and extended windows styles of the text host window.", "TxImmGetContext": "Retrieves the Input Method Editor input context associated with the text services host.", "TxImmReleaseContext": "Releases an input context returned by the ITextHost::TxImmGetContext method and unlocks the memory associated with the context.", "TxInvalidateRect": "Specifies a rectangle for the text host to add to the update region of the text host window.", "TxIsDoubleClickPending": "Discovers whether the message queue contains a WM_LBUTTONDBLCLK message that is pending for the text host window.", "TxKillTimer": "Requests the text host to destroy the specified timer.", "TxNotify": "Notifies the text host of various events.", "TxQueryHitPoint": "Tests whether a specified point is within the rectangle of the text services object.", "TxReleaseDC": "Releases the device context obtained by the ITextHost::TxGetDC method.", "TxScreenToClient": "Converts the screen coordinates to the text host window coordinates.", "TxScrollWindowEx": "Requests the text host to scroll the content of the specified client area.", "TxSendMessage": "Used by the window host to forward messages sent from its window to the text services object.", "TxSetCapture": "Sets the mouse capture in the text host's window.", "TxSetCaretPos": "Moves the caret position to the specified coordinates in the text host window.", "TxSetCursor": "Establishes a new cursor shape in the text host's window.", "TxSetCursor2": "Sets the shape of the cursor in the text host window.", "TxSetFocus": "Sets the focus to the text host window.", "TxSetForegroundWindow": "Sets the rich edit control's host window as the foreground window.", "TxSetScrollPos": "Sets the position of the scroll box in the specified scroll bar and, if requested, redraws the scroll bar to reflect the new position of the scroll box.", "TxSetScrollRange": "Sets the minimum and maximum position values for the specified scroll bar in the text host window.", "TxSetText": "Sets all of the text in the control.", "TxSetTimer": "Requests the text host to create a timer with a specified time-out.", "TxShowCaret": "Shows or hides the caret at the caret position in the text host window.", "TxShowDropCaret": "Shows or hides the caret during the drop portion of a drag-and-drop operation.", "TxShowScrollBar": "Shows or hides the scroll bar in the text host window.", "TxViewChange": "Indicates to the text host that the update region has changed.", "TypeText": "Types the string given by bstr at this selection as if someone typed it.", "TEXT": "Identifies a string as Unicode when UNICODE is defined by a preprocessor directive during compilation.", "TranslateCharsetInfo": "Translates character set information and sets all members of a destination structure to appropriate values.", "TrackPopupMenu": "Displays a shortcut menu at the specified location and tracks the selection of items on the menu.", "TrackPopupMenuEx": "Displays a shortcut menu at the specified location and tracks the selection of items on the shortcut menu.", "TranslateAcceleratorA": "Processes accelerator keys for menu commands.", "TranslateAcceleratorW": "Processes accelerator keys for menu commands.", "TerminateAllProcesses": "Terminates all processes for the specified package.", "ThumbBarAddButtons": "Adds a thumbnail toolbar with a specified set of buttons to the thumbnail image of a window in a taskbar button flyout.", "ThumbBarSetImageList": "Specifies an image list that contains button images for a toolbar embedded in a thumbnail image of a window in a taskbar button flyout.", "ThumbBarUpdateButtons": "A thumbnail toolbar is a toolbar embedded in a thumbnail image of a window in a taskbar button flyout.", "Timer": "Resets the progress dialog box timer to zero.", "TranscodeImage": "Converts an image to JPEG or bitmap image format.", "Translate": "Called by the browser when the browser cannot determine the protocol of a URL address.", "TranslateAccelerator": "Translates keyboard shortcut key strokes when a namespace extension's view has the focus.", "TranslateAcceleratorGlobal": "Handles global accelerators so that input objects can respond to the keyboard even when they are not active in the UI.", "TranslateAcceleratorIO": "Enables the object to process keyboard accelerators.", "TranslateAcceleratorSB": "Translates accelerator keystrokes intended for the browser's frame while the view is active.", "TranslateMenuMessage": "Translates a message for a Component Object Model object.", "TranslateURLA": "Applies common translations to a given URL string, creating a new URL string.", "TranslateURLW": "Applies common translations to a given URL string, creating a new URL string.", "TranslateWithSearchContext": "Called by the browser when the browser can not determine the protocol of a URL address.", "Travel": "Navigates to a travel entry in the travel log relative to the position of the current entry.", "TreeAdvise": "Enables a client to register with the control.", "TreeUnadvise": "Enables a client to unregister with the control.", "TriggerEdgeGesture": "This gesture toggles the app's app bar, if the app supports one.", "TextPattern_get_DocumentRange": "Gets the text range for the entire document.", "TextPattern_get_SupportedTextSelection": "Ascertains whether the text container's contents can be selected and deselected.", "TextPattern_GetSelection": "Gets the current range of selected text from a text container supporting the text pattern.", "TextPattern_GetVisibleRanges": "Retrieves an array of disjoint text ranges from a text container where each text range begins with the first partially visible line through to the end of the last partially visible line.", "TextPattern_RangeFromChild": "Gets the text range that a given node spans.", "TextPattern_RangeFromPoint": "Retrieves the degenerate text range nearest to the specified screen coordinates.", "TextRange_AddToSelection": "Adds to the existing collection of highlighted text in a text container that supports multiple, disjoint selections by highlighting supplementary text corresponding to the calling text range Start and End endpoints.", "TextRange_Clone": "Copies a text range.", "TextRange_Compare": "Compares two text ranges.", "TextRange_CompareEndpoints": "Returns a value indicating whether two text ranges have identical endpoints.", "TextRange_ExpandToEnclosingUnit": "Expands the text range to a larger or smaller unit such as Character, Word, Line, or Page.", "TextRange_FindAttribute": "Searches in a specified direction for the first piece of text supporting a specified text attribute.", "TextRange_FindText": "Returns the first text range in the specified direction that contains the text the client is searching for.", "TextRange_GetAttributeValue": "Gets the value of a text attribute for a text range.", "TextRange_GetBoundingRectangles": "Retrieves the minimum number of bounding rectangles that can enclose the range, one rectangle per line.", "TextRange_GetChildren": "Returns all UI Automation elements contained within the specified text range.", "TextRange_GetEnclosingElement": "Returns the node for the next smallest provider that covers the range.", "TextRange_GetText": "Returns the text in a text range, up to a specified number of characters.", "TextRange_Move": "Moves the text range the specified number of units requested by the client.", "TextRange_MoveEndpointByRange": "Moves an endpoint of one range to the endpoint of another range.", "TextRange_MoveEndpointByUnit": "Moves an endpoint of the range the specified number of units.", "TextRange_RemoveFromSelection": "Removes the selected text, corresponding to the calling text range TextPatternRangeEndpoint_Start and TextPatternRangeEndpoint_End endpoints, from an existing collection of selected text in a text container that supports multiple, disjoint selections.", "TextRange_ScrollIntoView": "Scrolls the text so the specified range is visible in the viewport.", "TextRange_Select": "Selects a text range.", "Toggle": "Cycles through the toggle states of the control.", "TogglePattern_Toggle": "Toggles a control to its next supported state.", "TransformPattern_Move": "Moves an element to a specified location on the screen.", "TransformPattern_Resize": "Resizes an element on the screen.", "TransformPattern_Rotate": "Rotates an element on the screen.", "TransmitCommChar": "Transmits a specified character ahead of any pending data in the output buffer of the specified communications device.", "TileWindows": "Tiles the specified child windows of the specified parent window.", "TIMERPROC": "TimerProc is a placeholder for the application-defined function name.", "TranslateMDISysAccel": "Processes accelerator keystrokes for window menu commands of the multiple-document interface child windows associated with the specified MDI client window.", "TranslateMessage": "Translates virtual-key messages into character messages.", "TabbedTextOutA": "The TabbedTextOut function writes a character string at a specified location, expanding tabs to the values specified in an array of tab-stop positions.", "TabbedTextOutW": "The TabbedTextOut function writes a character string at a specified location, expanding tabs to the values specified in an array of tab-stop positions.", "ToAscii": "Translates the specified virtual-key code and keyboard state to the corresponding character or characters.", "ToAsciiEx": "Translates the specified virtual-key code and keyboard state to the corresponding character or characters.", "TOUCH_COORD_TO_PIXEL": "Converts touch coordinates to pixels.", "ToUnicode": "Translates the specified virtual-key code and keyboard state to the corresponding Unicode character or characters.", "ToUnicodeEx": "Translates the specified virtual-key code and keyboard state to the corresponding Unicode character or characters.", "TrackMouseEvent": "Posts messages when the mouse pointer leaves a window or hovers over a window for a specified amount of time.", "UninstallAssembly": "The UnistallAssembly method removes an application reference to an assembly from the side-by-side store.", "UmsThreadYield": "Yields control to the user-mode scheduling scheduler thread on which the calling UMS worker thread is running.", "UnregisterWait": "Cancels a registered wait operation issued by the RegisterWaitForSingleObject function.", "UpdateDownloadPosition": "Specifies a position to prioritize downloading missing data from.", "UnpackDDElParam": "Unpacks a Dynamic Data ExchangelParam value received from a posted DDE message.", "UpdateDriverForPlugAndPlayDevicesA": "Given an INF file and a hardware ID, the UpdateDriverForPlugAndPlayDevices function installs updated drivers for devices that match the hardware ID.", "UpdateDriverForPlugAndPlayDevicesW": "Given an INF file and a hardware ID, the UpdateDriverForPlugAndPlayDevices function installs updated drivers for devices that match the hardware ID.", "UnlockFile": "Unlocks a region in an open file.", "UnlockFileEx": "Unlocks a region in the specified file.", "UpdateNtmsOmidInfo": "The UpdateNtmsOmidInfo function updates the RSM database with label information immediately after writing to the newly allocated medium.", "UnlockRegion": "The UnlockRegion method removes the access restriction on a range of bytes previously restricted with IStream::LockRegion.", "UnregisterTraceGuids": "Unregisters a Classic ETW event trace provider that was registered using RegisterTraceGuids.", "UpdateTraceA": "The UpdateTrace function updates the property setting of the specified event tracing session.", "UpdateTraceW": "The UpdateTrace function updates the property setting of the specified event tracing session.", "Unacquire": "The IDirectInputJoyConfig8::Unacquire method unacquires joystick configuration mode.", "UnAdvise": "Used by the Logon UI or Credential UI to advise the credential that event callbacks are no longer accepted.", "Uninitialize": "Uninitializes the NDES policy module.", "UnInstall": "Removes the Certificate Enrollment Web Service.", "UnlockServiceDatabase": "Unlocks a service control manager database by releasing the specified lock.", "UpdateCache": "Updates the cache of objects and object attributes to match the underlying policy store.", "UpdateRegistry": "Registers a certificate enrollment policy server.", "UpgradeStoresFunctionalLevel": "Upgrades this authorization store from version 1 to version 2.", "UninitializeFlatSB": "Uninitializes flat scroll bars for a particular window.", "Undo": "Performs a specified number of undo operations.", "Unfreeze": "Decrements the freeze count.", "UnicodeToHex": "Converts the Unicode character(s) preceding the start position of this text range to a hexadecimal number, and selects it.", "Update": "Deprecated.", "UpdatePanningFeedback": "Updates clients about state of a window resulting from a panning gesture.", "UpdateWindow": "The UpdateWindow function updates the client area of the specified window by sending a WM_PAINT message to the window if the window's update region is not empty.", "UILANGUAGE_ENUMPROCA": "An application-defined callback function that processes enumerated user interface language information provided by the EnumUILanguages function.", "UILANGUAGE_ENUMPROCW": "An application-defined callback function that processes enumerated user interface language information provided by the EnumUILanguages function.", "UnregisterUserDictionary": "Unregisters a previously registered user dictionary.", "UpdateResourceA": "Adds, deletes, or replaces a resource in a portable executable file.", "UpdateResourceW": "Adds, deletes, or replaces a resource in a portable executable file.", "UIActivate": "For example, if the TAB key is pressed when the tree has the focus, the view should be given the focus.", "UIActivateIO": "UI-activates or deactivates the object.", "UInt8Add": "Adds two values of type UINT8.", "UInt8Mult": "Multiplies two values of type UINT8.", "UInt8Sub": "Subtracts one value of type UINT8 from another.", "UInt8ToChar": "Converts a value of type UINT8 to a value of type CHAR.", "UInt8ToInt8": "Converts a value of type UINT8 to a value of type INT8.", "UIntAdd": "Adds two values of type UINT.", "UIntMult": "Multiplies one value of type UINT by another.", "UIntPtrAdd": "Adds two values of type UINT_PTR.", "UIntPtrMult": "Multiplies one value of type UINT_PTR by another.", "UIntPtrSub": "Subtracts one value of type UINT_PTR from another.", "UIntPtrToChar": "Converts a value of type UINT_PTR to a value of type CHAR.", "UIntPtrToInt": "Converts a value of type SIZE_T to a value of type INT.", "UIntPtrToInt16": "Converts a value of type UINT_PTR to a value of type INT16.", "UIntPtrToInt8": "Converts a value of type UINT_PTR to a value of type INT8.", "UIntPtrToIntPtr": "Converts a value of type UINT_PTR to a value of type INT_PTR.", "UIntPtrToLong": "Converts a value of type size_t to a value of type LONG.", "UIntPtrToLongLong": "Converts a value of type UINT_PTR to a value of type LONGLONG.", "UIntPtrToLongPtr": "Converts a value of type UINT_PTR to a value of type LONG_PTR.", "UIntPtrToShort": "Converts a value of type UINT_PTR to a value of type SHORT.", "UIntPtrToUChar": "Converts a value of type UINT_PTR to a value of type UCHAR.", "UIntPtrToUInt": "Converts a value of type UINT_PTR to a value of type UINT.", "UIntPtrToUInt16": "Converts a value of type UINT_PTR to a value of type UINT16.", "UIntPtrToUInt8": "Converts a value of type UINT_PTR to a value of type UINT8.", "UIntPtrToULong": "Converts a value of type UINT_PTR to a value of type ULONG.", "UIntPtrToUShort": "Converts a value of type UINT_PTR to a value of type USHORT.", "UIntSub": "Subtracts one value of type UINT from another.", "UIntToChar": "Converts a value of type UINT to a value of type CHAR.", "UIntToInt": "Converts a value of type UINT to a value of type INT.", "UIntToInt8": "Converts a value of type UINT to a value of type INT8.", "UIntToIntPtr": "Converts a value of type UINT to a value of type INT_PTR.", "UIntToLong": "Converts a value of type UINT to a value of type LONG.", "UIntToLongPtr": "Converts a value of type UINT to a value of type LONG_PTR.", "UIntToShort": "Converts a value of type UINT to a value of type SHORT.", "UIntToUChar": "Converts a value of type UINT to a value of type UCHAR.", "UIntToUInt8": "Converts a value of type UINT to a value of type UINT8.", "UIntToUShort": "Converts a value of type UINT to a value of type USHORT.", "ULongAdd": "Adds two values of type ULONG.", "ULongLongAdd": "Adds two values of type SIZE_T.", "ULongLongMult": "Multiplies one value of type size_t by another.", "ULongLongSub": "Subtracts one value of type SIZE_T from another.", "ULongLongToChar": "Converts a value of type ULONGLONG to a value of type CHAR.", "ULongLongToInt": "Converts a value of type ULONGLONG to a value of type INT.", "ULongLongToInt8": "Converts a value of type ULONGLONG to a value of type INT8.", "ULongLongToLong": "Converts a value of type ULONGLONG to a value of type LONG.", "ULongLongToLongLong": "Converts a value of type ULONGLONG to a value of type INT_PTR.", "ULongLongToLongPtr": "Converts a value of type ULONGLONG to a value of type LONG_PTR.", "ULongLongToShort": "Converts a value of type ULONGLONG to a value of type SHORT.", "ULongLongToUChar": "Converts a value of type ULONGLONG to a value of type UCHAR.", "ULongLongToUInt": "Converts a value of type ULONGLONG to a value of type UINT.", "ULongLongToUInt8": "Converts a value of type ULONGLONG to a value of type UINT8.", "ULongLongToUIntPtr": "Converts a value of type ULONGLONG to a value of type UINT_PTR.", "ULongLongToULong": "Converts a value of type ULONGLONG to a value of type ULONG.", "ULongLongToULongPtr": "Converts a value of type ULONGLONG to a value of type ULONG_PTR.", "ULongLongToUShort": "Converts a value of type ULONGLONG to a value of type USHORT.", "ULongMult": "Multiplies one value of type ULONG by another.", "ULongPtrAdd": "Adds two values of type ULONG_PTR.", "ULongPtrMult": "Multiplies one value of type ULONG_PTR by another.", "ULongPtrSub": "Subtracts one value of type ULONG_PTR from another.", "ULongPtrToChar": "Converts a value of type ULONG_PTR to a value of type CHAR.", "ULongPtrToInt": "Converts a value of type size_t to a value of type INT.", "ULongPtrToInt8": "Converts a value of type ULONG_PTR to a value of type INT8.", "ULongPtrToIntPtr": "Converts a value of type ULONG_PTR to a value of type INT_PTR.", "ULongPtrToLong": "Converts a value of type ULONG_PTR to a value of type LONG.", "ULongPtrToLongLong": "Converts a value of type SIZE_T to a value of type INT64.", "ULongPtrToLongPtr": "Converts a value of type ULONG_PTR to a value of type LONG_PTR.", "ULongPtrToShort": "Converts a value of type ULONG_PTR to a value of type SHORT.", "ULongPtrToUChar": "Converts a value of type ULONG_PTR to a value of type UCHAR.", "ULongPtrToUInt": "Converts a value of type ULONG_PTR to a value of type UINT.", "ULongPtrToUInt8": "Converts a value of type ULONG_PTR to a value of type UINT8.", "ULongPtrToUIntPtr": "Converts a value of type ULONG_PTR to a value of type UINT_PTR.", "ULongPtrToULong": "Converts a value of type ULONG_PTR to a value of type ULONG.", "ULongPtrToUShort": "Converts a value of type ULONG_PTR to a value of type USHORT.", "ULongSub": "Subtracts one value of type ULONG from another.", "ULongToChar": "Converts a value of type ULONG to a value of type CHAR.", "ULongToInt": "Converts a value of type ULONG to a value of type INT.", "ULongToInt8": "Converts a value of type ULONG to a value of type INT8.", "ULongToIntPtr": "Converts a value of type ULONG to a value of type INT_PTR.", "ULongToLong": "Converts a value of type ULONG to a value of type LONG.", "ULongToLongPtr": "Converts a value of type ULONG to a value of type LONG_PTR.", "ULongToShort": "Converts a value of type ULONG to a value of type SHORT.", "ULongToUChar": "Converts a value of type ULONG to a value of type UCHAR.", "ULongToUInt": "Converts a value of type ULONG to a value of type UINT.", "ULongToUInt8": "Converts a value of type ULONG to a value of type UINT8.", "ULongToUIntPtr": "Converts a value of type ULONG to a value of type UINT_PTR.", "ULongToUShort": "Converts a value of type ULONG to a value of type USHORT.", "Unadvise": "Terminates an advisory connection.", "UngroupChildFromParent": "ISuspensionDependencyManager::UngroupChildFromParent method", "Unload": "Directs the preview handler to cease rendering a preview and to release all resources that have been allocated based on the item passed in during the initialization.", "UnloadUserProfile": "For more information, see the Remarks section of the LoadUserProfile function.", "UnregisterAppStateChangeNotification": "Cancels a change notification registered through RegisterAppStateChangeNotification.", "UnregisterFolder": "This method does not remove the folder itself.", "UnregisterForPackageStateChanges": "Stops receiving package state-change notifications associated with a previous call to RegisterForPackageStateChanges.", "UnregisterScaleChangeEvent": "This function replaces RevokeScaleChangeNotifications.", "UnregisterSyncMgrHandler": "Removes a handler's class identifier from the registration.", "UnregisterTab": "Removes a thumbnail from an application's preview group when that tab or document is closed in the application.", "Unschedule": "Cancels the installation of an application published by an application publisher.", "UpdateAll": "Programmatically starts an update for all items.", "UpdateBackForwardState": "Deprecated.", "UpdateConflicts": "Informs Sync Center that conflicts have been added for a specific handler or item.", "UpdateEntry": "Saves the browser state of the current entry in preparation for a pending navigation.", "UpdateEvents": "Informs Sync Center that events have been added for a specific handler or item.", "UpdateExternal": "Deprecated.", "UpdateHandler": "Instructs Sync Center to reenumerate the items managed by a handler or informs it that properties of the handler have changed.", "UpdateHandlerCollection": "Instructs Sync Center to reenumerate the handler collection, or informs it that properties of a handler in the handler collection have changed.", "UpdateItem": "Informs Sync Center that properties of a sync item have changed.", "UpdateItems": "Programmatically starts an update for specified items.", "UpdateLocations": "Called to specify the text elements stating the source and target in the current progress dialog.", "UpdateObject": "UpdateObject may be altered or unavailable.", "UpdateProgress": "Updates the transfer progress status in the UI.", "UpdateRemoteCredential": "Updates a credential from a remote session.", "UpdateSecureLockIcon": "Updates the value of the _eSecureLockIcon member of the BASEBROWSERDATA structure, which tracks the icon indicating a secure site, as well as updating the icon itself in the UI.", "UpdateText": "Called if descriptive text associated with the action will be changed.", "UpdateTransferState": "Updates the transfer state.", "UpdateWindowList": "Instructs the browser to update the pointer to an item identifier list in the window list.", "UrlApplySchemeA": "Determines a scheme for a specified URL string, and returns a string with an appropriate prefix.", "UrlApplySchemeW": "Determines a scheme for a specified URL string, and returns a string with an appropriate prefix.", "URLAssociationDialogA": "Invokes the unregistered URL protocol dialog box.", "URLAssociationDialogW": "Invokes the unregistered URL protocol dialog box.", "UrlCanonicalizeA": "Converts a URL string into canonical form.", "UrlCanonicalizeW": "Converts a URL string into canonical form.", "UrlCombineA": "When provided with a relative URL and its base, returns a URL in canonical form.", "UrlCombineW": "When provided with a relative URL and its base, returns a URL in canonical form.", "UrlCompareA": "Makes a case-sensitive comparison of two URL strings.", "UrlCompareW": "Makes a case-sensitive comparison of two URL strings.", "UrlCreateFromPathA": "Converts a Microsoft MS-DOS path to a canonicalized URL.", "UrlCreateFromPathW": "Converts a Microsoft MS-DOS path to a canonicalized URL.", "UrlEscapeA": "Converts characters or surrogate pairs in a URL that might be altered during transport across the Internet into their corresponding escape sequences.", "UrlEscapeSpaces": "A macro that converts space characters into their corresponding escape sequence.", "UrlEscapeW": "Converts characters or surrogate pairs in a URL that might be altered during transport across the Internet into their corresponding escape sequences.", "UrlFixupW": "UrlFixupW may be altered or unavailable.", "UrlGetLocationA": "Retrieves the location from a URL.", "UrlGetLocationW": "Retrieves the location from a URL.", "UrlGetPartA": "Accepts a URL string and returns a specified part of that URL.", "UrlGetPartW": "Accepts a URL string and returns a specified part of that URL.", "UrlHashA": "Hashes a URL string.", "UrlHashW": "Hashes a URL string.", "UrlIsA": "Tests whether a URL is a specified type.", "UrlIsFileUrlA": "Tests a URL to determine if it is a file URL.", "UrlIsFileUrlW": "Tests a URL to determine if it is a file URL.", "UrlIsNoHistoryA": "Returns whether a URL is a URL that browsers typically do not include in navigation history.", "UrlIsNoHistoryW": "Returns whether a URL is a URL that browsers typically do not include in navigation history.", "UrlIsOpaqueA": "Returns whether a URL is opaque.", "UrlIsOpaqueW": "Returns whether a URL is opaque.", "UrlIsW": "Tests whether a URL is a specified type.", "UrlUnescapeA": "Converts escape sequences back into ordinary characters.", "UrlUnescapeInPlace": "Converts escape sequences back into ordinary characters and overwrites the original string.", "UrlUnescapeW": "Converts escape sequences back into ordinary characters.", "UShortAdd": "Adds two values of type USHORT.", "UShortMult": "Multiplies one value of type USHORT by another.", "UShortSub": "Subtracts one value of type USHORT from another.", "UShortToChar": "Converts a value of type USHORT to a value of type CHAR.", "UShortToInt8": "Converts a value of type USHORT to a value of type INT8.", "UShortToShort": "Converts a value of type USHORT to a value of type SHORT.", "UShortToUChar": "Converts a value of type USHORT to a value of type UCHAR.", "UShortToUInt8": "Converts a value of type USHORT to a value of type UINT8.", "UiaAddEvent": "Adds a listener for events on a node in the UI Automation tree.", "UiaClientsAreListening": "Gets a value that indicates whether any client application is subscribed to Microsoft UI Automation events.", "UiaDisconnectAllProviders": "Releases all Microsoft UI Automation resources that are held by all providers associated with the calling process.", "UiaDisconnectProvider": "Releases all references that a particular provider holds to Microsoft UI Automation objects.", "UiaEventAddWindow": "Adds a window to the event listener.", "UiaEventCallback": "A client-implemented function that is called by UI Automation when an event is raised that the client has subscribed to.", "UiaEventRemoveWindow": "Removes a window from the event listener.", "UiaFind": "Retrieves one or more UI Automation nodes that match the search criteria.", "UiaGetErrorDescription": "Gets an error string so that it can be passed to the client.", "UiaGetPatternProvider": "Retrieves a control pattern.", "UiaGetPropertyValue": "Retrieves the value of a UI Automation property.", "UiaGetReservedMixedAttributeValue": "Retrieves a reserved value indicating that the value of a Microsoft UI Automation text attribute varies within a text range.", "UiaGetReservedNotSupportedValue": "Retrieves a reserved value indicating that a Microsoft UI Automation property or a text attribute is not supported.", "UiaGetRootNode": "Retrieves the root UI Automation node.", "UiaGetRuntimeId": "Retrieves the runtime identifier of a UI Automation node.", "UiaGetUpdatedCache": "Updates the cache of property values and control patterns.", "UiaHasServerSideProvider": "Ascertains whether a window has a Microsoft UI Automation provider implementation.", "UiaHostProviderFromHwnd": "Gets the host provider for a window.", "UiaHPatternObjectFromVariant": "Gets a control pattern object from a VARIANT type.", "UiaHTextRangeFromVariant": "Gets a text range from a VARIANT type.", "UiaHUiaNodeFromVariant": "Gets an HUIANODE from a VARIANT type.", "UiaIAccessibleFromProvider": "Retrieves an IAccessible implementation that provides Microsoft Active Accessibility data on behalf of a Microsoft UI Automation provider.", "UiaLookupId": "Gets the integer identifier that can be used in methods that require a PROPERTYID, PATTERNID, CONTROLTYPEID, TEXTATTRIBUTEID, or EVENTID.", "UiaNavigate": "Navigates in the UI Automation tree, optionally retrieving cached information.", "UiaNodeFromFocus": "Retrieves the UI Automation node for the UI element that currently has input focus.", "UiaNodeFromHandle": "Retrieves the UI Automation node associated with a window.", "UiaNodeFromPoint": "Retrieves the UI Automation node for the element at the specified point.", "UiaNodeFromProvider": "Retrieves the UI Automation node for a raw element provider.", "UiaNodeRelease": "Deletes a node from memory.", "UiaPatternRelease": "Deletes an allocated pattern object from memory.", "UiaProviderCallback": "An application-defined function that is called by UI Automation to obtain a client-side provider for an element.", "UiaProviderForNonClient": "Gets the provider for the entire non-client area of a window, or for a control in the non-client area of a window.", "UiaProviderFromIAccessible": "Creates a Microsoft UI Automation provider based on the specified Microsoft Active Accessibility object.", "UiaRaiseActiveTextPositionChangedEvent": "Called by a provider to notify the Microsoft UI Automation core that a text control has programmatically changed text.", "UiaRaiseAsyncContentLoadedEvent": "Called by a provider to notify the Microsoft UI Automation core that content is being loaded asynchronously.", "UiaRaiseAutomationEvent": "Notifies listeners of an event.", "UiaRaiseAutomationPropertyChangedEvent": "Called by providers to notify the Microsoft UI Automation core that an element property has changed.", "UiaRaiseChangesEvent": "Called by providers to notify the Microsoft UI Automation core that a change has occurred.", "UiaRaiseNotificationEvent": "Called by providers to initiate a notification event.", "UiaRaiseStructureChangedEvent": "Called by a provider to notify the Microsoft UI Automation core that the tree structure has changed.", "UiaRaiseTextEditTextChangedEvent": "Called by a provider to notify the Microsoft UI Automation core that a text control has programmatically changed text.", "UiaRectIsEmpty": "Gets a Boolean value that specifies whether a rectangle has all its coordinates set to 0.", "UiaRectSetEmpty": "Sets the elements of a UiaRect structure to 0.", "UiaRegisterProviderCallback": "Registers the application-defined method that is called by UI Automation to obtain a provider for an element.", "UiaRemoveEvent": "Removes a listener for events on a node in the UI Automation tree.", "UiaReturnRawElementProvider": "Gets an interface to the UI Automation provider for a window.", "UiaSetFocus": "Sets the input focus to the specified element in the UI.", "UiaTextRangeRelease": "Deletes an allocated text range object from memory.", "UnhookWinEvent": "Removes an event hook function created by a previous call to SetWinEventHook.", "UnregisterPointerInputTarget": "Allows the caller to unregister a target window to which all pointer input of the specified type is redirected.", "UnregisterPointerInputTargetEx": "UnregisterPointerInputTargetEx may be altered or unavailable.", "UnregisterApplicationRecoveryCallback": "Removes the active instance of an application from the recovery list.", "UnregisterApplicationRestart": "Removes the active instance of an application from the restart list.", "UnhookWindowsHookEx": "Removes a hook procedure installed in a hook chain by the SetWindowsHookEx function.", "UnregisterClassA": "Unregisters a window class, freeing the memory required for the class.", "UnregisterClassW": "Unregisters a window class, freeing the memory required for the class.", "UpdateLayeredWindow": "Updates the position, size, shape, content, and translucency of a layered window.", "UInt32x32To64": "Multiplies two unsigned 32-bit integers, returning an unsigned 64-bit integer result.", "UnsignedMultiply128": "Multiplies two unsigned 64-bit integers to produce an unsigned 128-bit integer.", "UnsignedMultiplyExtract128": "Multiplies two unsigned 64-bit integers to produce an unsigned 128-bit integer, shifts the product to the right by the specified number of bits, and returns the low 64 bits of the result.", "UnsignedMultiplyHigh": "Multiplies two 64-bit integers to produce a 128-bit integer and gets the high unsigned 64 bits.", "UnionRect": "The UnionRect function creates the union of two rectangles.", "UnloadKeyboardLayout": "Unloads an input locale identifier.", "UnregisterDeviceNotification": "Closes the specified device notification handle.", "UnregisterHotKey": "Frees a hot key previously registered by the calling thread.", "UnregisterPowerSettingNotification": "Unregisters the power setting notification.", "UnregisterSuspendResumeNotification": "Cancels a registration to receive notification when the system is suspended or resumed.", "UnregisterTouchWindow": "Registers a window as no longer being touch-capable.", "UserHandleGrantAccess": "Grants or denies access to a handle to a User object to a job that has a user-interface restriction.", "UnmapViewOfFile": "Unmaps a mapped view of a file from the calling process's address space.", "UnmapViewOfFile2": "Unmaps a previously mapped view of a file or a pagefile-backed section.", "UnmapViewOfFileEx": "This is an extended version of UnmapViewOfFile that takes an additional flags parameter.", "UnregisterBadMemoryNotification": "Closes the specified bad memory notification handle.", "Validate": "Validates the current policy information.", "ValidateServerCertificate": "A callback method that you implement that will be called so that you can validate the server certificates sent when an HTTPS connection is opened.", "ValidateLog": "Validates the consistency of the log metadata and data before log archive and after log restore.", "VariantByteArrayToString": "Creates a Unicode encoded string from a byte array.", "Verify": "Verifies that a private key exists and can be used by the client but does not open the key.", "VerifyRequest": "Verifies the NDES certificate request for submission to the CA.", "VerifySignature": "Verifies that a message signed by using the MakeSignature function was received in the correct sequence and has not been modified.", "VerifyScripts": "Compares two enumerated lists of scripts.", "VerFindFileA": "Determines where to install a file based on whether it locates another version of the file in the system.", "VerFindFileW": "Determines where to install a file based on whether it locates another version of the file in the system.", "VerInstallFileA": "Installs the specified file based on information returned from the VerFindFile function.", "VerInstallFileW": "Installs the specified file based on information returned from the VerFindFile function.", "VerLanguageNameA": "Retrieves a description string for the language associated with a specified binary Microsoft language identifier.", "VerLanguageNameW": "Retrieves a description string for the language associated with a specified binary Microsoft language identifier.", "VerQueryValueA": "Retrieves specified version information from the specified version-information resource.", "VerQueryValueW": "Retrieves specified version information from the specified version-information resource.", "v_CheckZoneCrossing": "Called by the base class to validate a zone crossing when navigating from one page to another.", "v_GetViewStream": "Deprecated.", "v_MayGetNextToolbarFocus": "Used when translating accelerators through TranslateAcceleratorSB and in checking the cycle of focus between the view and the browser's toolbars.", "v_MayTranslateAccelerator": "Called by a derived class to instruct the base class to proceed with the translation of keyboard mnemonics.", "v_ShowHideChildWindows": "Allows a derived class to update its child windows after a sizing event.", "ValuePattern_SetValue": "Sets the text value of an element.", "VariantToRect": "Converts a VARIANT containing rectangle coordinates to a RECT.", "VirtualizedItemPattern_Realize": "Makes the virtual item fully accessible as a UI Automation element.", "VerifyVersionInfoA": "Compares a set of operating system version requirements to the corresponding values for the currently running version of the system.", "VerifyVersionInfoW": "Compares a set of operating system version requirements to the corresponding values for the currently running version of the system.", "VER_SET_CONDITION": "Sets the bits of a 64-bit value to indicate the comparison operator to use for a specified operating system version attribute.", "VerSetConditionMask": "Sets the bits of a 64-bit value to indicate the comparison operator to use for a specified operating system version attribute.", "ValidateRect": "The ValidateRect function validates the client area within a rectangle by removing the rectangle from the update region of the specified window.", "ValidateRgn": "The ValidateRgn function validates the client area within a region by removing the region from the current update region of the specified window.", "VkKeyScanA": "Translates a character to the corresponding virtual-key code and shift state for the current keyboard.", "VkKeyScanExA": "Translates a character to the corresponding virtual-key code and shift state.", "VkKeyScanExW": "Translates a character to the corresponding virtual-key code and shift state.", "VkKeyScanW": "Translates a character to the corresponding virtual-key code and shift state for the current keyboard.", "VirtualAlloc": "Reserves, commits, or changes the state of a region of pages in the virtual address space of the calling process.", "VirtualAlloc2": "Reserves. commits. or changes the state of a region of memory within the virtual address space of a specified process.", "VirtualAlloc2FromApp": "Reserves, commits, or changes the state of a region of pages in the virtual address space of the calling process.", "VirtualAllocEx": "Reserves. commits. or changes the state of a region of memory within the virtual address space of a specified process.", "VirtualAllocExNuma": "Reserves, commits, or changes the state of a region of memory within the virtual address space of the specified process, and specifies the NUMA node for the physical memory.", "VirtualAllocFromApp": "Reserves, commits, or changes the state of a region of pages in the virtual address space of the calling process.", "VirtualFree": "Releases, decommits, or releases and decommits a region of pages within the virtual address space of the calling process.", "VirtualFreeEx": "Releases, decommits, or releases and decommits a region of memory within the virtual address space of a specified process.", "VirtualLock": "Locks the specified region of the process's virtual address space into physical memory, ensuring that subsequent access to the region will not incur a page fault.", "VirtualProtect": "Changes the protection on a region of committed pages in the virtual address space of the calling process.", "VirtualProtectEx": "Changes the protection on a region of committed pages in the virtual address space of a specified process.", "VirtualProtectFromApp": "Changes the protection on a region of committed pages in the virtual address space of the calling process.", "VirtualQuery": "Retrieves information about a range of pages in the virtual address space of the calling process.", "VirtualQueryEx": "Retrieves information about a range of pages within the virtual address space of a specified process.", "VirtualUnlock": "Unlocks a specified range of pages in the virtual address space of a process, enabling the system to swap the pages out to the paging file if necessary.", "WinExec": "Runs the specified application.", "WriteTapemark": "Writes a specified number of filemarks, setmarks, short filemarks, or long filemarks to a tape device.", "WriteFile": "Writes data to the specified file or input/output device.", "WriteFileEx": "Writes data to the specified file or I/O device.", "WriteFileGather": "Retrieves data from an array of buffers and writes the data to a file.", "WaitForNtmsNotification": "The WaitForNtmsNotification function waits for the next object change notification.", "WaitForNtmsOperatorRequest": "The WaitForNtmsOperatorRequest function waits for the specified RSM operator request.", "WofEnumEntries": "Enumerates all the data sources from a specified provider for a specified volume.", "WofEnumEntryProc": "Callback function that gets called for each data source in response to a call to WofEnumEntries.", "WofEnumFilesProc": "Callback function that gets called for each file backed by an external data source, such as a WIM file.", "WofFileEnumFiles": "Enumerates all of the files which are compressed with a specified compression algorithm on a specified volume.", "WofGetDriverVersion": "Used to query the version of the driver used to support a particular provider.", "WofIsExternalFile": "Used to determine if a file is being backed by a physical file or is backed by a system data provider, and optionally indicates which provider or additional data about the file.", "WofSetFileDataLocation": "Used to change a file from being backed by a physical file to one backed by a system data provider.", "WofShouldCompressBinaries": "Indicates whether compression should be used on a particular volume, and if so, which compression algorithm should be used.", "WofWimAddEntry": "Adds a single WIM data source to a volume such that files can be created on the volume which are stored within the WIM.", "WofWimEnumFiles": "Enumerates all of the files which are being backed by a specified WIM data source on a specified volume.", "WofWimRemoveEntry": "Removes a single WIM data source from backing files on a volume.", "WofWimSuspendEntry": "Temporarily removes a WIM data source from backing files on a volume until the volume is remounted or the data source is updated with WofWimUpdateEntry.", "WofWimUpdateEntry": "Updates a WIM entry to point to a different WIM file location.", "Wow64DisableWow64FsRedirection": "Disables file system redirection for the calling thread.", "Wow64RevertWow64FsRedirection": "Restores file system redirection for the calling thread.", "Wow64SuspendThread": "Suspends the specified WOW64 thread.", "WriteEncryptedFileRaw": "Restores encrypted files.", "WriteLogRestartArea": "Appends a new client restart area to a log, and optionally advances the base log sequence number of the log.", "WaitForWriteAccess": "The WaitForWriteAccess method obtains exclusive write access to a storage object.", "Write": "Writes a specified number of bytes into the stream object starting at the current seek pointer.", "WriteAt": "The WriteAt method writes the specified number of bytes starting at a specified offset from the beginning of the byte array.", "WriteClassStg": "The WriteClassStg function stores the specified class identifier in a storage object.", "WriteClassStm": "The WriteClassStm function stores the specified CLSID in the stream.", "WriteFmtUserTypeStg": "The WriteFmtUserTypeStg function writes a clipboard format and user type to the storage object.", "WriteMultiple": "Writes a specified group of properties to the current property set.", "WritePropertyNames": "Assigns string IPropertyStoragenames to a specified array of property IDs in the current property set.", "WintrustAddActionID": "Adds a trust provider action to the user's system.", "WintrustAddDefaultForUsage": "Specifies the default usage identifier and callback information for a provider.", "WintrustGetDefaultForUsage": "Retrieves the default usage identifier and callback information.", "WintrustGetRegPolicyFlags": "Retrieves policy flags for a policy provider.", "WintrustLoadFunctionPointers": "Loads function entry points for a specified action GUID.", "WintrustRemoveActionID": "Removes an action added by the WintrustAddActionID function.", "WintrustSetDefaultIncludePEPageHashes": "Sets the default setting that determines whether page hashes are included when creating subject interface package indirect data for PE files.", "WintrustSetRegPolicyFlags": "Sets policy flags for a policy provider.", "WinVerifyTrust": "Performs a trust verification action on a specified object.", "WinVerifyTrustEx": "Performs a trust verification action on a specified object and takes a pointer to a WINTRUST_DATA structure.", "WlxActivateUserShell": "Activates the user shell program.", "WlxDisconnectNotify": "Winlogon calls this function when a Terminal Services network session is disconnected.", "WlxDisplayLockedNotice": "Allows the GINA to display information about the lock, such as who locked the workstation and when it was locked.", "WlxDisplaySASNotice": "Winlogon calls this function when no user is logged on.", "WlxDisplayStatusMessage": "Winlogon calls this function when the GINA DLL should display a message.", "WlxGetConsoleSwitchCredentials": "Winlogon calls this function to read the currently logged on user's credentials to transparently transfer them to a target session.", "WlxGetStatusMessage": "Winlogon calls this function to get the status message being displayed by the GINA DLL.", "WlxInitialize": "Winlogon calls this function once for each window station present on the computer.", "WlxIsLockOk": "Winlogon calls this function before attempting to lock the workstation.", "WlxIsLogoffOk": "Winlogon calls this function when the user initiates a logoff operation.", "WlxLoggedOnSAS": "Winlogon calls this function when it receives a secure attention sequence event while the user is logged on and the workstation is not locked.", "WlxLoggedOutSAS": "Winlogon calls this function when it receives a secure attention sequence event while no user is logged on.", "WlxLogoff": "Winlogon calls this function to notify the GINA of a logoff operation on this workstation, allowing the GINA to perform any logoff operations that may be required.", "WlxNegotiate": "The WlxNegotiate function must be implemented by a replacement GINA DLL.", "WlxNetworkProviderLoad": "Winlogon calls this function to collect valid authentication and identification information.", "WlxReconnectNotify": "Winlogon calls this function when a Terminal Services network session is reconnected.", "WlxRemoveStatusMessage": "Winlogon calls this function to tell the GINA DLL to stop displaying the status message.", "WlxScreenSaverNotify": "Winlogon calls this function immediately before a screen saver is activated, allowing the GINA to interact with the screen saver program.", "WlxShutdown": "Winlogon calls this function just before shutting down, allowing the GINA to perform any shutdown tasks, such as ejecting a smart card from a reader.", "WlxStartApplication": "Winlogon calls this function when the system needs an application to be started in the context of the user.", "WlxWkstaLockedSAS": "Winlogon calls this function when it receives a secure attention sequence and the workstation is locked.", "WNetSetLastErrorA": "Sets extended error information.", "WNetSetLastErrorW": "Sets extended error information.", "WTHelperCertCheckValidSignature": "Checks whether a signature is valid.", "WTHelperCertIsSelfSigned": "Checks whether a certificate is self-signed.", "WTHelperGetProvCertFromChain": "Retrieves a trust provider certificate from the certificate chain.", "WTHelperGetProvPrivateDataFromChain": "Receives a CRYPT_PROVIDER_PRIVDATA structure from the chain by using the provider ID.", "WTHelperGetProvSignerFromChain": "Retrieves a signer or countersigner by index from the chain.", "WTHelperProvDataFromStateData": "Retrieves trust provider information from a specified handle.", "WideCharToMultiByte": "Maps a UTF-16 string to a new character string.", "wsprintfA": "Writes formatted data to the specified buffer.", "wsprintfW": "Writes formatted data to the specified buffer.", "wvsprintfA": "Writes formatted data to the specified buffer using a pointer to a list of arguments.", "wvsprintfW": "Writes formatted data to the specified buffer using a pointer to a list of arguments.", "WindowFromAccessibleObject": "Retrieves the window handle that corresponds to a particular instance of an IAccessible interface.", "Walk": "Initiates a recursive walk of the namespace from the specified root to the given depth.", "WalkComplete": "Removes data collected during a namespace walk.", "WhichPlatform": "WhichPlatform may be altered or unavailable.", "Win32DeleteFile": "Win32DeleteFile may be altered or unavailable.", "WinHelpA": "Launches Windows Help and passes additional data that indicates the nature of the help requested by the application.", "WinHelpW": "Launches Windows Help and passes additional data that indicates the nature of the help requested by the application.", "WndProcBS": "Allows a derived class to call the WinProc function of the base class.", "wnsprintfA": "Takes a variable-length argument list and returns the values of the arguments as a printf-style formatted string.", "wnsprintfW": "Takes a variable-length argument list and returns the values of the arguments as a printf-style formatted string.", "WriteAsync": "Writes information to a stream asynchronously.", "WriteCabinetState": "WriteCabinetState may be altered or unavailable.", "WritePropertyNPB": "Saves a property to the named property bag.", "wvnsprintfA": "Takes a list of arguments and returns the values of the arguments as a printf-style formatted string.", "wvnsprintfW": "Takes a list of arguments and returns the values of the arguments as a printf-style formatted string.", "WaitForInputIdle": "Waits until the specified process has finished processing its initial input and is waiting for user input with no input pending, or until the time-out interval has elapsed.", "WindowPattern_Close": "Closes an open window.", "WindowPattern_SetWindowVisualState": "Sets the visual state of a window; for example, to maximize a window.", "WindowPattern_WaitForInputIdle": "Causes the calling code to block for the specified time or until the associated process enters an idle state, whichever completes first.", "WINEVENTPROC": "An application-defined callback function that the system calls in response to events generated by an accessible object.", "WaitCommEvent": "Waits for an event to occur for a specified communications device.", "WaitNamedPipeA": "Waits until either a time-out interval elapses or an instance of the specified named pipe is available for connection.", "WinMain": "The user-provided entry point for a graphical Windows-based application.", "Wow64GetThreadSelectorEntry": "Retrieves a descriptor table entry for the specified selector and WOW64 thread.", "WritePrivateProfileSectionA": "Replaces the keys and values for the specified section in an initialization file.", "WritePrivateProfileSectionW": "Replaces the keys and values for the specified section in an initialization file.", "WritePrivateProfileStringA": "Copies a string into the specified section of an initialization file.", "WritePrivateProfileStringW": "Copies a string into the specified section of an initialization file.", "WritePrivateProfileStructA": "Copies data into a key in the specified section of an initialization file.", "WritePrivateProfileStructW": "Copies data into a key in the specified section of an initialization file.", "WriteProfileSectionA": "Replaces the contents of the specified section in the Win .ini file with specified keys and values.", "WriteProfileSectionW": "Replaces the contents of the specified section in the Win .ini file with specified keys and values.", "WriteProfileStringA": "Copies a string into the specified section of the Win .ini file.", "WriteProfileStringW": "Copies a string into the specified section of the Win .ini file.", "WTSGetActiveConsoleSessionId": "Retrieves the session identifier of the console session.", "WaitMessage": "Yields control to other threads when a thread has no other messages in its message queue.", "WindowFromPhysicalPoint": "Retrieves a handle to the window that contains the specified physical point.", "WindowFromPoint": "Retrieves a handle to the window that contains the specified point.", "WNDPROC": "A callback function, which you define in your application, that processes messages sent to a window.", "WindowFromDC": "The WindowFromDC function returns a handle to the window associated with the specified display device context.", "WriteProcessMemory": "Writes data to an area of memory in a specified process.", "YieldProcessor": "Signals to the processor to give resources to threads that are waiting for them.", "YouAreAReplica": "Notifies an object that it may be subject to subsequent reconciliation through the Reconcile method.", "ZombifyActCtx": "The ZombifyActCtx function deactivates the specified activation context, but does not deallocate it.", "Zoom": "Zooms the viewport of the control.", "ZoomByUnit": "Zooms the viewport of the control by the specified unit."}